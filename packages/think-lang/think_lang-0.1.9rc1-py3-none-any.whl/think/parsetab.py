
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightUMINUSleftTIMESDIVIDEleftPLUSMINUSleftGREATERLESSGREATER_EQUALSLESS_EQUALSEQUALS_EQUALSNOT_EQUALSBOOL COLON COMMA DECIDE DIVIDE ELIF ELSE END ENUMERATE EQUALS EQUALS_EQUALS FLOAT FOR GREATER GREATER_EQUALS IDENTIFIER IF IN LBRACE LBRACKET LESS LESS_EQUALS LPAREN MINUS NEWLINE NOT_EQUALS NUMBER OBJECTIVE PLUS RANGE RBRACE RBRACKET RETURN RPAREN RUN STEP STRING SUBTASK TASK THEN TIMES UNDERSCOREprogram : objective task_list run_list\nobjective : OBJECTIVE STRING\n\ntask_list : task\n        | task task_list\n\ntask : TASK STRING COLON step_or_subtask_list\n\nstep_or_subtask_list : step\n                    | subtask\n                    | step step_or_subtask_list\n                    | subtask step_or_subtask_list\n\nstep : STEP STRING COLON statement_list\n\nsubtask : SUBTASK STRING COLON statement_list\n\nstatement : simple_statement\n        | compound_statement\n\nsimple_statement : assignment\n                | function_call\n                | return_statement\n\ncompound_statement : decide_statement\n                | for_statement\n\nstatement_list : statement\n            | statement statement_list\n            | empty\n\nreturn_statement : RETURN expression\n\nempty :\n\ndecide_statement : DECIDE COLON condition_list \n\ncondition_list : if_condition\n            | if_condition else_if_list\n            | if_condition else_if_list else_condition\n            | if_condition else_condition\n\nelse_if_list : else_if_condition\n            | else_if_condition else_if_list\n\nif_condition : IF expression THEN COLON statement_list \n\nelse_if_condition : ELIF expression THEN COLON statement_list\n\nelse_condition : ELSE COLON statement_list\n\nfor_statement : FOR IDENTIFIER IN iterable COLON loop_body END\n            | FOR IDENTIFIER COMMA IDENTIFIER IN ENUMERATE LPAREN IDENTIFIER RPAREN COLON loop_body END\n            | FOR UNDERSCORE COMMA IDENTIFIER IN ENUMERATE LPAREN IDENTIFIER RPAREN COLON loop_body END\n            | FOR IDENTIFIER IN RANGE LPAREN expression RPAREN COLON loop_body END\n\nloop_body : statement\n        | statement loop_body\n\niterable : IDENTIFIER\n        | RANGE LPAREN expression RPAREN\n        | ENUMERATE LPAREN IDENTIFIER RPAREN\nexpression : expression LBRACKET expression RBRACKET\nassignment : IDENTIFIER EQUALS expression\n\nexpression : arithmetic_expr\n        | comparison_expr\n        | dict_literal\n\narithmetic_expr : term\n            | arithmetic_expr PLUS term\n            | arithmetic_expr MINUS term\n            | arithmetic_expr TIMES term\n            | arithmetic_expr DIVIDE term\n\ncomparison_expr : arithmetic_expr GREATER arithmetic_expr\n            | arithmetic_expr LESS arithmetic_expr\n            | arithmetic_expr EQUALS_EQUALS arithmetic_expr\n            | arithmetic_expr GREATER_EQUALS arithmetic_expr\n            | arithmetic_expr LESS_EQUALS arithmetic_expr\n            | arithmetic_expr NOT_EQUALS arithmetic_expr\n\nterm : factor\n\nfactor : MINUS factor %prec UMINUS\n\nfactor : IDENTIFIER\n    | NUMBER\n    | numeric_literal\n    | STRING\n    | BOOL\n    | FLOAT\n    | MINUS FLOAT\n    | list\n    | function_call\n    | LPAREN expression RPAREN\n    | dict_literal\n    | index_expression\n\nnumeric_literal : NUMBER\n            | FLOAT\n            | MINUS NUMBER\n            | MINUS FLOAT\n\ndict_literal : LBRACE dict_entries RBRACE\n    | LBRACE RBRACE\n\ndict_entries : dict_entry\n    | dict_entry COMMA dict_entries\n\ndict_entry : expression COLON expression\n\nindex_expression : expression LBRACKET expression RBRACKET\n\nlist : LBRACKET list_items RBRACKET\n    | LBRACKET RBRACKET\n\nlist_items : expression\n        | expression COMMA list_items\n\nfunction_call : IDENTIFIER LPAREN argument_list RPAREN\n            | IDENTIFIER LPAREN RPAREN\n\nargument_list : expression\n            | expression COMMA argument_list\n\nrun_list : run_statement\n        | run_statement run_list\n\nrun_statement : RUN STRING\n'
    
_lr_action_items = {'OBJECTIVE':([0,],[3,]),'$end':([1,8,9,13,14,],[0,-1,-91,-92,-93,]),'TASK':([2,5,7,16,17,18,21,22,25,26,27,28,29,30,31,32,33,34,35,36,41,42,45,47,48,49,50,53,54,55,56,57,58,59,60,61,63,67,69,73,85,86,87,89,91,95,96,101,104,106,107,108,109,110,111,112,113,114,115,117,120,121,122,123,134,139,140,141,149,150,152,159,160,161,167,174,179,180,],[6,6,-2,-5,-6,-7,-8,-9,-23,-23,-10,-19,-21,-12,-13,-14,-15,-16,-17,-18,-11,-20,-22,-45,-46,-47,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-44,-88,-84,-60,-66,-62,-71,-78,-24,-25,-87,-83,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-77,-70,-26,-28,-29,-43,-27,-30,-23,-82,-33,-23,-23,-31,-34,-32,-37,-35,-36,]),'STRING':([3,6,10,19,20,38,43,44,46,51,52,62,71,75,76,77,78,79,80,81,82,83,84,97,102,105,116,118,119,125,145,],[7,12,14,23,24,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'RUN':([4,5,9,11,14,16,17,18,21,22,25,26,27,28,29,30,31,32,33,34,35,36,41,42,45,47,48,49,50,53,54,55,56,57,58,59,60,61,63,67,69,73,85,86,87,89,91,95,96,101,104,106,107,108,109,110,111,112,113,114,115,117,120,121,122,123,134,139,140,141,149,150,152,159,160,161,167,174,179,180,],[10,-3,10,-4,-93,-5,-6,-7,-8,-9,-23,-23,-10,-19,-21,-12,-13,-14,-15,-16,-17,-18,-11,-20,-22,-45,-46,-47,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-44,-88,-84,-60,-66,-62,-71,-78,-24,-25,-87,-83,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-77,-70,-26,-28,-29,-43,-27,-30,-23,-82,-33,-23,-23,-31,-34,-32,-37,-35,-36,]),'COLON':([12,23,24,39,47,48,49,50,53,54,55,56,57,58,59,60,61,63,69,73,85,86,87,89,91,93,101,104,106,107,108,109,110,111,112,113,114,115,117,120,124,127,128,134,143,149,151,163,164,172,173,],[15,25,26,64,-45,-46,-47,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-88,-84,-60,-66,-62,-71,-78,119,-87,-83,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-77,-70,141,-40,144,-43,152,-82,159,168,-42,175,176,]),'STEP':([15,17,18,25,26,27,28,29,30,31,32,33,34,35,36,41,42,45,47,48,49,50,53,54,55,56,57,58,59,60,61,63,67,69,73,85,86,87,89,91,95,96,101,104,106,107,108,109,110,111,112,113,114,115,117,120,121,122,123,134,139,140,141,149,150,152,159,160,161,167,174,179,180,],[19,19,19,-23,-23,-10,-19,-21,-12,-13,-14,-15,-16,-17,-18,-11,-20,-22,-45,-46,-47,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-44,-88,-84,-60,-66,-62,-71,-78,-24,-25,-87,-83,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-77,-70,-26,-28,-29,-43,-27,-30,-23,-82,-33,-23,-23,-31,-34,-32,-37,-35,-36,]),'SUBTASK':([15,17,18,25,26,27,28,29,30,31,32,33,34,35,36,41,42,45,47,48,49,50,53,54,55,56,57,58,59,60,61,63,67,69,73,85,86,87,89,91,95,96,101,104,106,107,108,109,110,111,112,113,114,115,117,120,121,122,123,134,139,140,141,149,150,152,159,160,161,167,174,179,180,],[20,20,20,-23,-23,-10,-19,-21,-12,-13,-14,-15,-16,-17,-18,-11,-20,-22,-45,-46,-47,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-44,-88,-84,-60,-66,-62,-71,-78,-24,-25,-87,-83,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-77,-70,-26,-28,-29,-43,-27,-30,-23,-82,-33,-23,-23,-31,-34,-32,-37,-35,-36,]),'IDENTIFIER':([25,26,28,29,30,31,32,33,34,35,36,38,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,67,69,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,95,96,97,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,134,139,140,141,144,145,146,149,150,152,154,159,160,161,165,166,167,168,174,175,176,179,180,],[37,37,37,-21,-12,-13,-14,-15,-16,-17,-18,54,65,-20,54,54,-22,54,-45,-46,-47,-48,54,54,-59,-61,-62,-63,-64,-65,-66,-68,-69,54,-72,-44,-88,54,-84,54,54,54,54,54,54,54,54,54,54,-60,-66,-62,-71,-78,-24,-25,54,127,131,132,-87,54,-83,54,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,54,-77,54,54,-70,-26,-28,-29,54,-43,-27,-30,37,37,54,156,-82,-33,37,37,37,-31,-34,169,170,-32,37,-37,37,37,-35,-36,]),'RETURN':([25,26,28,29,30,31,32,33,34,35,36,42,45,47,48,49,50,53,54,55,56,57,58,59,60,61,63,67,69,73,85,86,87,89,91,95,96,101,104,106,107,108,109,110,111,112,113,114,115,117,120,121,122,123,134,139,140,141,144,149,150,152,154,159,160,161,167,168,174,175,176,179,180,],[38,38,38,-21,-12,-13,-14,-15,-16,-17,-18,-20,-22,-45,-46,-47,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-44,-88,-84,-60,-66,-62,-71,-78,-24,-25,-87,-83,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-77,-70,-26,-28,-29,-43,-27,-30,38,38,-82,-33,38,38,38,-31,-34,-32,38,-37,38,38,-35,-36,]),'DECIDE':([25,26,28,29,30,31,32,33,34,35,36,42,45,47,48,49,50,53,54,55,56,57,58,59,60,61,63,67,69,73,85,86,87,89,91,95,96,101,104,106,107,108,109,110,111,112,113,114,115,117,120,121,122,123,134,139,140,141,144,149,150,152,154,159,160,161,167,168,174,175,176,179,180,],[39,39,39,-21,-12,-13,-14,-15,-16,-17,-18,-20,-22,-45,-46,-47,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-44,-88,-84,-60,-66,-62,-71,-78,-24,-25,-87,-83,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-77,-70,-26,-28,-29,-43,-27,-30,39,39,-82,-33,39,39,39,-31,-34,-32,39,-37,39,39,-35,-36,]),'FOR':([25,26,28,29,30,31,32,33,34,35,36,42,45,47,48,49,50,53,54,55,56,57,58,59,60,61,63,67,69,73,85,86,87,89,91,95,96,101,104,106,107,108,109,110,111,112,113,114,115,117,120,121,122,123,134,139,140,141,144,149,150,152,154,159,160,161,167,168,174,175,176,179,180,],[40,40,40,-21,-12,-13,-14,-15,-16,-17,-18,-20,-22,-45,-46,-47,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-44,-88,-84,-60,-66,-62,-71,-78,-24,-25,-87,-83,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-77,-70,-26,-28,-29,-43,-27,-30,40,40,-82,-33,40,40,40,-31,-34,-32,40,-37,40,40,-35,-36,]),'END':([28,29,30,31,32,33,34,35,36,42,45,47,48,49,50,53,54,55,56,57,58,59,60,61,63,67,69,73,85,86,87,89,91,95,96,101,104,106,107,108,109,110,111,112,113,114,115,117,120,121,122,123,134,139,140,141,149,150,152,153,154,159,160,161,162,167,171,174,177,178,179,180,],[-19,-21,-12,-13,-14,-15,-16,-17,-18,-20,-22,-45,-46,-47,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-44,-88,-84,-60,-66,-62,-71,-78,-24,-25,-87,-83,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-77,-70,-26,-28,-29,-43,-27,-30,-23,-82,-33,-23,161,-38,-23,-31,-34,-39,-32,174,-37,179,180,-35,-36,]),'ELSE':([28,29,30,31,32,33,34,35,36,42,45,47,48,49,50,53,54,55,56,57,58,59,60,61,63,67,69,73,85,86,87,89,91,95,96,101,104,106,107,108,109,110,111,112,113,114,115,117,120,121,122,123,134,139,140,141,149,150,152,159,160,161,167,174,179,180,],[-19,-21,-12,-13,-14,-15,-16,-17,-18,-20,-22,-45,-46,-47,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-44,-88,-84,-60,-66,-62,-71,-78,-24,124,-87,-83,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-77,-70,124,-28,-29,-43,-27,-30,-23,-82,-33,-23,-23,-31,-34,-32,-37,-35,-36,]),'ELIF':([28,29,30,31,32,33,34,35,36,42,45,47,48,49,50,53,54,55,56,57,58,59,60,61,63,67,69,73,85,86,87,89,91,95,96,101,104,106,107,108,109,110,111,112,113,114,115,117,120,121,122,123,134,139,140,141,149,150,152,159,160,161,167,174,179,180,],[-19,-21,-12,-13,-14,-15,-16,-17,-18,-20,-22,-45,-46,-47,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-44,-88,-84,-60,-66,-62,-71,-78,-24,125,-87,-83,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-77,-70,-26,-28,125,-43,-27,-30,-23,-82,-33,-23,-23,-31,-34,-32,-37,-35,-36,]),'EQUALS':([37,],[43,]),'LPAREN':([37,38,43,44,46,51,52,54,62,71,75,76,77,78,79,80,81,82,83,84,97,102,105,116,118,119,125,129,130,145,157,158,],[44,62,62,62,62,62,62,44,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,145,146,62,165,166,]),'LBRACE':([38,43,44,46,51,52,62,71,75,76,77,78,79,80,81,82,83,84,97,102,105,116,118,119,125,145,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'MINUS':([38,43,44,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,69,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,97,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,125,134,145,149,],[51,51,51,51,76,-71,-48,51,51,-59,-61,-62,-63,-64,-65,-66,-68,-69,51,-72,-88,51,-84,51,51,51,51,51,51,51,51,51,51,-59,-66,-62,-71,-78,51,-87,51,-83,51,-48,-48,-48,-48,76,76,76,76,76,76,51,-77,51,51,-70,51,-82,51,-82,]),'NUMBER':([38,43,44,46,51,52,62,71,75,76,77,78,79,80,81,82,83,84,97,102,105,116,118,119,125,145,],[55,55,55,55,87,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'BOOL':([38,43,44,46,51,52,62,71,75,76,77,78,79,80,81,82,83,84,97,102,105,116,118,119,125,145,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'FLOAT':([38,43,44,46,51,52,62,71,75,76,77,78,79,80,81,82,83,84,97,102,105,116,118,119,125,145,],[59,59,59,59,86,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'LBRACKET':([38,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,67,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,93,94,97,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,125,126,134,136,138,142,145,149,155,],[46,46,46,71,46,-45,-46,-47,-48,46,46,-59,-61,-62,-63,-64,-65,-66,-68,-69,46,-72,71,-88,71,46,-84,71,46,46,46,46,46,46,46,46,46,46,-59,-66,-62,116,-47,-78,71,71,46,-87,46,71,-83,46,-48,-48,-48,-48,-45,-45,-45,-45,-45,-45,46,-77,46,46,-70,46,71,-43,71,71,71,46,-43,71,]),'UNDERSCORE':([40,],[66,]),'RPAREN':([44,47,48,49,50,53,54,55,56,57,58,59,60,61,63,68,69,70,73,85,86,87,89,91,94,101,104,106,107,108,109,110,111,112,113,114,115,117,120,133,134,149,155,156,169,170,],[69,-45,-46,-47,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,101,-88,-89,-84,-60,-66,-62,-71,-78,120,-87,-83,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-77,-70,-90,-43,-82,163,164,172,173,]),'RBRACKET':([46,47,48,49,50,53,54,55,56,57,58,59,60,61,63,69,72,73,74,85,86,87,89,91,101,103,104,106,107,108,109,110,111,112,113,114,115,117,120,134,135,136,149,],[73,-45,-46,-47,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-88,104,-84,-85,-60,-66,-62,-71,-78,-87,134,-83,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-77,-70,-43,-86,149,-82,]),'COMMA':([47,48,49,50,53,54,55,56,57,58,59,60,61,63,65,66,69,70,73,74,85,86,87,89,91,92,101,104,106,107,108,109,110,111,112,113,114,115,117,120,134,138,149,],[-45,-46,-47,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,99,100,-88,102,-84,105,-60,-66,-62,-71,-78,118,-87,-83,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-77,-70,-43,-81,-82,]),'THEN':([47,48,49,50,53,54,55,56,57,58,59,60,61,63,69,73,85,86,87,89,91,101,104,106,107,108,109,110,111,112,113,114,115,117,120,126,134,142,149,],[-45,-46,-47,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-88,-84,-60,-66,-62,-71,-78,-87,-83,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-77,-70,143,-43,151,-82,]),'RBRACE':([47,48,49,50,52,53,54,55,56,57,58,59,60,61,63,69,73,85,86,87,89,90,91,92,101,104,106,107,108,109,110,111,112,113,114,115,117,120,134,137,138,149,],[-45,-46,-47,-48,91,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-88,-84,-60,-66,-62,-71,117,-78,-79,-87,-83,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-77,-70,-43,-80,-81,-82,]),'PLUS':([47,49,50,53,54,55,56,57,58,59,60,61,63,69,73,85,86,87,89,91,101,104,106,107,108,109,110,111,112,113,114,115,117,120,134,149,],[75,-71,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-88,-84,-59,-66,-62,-71,-78,-87,-83,-48,-48,-48,-48,75,75,75,75,75,75,-77,-70,-82,-82,]),'TIMES':([47,49,50,53,54,55,56,57,58,59,60,61,63,69,73,85,86,87,89,91,101,104,106,107,108,109,110,111,112,113,114,115,117,120,134,149,],[77,-71,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-88,-84,-59,-66,-62,-71,-78,-87,-83,-48,-48,-48,-48,77,77,77,77,77,77,-77,-70,-82,-82,]),'DIVIDE':([47,49,50,53,54,55,56,57,58,59,60,61,63,69,73,85,86,87,89,91,101,104,106,107,108,109,110,111,112,113,114,115,117,120,134,149,],[78,-71,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-88,-84,-59,-66,-62,-71,-78,-87,-83,-48,-48,-48,-48,78,78,78,78,78,78,-77,-70,-82,-82,]),'GREATER':([47,49,50,53,54,55,56,57,58,59,60,61,63,69,73,85,86,87,89,91,101,104,106,107,108,109,110,111,112,113,114,115,117,120,134,149,],[79,-71,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-88,-84,-59,-66,-62,-71,-78,-87,-83,-48,-48,-48,-48,79,79,79,79,79,79,-77,-70,-82,-82,]),'LESS':([47,49,50,53,54,55,56,57,58,59,60,61,63,69,73,85,86,87,89,91,101,104,106,107,108,109,110,111,112,113,114,115,117,120,134,149,],[80,-71,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-88,-84,-59,-66,-62,-71,-78,-87,-83,-48,-48,-48,-48,80,80,80,80,80,80,-77,-70,-82,-82,]),'EQUALS_EQUALS':([47,49,50,53,54,55,56,57,58,59,60,61,63,69,73,85,86,87,89,91,101,104,106,107,108,109,110,111,112,113,114,115,117,120,134,149,],[81,-71,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-88,-84,-59,-66,-62,-71,-78,-87,-83,-48,-48,-48,-48,81,81,81,81,81,81,-77,-70,-82,-82,]),'GREATER_EQUALS':([47,49,50,53,54,55,56,57,58,59,60,61,63,69,73,85,86,87,89,91,101,104,106,107,108,109,110,111,112,113,114,115,117,120,134,149,],[82,-71,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-88,-84,-59,-66,-62,-71,-78,-87,-83,-48,-48,-48,-48,82,82,82,82,82,82,-77,-70,-82,-82,]),'LESS_EQUALS':([47,49,50,53,54,55,56,57,58,59,60,61,63,69,73,85,86,87,89,91,101,104,106,107,108,109,110,111,112,113,114,115,117,120,134,149,],[83,-71,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-88,-84,-59,-66,-62,-71,-78,-87,-83,-48,-48,-48,-48,83,83,83,83,83,83,-77,-70,-82,-82,]),'NOT_EQUALS':([47,49,50,53,54,55,56,57,58,59,60,61,63,69,73,85,86,87,89,91,101,104,106,107,108,109,110,111,112,113,114,115,117,120,134,149,],[84,-71,-48,-59,-61,-62,-63,-64,-65,-66,-68,-69,-72,-88,-84,-59,-66,-62,-71,-78,-87,-83,-48,-48,-48,-48,84,84,84,84,84,84,-77,-70,-82,-82,]),'IF':([64,],[97,]),'IN':([65,131,132,],[98,147,148,]),'RANGE':([98,],[129,]),'ENUMERATE':([98,147,148,],[130,157,158,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'objective':([0,],[2,]),'task_list':([2,5,],[4,11,]),'task':([2,5,],[5,5,]),'run_list':([4,9,],[8,13,]),'run_statement':([4,9,],[9,9,]),'step_or_subtask_list':([15,17,18,],[16,21,22,]),'step':([15,17,18,],[17,17,17,]),'subtask':([15,17,18,],[18,18,18,]),'statement_list':([25,26,28,141,152,159,],[27,41,42,150,160,167,]),'statement':([25,26,28,141,144,152,154,159,168,175,176,],[28,28,28,28,154,28,154,28,154,154,154,]),'empty':([25,26,28,141,152,159,],[29,29,29,29,29,29,]),'simple_statement':([25,26,28,141,144,152,154,159,168,175,176,],[30,30,30,30,30,30,30,30,30,30,30,]),'compound_statement':([25,26,28,141,144,152,154,159,168,175,176,],[31,31,31,31,31,31,31,31,31,31,31,]),'assignment':([25,26,28,141,144,152,154,159,168,175,176,],[32,32,32,32,32,32,32,32,32,32,32,]),'function_call':([25,26,28,38,43,44,46,51,52,62,71,75,76,77,78,79,80,81,82,83,84,97,102,105,116,118,119,125,141,144,145,152,154,159,168,175,176,],[33,33,33,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,33,33,61,33,33,33,33,33,33,]),'return_statement':([25,26,28,141,144,152,154,159,168,175,176,],[34,34,34,34,34,34,34,34,34,34,34,]),'decide_statement':([25,26,28,141,144,152,154,159,168,175,176,],[35,35,35,35,35,35,35,35,35,35,35,]),'for_statement':([25,26,28,141,144,152,154,159,168,175,176,],[36,36,36,36,36,36,36,36,36,36,36,]),'expression':([38,43,44,46,51,52,62,71,75,76,77,78,79,80,81,82,83,84,97,102,105,116,118,119,125,145,],[45,67,70,74,88,93,94,103,88,88,88,88,88,88,88,88,88,88,126,70,74,136,93,138,142,155,]),'arithmetic_expr':([38,43,44,46,51,52,62,71,75,76,77,78,79,80,81,82,83,84,97,102,105,116,118,119,125,145,],[47,47,47,47,47,47,47,47,47,47,47,47,110,111,112,113,114,115,47,47,47,47,47,47,47,47,]),'comparison_expr':([38,43,44,46,51,52,62,71,75,76,77,78,79,80,81,82,83,84,97,102,105,116,118,119,125,145,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'dict_literal':([38,43,44,46,51,52,62,71,75,76,77,78,79,80,81,82,83,84,97,102,105,116,118,119,125,145,],[49,49,49,49,89,49,49,49,89,89,89,89,89,89,89,89,89,89,49,49,49,49,49,49,49,49,]),'term':([38,43,44,46,51,52,62,71,75,76,77,78,79,80,81,82,83,84,97,102,105,116,118,119,125,145,],[50,50,50,50,50,50,50,50,106,107,108,109,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'factor':([38,43,44,46,51,52,62,71,75,76,77,78,79,80,81,82,83,84,97,102,105,116,118,119,125,145,],[53,53,53,53,85,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'numeric_literal':([38,43,44,46,51,52,62,71,75,76,77,78,79,80,81,82,83,84,97,102,105,116,118,119,125,145,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'list':([38,43,44,46,51,52,62,71,75,76,77,78,79,80,81,82,83,84,97,102,105,116,118,119,125,145,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'index_expression':([38,43,44,46,51,52,62,71,75,76,77,78,79,80,81,82,83,84,97,102,105,116,118,119,125,145,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'argument_list':([44,102,],[68,133,]),'list_items':([46,105,],[72,135,]),'dict_entries':([52,118,],[90,137,]),'dict_entry':([52,118,],[92,92,]),'condition_list':([64,],[95,]),'if_condition':([64,],[96,]),'else_if_list':([96,123,],[121,140,]),'else_condition':([96,121,],[122,139,]),'else_if_condition':([96,123,],[123,123,]),'iterable':([98,],[128,]),'loop_body':([144,154,168,175,176,],[153,162,171,177,178,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> objective task_list run_list','program',3,'p_program','parser.py',163),
  ('objective -> OBJECTIVE STRING','objective',2,'p_objective','parser.py',168),
  ('task_list -> task','task_list',1,'p_task_list','parser.py',174),
  ('task_list -> task task_list','task_list',2,'p_task_list','parser.py',175),
  ('task -> TASK STRING COLON step_or_subtask_list','task',4,'p_task','parser.py',184),
  ('step_or_subtask_list -> step','step_or_subtask_list',1,'p_step_or_subtask_list','parser.py',190),
  ('step_or_subtask_list -> subtask','step_or_subtask_list',1,'p_step_or_subtask_list','parser.py',191),
  ('step_or_subtask_list -> step step_or_subtask_list','step_or_subtask_list',2,'p_step_or_subtask_list','parser.py',192),
  ('step_or_subtask_list -> subtask step_or_subtask_list','step_or_subtask_list',2,'p_step_or_subtask_list','parser.py',193),
  ('step -> STEP STRING COLON statement_list','step',4,'p_step','parser.py',202),
  ('subtask -> SUBTASK STRING COLON statement_list','subtask',4,'p_subtask','parser.py',208),
  ('statement -> simple_statement','statement',1,'p_statement','parser.py',214),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',215),
  ('simple_statement -> assignment','simple_statement',1,'p_simple_statement','parser.py',221),
  ('simple_statement -> function_call','simple_statement',1,'p_simple_statement','parser.py',222),
  ('simple_statement -> return_statement','simple_statement',1,'p_simple_statement','parser.py',223),
  ('compound_statement -> decide_statement','compound_statement',1,'p_compound_statement','parser.py',229),
  ('compound_statement -> for_statement','compound_statement',1,'p_compound_statement','parser.py',230),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',236),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser.py',237),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser.py',238),
  ('return_statement -> RETURN expression','return_statement',2,'p_return_statement','parser.py',253),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',259),
  ('decide_statement -> DECIDE COLON condition_list','decide_statement',3,'p_decide_statement','parser.py',265),
  ('condition_list -> if_condition','condition_list',1,'p_condition_list','parser.py',271),
  ('condition_list -> if_condition else_if_list','condition_list',2,'p_condition_list','parser.py',272),
  ('condition_list -> if_condition else_if_list else_condition','condition_list',3,'p_condition_list','parser.py',273),
  ('condition_list -> if_condition else_condition','condition_list',2,'p_condition_list','parser.py',274),
  ('else_if_list -> else_if_condition','else_if_list',1,'p_else_if_list','parser.py',291),
  ('else_if_list -> else_if_condition else_if_list','else_if_list',2,'p_else_if_list','parser.py',292),
  ('if_condition -> IF expression THEN COLON statement_list','if_condition',5,'p_if_condition','parser.py',301),
  ('else_if_condition -> ELIF expression THEN COLON statement_list','else_if_condition',5,'p_else_if_condition','parser.py',311),
  ('else_condition -> ELSE COLON statement_list','else_condition',3,'p_else_condition','parser.py',321),
  ('for_statement -> FOR IDENTIFIER IN iterable COLON loop_body END','for_statement',7,'p_for_statement','parser.py',336),
  ('for_statement -> FOR IDENTIFIER COMMA IDENTIFIER IN ENUMERATE LPAREN IDENTIFIER RPAREN COLON loop_body END','for_statement',12,'p_for_statement','parser.py',337),
  ('for_statement -> FOR UNDERSCORE COMMA IDENTIFIER IN ENUMERATE LPAREN IDENTIFIER RPAREN COLON loop_body END','for_statement',12,'p_for_statement','parser.py',338),
  ('for_statement -> FOR IDENTIFIER IN RANGE LPAREN expression RPAREN COLON loop_body END','for_statement',10,'p_for_statement','parser.py',339),
  ('loop_body -> statement','loop_body',1,'p_loop_body','parser.py',369),
  ('loop_body -> statement loop_body','loop_body',2,'p_loop_body','parser.py',370),
  ('iterable -> IDENTIFIER','iterable',1,'p_iterable','parser.py',379),
  ('iterable -> RANGE LPAREN expression RPAREN','iterable',4,'p_iterable','parser.py',380),
  ('iterable -> ENUMERATE LPAREN IDENTIFIER RPAREN','iterable',4,'p_iterable','parser.py',381),
  ('expression -> expression LBRACKET expression RBRACKET','expression',4,'p_indexing','parser.py',393),
  ('assignment -> IDENTIFIER EQUALS expression','assignment',3,'p_assignment','parser.py',402),
  ('expression -> arithmetic_expr','expression',1,'p_expression','parser.py',417),
  ('expression -> comparison_expr','expression',1,'p_expression','parser.py',418),
  ('expression -> dict_literal','expression',1,'p_expression','parser.py',419),
  ('arithmetic_expr -> term','arithmetic_expr',1,'p_arithmetic_expr','parser.py',425),
  ('arithmetic_expr -> arithmetic_expr PLUS term','arithmetic_expr',3,'p_arithmetic_expr','parser.py',426),
  ('arithmetic_expr -> arithmetic_expr MINUS term','arithmetic_expr',3,'p_arithmetic_expr','parser.py',427),
  ('arithmetic_expr -> arithmetic_expr TIMES term','arithmetic_expr',3,'p_arithmetic_expr','parser.py',428),
  ('arithmetic_expr -> arithmetic_expr DIVIDE term','arithmetic_expr',3,'p_arithmetic_expr','parser.py',429),
  ('comparison_expr -> arithmetic_expr GREATER arithmetic_expr','comparison_expr',3,'p_comparison_expr','parser.py',438),
  ('comparison_expr -> arithmetic_expr LESS arithmetic_expr','comparison_expr',3,'p_comparison_expr','parser.py',439),
  ('comparison_expr -> arithmetic_expr EQUALS_EQUALS arithmetic_expr','comparison_expr',3,'p_comparison_expr','parser.py',440),
  ('comparison_expr -> arithmetic_expr GREATER_EQUALS arithmetic_expr','comparison_expr',3,'p_comparison_expr','parser.py',441),
  ('comparison_expr -> arithmetic_expr LESS_EQUALS arithmetic_expr','comparison_expr',3,'p_comparison_expr','parser.py',442),
  ('comparison_expr -> arithmetic_expr NOT_EQUALS arithmetic_expr','comparison_expr',3,'p_comparison_expr','parser.py',443),
  ('term -> factor','term',1,'p_term','parser.py',449),
  ('factor -> MINUS factor','factor',2,'p_factor_unary','parser.py',455),
  ('factor -> IDENTIFIER','factor',1,'p_factor','parser.py',467),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',468),
  ('factor -> numeric_literal','factor',1,'p_factor','parser.py',469),
  ('factor -> STRING','factor',1,'p_factor','parser.py',470),
  ('factor -> BOOL','factor',1,'p_factor','parser.py',471),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',472),
  ('factor -> MINUS FLOAT','factor',2,'p_factor','parser.py',473),
  ('factor -> list','factor',1,'p_factor','parser.py',474),
  ('factor -> function_call','factor',1,'p_factor','parser.py',475),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',476),
  ('factor -> dict_literal','factor',1,'p_factor','parser.py',477),
  ('factor -> index_expression','factor',1,'p_factor','parser.py',478),
  ('numeric_literal -> NUMBER','numeric_literal',1,'p_numeric_literal','parser.py',489),
  ('numeric_literal -> FLOAT','numeric_literal',1,'p_numeric_literal','parser.py',490),
  ('numeric_literal -> MINUS NUMBER','numeric_literal',2,'p_numeric_literal','parser.py',491),
  ('numeric_literal -> MINUS FLOAT','numeric_literal',2,'p_numeric_literal','parser.py',492),
  ('dict_literal -> LBRACE dict_entries RBRACE','dict_literal',3,'p_dict_literal','parser.py',501),
  ('dict_literal -> LBRACE RBRACE','dict_literal',2,'p_dict_literal','parser.py',502),
  ('dict_entries -> dict_entry','dict_entries',1,'p_dict_entries','parser.py',511),
  ('dict_entries -> dict_entry COMMA dict_entries','dict_entries',3,'p_dict_entries','parser.py',512),
  ('dict_entry -> expression COLON expression','dict_entry',3,'p_dict_entry','parser.py',521),
  ('index_expression -> expression LBRACKET expression RBRACKET','index_expression',4,'p_index_expression','parser.py',527),
  ('list -> LBRACKET list_items RBRACKET','list',3,'p_list','parser.py',537),
  ('list -> LBRACKET RBRACKET','list',2,'p_list','parser.py',538),
  ('list_items -> expression','list_items',1,'p_list_items','parser.py',547),
  ('list_items -> expression COMMA list_items','list_items',3,'p_list_items','parser.py',548),
  ('function_call -> IDENTIFIER LPAREN argument_list RPAREN','function_call',4,'p_function_call','parser.py',557),
  ('function_call -> IDENTIFIER LPAREN RPAREN','function_call',3,'p_function_call','parser.py',558),
  ('argument_list -> expression','argument_list',1,'p_argument_list','parser.py',567),
  ('argument_list -> expression COMMA argument_list','argument_list',3,'p_argument_list','parser.py',568),
  ('run_list -> run_statement','run_list',1,'p_run_list','parser.py',577),
  ('run_list -> run_statement run_list','run_list',2,'p_run_list','parser.py',578),
  ('run_statement -> RUN STRING','run_statement',2,'p_run_statement','parser.py',587),
]
