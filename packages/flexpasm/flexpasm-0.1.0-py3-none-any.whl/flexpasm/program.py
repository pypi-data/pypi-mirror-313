from flexpasm.settings import Settings
from flexpasm.templates import MnemonicTemplate


class _ASMFileHandler:
	@staticmethod
	def save(filename: str, content: str, flag: str = "w"):
		with open(filename, flag) as file:
			file.write(content)


class ASMProgram:
	def __init__(self, settings: Settings):
		self.settings = settings
		self._code = []
		self._code.append(self._generate_start_description())

	def add_template(self, template: MnemonicTemplate):
		self._code.append(
			template.generate(
				self.settings.mode,
				self.settings.mnemonix_syntax,
				self.settings.indentation,
			)
		)

	def _generate_start_description(self) -> str:
		title = f";; {self.settings.title}"
		author = f";; Author: {self.settings.author}"
		end = ";; Program generated by FLEXPASM (github.com/alexeev-pro/flexpasm)"
		elf_format = "ELF" if self.settings.mode == "32" else "ELF64"
		return f"""{";" * 120}
{author}{' ' * (118 - len(author))};;
{title}{' ' * (118 - len(title))};;
{end}{' ' * (118 - len(end))};;
{";" * 120}

format {elf_format} executable 3	   ; {elf_format} EXECUTABLE
entry {self.settings.start_entry}	 ; Set Start Entry"""

	def get_source_code(self) -> str:
		return "\n".join(self._code).strip()

	def save_code(self):
		_ASMFileHandler.save(self.settings.filename, self.get_source_code())
