#
# Copyright (c) 2021 Nitric Technologies Pty Ltd.
#
# This file is part of Nitric Python 3 SDK.
# See https://github.com/nitrictech/python-sdk for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: nitric/proto/batch/v1/batch.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterable,
    AsyncIterator,
    Dict,
    Iterable,
    Optional,
    Union,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class ClientMessage(betterproto.Message):
    id: str = betterproto.string_field(1)
    """globally unique ID of the request/response pair"""

    registration_request: "RegistrationRequest" = betterproto.message_field(
        2, group="content"
    )
    """Register a handler for a job"""

    job_response: "JobResponse" = betterproto.message_field(3, group="content")
    """Handle a job submission"""


@dataclass(eq=False, repr=False)
class JobRequest(betterproto.Message):
    job_name: str = betterproto.string_field(1)
    data: "JobData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class JobData(betterproto.Message):
    struct: "betterproto_lib_google_protobuf.Struct" = betterproto.message_field(
        1, group="data"
    )


@dataclass(eq=False, repr=False)
class JobResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    """Mark if the job was successfully processed"""


@dataclass(eq=False, repr=False)
class RegistrationRequest(betterproto.Message):
    job_name: str = betterproto.string_field(1)
    requirements: "JobResourceRequirements" = betterproto.message_field(2)
    """Register with default requirements"""


@dataclass(eq=False, repr=False)
class RegistrationResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class JobResourceRequirements(betterproto.Message):
    cpus: float = betterproto.float_field(1)
    """The number of CPUs to allocate for the job"""

    memory: int = betterproto.int64_field(2)
    """The amount of memory to allocate for the job"""

    gpus: int = betterproto.int64_field(3)
    """The number of GPUs to allocate for the job"""


@dataclass(eq=False, repr=False)
class ServerMessage(betterproto.Message):
    """
    ServerMessage is the message sent from the nitric server to the service
    """

    id: str = betterproto.string_field(1)
    """globally unique ID of the request/response pair"""

    registration_response: "RegistrationResponse" = betterproto.message_field(
        2, group="content"
    )
    """
    
    """

    job_request: "JobRequest" = betterproto.message_field(3, group="content")
    """Request to a job handler"""


@dataclass(eq=False, repr=False)
class JobSubmitRequest(betterproto.Message):
    job_name: str = betterproto.string_field(1)
    """The name of the job that should handle the data"""

    data: "JobData" = betterproto.message_field(2)
    """The data to be processed by the job"""


@dataclass(eq=False, repr=False)
class JobSubmitResponse(betterproto.Message):
    pass


class JobStub(betterproto.ServiceStub):
    async def handle_job(
        self,
        client_message_iterator: Union[
            AsyncIterable["ClientMessage"], Iterable["ClientMessage"]
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["ServerMessage"]:
        async for response in self._stream_stream(
            "/nitric.proto.batch.v1.Job/HandleJob",
            client_message_iterator,
            ClientMessage,
            ServerMessage,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class BatchStub(betterproto.ServiceStub):
    async def submit_job(
        self,
        job_submit_request: "JobSubmitRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "JobSubmitResponse":
        return await self._unary_unary(
            "/nitric.proto.batch.v1.Batch/SubmitJob",
            job_submit_request,
            JobSubmitResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class JobBase(ServiceBase):
    async def handle_job(
        self, client_message_iterator: AsyncIterator["ClientMessage"]
    ) -> AsyncIterator["ServerMessage"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield ServerMessage()

    async def __rpc_handle_job(
        self, stream: "grpclib.server.Stream[ClientMessage, ServerMessage]"
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.handle_job,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/nitric.proto.batch.v1.Job/HandleJob": grpclib.const.Handler(
                self.__rpc_handle_job,
                grpclib.const.Cardinality.STREAM_STREAM,
                ClientMessage,
                ServerMessage,
            ),
        }


class BatchBase(ServiceBase):
    async def submit_job(
        self, job_submit_request: "JobSubmitRequest"
    ) -> "JobSubmitResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_submit_job(
        self, stream: "grpclib.server.Stream[JobSubmitRequest, JobSubmitResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.submit_job(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/nitric.proto.batch.v1.Batch/SubmitJob": grpclib.const.Handler(
                self.__rpc_submit_job,
                grpclib.const.Cardinality.UNARY_UNARY,
                JobSubmitRequest,
                JobSubmitResponse,
            ),
        }
