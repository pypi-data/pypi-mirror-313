#
# Copyright (c) 2021 Nitric Technologies Pty Ltd.
#
# This file is part of Nitric Python 3 SDK.
# See https://github.com/nitrictech/python-sdk for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: nitric/proto/sql/v1/sql.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class SqlConnectionStringRequest(betterproto.Message):
    database_name: str = betterproto.string_field(1)
    """The name of the database to retrieve the connection string for"""


@dataclass(eq=False, repr=False)
class SqlConnectionStringResponse(betterproto.Message):
    connection_string: str = betterproto.string_field(1)
    """The connection string for the database"""


class SqlStub(betterproto.ServiceStub):
    async def connection_string(
        self,
        sql_connection_string_request: "SqlConnectionStringRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SqlConnectionStringResponse":
        return await self._unary_unary(
            "/nitric.proto.sql.v1.Sql/ConnectionString",
            sql_connection_string_request,
            SqlConnectionStringResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class SqlBase(ServiceBase):
    async def connection_string(
        self, sql_connection_string_request: "SqlConnectionStringRequest"
    ) -> "SqlConnectionStringResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_connection_string(
        self,
        stream: "grpclib.server.Stream[SqlConnectionStringRequest, SqlConnectionStringResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.connection_string(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/nitric.proto.sql.v1.Sql/ConnectionString": grpclib.const.Handler(
                self.__rpc_connection_string,
                grpclib.const.Cardinality.UNARY_UNARY,
                SqlConnectionStringRequest,
                SqlConnectionStringResponse,
            ),
        }
