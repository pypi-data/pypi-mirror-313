# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pypolaris
else:
    import _pypolaris

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pypolaris.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _pypolaris.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _pypolaris.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _pypolaris.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _pypolaris.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _pypolaris.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _pypolaris.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _pypolaris.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _pypolaris.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _pypolaris.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _pypolaris.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _pypolaris.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _pypolaris.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _pypolaris.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _pypolaris.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _pypolaris.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _pypolaris.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pypolaris:
_pypolaris.SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _pypolaris.ios_base_erase_event
    imbue_event = _pypolaris.ios_base_imbue_event
    copyfmt_event = _pypolaris.ios_base_copyfmt_event

    def register_callback(self, __fn: "std::ios_base::event_callback", __index: "int") -> "void":
        return _pypolaris.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args) -> "std::ios_base::fmtflags":
        return _pypolaris.ios_base_flags(self, *args)

    def setf(self, *args) -> "std::ios_base::fmtflags":
        return _pypolaris.ios_base_setf(self, *args)

    def unsetf(self, __mask: "std::ios_base::fmtflags") -> "void":
        return _pypolaris.ios_base_unsetf(self, __mask)

    def precision(self, *args) -> "std::streamsize":
        return _pypolaris.ios_base_precision(self, *args)

    def width(self, *args) -> "std::streamsize":
        return _pypolaris.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync: "bool"=True) -> "bool":
        return _pypolaris.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc: "std::locale const &") -> "std::locale":
        return _pypolaris.ios_base_imbue(self, __loc)

    def getloc(self) -> "std::locale":
        return _pypolaris.ios_base_getloc(self)

    @staticmethod
    def xalloc() -> "int":
        return _pypolaris.ios_base_xalloc()

    def iword(self, __ix: "int") -> "long &":
        return _pypolaris.ios_base_iword(self, __ix)

    def pword(self, __ix: "int") -> "void *&":
        return _pypolaris.ios_base_pword(self, __ix)
    __swig_destroy__ = _pypolaris.delete_ios_base

# Register ios_base in _pypolaris:
_pypolaris.ios_base_swigregister(ios_base)
cvar = _pypolaris.cvar
ios_base.boolalpha = _pypolaris.cvar.ios_base_boolalpha
ios_base.dec = _pypolaris.cvar.ios_base_dec
ios_base.fixed = _pypolaris.cvar.ios_base_fixed
ios_base.hex = _pypolaris.cvar.ios_base_hex
ios_base.internal = _pypolaris.cvar.ios_base_internal
ios_base.left = _pypolaris.cvar.ios_base_left
ios_base.oct = _pypolaris.cvar.ios_base_oct
ios_base.right = _pypolaris.cvar.ios_base_right
ios_base.scientific = _pypolaris.cvar.ios_base_scientific
ios_base.showbase = _pypolaris.cvar.ios_base_showbase
ios_base.showpoint = _pypolaris.cvar.ios_base_showpoint
ios_base.showpos = _pypolaris.cvar.ios_base_showpos
ios_base.skipws = _pypolaris.cvar.ios_base_skipws
ios_base.unitbuf = _pypolaris.cvar.ios_base_unitbuf
ios_base.uppercase = _pypolaris.cvar.ios_base_uppercase
ios_base.adjustfield = _pypolaris.cvar.ios_base_adjustfield
ios_base.basefield = _pypolaris.cvar.ios_base_basefield
ios_base.floatfield = _pypolaris.cvar.ios_base_floatfield
ios_base.badbit = _pypolaris.cvar.ios_base_badbit
ios_base.eofbit = _pypolaris.cvar.ios_base_eofbit
ios_base.failbit = _pypolaris.cvar.ios_base_failbit
ios_base.goodbit = _pypolaris.cvar.ios_base_goodbit
ios_base.app = _pypolaris.cvar.ios_base_app
ios_base.ate = _pypolaris.cvar.ios_base_ate
ios_base.binary = _pypolaris.cvar.ios_base_binary
ios_base.ios_base_in = _pypolaris.cvar.ios_base_ios_base_in
ios_base.out = _pypolaris.cvar.ios_base_out
ios_base.trunc = _pypolaris.cvar.ios_base_trunc
ios_base.beg = _pypolaris.cvar.ios_base_beg
ios_base.cur = _pypolaris.cvar.ios_base_cur
ios_base.end = _pypolaris.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync: "bool"=True) -> "bool":
    return _pypolaris.ios_base_sync_with_stdio(__sync)

def ios_base_xalloc() -> "int":
    return _pypolaris.ios_base_xalloc()

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self) -> "std::ios_base::iostate":
        return _pypolaris.ios_rdstate(self)

    def clear(self, *args) -> "void":
        return _pypolaris.ios_clear(self, *args)

    def setstate(self, __state: "std::ios_base::iostate") -> "void":
        return _pypolaris.ios_setstate(self, __state)

    def good(self) -> "bool":
        return _pypolaris.ios_good(self)

    def eof(self) -> "bool":
        return _pypolaris.ios_eof(self)

    def fail(self) -> "bool":
        return _pypolaris.ios_fail(self)

    def bad(self) -> "bool":
        return _pypolaris.ios_bad(self)

    def exceptions(self, *args) -> "void":
        return _pypolaris.ios_exceptions(self, *args)

    def __init__(self, __sb: "streambuf"):
        _pypolaris.ios_swiginit(self, _pypolaris.new_ios(__sb))
    __swig_destroy__ = _pypolaris.delete_ios

    def tie(self, *args) -> "std::basic_ostream< char,std::char_traits< char > > *":
        return _pypolaris.ios_tie(self, *args)

    def rdbuf(self, *args) -> "std::basic_streambuf< char,std::char_traits< char > > *":
        return _pypolaris.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs: "ios") -> "std::basic_ios< char > &":
        return _pypolaris.ios_copyfmt(self, __rhs)

    def fill(self, *args) -> "std::basic_ios< char >::char_type":
        return _pypolaris.ios_fill(self, *args)

    def imbue(self, __loc: "std::locale const &") -> "std::locale":
        return _pypolaris.ios_imbue(self, __loc)

    def narrow(self, __c: "std::basic_ios< char >::char_type", __dfault: "char") -> "char":
        return _pypolaris.ios_narrow(self, __c, __dfault)

    def widen(self, __c: "char") -> "std::basic_ios< char >::char_type":
        return _pypolaris.ios_widen(self, __c)

# Register ios in _pypolaris:
_pypolaris.ios_swigregister(ios)

class string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def length(self) -> "std::basic_string< char >::size_type":
        return _pypolaris.string_length(self)

    def max_size(self) -> "std::basic_string< char >::size_type":
        return _pypolaris.string_max_size(self)

    def capacity(self) -> "std::basic_string< char >::size_type":
        return _pypolaris.string_capacity(self)

    def reserve(self, __res_arg: "std::basic_string< char >::size_type"=0) -> "void":
        return _pypolaris.string_reserve(self, __res_arg)

    def copy(self, __s: "char *", __n: "std::basic_string< char >::size_type", __pos: "std::basic_string< char >::size_type"=0) -> "std::basic_string< char >::size_type":
        return _pypolaris.string_copy(self, __s, __n, __pos)

    def c_str(self) -> "char const *":
        return _pypolaris.string_c_str(self)

    def find(self, *args) -> "std::basic_string< char >::size_type":
        return _pypolaris.string_find(self, *args)

    def rfind(self, *args) -> "std::basic_string< char >::size_type":
        return _pypolaris.string_rfind(self, *args)

    def find_first_of(self, *args) -> "std::basic_string< char >::size_type":
        return _pypolaris.string_find_first_of(self, *args)

    def find_last_of(self, *args) -> "std::basic_string< char >::size_type":
        return _pypolaris.string_find_last_of(self, *args)

    def find_first_not_of(self, *args) -> "std::basic_string< char >::size_type":
        return _pypolaris.string_find_first_not_of(self, *args)

    def find_last_not_of(self, *args) -> "std::basic_string< char >::size_type":
        return _pypolaris.string_find_last_not_of(self, *args)

    def substr(self, *args) -> "std::basic_string< char >":
        return _pypolaris.string_substr(self, *args)

    def empty(self) -> "bool":
        return _pypolaris.string_empty(self)

    def size(self) -> "std::basic_string< char >::size_type":
        return _pypolaris.string_size(self)

    def swap(self, v: "string") -> "void":
        return _pypolaris.string_swap(self, v)

    def begin(self) -> "std::basic_string< char >::iterator":
        return _pypolaris.string_begin(self)

    def end(self) -> "std::basic_string< char >::iterator":
        return _pypolaris.string_end(self)

    def rbegin(self) -> "std::basic_string< char >::reverse_iterator":
        return _pypolaris.string_rbegin(self)

    def rend(self) -> "std::basic_string< char >::reverse_iterator":
        return _pypolaris.string_rend(self)

    def get_allocator(self) -> "std::basic_string< char >::allocator_type":
        return _pypolaris.string_get_allocator(self)

    def erase(self, *args) -> "std::basic_string< char >::iterator":
        return _pypolaris.string_erase(self, *args)

    def __init__(self, *args):
        _pypolaris.string_swiginit(self, _pypolaris.new_string(*args))

    def assign(self, *args) -> "void":
        return _pypolaris.string_assign(self, *args)

    def resize(self, *args) -> "void":
        return _pypolaris.string_resize(self, *args)

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pypolaris.string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pypolaris.string___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pypolaris.string___bool__(self)

    def __len__(self) -> "std::basic_string< char >::size_type":
        return _pypolaris.string___len__(self)

    def __getslice__(self, i: "std::basic_string< char >::difference_type", j: "std::basic_string< char >::difference_type") -> "std::basic_string< char,std::char_traits< char >,std::allocator< char > > *":
        return _pypolaris.string___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pypolaris.string___setslice__(self, *args)

    def __delslice__(self, i: "std::basic_string< char >::difference_type", j: "std::basic_string< char >::difference_type") -> "void":
        return _pypolaris.string___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pypolaris.string___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::basic_string< char >::value_type":
        return _pypolaris.string___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pypolaris.string___setitem__(self, *args)

    def insert(self, *args) -> "void":
        return _pypolaris.string_insert(self, *args)

    def replace(self, *args) -> "std::basic_string< char > &":
        return _pypolaris.string_replace(self, *args)

    def __iadd__(self, v: "string") -> "std::basic_string< char > &":
        return _pypolaris.string___iadd__(self, v)

    def __add__(self, v: "string") -> "std::basic_string< char,std::char_traits< char >,std::allocator< char > > *":
        return _pypolaris.string___add__(self, v)

    def __radd__(self, v: "string") -> "std::basic_string< char,std::char_traits< char >,std::allocator< char > > *":
        return _pypolaris.string___radd__(self, v)

    def __str__(self) -> "std::basic_string< char,std::char_traits< char >,std::allocator< char > >":
        return _pypolaris.string___str__(self)

    def __rlshift__(self, out: "ostream") -> "std::basic_ostream< char,std::char_traits< char > > &":
        return _pypolaris.string___rlshift__(self, out)

    def __eq__(self, v: "string") -> "bool":
        return _pypolaris.string___eq__(self, v)

    def __ne__(self, v: "string") -> "bool":
        return _pypolaris.string___ne__(self, v)

    def __gt__(self, v: "string") -> "bool":
        return _pypolaris.string___gt__(self, v)

    def __lt__(self, v: "string") -> "bool":
        return _pypolaris.string___lt__(self, v)

    def __ge__(self, v: "string") -> "bool":
        return _pypolaris.string___ge__(self, v)

    def __le__(self, v: "string") -> "bool":
        return _pypolaris.string___le__(self, v)
    __swig_destroy__ = _pypolaris.delete_string

# Register string in _pypolaris:
_pypolaris.string_swigregister(string)
string.npos = _pypolaris.cvar.string_npos

class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb: "streambuf"):
        _pypolaris.ostream_swiginit(self, _pypolaris.new_ostream(__sb))
    __swig_destroy__ = _pypolaris.delete_ostream

    def __lshift__(self, *args) -> "std::basic_ostream< char,std::char_traits< char > > &":
        return _pypolaris.ostream___lshift__(self, *args)

    def put(self, __c: "std::basic_ostream< char >::char_type") -> "std::basic_ostream< char,std::char_traits< char > > &":
        return _pypolaris.ostream_put(self, __c)

    def write(self, __s: "std::basic_ostream< char >::char_type const *", __n: "std::streamsize") -> "std::basic_ostream< char,std::char_traits< char > > &":
        return _pypolaris.ostream_write(self, __s, __n)

    def flush(self) -> "std::basic_ostream< char,std::char_traits< char > > &":
        return _pypolaris.ostream_flush(self)

    def tellp(self) -> "std::basic_ostream< char >::pos_type":
        return _pypolaris.ostream_tellp(self)

    def seekp(self, *args) -> "std::basic_ostream< char,std::char_traits< char > > &":
        return _pypolaris.ostream_seekp(self, *args)

# Register ostream in _pypolaris:
_pypolaris.ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb: "streambuf"):
        _pypolaris.istream_swiginit(self, _pypolaris.new_istream(__sb))
    __swig_destroy__ = _pypolaris.delete_istream

    def __rshift__(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _pypolaris.istream___rshift__(self, *args)

    def gcount(self) -> "std::streamsize":
        return _pypolaris.istream_gcount(self)

    def get(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _pypolaris.istream_get(self, *args)

    def getline(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _pypolaris.istream_getline(self, *args)

    def ignore(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _pypolaris.istream_ignore(self, *args)

    def peek(self) -> "std::basic_istream< char >::int_type":
        return _pypolaris.istream_peek(self)

    def read(self, __s: "std::basic_istream< char >::char_type *", __n: "std::streamsize") -> "std::basic_istream< char,std::char_traits< char > > &":
        return _pypolaris.istream_read(self, __s, __n)

    def readsome(self, __s: "std::basic_istream< char >::char_type *", __n: "std::streamsize") -> "std::streamsize":
        return _pypolaris.istream_readsome(self, __s, __n)

    def putback(self, __c: "std::basic_istream< char >::char_type") -> "std::basic_istream< char,std::char_traits< char > > &":
        return _pypolaris.istream_putback(self, __c)

    def unget(self) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _pypolaris.istream_unget(self)

    def sync(self) -> "int":
        return _pypolaris.istream_sync(self)

    def tellg(self) -> "std::basic_istream< char >::pos_type":
        return _pypolaris.istream_tellg(self)

    def seekg(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _pypolaris.istream_seekg(self, *args)

# Register istream in _pypolaris:
_pypolaris.istream_swigregister(istream)

class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb: "streambuf"):
        _pypolaris.iostream_swiginit(self, _pypolaris.new_iostream(__sb))
    __swig_destroy__ = _pypolaris.delete_iostream

# Register iostream in _pypolaris:
_pypolaris.iostream_swigregister(iostream)

endl_cb_ptr = _pypolaris.endl_cb_ptr
endl = _pypolaris.endl
ends_cb_ptr = _pypolaris.ends_cb_ptr
ends = _pypolaris.ends
flush_cb_ptr = _pypolaris.flush_cb_ptr
flush = _pypolaris.flush
class streambuf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pypolaris.delete_streambuf

    def pubimbue(self, __loc: "std::locale const &") -> "std::locale":
        return _pypolaris.streambuf_pubimbue(self, __loc)

    def getloc(self) -> "std::locale":
        return _pypolaris.streambuf_getloc(self)

    def pubsetbuf(self, __s: "std::basic_streambuf< char >::char_type *", __n: "std::streamsize") -> "std::basic_streambuf< char,std::char_traits< char > > *":
        return _pypolaris.streambuf_pubsetbuf(self, __s, __n)

    def pubseekoff(self, *args) -> "std::basic_streambuf< char >::pos_type":
        return _pypolaris.streambuf_pubseekoff(self, *args)

    def pubseekpos(self, *args) -> "std::basic_streambuf< char >::pos_type":
        return _pypolaris.streambuf_pubseekpos(self, *args)

    def pubsync(self) -> "int":
        return _pypolaris.streambuf_pubsync(self)

    def in_avail(self) -> "std::streamsize":
        return _pypolaris.streambuf_in_avail(self)

    def snextc(self) -> "std::basic_streambuf< char >::int_type":
        return _pypolaris.streambuf_snextc(self)

    def sbumpc(self) -> "std::basic_streambuf< char >::int_type":
        return _pypolaris.streambuf_sbumpc(self)

    def sgetc(self) -> "std::basic_streambuf< char >::int_type":
        return _pypolaris.streambuf_sgetc(self)

    def sgetn(self, __s: "std::basic_streambuf< char >::char_type *", __n: "std::streamsize") -> "std::streamsize":
        return _pypolaris.streambuf_sgetn(self, __s, __n)

    def sputbackc(self, __c: "std::basic_streambuf< char >::char_type") -> "std::basic_streambuf< char >::int_type":
        return _pypolaris.streambuf_sputbackc(self, __c)

    def sungetc(self) -> "std::basic_streambuf< char >::int_type":
        return _pypolaris.streambuf_sungetc(self)

    def sputc(self, __c: "std::basic_streambuf< char >::char_type") -> "std::basic_streambuf< char >::int_type":
        return _pypolaris.streambuf_sputc(self, __c)

    def sputn(self, __s: "std::basic_streambuf< char >::char_type const *", __n: "std::streamsize") -> "std::streamsize":
        return _pypolaris.streambuf_sputn(self, __s, __n)

# Register streambuf in _pypolaris:
_pypolaris.streambuf_swigregister(streambuf)

class istringstream(istream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pypolaris.istringstream_swiginit(self, _pypolaris.new_istringstream(*args))
    __swig_destroy__ = _pypolaris.delete_istringstream

    def rdbuf(self) -> "std::basic_stringbuf< char,std::char_traits< char >,std::allocator< char > > *":
        return _pypolaris.istringstream_rdbuf(self)

    def str(self, *args) -> "void":
        return _pypolaris.istringstream_str(self, *args)

# Register istringstream in _pypolaris:
_pypolaris.istringstream_swigregister(istringstream)

class ostringstream(ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pypolaris.ostringstream_swiginit(self, _pypolaris.new_ostringstream(*args))
    __swig_destroy__ = _pypolaris.delete_ostringstream

    def rdbuf(self) -> "std::basic_stringbuf< char,std::char_traits< char >,std::allocator< char > > *":
        return _pypolaris.ostringstream_rdbuf(self)

    def str(self) -> "std::basic_string< char,std::char_traits< char >,std::allocator< char > >":
        return _pypolaris.ostringstream_str(self)

# Register ostringstream in _pypolaris:
_pypolaris.ostringstream_swigregister(ostringstream)

class stringstream(iostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pypolaris.stringstream_swiginit(self, _pypolaris.new_stringstream(*args))
    __swig_destroy__ = _pypolaris.delete_stringstream

    def rdbuf(self) -> "std::basic_stringbuf< char,std::char_traits< char >,std::allocator< char > > *":
        return _pypolaris.stringstream_rdbuf(self)

    def str(self, *args) -> "void":
        return _pypolaris.stringstream_str(self, *args)

# Register stringstream in _pypolaris:
_pypolaris.stringstream_swigregister(stringstream)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pypolaris.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pypolaris.StringVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pypolaris.StringVector___bool__(self)

    def __len__(self) -> "std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type":
        return _pypolaris.StringVector___len__(self)

    def __getslice__(self, i: "std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type", j: "std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type") -> "std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::allocator< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > > *":
        return _pypolaris.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pypolaris.StringVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type", j: "std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type") -> "void":
        return _pypolaris.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pypolaris.StringVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::value_type const &":
        return _pypolaris.StringVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pypolaris.StringVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::value_type":
        return _pypolaris.StringVector_pop(self)

    def append(self, x: "string") -> "void":
        return _pypolaris.StringVector_append(self, x)

    def empty(self) -> "bool":
        return _pypolaris.StringVector_empty(self)

    def size(self) -> "std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type":
        return _pypolaris.StringVector_size(self)

    def swap(self, v: "StringVector") -> "void":
        return _pypolaris.StringVector_swap(self, v)

    def begin(self) -> "std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator":
        return _pypolaris.StringVector_begin(self)

    def end(self) -> "std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator":
        return _pypolaris.StringVector_end(self)

    def rbegin(self) -> "std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::reverse_iterator":
        return _pypolaris.StringVector_rbegin(self)

    def rend(self) -> "std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::reverse_iterator":
        return _pypolaris.StringVector_rend(self)

    def clear(self) -> "void":
        return _pypolaris.StringVector_clear(self)

    def get_allocator(self) -> "std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::allocator_type":
        return _pypolaris.StringVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pypolaris.StringVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator":
        return _pypolaris.StringVector_erase(self, *args)

    def __init__(self, *args):
        _pypolaris.StringVector_swiginit(self, _pypolaris.new_StringVector(*args))

    def push_back(self, x: "string") -> "void":
        return _pypolaris.StringVector_push_back(self, x)

    def front(self) -> "std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::value_type const &":
        return _pypolaris.StringVector_front(self)

    def back(self) -> "std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::value_type const &":
        return _pypolaris.StringVector_back(self)

    def assign(self, n: "std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type", x: "string") -> "void":
        return _pypolaris.StringVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pypolaris.StringVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pypolaris.StringVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type") -> "void":
        return _pypolaris.StringVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type":
        return _pypolaris.StringVector_capacity(self)
    __swig_destroy__ = _pypolaris.delete_StringVector

# Register StringVector in _pypolaris:
_pypolaris.StringVector_swigregister(StringVector)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pypolaris.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pypolaris.IntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pypolaris.IntVector___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _pypolaris.IntVector___len__(self)

    def __getslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "std::vector< int,std::allocator< int > > *":
        return _pypolaris.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pypolaris.IntVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "void":
        return _pypolaris.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pypolaris.IntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _pypolaris.IntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pypolaris.IntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _pypolaris.IntVector_pop(self)

    def append(self, x: "std::vector< int >::value_type const &") -> "void":
        return _pypolaris.IntVector_append(self, x)

    def empty(self) -> "bool":
        return _pypolaris.IntVector_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _pypolaris.IntVector_size(self)

    def swap(self, v: "IntVector") -> "void":
        return _pypolaris.IntVector_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _pypolaris.IntVector_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _pypolaris.IntVector_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _pypolaris.IntVector_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _pypolaris.IntVector_rend(self)

    def clear(self) -> "void":
        return _pypolaris.IntVector_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _pypolaris.IntVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pypolaris.IntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _pypolaris.IntVector_erase(self, *args)

    def __init__(self, *args):
        _pypolaris.IntVector_swiginit(self, _pypolaris.new_IntVector(*args))

    def push_back(self, x: "std::vector< int >::value_type const &") -> "void":
        return _pypolaris.IntVector_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _pypolaris.IntVector_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _pypolaris.IntVector_back(self)

    def assign(self, n: "std::vector< int >::size_type", x: "std::vector< int >::value_type const &") -> "void":
        return _pypolaris.IntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pypolaris.IntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pypolaris.IntVector_insert(self, *args)

    def reserve(self, n: "std::vector< int >::size_type") -> "void":
        return _pypolaris.IntVector_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _pypolaris.IntVector_capacity(self)
    __swig_destroy__ = _pypolaris.delete_IntVector

# Register IntVector in _pypolaris:
_pypolaris.IntVector_swigregister(IntVector)

class BoolVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pypolaris.BoolVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pypolaris.BoolVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pypolaris.BoolVector___bool__(self)

    def __len__(self) -> "std::vector< bool >::size_type":
        return _pypolaris.BoolVector___len__(self)

    def __getslice__(self, i: "std::vector< bool >::difference_type", j: "std::vector< bool >::difference_type") -> "std::vector< bool,std::allocator< bool > > *":
        return _pypolaris.BoolVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pypolaris.BoolVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< bool >::difference_type", j: "std::vector< bool >::difference_type") -> "void":
        return _pypolaris.BoolVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pypolaris.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< bool >::value_type":
        return _pypolaris.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pypolaris.BoolVector___setitem__(self, *args)

    def pop(self) -> "std::vector< bool >::value_type":
        return _pypolaris.BoolVector_pop(self)

    def append(self, x: "std::vector< bool >::value_type") -> "void":
        return _pypolaris.BoolVector_append(self, x)

    def empty(self) -> "bool":
        return _pypolaris.BoolVector_empty(self)

    def size(self) -> "std::vector< bool >::size_type":
        return _pypolaris.BoolVector_size(self)

    def swap(self, v: "BoolVector") -> "void":
        return _pypolaris.BoolVector_swap(self, v)

    def begin(self) -> "std::vector< bool >::iterator":
        return _pypolaris.BoolVector_begin(self)

    def end(self) -> "std::vector< bool >::iterator":
        return _pypolaris.BoolVector_end(self)

    def rbegin(self) -> "std::vector< bool >::reverse_iterator":
        return _pypolaris.BoolVector_rbegin(self)

    def rend(self) -> "std::vector< bool >::reverse_iterator":
        return _pypolaris.BoolVector_rend(self)

    def clear(self) -> "void":
        return _pypolaris.BoolVector_clear(self)

    def get_allocator(self) -> "std::vector< bool >::allocator_type":
        return _pypolaris.BoolVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _pypolaris.BoolVector_pop_back(self)

    def erase(self, *args) -> "std::vector< bool >::iterator":
        return _pypolaris.BoolVector_erase(self, *args)

    def __init__(self, *args):
        _pypolaris.BoolVector_swiginit(self, _pypolaris.new_BoolVector(*args))

    def push_back(self, x: "std::vector< bool >::value_type") -> "void":
        return _pypolaris.BoolVector_push_back(self, x)

    def front(self) -> "std::vector< bool >::value_type":
        return _pypolaris.BoolVector_front(self)

    def back(self) -> "std::vector< bool >::value_type":
        return _pypolaris.BoolVector_back(self)

    def assign(self, n: "std::vector< bool >::size_type", x: "std::vector< bool >::value_type") -> "void":
        return _pypolaris.BoolVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pypolaris.BoolVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pypolaris.BoolVector_insert(self, *args)

    def reserve(self, n: "std::vector< bool >::size_type") -> "void":
        return _pypolaris.BoolVector_reserve(self, n)

    def capacity(self) -> "std::vector< bool >::size_type":
        return _pypolaris.BoolVector_capacity(self)
    __swig_destroy__ = _pypolaris.delete_BoolVector

# Register BoolVector in _pypolaris:
_pypolaris.BoolVector_swigregister(BoolVector)

class pypolaris(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    probe = property(_pypolaris.pypolaris_probe_get, _pypolaris.pypolaris_probe_set)
    ref = property(_pypolaris.pypolaris_ref_get, _pypolaris.pypolaris_ref_set)
    objs = property(_pypolaris.pypolaris_objs_get, _pypolaris.pypolaris_objs_set)
    probeID = property(_pypolaris.pypolaris_probeID_get, _pypolaris.pypolaris_probeID_set)
    refID = property(_pypolaris.pypolaris_refID_get, _pypolaris.pypolaris_refID_set)
    objIDs = property(_pypolaris.pypolaris_objIDs_get, _pypolaris.pypolaris_objIDs_set)

    def Initialize(self, COMport: "string", PROBE_NAME: "string", REF_NAME: "string", OBJ_NAMES: "StringVector") -> "int":
        return _pypolaris.pypolaris_Initialize(self, COMport, PROBE_NAME, REF_NAME, OBJ_NAMES)

    def Run(self) -> "int":
        return _pypolaris.pypolaris_Run(self)

    def Close(self) -> "void":
        return _pypolaris.pypolaris_Close(self)

    def __init__(self):
        _pypolaris.pypolaris_swiginit(self, _pypolaris.new_pypolaris())
    __swig_destroy__ = _pypolaris.delete_pypolaris

# Register pypolaris in _pypolaris:
_pypolaris.pypolaris_swigregister(pypolaris)


def new_intp() -> "int *":
    return _pypolaris.new_intp()

def copy_intp(value: "int") -> "int *":
    return _pypolaris.copy_intp(value)

def delete_intp(obj: "int *") -> "void":
    return _pypolaris.delete_intp(obj)

def intp_assign(obj: "int *", value: "int") -> "void":
    return _pypolaris.intp_assign(obj, value)

def intp_value(obj: "int *") -> "int":
    return _pypolaris.intp_value(obj)

def new_floatp() -> "float *":
    return _pypolaris.new_floatp()

def copy_floatp(value: "float") -> "float *":
    return _pypolaris.copy_floatp(value)

def delete_floatp(obj: "float *") -> "void":
    return _pypolaris.delete_floatp(obj)

def floatp_assign(obj: "float *", value: "float") -> "void":
    return _pypolaris.floatp_assign(obj, value)

def floatp_value(obj: "float *") -> "float":
    return _pypolaris.floatp_value(obj)

def new_doublep() -> "double *":
    return _pypolaris.new_doublep()

def copy_doublep(value: "double") -> "double *":
    return _pypolaris.copy_doublep(value)

def delete_doublep(obj: "double *") -> "void":
    return _pypolaris.delete_doublep(obj)

def doublep_assign(obj: "double *", value: "double") -> "void":
    return _pypolaris.doublep_assign(obj, value)

def doublep_value(obj: "double *") -> "double":
    return _pypolaris.doublep_value(obj)

def new_boolp() -> "bool *":
    return _pypolaris.new_boolp()

def copy_boolp(value: "bool") -> "bool *":
    return _pypolaris.copy_boolp(value)

def delete_boolp(obj: "bool *") -> "void":
    return _pypolaris.delete_boolp(obj)

def boolp_assign(obj: "bool *", value: "bool") -> "void":
    return _pypolaris.boolp_assign(obj, value)

def boolp_value(obj: "bool *") -> "bool":
    return _pypolaris.boolp_value(obj)


