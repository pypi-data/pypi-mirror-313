import json
from pathlib import Path

from .organization.experiment import RegisteredExperiment
from .organization.pipeline import RegisteredPipeline
from .organization.step import RegisteredStep

__all__ = [
    "update_schema",
    "update_json_schema",
    "update_yaml_schema",
    "update_toml_schema",
]


"""
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Functions to call before building documentation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""


def update_schema() -> None:
    update_json_schema()
    update_yaml_schema()
    update_toml_schema()


"""
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// JSON Schema
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""


def update_json_schema() -> None:
    update_json_schema_for_registry_configurations()


def update_json_schema_for_registry_configurations() -> None:
    """
    Update the JSON schema files for the registry configuration classes.
    """

    def to_snake_case(name: str) -> str:
        return "".join(f"_{char.lower()}" if char.isupper() else char for char in name)[1:]

    path = Path(__file__).parent.joinpath("schemas")

    for model in (RegisteredExperiment, RegisteredPipeline, RegisteredStep):
        with path.joinpath(f"{to_snake_case(model.__name__)}.json").open("w") as file:
            # noinspection PyTypeChecker
            json.dump(model.model_json_schema(), file, indent=4, sort_keys=False)


"""
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// YAML Schema
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""


def update_yaml_schema() -> None:
    ...


"""
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TOML Schema
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""


def update_toml_schema() -> None:
    ...
