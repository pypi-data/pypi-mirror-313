# coding: utf-8

"""
    Unity Catalog API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class RegisteredModelInfo(BaseModel):
    """
    RegisteredModelInfo
    """
    name: Optional[StrictStr] = Field(default=None, description="The name of the registered model")
    catalog_name: Optional[StrictStr] = Field(default=None, description="The name of the catalog where the schema and the registered model reside")
    schema_name: Optional[StrictStr] = Field(default=None, description="The name of the schema where the registered model resides")
    storage_location: Optional[StrictStr] = Field(default=None, description="The storage location on the cloud under which model version data files are stored")
    full_name: Optional[StrictStr] = Field(default=None, description="The three-level (fully qualified) name of the registered model")
    comment: Optional[StrictStr] = Field(default=None, description="The comment attached to the registered model")
    owner: Optional[StrictStr] = Field(default=None, description="The identifier of the user who owns the registered model")
    created_at: Optional[StrictInt] = Field(default=None, description="Creation timestamp of the registered model in milliseconds since the Unix epoch")
    created_by: Optional[StrictStr] = Field(default=None, description="The identifier of the user who created the registered model")
    updated_at: Optional[StrictInt] = Field(default=None, description="Last-update timestamp of the registered model in milliseconds since the Unix epoch")
    updated_by: Optional[StrictStr] = Field(default=None, description="The identifier of the user who updated the registered model last time")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the registered model.")
    __properties = ["name", "catalog_name", "schema_name", "storage_location", "full_name", "comment", "owner", "created_at", "created_by", "updated_at", "updated_by", "id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RegisteredModelInfo:
        """Create an instance of RegisteredModelInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RegisteredModelInfo:
        """Create an instance of RegisteredModelInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RegisteredModelInfo.parse_obj(obj)

        _obj = RegisteredModelInfo.parse_obj({
            "name": obj.get("name"),
            "catalog_name": obj.get("catalog_name"),
            "schema_name": obj.get("schema_name"),
            "storage_location": obj.get("storage_location"),
            "full_name": obj.get("full_name"),
            "comment": obj.get("comment"),
            "owner": obj.get("owner"),
            "created_at": obj.get("created_at"),
            "created_by": obj.get("created_by"),
            "updated_at": obj.get("updated_at"),
            "updated_by": obj.get("updated_by"),
            "id": obj.get("id")
        })
        return _obj


