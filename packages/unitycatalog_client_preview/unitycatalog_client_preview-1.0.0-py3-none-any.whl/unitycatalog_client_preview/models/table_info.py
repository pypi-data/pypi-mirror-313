# coding: utf-8

"""
    Unity Catalog API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from unitycatalog_client_preview.models.column_info import ColumnInfo
from unitycatalog_client_preview.models.data_source_format import DataSourceFormat
from unitycatalog_client_preview.models.table_type import TableType

class TableInfo(BaseModel):
    """
    TableInfo
    """
    name: Optional[StrictStr] = Field(default=None, description="Name of table, relative to parent schema.")
    catalog_name: Optional[StrictStr] = Field(default=None, description="Name of parent catalog.")
    schema_name: Optional[StrictStr] = Field(default=None, description="Name of parent schema relative to its parent catalog.")
    table_type: Optional[TableType] = None
    data_source_format: Optional[DataSourceFormat] = None
    columns: Optional[conlist(ColumnInfo)] = Field(default=None, description="The array of __ColumnInfo__ definitions of the table's columns.")
    storage_location: Optional[StrictStr] = Field(default=None, description="Storage root URL for table (for **MANAGED**, **EXTERNAL** tables)")
    comment: Optional[StrictStr] = Field(default=None, description="User-provided free-form text description.")
    properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="A map of key-value properties attached to the securable.")
    owner: Optional[StrictStr] = Field(default=None, description="Username of current owner of table.")
    created_at: Optional[StrictInt] = Field(default=None, description="Time at which this table was created, in epoch milliseconds.")
    created_by: Optional[StrictStr] = Field(default=None, description="Username of table creator.")
    updated_at: Optional[StrictInt] = Field(default=None, description="Time at which this table was last modified, in epoch milliseconds.")
    updated_by: Optional[StrictStr] = Field(default=None, description="Username of user who last modified the table.")
    table_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the table.")
    __properties = ["name", "catalog_name", "schema_name", "table_type", "data_source_format", "columns", "storage_location", "comment", "properties", "owner", "created_at", "created_by", "updated_at", "updated_by", "table_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TableInfo:
        """Create an instance of TableInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in columns (list)
        _items = []
        if self.columns:
            for _item in self.columns:
                if _item:
                    _items.append(_item.to_dict())
            _dict['columns'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TableInfo:
        """Create an instance of TableInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TableInfo.parse_obj(obj)

        _obj = TableInfo.parse_obj({
            "name": obj.get("name"),
            "catalog_name": obj.get("catalog_name"),
            "schema_name": obj.get("schema_name"),
            "table_type": obj.get("table_type"),
            "data_source_format": obj.get("data_source_format"),
            "columns": [ColumnInfo.from_dict(_item) for _item in obj.get("columns")] if obj.get("columns") is not None else None,
            "storage_location": obj.get("storage_location"),
            "comment": obj.get("comment"),
            "properties": obj.get("properties"),
            "owner": obj.get("owner"),
            "created_at": obj.get("created_at"),
            "created_by": obj.get("created_by"),
            "updated_at": obj.get("updated_at"),
            "updated_by": obj.get("updated_by"),
            "table_id": obj.get("table_id")
        })
        return _obj


