# coding: utf-8

"""
    Unity Catalog API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from unitycatalog_client_preview.models.column_type_name import ColumnTypeName

class ColumnInfo(BaseModel):
    """
    ColumnInfo
    """
    name: Optional[StrictStr] = Field(default=None, description="Name of Column.")
    type_text: Optional[StrictStr] = Field(default=None, description="Full data type specification as SQL/catalogString text.")
    type_json: Optional[StrictStr] = Field(default=None, description="Full data type specification, JSON-serialized.")
    type_name: Optional[ColumnTypeName] = None
    type_precision: Optional[StrictInt] = Field(default=None, description="Digits of precision; required for DecimalTypes.")
    type_scale: Optional[StrictInt] = Field(default=None, description="Digits to right of decimal; Required for DecimalTypes.")
    type_interval_type: Optional[StrictStr] = Field(default=None, description="Format of IntervalType.")
    position: Optional[StrictInt] = Field(default=None, description="Ordinal position of column (starting at position 0).")
    comment: Optional[StrictStr] = Field(default=None, description="User-provided free-form text description.")
    nullable: Optional[StrictBool] = Field(default=True, description="Whether field may be Null.")
    partition_index: Optional[StrictInt] = Field(default=None, description="Partition index for column.")
    __properties = ["name", "type_text", "type_json", "type_name", "type_precision", "type_scale", "type_interval_type", "position", "comment", "nullable", "partition_index"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ColumnInfo:
        """Create an instance of ColumnInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ColumnInfo:
        """Create an instance of ColumnInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ColumnInfo.parse_obj(obj)

        _obj = ColumnInfo.parse_obj({
            "name": obj.get("name"),
            "type_text": obj.get("type_text"),
            "type_json": obj.get("type_json"),
            "type_name": obj.get("type_name"),
            "type_precision": obj.get("type_precision"),
            "type_scale": obj.get("type_scale"),
            "type_interval_type": obj.get("type_interval_type"),
            "position": obj.get("position"),
            "comment": obj.get("comment"),
            "nullable": obj.get("nullable") if obj.get("nullable") is not None else True,
            "partition_index": obj.get("partition_index")
        })
        return _obj


