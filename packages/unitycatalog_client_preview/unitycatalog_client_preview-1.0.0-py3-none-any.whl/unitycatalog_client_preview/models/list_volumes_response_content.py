# coding: utf-8

"""
    Unity Catalog API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from unitycatalog_client_preview.models.volume_info import VolumeInfo

class ListVolumesResponseContent(BaseModel):
    """
    ListVolumesResponseContent
    """
    volumes: Optional[conlist(VolumeInfo)] = None
    next_page_token: Optional[StrictStr] = Field(default=None, description="Opaque token to retrieve the next page of results. Absent if there are no more pages. __page_token__ should be set to this value for the next request to retrieve the next page of results. ")
    __properties = ["volumes", "next_page_token"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ListVolumesResponseContent:
        """Create an instance of ListVolumesResponseContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in volumes (list)
        _items = []
        if self.volumes:
            for _item in self.volumes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['volumes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ListVolumesResponseContent:
        """Create an instance of ListVolumesResponseContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ListVolumesResponseContent.parse_obj(obj)

        _obj = ListVolumesResponseContent.parse_obj({
            "volumes": [VolumeInfo.from_dict(_item) for _item in obj.get("volumes")] if obj.get("volumes") is not None else None,
            "next_page_token": obj.get("next_page_token")
        })
        return _obj


