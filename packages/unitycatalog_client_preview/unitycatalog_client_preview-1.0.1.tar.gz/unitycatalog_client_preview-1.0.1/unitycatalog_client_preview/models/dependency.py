# coding: utf-8

"""
    Unity Catalog API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from unitycatalog_client_preview.models.function_dependency import FunctionDependency
from unitycatalog_client_preview.models.table_dependency import TableDependency

class Dependency(BaseModel):
    """
    A dependency of a SQL object. Either the __table__ field or the __function__ field must be defined.  # noqa: E501
    """
    table: Optional[TableDependency] = None
    function: Optional[FunctionDependency] = None
    __properties = ["table", "function"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Dependency:
        """Create an instance of Dependency from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of table
        if self.table:
            _dict['table'] = self.table.to_dict()
        # override the default output from pydantic by calling `to_dict()` of function
        if self.function:
            _dict['function'] = self.function.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Dependency:
        """Create an instance of Dependency from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Dependency.parse_obj(obj)

        _obj = Dependency.parse_obj({
            "table": TableDependency.from_dict(obj.get("table")) if obj.get("table") is not None else None,
            "function": FunctionDependency.from_dict(obj.get("function")) if obj.get("function") is not None else None
        })
        return _obj


