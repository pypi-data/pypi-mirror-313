# coding: utf-8

"""
    Unity Catalog API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, validator
from unitycatalog_client_preview.models.column_type_name import ColumnTypeName
from unitycatalog_client_preview.models.dependency_list import DependencyList
from unitycatalog_client_preview.models.function_parameter_infos import FunctionParameterInfos

class FunctionInfo(BaseModel):
    """
    FunctionInfo
    """
    name: Optional[StrictStr] = Field(default=None, description="Name of function, relative to parent schema.")
    catalog_name: Optional[StrictStr] = Field(default=None, description="Name of parent catalog.")
    schema_name: Optional[StrictStr] = Field(default=None, description="Name of parent schema relative to its parent catalog.")
    input_params: Optional[FunctionParameterInfos] = None
    data_type: Optional[ColumnTypeName] = None
    full_data_type: Optional[StrictStr] = Field(default=None, description="Pretty printed function data type.")
    return_params: Optional[FunctionParameterInfos] = None
    routine_body: Optional[StrictStr] = Field(default=None, description="Function language. When **EXTERNAL** is used, the language of the routine function should be specified in the __external_language__ field,  and the __return_params__ of the function cannot be used (as **TABLE** return type is not supported), and the __sql_data_access__ field must be **NO_SQL**. ")
    routine_definition: Optional[StrictStr] = Field(default=None, description="Function body.")
    routine_dependencies: Optional[DependencyList] = None
    parameter_style: Optional[StrictStr] = Field(default=None, description="Function parameter style. **S** is the value for SQL.")
    is_deterministic: Optional[StrictBool] = Field(default=None, description="Whether the function is deterministic.")
    sql_data_access: Optional[StrictStr] = Field(default=None, description="Function SQL data access.")
    is_null_call: Optional[StrictBool] = Field(default=None, description="Function null call.")
    security_type: Optional[StrictStr] = Field(default=None, description="Function security type.")
    specific_name: Optional[StrictStr] = Field(default=None, description="Specific name of the function; Reserved for future use.")
    comment: Optional[StrictStr] = Field(default=None, description="User-provided free-form text description.")
    properties: Optional[StrictStr] = Field(default=None, description="JSON-serialized key-value pair map, encoded (escaped) as a string.")
    full_name: Optional[StrictStr] = Field(default=None, description="Full name of function, in form of __catalog_name__.__schema_name__.__function__name__")
    owner: Optional[StrictStr] = Field(default=None, description="Username of current owner of function.")
    created_at: Optional[StrictInt] = Field(default=None, description="Time at which this function was created, in epoch milliseconds.")
    created_by: Optional[StrictStr] = Field(default=None, description="Username of function creator.")
    updated_at: Optional[StrictInt] = Field(default=None, description="Time at which this function was last updated, in epoch milliseconds.")
    updated_by: Optional[StrictStr] = Field(default=None, description="Username of user who last modified function.")
    function_id: Optional[StrictStr] = Field(default=None, description="Id of Function, relative to parent schema.")
    external_language: Optional[StrictStr] = Field(default=None, description="External language of the function.")
    __properties = ["name", "catalog_name", "schema_name", "input_params", "data_type", "full_data_type", "return_params", "routine_body", "routine_definition", "routine_dependencies", "parameter_style", "is_deterministic", "sql_data_access", "is_null_call", "security_type", "specific_name", "comment", "properties", "full_name", "owner", "created_at", "created_by", "updated_at", "updated_by", "function_id", "external_language"]

    @validator('routine_body')
    def routine_body_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SQL', 'EXTERNAL'):
            raise ValueError("must be one of enum values ('SQL', 'EXTERNAL')")
        return value

    @validator('parameter_style')
    def parameter_style_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('S'):
            raise ValueError("must be one of enum values ('S')")
        return value

    @validator('sql_data_access')
    def sql_data_access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('CONTAINS_SQL', 'READS_SQL_DATA', 'NO_SQL'):
            raise ValueError("must be one of enum values ('CONTAINS_SQL', 'READS_SQL_DATA', 'NO_SQL')")
        return value

    @validator('security_type')
    def security_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('DEFINER'):
            raise ValueError("must be one of enum values ('DEFINER')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FunctionInfo:
        """Create an instance of FunctionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of input_params
        if self.input_params:
            _dict['input_params'] = self.input_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of return_params
        if self.return_params:
            _dict['return_params'] = self.return_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of routine_dependencies
        if self.routine_dependencies:
            _dict['routine_dependencies'] = self.routine_dependencies.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FunctionInfo:
        """Create an instance of FunctionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FunctionInfo.parse_obj(obj)

        _obj = FunctionInfo.parse_obj({
            "name": obj.get("name"),
            "catalog_name": obj.get("catalog_name"),
            "schema_name": obj.get("schema_name"),
            "input_params": FunctionParameterInfos.from_dict(obj.get("input_params")) if obj.get("input_params") is not None else None,
            "data_type": obj.get("data_type"),
            "full_data_type": obj.get("full_data_type"),
            "return_params": FunctionParameterInfos.from_dict(obj.get("return_params")) if obj.get("return_params") is not None else None,
            "routine_body": obj.get("routine_body"),
            "routine_definition": obj.get("routine_definition"),
            "routine_dependencies": DependencyList.from_dict(obj.get("routine_dependencies")) if obj.get("routine_dependencies") is not None else None,
            "parameter_style": obj.get("parameter_style"),
            "is_deterministic": obj.get("is_deterministic"),
            "sql_data_access": obj.get("sql_data_access"),
            "is_null_call": obj.get("is_null_call"),
            "security_type": obj.get("security_type"),
            "specific_name": obj.get("specific_name"),
            "comment": obj.get("comment"),
            "properties": obj.get("properties"),
            "full_name": obj.get("full_name"),
            "owner": obj.get("owner"),
            "created_at": obj.get("created_at"),
            "created_by": obj.get("created_by"),
            "updated_at": obj.get("updated_at"),
            "updated_by": obj.get("updated_by"),
            "function_id": obj.get("function_id"),
            "external_language": obj.get("external_language")
        })
        return _obj


