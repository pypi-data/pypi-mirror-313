# coding: utf-8

"""
    Unity Catalog API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt
from unitycatalog_client_preview.models.aws_credentials import AwsCredentials
from unitycatalog_client_preview.models.azure_user_delegation_sas import AzureUserDelegationSAS
from unitycatalog_client_preview.models.gcp_oauth_token import GcpOauthToken

class TemporaryCredentials(BaseModel):
    """
    TemporaryCredentials
    """
    aws_temp_credentials: Optional[AwsCredentials] = None
    azure_user_delegation_sas: Optional[AzureUserDelegationSAS] = None
    gcp_oauth_token: Optional[GcpOauthToken] = None
    expiration_time: Optional[StrictInt] = Field(default=None, description="Server time when the credential will expire, in epoch milliseconds. The API client is advised to cache the credential given this expiration time. ")
    __properties = ["aws_temp_credentials", "azure_user_delegation_sas", "gcp_oauth_token", "expiration_time"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TemporaryCredentials:
        """Create an instance of TemporaryCredentials from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of aws_temp_credentials
        if self.aws_temp_credentials:
            _dict['aws_temp_credentials'] = self.aws_temp_credentials.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_user_delegation_sas
        if self.azure_user_delegation_sas:
            _dict['azure_user_delegation_sas'] = self.azure_user_delegation_sas.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcp_oauth_token
        if self.gcp_oauth_token:
            _dict['gcp_oauth_token'] = self.gcp_oauth_token.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TemporaryCredentials:
        """Create an instance of TemporaryCredentials from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TemporaryCredentials.parse_obj(obj)

        _obj = TemporaryCredentials.parse_obj({
            "aws_temp_credentials": AwsCredentials.from_dict(obj.get("aws_temp_credentials")) if obj.get("aws_temp_credentials") is not None else None,
            "azure_user_delegation_sas": AzureUserDelegationSAS.from_dict(obj.get("azure_user_delegation_sas")) if obj.get("azure_user_delegation_sas") is not None else None,
            "gcp_oauth_token": GcpOauthToken.from_dict(obj.get("gcp_oauth_token")) if obj.get("gcp_oauth_token") is not None else None,
            "expiration_time": obj.get("expiration_time")
        })
        return _obj


