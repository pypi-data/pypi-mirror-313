from typing import Final
from typing_extensions import Self, TypeIs

from scipy._typing import Untyped
from ._matrix import spmatrix as spmatrix

__all__ = ["SparseEfficiencyWarning", "SparseWarning", "issparse", "isspmatrix", "sparray"]

MAXPRINT: Final = 50

class SparseWarning(Warning): ...
class SparseFormatWarning(SparseWarning): ...
class SparseEfficiencyWarning(SparseWarning): ...

class _spbase:
    __array_priority__: float
    maxprint: Final = 50
    @property
    def ndim(self, /) -> int: ...
    def __init__(self, /, arg1: Untyped, maxprint: int | None = 50) -> None: ...
    @property
    def shape(self, /) -> tuple[int, ...]: ...
    def reshape(self, /, *args: Untyped, **kwargs: Untyped) -> Untyped: ...
    def resize(self, /, shape: tuple[int, int]) -> None: ...
    def astype(self, /, dtype: Untyped, casting: str = "unsafe", copy: bool = True) -> Untyped: ...
    def __iter__(self, /) -> Untyped: ...
    def count_nonzero(self, /) -> int: ...
    @property
    def nnz(self, /) -> int: ...
    @property
    def size(self, /) -> int: ...
    @property
    def format(self, /) -> str: ...
    @property
    def T(self, /) -> Self: ...
    @property
    def real(self, /) -> Self: ...
    @property
    def imag(self, /) -> Self: ...
    def __bool__(self, /) -> bool: ...
    def asformat(self, /, format: Untyped, copy: bool = False) -> Untyped: ...
    def multiply(self, /, other: Untyped) -> Untyped: ...
    def maximum(self, /, other: Untyped) -> Untyped: ...
    def minimum(self, /, other: Untyped) -> Untyped: ...
    def dot(self, /, other: Untyped) -> Untyped: ...
    def power(self, /, n: Untyped, dtype: Untyped | None = None) -> Self: ...
    def __lt__(self, other: Untyped, /) -> Untyped: ...
    def __gt__(self, other: Untyped, /) -> Untyped: ...
    def __le__(self, other: Untyped, /) -> Untyped: ...
    def __ge__(self, other: Untyped, /) -> Untyped: ...
    def __abs__(self, /) -> Self: ...
    def __round__(self, /, ndigits: int = 0) -> Self: ...
    def __add__(self, other: Untyped, /) -> Untyped: ...
    def __radd__(self, other: Untyped, /) -> Untyped: ...
    def __sub__(self, other: Untyped, /) -> Untyped: ...
    def __rsub__(self, other: Untyped, /) -> Untyped: ...
    def __mul__(self, other: Untyped, /) -> Untyped: ...
    def __rmul__(self, other: Untyped, /) -> Untyped: ...
    def __matmul__(self, other: Untyped, /) -> Untyped: ...
    def __rmatmul__(self, other: Untyped, /) -> Untyped: ...
    def __truediv__(self, other: Untyped, /) -> Untyped: ...
    def __div__(self, other: Untyped, /) -> Untyped: ...
    def __neg__(self, /) -> Self: ...
    def __pow__(self, other: Untyped, /) -> Untyped: ...
    def transpose(self, /, axes: Untyped | None = None, copy: bool = False) -> Self: ...
    def conjugate(self, /, copy: bool = True) -> Self: ...
    def conj(self, /, copy: bool = True) -> Self: ...
    def nonzero(self, /) -> Untyped: ...
    def todense(self, /, order: Untyped | None = None, out: Untyped | None = None) -> Untyped: ...
    def toarray(self, /, order: Untyped | None = None, out: Untyped | None = None) -> Untyped: ...
    def tocsr(self, /, copy: bool = False) -> Untyped: ...
    def todok(self, /, copy: bool = False) -> Untyped: ...
    def tocoo(self, /, copy: bool = False) -> Untyped: ...
    def tolil(self, /, copy: bool = False) -> Untyped: ...
    def todia(self, /, copy: bool = False) -> Untyped: ...
    def tobsr(self, /, blocksize: tuple[int, int] | None = None, copy: bool = False) -> Untyped: ...
    def tocsc(self, /, copy: bool = False) -> Untyped: ...
    def copy(self, /) -> Self: ...
    def sum(self, /, axis: Untyped | None = None, dtype: Untyped | None = None, out: Untyped | None = None) -> Untyped: ...
    def mean(self, /, axis: Untyped | None = None, dtype: Untyped | None = None, out: Untyped | None = None) -> Untyped: ...
    def diagonal(self, /, k: int = 0) -> Untyped: ...
    def trace(self, /, offset: int = 0) -> Untyped: ...
    def setdiag(self, /, values: Untyped, k: int = 0) -> None: ...

class sparray: ...

def issparse(x: object) -> TypeIs[_spbase]: ...
def isspmatrix(x: object) -> TypeIs[spmatrix]: ...
