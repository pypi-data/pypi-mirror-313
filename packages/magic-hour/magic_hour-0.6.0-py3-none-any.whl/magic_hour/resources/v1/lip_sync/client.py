"""
Generated by Sideko (sideko.dev)
"""

import typing

from magic_hour.core import (
    AsyncBaseClient,
    RequestOptions,
    SyncBaseClient,
    default_request_options,
    to_encodable,
)
from magic_hour.types import models, params


class LipSyncClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources

    # register sync api methods
    def create(
        self,
        *,
        data: typing.Optional[params.PostV1LipSyncBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostV1LipSyncResponse:
        """
        Create a Lip Sync video. The estimated frame cost is calculated using 30 FPS. This amount is deducted from your account balance when a video is queued. Once the video is complete, the cost will be updated based on the actual number of frames rendered.

        Get more information about this mode at our [product page](/products/lip-sync).


        POST /v1/lip-sync
        """

        # start -- build request data
        _json = to_encodable(item=data, dump_with=params._SerializerPostV1LipSyncBody)
        # end -- build request data

        # start -- send sync request
        return self._base_client.request(
            method="POST",
            path="/v1/lip-sync",
            auth_names=["bearerAuth"],
            json=_json,
            cast_to=models.PostV1LipSyncResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request


class AsyncLipSyncClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources

    # register async api methods
    async def create(
        self,
        *,
        data: typing.Optional[params.PostV1LipSyncBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostV1LipSyncResponse:
        """
        Create a Lip Sync video. The estimated frame cost is calculated using 30 FPS. This amount is deducted from your account balance when a video is queued. Once the video is complete, the cost will be updated based on the actual number of frames rendered.

        Get more information about this mode at our [product page](/products/lip-sync).


        POST /v1/lip-sync
        """

        # start -- build request data
        _json = to_encodable(item=data, dump_with=params._SerializerPostV1LipSyncBody)
        # end -- build request data

        # start -- send async request
        return await self._base_client.request(
            method="POST",
            path="/v1/lip-sync",
            auth_names=["bearerAuth"],
            json=_json,
            cast_to=models.PostV1LipSyncResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request
