# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
import typing
from .path_info import PathInfo
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .general_request_info import GeneralRequestInfo
from .general_response_info import GeneralResponseInfo
from .version_enumerate_response_info import VersionEnumerateResponseInfo


class AttemptInfoUnion_MultiplePathsAttempt(UniversalBaseModel):
    type: typing.Literal["MultiplePathsAttempt"] = "MultiplePathsAttempt"
    paths: typing.Optional[typing.List[PathInfo]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class AttemptInfoUnion_GeneralAttempt(UniversalBaseModel):
    type: typing.Literal["GeneralAttempt"] = "GeneralAttempt"
    request: GeneralRequestInfo
    response: typing.Optional[GeneralResponseInfo] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class AttemptInfoUnion_VersionAttempt(UniversalBaseModel):
    type: typing.Literal["VersionAttempt"] = "VersionAttempt"
    request: GeneralRequestInfo
    response: typing.Optional[VersionEnumerateResponseInfo] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


AttemptInfoUnion = typing.Union[
    AttemptInfoUnion_MultiplePathsAttempt, AttemptInfoUnion_GeneralAttempt, AttemptInfoUnion_VersionAttempt
]
