import dspsim.framework


class Clock(Signal8):
    def __init__(self, period: float) -> None: ...

    @property
    def period(self) -> int: ...

class Context:
    def __init__(self, time_unit: float = 1e-09, time_precision: float = 1e-09) -> None: ...

    def exit_context(self) -> None: ...

    def set_timescale(self, time_unit: float, time_precision: float) -> None: ...

    @property
    def time_unit(self) -> float: ...

    @time_unit.setter
    def time_unit(self, time_unit: float) -> None: ...

    @property
    def time_precision(self) -> float: ...

    @time_precision.setter
    def time_precision(self, time_precision: float) -> None: ...

    @property
    def time_step(self) -> int: ...

    def time(self) -> int: ...

    def clear(self) -> None: ...

    def elaborate(self) -> None: ...

    @property
    def elaborate_done(self) -> bool: ...

    def eval(self) -> None: ...

    def advance(self, time_inc: int = 1) -> None: ...

    def own_model(self, model: Model) -> None: ...

    @property
    def models(self) -> list[Model]: ...

    def print_info(self) -> str: ...

class Dff16(Signal16):
    def __init__(self, clk: Signal8, initial: int = 0) -> None: ...

class Dff32(Signal32):
    def __init__(self, clk: Signal8, initial: int = 0) -> None: ...

class Dff64(Signal64):
    def __init__(self, clk: Signal8, initial: int = 0) -> None: ...

class Dff8(Signal8):
    def __init__(self, clk: Signal8, initial: int = 0) -> None: ...

class Model:
    def __init__(self) -> None: ...

    @property
    def context(self) -> Context: ...

    def eval_step(self) -> None: ...

    def eval_end_step(self) -> None: ...

    port_info: str = ...
    """(arg: object, /) -> str"""

class Signal16:
    def __init__(self, initial: int = 0) -> None: ...

    def posedge(self) -> bool: ...

    def negedge(self) -> bool: ...

    def changed(self) -> bool: ...

    @property
    def d(self) -> int: ...

    @d.setter
    def d(self, value: int) -> None: ...

    @property
    def q(self) -> int: ...

class Signal32:
    def __init__(self, initial: int = 0) -> None: ...

    def posedge(self) -> bool: ...

    def negedge(self) -> bool: ...

    def changed(self) -> bool: ...

    @property
    def d(self) -> int: ...

    @d.setter
    def d(self, value: int) -> None: ...

    @property
    def q(self) -> int: ...

class Signal64:
    def __init__(self, initial: int = 0) -> None: ...

    def posedge(self) -> bool: ...

    def negedge(self) -> bool: ...

    def changed(self) -> bool: ...

    @property
    def d(self) -> int: ...

    @d.setter
    def d(self, value: int) -> None: ...

    @property
    def q(self) -> int: ...

class Signal8:
    def __init__(self, initial: int = 0) -> None: ...

    def posedge(self) -> bool: ...

    def negedge(self) -> bool: ...

    def changed(self) -> bool: ...

    @property
    def d(self) -> int: ...

    @d.setter
    def d(self, value: int) -> None: ...

    @property
    def q(self) -> int: ...

def foo42() -> int: ...

def get_context() -> dspsim.framework.Context: ...

def hello_from_bin() -> str: ...

def reset_context() -> None: ...

def set_context(context: dspsim.framework.Context) -> None: ...
