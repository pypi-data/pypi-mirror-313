from collections.abc import Sequence


class AsyncSync:
    def __init__(self, clk: "dspsim::Signal<unsigned char>", d: "dspsim::Signal<unsigned int>", q: "dspsim::Signal<unsigned int>") -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    SYNC_STAGES: int = ...
    """(arg: object, /) -> int"""

    PIPELINE_STAGES: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str, levels: int = 99, options: int = 0) -> None: ...

class AsyncSync8:
    def __init__(self, clk: "dspsim::Signal<unsigned char>", d: "dspsim::Signal<unsigned char>", q: "dspsim::Signal<unsigned char>") -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    SYNC_STAGES: int = ...
    """(arg: object, /) -> int"""

    PIPELINE_STAGES: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str, levels: int = 99, options: int = 0) -> None: ...

class FifoAsync:
    def __init__(self, clka: "dspsim::Signal<unsigned char>", rsta: "dspsim::Signal<unsigned char>", s_axis_tdata: "dspsim::Signal<unsigned int>", s_axis_tvalid: "dspsim::Signal<unsigned char>", s_axis_tready: "dspsim::Signal<unsigned char>", s_axis_tid: "dspsim::Signal<unsigned char>", clkb: "dspsim::Signal<unsigned char>", rstb: "dspsim::Signal<unsigned char>", m_axis_tdata: "dspsim::Signal<unsigned int>", m_axis_tvalid: "dspsim::Signal<unsigned char>", m_axis_tready: "dspsim::Signal<unsigned char>", m_axis_tid: "dspsim::Signal<unsigned char>") -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    N: int = ...
    """(arg: object, /) -> int"""

    TIDW: int = ...
    """(arg: object, /) -> int"""

    INPUT_BUFFER: int = ...
    """(arg: object, /) -> int"""

    SYNC_STAGES: int = ...
    """(arg: object, /) -> int"""

    PIPELINE_STAGES: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str, levels: int = 99, options: int = 0) -> None: ...

class FifoAsync8:
    def __init__(self, clka: "dspsim::Signal<unsigned char>", rsta: "dspsim::Signal<unsigned char>", s_axis_tdata: "dspsim::Signal<unsigned char>", s_axis_tvalid: "dspsim::Signal<unsigned char>", s_axis_tready: "dspsim::Signal<unsigned char>", s_axis_tid: "dspsim::Signal<unsigned char>", clkb: "dspsim::Signal<unsigned char>", rstb: "dspsim::Signal<unsigned char>", m_axis_tdata: "dspsim::Signal<unsigned char>", m_axis_tvalid: "dspsim::Signal<unsigned char>", m_axis_tready: "dspsim::Signal<unsigned char>", m_axis_tid: "dspsim::Signal<unsigned char>") -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    N: int = ...
    """(arg: object, /) -> int"""

    TIDW: int = ...
    """(arg: object, /) -> int"""

    INPUT_BUFFER: int = ...
    """(arg: object, /) -> int"""

    SYNC_STAGES: int = ...
    """(arg: object, /) -> int"""

    PIPELINE_STAGES: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str, levels: int = 99, options: int = 0) -> None: ...

class FifoSync:
    def __init__(self, clk: "dspsim::Signal<unsigned char>", rst: "dspsim::Signal<unsigned char>", s_axis_tdata: "dspsim::Signal<unsigned int>", s_axis_tvalid: "dspsim::Signal<unsigned char>", s_axis_tready: "dspsim::Signal<unsigned char>", s_axis_tid: "dspsim::Signal<unsigned char>", m_axis_tdata: "dspsim::Signal<unsigned int>", m_axis_tvalid: "dspsim::Signal<unsigned char>", m_axis_tready: "dspsim::Signal<unsigned char>", m_axis_tid: "dspsim::Signal<unsigned char>") -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    N: int = ...
    """(arg: object, /) -> int"""

    TIDW: int = ...
    """(arg: object, /) -> int"""

    USE_INPUT_BUFFER: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str, levels: int = 99, options: int = 0) -> None: ...

class Foo:
    def __init__(self, clk: "dspsim::Signal<unsigned char>", rst: "dspsim::Signal<unsigned char>", x: "dspsim::Signal<unsigned int>", y: "dspsim::Signal<unsigned int>") -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    AW: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str, levels: int = 99, options: int = 0) -> None: ...

class Gain:
    def __init__(self, clk: "dspsim::Signal<unsigned char>", rst: "dspsim::Signal<unsigned char>", s_axis_tdata: "dspsim::Signal<unsigned int>", s_axis_tvalid: "dspsim::Signal<unsigned char>", s_axis_tready: "dspsim::Signal<unsigned char>", m_axis_tdata: "dspsim::Signal<unsigned int>", m_axis_tvalid: "dspsim::Signal<unsigned char>", m_axis_tready: "dspsim::Signal<unsigned char>", gain: "dspsim::Signal<unsigned int>") -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    COEFW: int = ...
    """(arg: object, /) -> int"""

    COEFQ: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str, levels: int = 99, options: int = 0) -> None: ...

class I2SClkGen:
    def __init__(self, clk: "dspsim::Signal<unsigned char>", rst: "dspsim::Signal<unsigned char>", lrclk: "dspsim::Signal<unsigned char>", sclk: "dspsim::Signal<unsigned char>") -> None: ...

    MCLK_LRCLK: int = ...
    """(arg: object, /) -> int"""

    MCLK_SCLK: int = ...
    """(arg: object, /) -> int"""

    LRCLK_INIT: int = ...
    """(arg: object, /) -> int"""

    SCLK_INIT: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str, levels: int = 99, options: int = 0) -> None: ...

class I2SRx:
    def __init__(self, clk: "dspsim::Signal<unsigned char>", rst: "dspsim::Signal<unsigned char>", m_axis_tdata: "dspsim::Signal<unsigned int>", m_axis_tvalid: "dspsim::Signal<unsigned char>", m_axis_tready: "dspsim::Signal<unsigned char>", m_axis_tid: "dspsim::Signal<unsigned char>", lrclk: "dspsim::Signal<unsigned char>", sclk: "dspsim::Signal<unsigned char>", sdi: "dspsim::Signal<unsigned char>") -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str, levels: int = 99, options: int = 0) -> None: ...

class I2STx:
    def __init__(self, clk: "dspsim::Signal<unsigned char>", rst: "dspsim::Signal<unsigned char>", s_axis_tdata: "dspsim::Signal<unsigned int>", s_axis_tvalid: "dspsim::Signal<unsigned char>", s_axis_tready: "dspsim::Signal<unsigned char>", s_axis_tid: "dspsim::Signal<unsigned char>", lrclk: "dspsim::Signal<unsigned char>", sclk: "dspsim::Signal<unsigned char>", sdo: "dspsim::Signal<unsigned char>") -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    USE_INPUT_BUFFER: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str, levels: int = 99, options: int = 0) -> None: ...

class Skid:
    def __init__(self, clk: "dspsim::Signal<unsigned char>", rst: "dspsim::Signal<unsigned char>", s_axis_tdata: "dspsim::Signal<unsigned int>", s_axis_tvalid: "dspsim::Signal<unsigned char>", s_axis_tready: "dspsim::Signal<unsigned char>", m_axis_tdata: "dspsim::Signal<unsigned int>", m_axis_tvalid: "dspsim::Signal<unsigned char>", m_axis_tready: "dspsim::Signal<unsigned char>") -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str, levels: int = 99, options: int = 0) -> None: ...

class SomeModel:
    def __init__(self, clk: "dspsim::Signal<unsigned char>", rst: "dspsim::Signal<unsigned char>", x: "dspsim::Signal<unsigned int>", y: "dspsim::Signal<unsigned int>", c: Sequence["dspsim::Signal<unsigned int>"], d: Sequence[Sequence["dspsim::Signal<unsigned int>"]], e: Sequence[Sequence["dspsim::Signal<unsigned int>"]]) -> None: ...

    DW: int = ...
    """(arg: object, /) -> int"""

    COEFW: int = ...
    """(arg: object, /) -> int"""

    AW: int = ...
    """(arg: object, /) -> int"""

    X: int = ...
    """(arg: object, /) -> int"""

    BB: int = ...
    """(arg: object, /) -> int"""

    FP: float = ...
    """(arg: object, /) -> float"""

    SP: str = ...
    """(arg: object, /) -> str"""

    TRICK: str = ...
    """(arg: object, /) -> str"""

    IARR: list[int] = ...
    """(arg: object, /) -> list[int]"""

    SARR: list[str] = ...
    """(arg: object, /) -> list[str]"""

    IMAT: list[list[int]] = ...
    """(arg: object, /) -> list[list[int]]"""

    SMAT: list[list[list[str]]] = ...
    """(arg: object, /) -> list[list[list[str]]]"""

    NC: int = ...
    """(arg: object, /) -> int"""

    ND: int = ...
    """(arg: object, /) -> int"""

    MD: int = ...
    """(arg: object, /) -> int"""

    NE: int = ...
    """(arg: object, /) -> int"""

    ME: int = ...
    """(arg: object, /) -> int"""

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str, levels: int = 99, options: int = 0) -> None: ...

class X:
    def __init__(self) -> None: ...

    port_info: str = ...
    """(arg: object, /) -> str"""

    def trace(self, trace_path: str, levels: int = 99, options: int = 0) -> None: ...
