import argparse
import base64
import importlib
import os
import pathlib
import sys

from ascend.sdk import definitions, field, value
from ascend.sdk.applier import DataServiceApplier
from ascend.sdk.client import Client

{% for mod in proto_mods %}
import ascend.protos.{{mod}}.{{mod}}_pb2 as {{mod}}
{% endfor %}

{% for gmod, cls in gmod_classes %}
from {{gmod}} import {{cls}}
{% endfor %}

# Ensure we can load python files in our sub-directories
DIR = os.path.dirname(os.path.abspath(__file__))
sys.path.append(DIR)


def construct_data_service(data_service_id: str):
  # Credentials for this data service
  credentials = []
  {% for credential in data_service.credentials %}
  {% set cred_var = "credential_" + (credential.id | replace("-", "_")) %}

  {{cred_var}} = {{ renderer(credential, classname_map=classname_map, template_dir=template_dir) | indent(2) }}
  credentials.append({{cred_var}})
  {% endfor %}


  # Connections for this data service
  connections = []
  {% for connection in data_service.connections %}
  {% set conn_var = "connection_" + (connection.id | replace("-", "_")) %}

  {% set attribute_overrides = extract_inline_code(connection, os.path.join(base_path, 'shared_lib'), base_path) %}
  {{conn_var}} = {{ renderer(connection, classname_map=classname_map, attribute_overrides=attribute_overrides, template_dir=template_dir) | indent(2) }}
  connections.append({{conn_var}})
  {% endfor %}


  # Dynamically load dataflows for this data service by looking for sub directories with dataflows.
  # If you prefer to load specific Dataflows, you can remove this section and add specific imports like
  #
  # from Foo import dataflow as dataflow_Foo
  # dataflows.append(dataflow_Foo.construct_dataflow(data_service_id))
  dataflows = []
  for data_flow_id in os.listdir(DIR):
    file = os.path.join(DIR, data_flow_id, f"{data_flow_id}.py")
    if os.path.exists(file):
      spec = importlib.util.spec_from_file_location("local", file)
      module_d = importlib.util.module_from_spec(spec)
      spec.loader.exec_module(module_d)
      dataflows.append(module_d.construct_dataflow(data_flow_id))
  {% for dataflow in data_service.dataflows %}
  {% do write_dataflow(hostname, data_service.id, dataflow, os.path.join(base_path, dataflow.id), template_dir) %}
  {% endfor %}

  # Data service
  {% set attribute_overrides = {
        ("credentials",): "credentials",
        ("connections",): "connections",
        ("dataflows",): "dataflows",
        ("id",): "data_service_id",
        ("name",): "data_service_id",
      }
  %}
  return {{ renderer(data_service, classname_map=classname_map, attribute_overrides=attribute_overrides, template_dir=template_dir) | indent(2) }}
