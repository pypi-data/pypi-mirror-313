from maquinas.exceptions import *
from maquinas.regular import dfa

m=dfa.DeterministicFiniteAutomaton(
        Q=['q_0','q_1'],
        sigma=['a','b'],
        q_0='q_0',
        A=['q_0'],
        delta=[
            (('q_0','a'),set(['q_0'])),
            (('q_1','b'),set(['q_0'])),
            (('q_1','a'),set(['q_1'])),
            (('q_0','b'),set(['q_1'])),
        ]
    )

def test_bespares_af():
    """Test if bespares was correctly generated by DFA"""
    assert len(m.Q)==2
    assert len(m.sigma)==2
    assert m.q_0=='q_0'
    assert len(m.A)==1
    assert len(m.ttable)==2

def test_bespares_accepted():
    """Test valid strings for pair of bes by DFA"""
    assert m.accepts("a")
    assert m.accepts("abb")
    assert m.accepts("aaabab")
    assert m.accepts("aaababaaaa")
    assert m.accepts("aaababaaaabbaaaabaaaaaabaa")

def test_bespares_rejected():
    """Test invalid strings for pair of bs by DFA"""
    assert m.accepts("b")==False
    assert m.accepts("ab")==False
    assert m.accepts("abbb")==False
    assert m.accepts("aababab")==False
    assert m.accepts("aaababaaaba")==False
    assert m.accepts("baaababaaaabbaaaabaaaaaabaa")==False

def test_bespares_properties():
    """Test propierties for pair of bs by DFA"""
    assert len(m.reachable_states())==2
    assert len(m.unreachable_states())==0
