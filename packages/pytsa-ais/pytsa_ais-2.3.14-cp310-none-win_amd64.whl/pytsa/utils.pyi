from __future__ import annotations
from datetime import datetime
from io import TextIOWrapper
from pathlib import Path
from typing import Callable, Generator, Any
import numpy as np
import pandas as pd
import multiprocessing as mp

DateRange = tuple[datetime, datetime]

def haversine(lon1: float, lat1: float, lon2: float, lat2: float, miles: bool = True) -> float: ...

def m2nm(m: float) -> float: ...

def nm2m(nm: float) -> float: ...

def s2h(s: float) -> float: ...

def mi2nm(mi: float) -> float: ...

def vincenty(lon1: float, lat1: float, lon2: float, lat2: float, miles: bool = True) -> float: ...

def greater_circle_distance(lon1: float, lat1: float, lon2: float, lat2: float, miles: bool = True, method: str = "haversine") -> float: ...

def heading_change(h1: float, h2: float) -> float: ...

def dms2dd(degrees: float, minutes: float, seconds: float) -> float: ...

class DataLoader:
    nfrac: int
    ENGINE: str
    dynamic_columns: list[str]
    static_columns: list[str]

    def __init__(self, 
                 dynamic_paths: list[Path],
                 static_paths: list[Path],
                 date_range: DateRange,
                 pre_processor: Callable[[pd.DataFrame],pd.DataFrame],
                 spatial_filter: str) -> None: ...
    
    @staticmethod
    def _date_transformer(datefile: Path) -> datetime: ...

    @staticmethod
    def align_data_files(dyn: list[Path], 
                         stat: list[Path],
                         range: DateRange = None
                         ) -> tuple[list[Path], list[Path]]: ...
    
    def _dynamic_preprocessor(self, df: pd.DataFrame) -> pd.DataFrame: ...

    def get_file(self) -> Generator[tuple[Path, Path], None, None]: ...

    def calculate_nrows(self, filehandle: TextIOWrapper) -> int: ...

    def get_header(self, filehandle: TextIOWrapper) -> str: ...

    def _get_column_idices(self, header: str, columns: list[str]) -> list[int]: ...

    def _read_chunk(self,
                    fp: Path, 
                    start_row: int, 
                    rows_to_load: int, 
                    queue: mp.Queue,
                    col_idxs: list[int],
                    timestamp_col: int,
                    column_names: list[str],
                    preprocessor: Callable[[pd.DataFrame], pd.DataFrame]) -> None: ...

    def prepare_shared_array(self,                               
                            file: Path,
                            column_names: list[str],
                            njobs: int,
                            info: str) -> tuple[mp.Array, tuple[int,int], int]: ...

    def from_raw(self, raw_dyn: Path, raw_stat: Path) -> tuple[pd.DataFrame, pd.DataFrame]: ...
        
    def load_all(self) -> None: ...

class Loader:
    def __init__(self, bb: Any) -> None: ...
    def start(self) -> Loader: ...
    def _animate(self) -> None: ...
    def __enter__(self) -> Loader: ...
    def stop(self) -> None: ...
    def __exit__(self, exc_type: Any, exc_value: Any, tb: Any) -> None: ...

class MemoryLoader:
    def __init__(self) -> None: ...
    def start(self) -> MemoryLoader: ...
    def _show_memory_usage(self) -> None: ...
    def __enter__(self) -> MemoryLoader: ...
    def stop(self) -> None: ...
    def __exit__(self, exc_type: Any, exc_value: Any, tb: Any) -> None: ...
