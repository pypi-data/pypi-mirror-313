Metadata-Version: 2.1
Name: rangy
Version: 1.0.0.post1
Summary: rangy helps you with the efficience of shell scripts in Python.
Author-email: Arthur Debert <arthur@debert.xyz>
License: MIT
Project-URL: Homepage, https://github.com/arthur-debert/rangy
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: dateutils==0.6.12
Provides-Extra: dev
Requires-Dist: build==1.2.2.post1; extra == "dev"
Requires-Dist: asttokens==2.4.1; extra == "dev"
Requires-Dist: certifi==2024.6.2; extra == "dev"
Requires-Dist: coverage==7.6.1; extra == "dev"
Requires-Dist: decorator==5.1.1; extra == "dev"
Requires-Dist: executing==2.1.0; extra == "dev"
Requires-Dist: iniconfig==2.0.0; extra == "dev"
Requires-Dist: ipython>=7.0.0; extra == "dev"
Requires-Dist: jedi==0.19.1; extra == "dev"
Requires-Dist: matplotlib-inline==0.1.7; extra == "dev"
Requires-Dist: packaging==24.1; extra == "dev"
Requires-Dist: parso==0.8.4; extra == "dev"
Requires-Dist: pexpect==4.9.0; extra == "dev"
Requires-Dist: pluggy==1.5.0; extra == "dev"
Requires-Dist: prompt_toolkit==3.0.48; extra == "dev"
Requires-Dist: ptyprocess==0.7.0; extra == "dev"
Requires-Dist: pure_eval==0.2.3; extra == "dev"
Requires-Dist: pyfakefs==5.7.1; extra == "dev"
Requires-Dist: Pygments==2.18.0; extra == "dev"
Requires-Dist: pytest==8.3.3; extra == "dev"
Requires-Dist: pytest-cov==6.0.0; extra == "dev"
Requires-Dist: python-dotenv==1.0.1; extra == "dev"
Requires-Dist: setuptools==75.3.0; extra == "dev"
Requires-Dist: six==1.16.0; extra == "dev"
Requires-Dist: stack-data==0.6.3; extra == "dev"
Requires-Dist: traitlets==5.14.3; extra == "dev"
Requires-Dist: wcwidth==0.2.13; extra == "dev"
Requires-Dist: pytest-xdist==3.6.1; extra == "dev"
Requires-Dist: twine==6.0.1; extra == "dev"
Requires-Dist: toml; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx-rtd-theme==3.0.2; extra == "docs"
Requires-Dist: sphinxcontrib-applehelp==2.0.0; extra == "docs"
Requires-Dist: sphinxcontrib-devhelp==2.0.0; extra == "docs"
Requires-Dist: sphinxcontrib-htmlhelp==2.1.0; extra == "docs"
Requires-Dist: sphinxcontrib-jquery==4.1; extra == "docs"
Requires-Dist: sphinxcontrib-jsmath==1.0.1; extra == "docs"
Requires-Dist: sphinxcontrib-qthelp==2.0.0; extra == "docs"
Requires-Dist: sphinxcontrib-serializinghtml==2.0.0; extra == "docs"
Requires-Dist: rstcheck==6.2.4; extra == "docs"
Requires-Dist: rstcheck-core==1.2.1; extra == "docs"
Requires-Dist: doc8==1.1.2; extra == "docs"

# rangy

Rangy is a small but feisty python lib designed to make working with numerical ranges a breeze. It handles both open and closed ranges, provides algorithms for distributing items across ranges, and allows you to treat ranges like numbers in comparisons (e.g., `if x < myrange`).

Full docs at [Rangy Documentation](https://rangy.readthedocs.io/en/latest/index.html).

## Features

* **Expressive Range Definitions:** Define counts as exact values (`4`), ranges (`"2-4"`, `"2-*"`, `"+"`), or unbounded (`"*"`).
* **Intuitive Comparisons:** Compare Rangy objects with integers using standard comparison operators (e.g., `<`, `<=`, `>`, `>=`, `==`, `!=`).
* **Membership Testing:** Check if an integer falls within a Rangy's defined range using the `in` operator.
* **Easy Validation:** Validate if a given count satisfies a Rangy's specification with the `.validate()` method.
* **Clear Value Access:** Use `.value` for exact counts and `.values` for ranges.
* **Intelligent Distribution (via `distribute` function):** Distribute a list of items into sublists according to a set of Rangy specifications, handling both pre-segmented and dynamically divided lists.

## Installation

You can install rangy using pip:

```bash
pip install rangy
```

## Usage

### Defining Rangy Objects

```python
from rangy import Rangy

# Exact count
exact_count = Rangy(4)  # or Rangy("4")

# Range count
range_count = Rangy("2-4")  # or Rangy((2, 4)) or Rangy(("2", "4"))

# Unbounded count (any non-negative integer)
any_count = Rangy("*")

# Unbounded count (at least one)
at_least_one = Rangy("+")

# Open-ended range
open_range = Rangy("2-*") # 2 or more
```

### Comparison and Validation

```python
count = Rangy("1-3")

print(2 in count)  # True
print(4 in count)  # False

print(count.validate(2))  # True
print(count.validate(0))  # False

print(count < 4)  # True (compares against the maximum value of the range)

print(count == 2) # False - the equality against an integer checks if rangy covers only that integer.
print(count == Rangy("1-3")) # True

```

### Distributing Items with distribute

```python
from rangy import Rangy, distribute

items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
counts = [Rangy(1), Rangy("2-4"), Rangy("*")]

result = distribute(items, counts)
print(result)  # Output: [[1], [2, 3, 4], [5, 6, 7, 8, 9, 10]]


items_with_separator = [1, 2, "--", 3, 4, 5, 6, "--", 7, 8, 9, 10]
counts_with_separator = [Rangy("1-2"), Rangy("4-6"), Rangy("2-5")]

result_with_separator = distribute(items_with_separator, counts_with_separator)
print(result_with_separator)  # Output: [[1, 2], [3, 4, 5, 6], [7, 8, 9, 10]]


```

## Contributing

Contributions are welcome! Please feel free to open issues or submit pull requests.

Tests are done with [pytest](https://github.com/pytest-dev/pytest), makers of happy lives.

### License

[MIT License][def]

[def]: ./LICENSE
