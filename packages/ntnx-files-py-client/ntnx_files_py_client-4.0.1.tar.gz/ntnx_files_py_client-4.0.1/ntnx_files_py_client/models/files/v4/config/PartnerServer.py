# coding: utf-8


"""
IGNORE:
    Nutanix Files APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_files_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.BackupServerConfig import BackupServerConfig  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.PartnerType import PartnerType  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.VendorProperties import VendorProperties  # noqa: F401,E501

class PartnerServer(ExternalizableAbstractModel):

    """Partner server model.

    :param description: (:attr:`description`) Partner server details or any third-party vendors to register the server with AFS.
    :type description: 
     max=180 chars
    
    :param vendor_name: (:attr:`vendor_name`) Vendor name of the partner server. For partner type ANTIVIRUS, vendor name denotes the icapServiceName.
    :type vendor_name: required
     max=256 chars
    
    :param name: (:attr:`name`) Partner server name.
    :type name: required
     max=64 chars
    
    :param partner_type: (:attr:`partner_type`) 
    :type partner_type: required
    
    
    :param vendor_properties: (:attr:`vendor_properties`) 
    :type vendor_properties: 
    
    
    :param backup_server_config: (:attr:`backup_server_config`) 
    :type backup_server_config: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'description': 'str',
        'vendor_name': 'str',
        'name': 'str',
        'partner_type': 'files.v4.config.PartnerType',
        'vendor_properties': 'files.v4.config.VendorProperties',
        'backup_server_config': 'files.v4.config.BackupServerConfig',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'description': 'description',
        'vendor_name': 'vendorName',
        'name': 'name',
        'partner_type': 'partnerType',
        'vendor_properties': 'vendorProperties',
        'backup_server_config': 'backupServerConfig',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, description=None, vendor_name=None, name=None, partner_type=None, vendor_properties=None, backup_server_config=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__description = None
        self.__vendor_name = None
        self.__name = None
        self.__partner_type = None
        self.__vendor_properties = None
        self.__backup_server_config = None
        self.discriminator = None
        if description is not None:
            self.__description = description
        self.__vendor_name = vendor_name
        self.__name = name
        self.__partner_type = partner_type
        if vendor_properties is not None:
            self.__vendor_properties = vendor_properties
        if backup_server_config is not None:
            self.__backup_server_config = backup_server_config

    def _initialize_object_type(self):
        return 'files.v4.config.PartnerServer'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def description(self):
        """
        Partner server details or any third-party vendors to register the server with AFS.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 180:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `180`")  # noqa: E501

        self.__description = description

    @property
    def vendor_name(self):
        """
        Vendor name of the partner server. For partner type ANTIVIRUS, vendor name denotes the icapServiceName.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__vendor_name

    @vendor_name.setter
    def vendor_name(self, vendor_name):
        if vendor_name is None:
            raise ValueError("Invalid value for `vendor_name`, must not be `None`")  # noqa: E501
        if vendor_name is not None and len(vendor_name) > 256:
            raise ValueError("Invalid value for `vendor_name`, length must be less than or equal to `256`")  # noqa: E501

        self.__vendor_name = vendor_name

    @property
    def name(self):
        """
        Partner server name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501

        self.__name = name

    @property
    def partner_type(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.PartnerType`
        """  # noqa: E501
        return self.__partner_type

    @partner_type.setter
    def partner_type(self, partner_type):
        if partner_type is None:
            raise ValueError("Invalid value for `partner_type`, must not be `None`")  # noqa: E501

        self.__partner_type = partner_type

    @property
    def vendor_properties(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.VendorProperties`
        """  # noqa: E501
        return self.__vendor_properties

    @vendor_properties.setter
    def vendor_properties(self, vendor_properties):

        self.__vendor_properties = vendor_properties

    @property
    def backup_server_config(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.BackupServerConfig`
        """  # noqa: E501
        return self.__backup_server_config

    @backup_server_config.setter
    def backup_server_config(self, backup_server_config):

        self.__backup_server_config = backup_server_config

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(PartnerServer, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartnerServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

