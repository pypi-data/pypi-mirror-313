# coding: utf-8


"""
IGNORE:
    Nutanix Files APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_files_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

class InfectedFile(ExternalizableAbstractModel):

    """Infected files model

    :param mount_target_ext_id: (:attr:`mount_target_ext_id`) The external identifier of the mount target where infected file belongs to. Example:9c1e537d-6777-4c22-5d41-ddd0c3337aa9.
    :type mount_target_ext_id: 
    
    
    :param path: (:attr:`path`) Path of infected file
    :type path: 
     max=4095 chars
    
    :param threat_description: (:attr:`threat_description`) Threat details for infected file
    :type threat_description: 
     max=180 chars
    
    :param scan_time: (:attr:`scan_time`) Scan timestamp of infected file. This is a read-only field.
    :type scan_time: 
    
    
    :param partner_server: (:attr:`partner_server`) Partner server details.
    :type partner_server: 
     max=2048 chars
    
    :param is_quarantined: (:attr:`is_quarantined`) Quarantine status of infected files.
    :type is_quarantined: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'mount_target_ext_id': 'str',
        'path': 'str',
        'threat_description': 'str',
        'scan_time': 'datetime',
        'partner_server': 'str',
        'is_quarantined': 'bool',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'mount_target_ext_id': 'mountTargetExtId',
        'path': 'path',
        'threat_description': 'threatDescription',
        'scan_time': 'scanTime',
        'partner_server': 'partnerServer',
        'is_quarantined': 'isQuarantined',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, mount_target_ext_id=None, path=None, threat_description=None, scan_time=None, partner_server=None, is_quarantined=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__mount_target_ext_id = None
        self.__path = None
        self.__threat_description = None
        self.__scan_time = None
        self.__partner_server = None
        self.__is_quarantined = None
        self.discriminator = None
        if mount_target_ext_id is not None:
            self.__mount_target_ext_id = mount_target_ext_id
        if path is not None:
            self.__path = path
        if threat_description is not None:
            self.__threat_description = threat_description
        if scan_time is not None:
            self.__scan_time = scan_time
        if partner_server is not None:
            self.__partner_server = partner_server
        if is_quarantined is not None:
            self.__is_quarantined = is_quarantined

    def _initialize_object_type(self):
        return 'files.v4.config.InfectedFile'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def mount_target_ext_id(self):
        """
        The external identifier of the mount target where infected file belongs to. Example:9c1e537d-6777-4c22-5d41-ddd0c3337aa9.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__mount_target_ext_id

    @mount_target_ext_id.setter
    def mount_target_ext_id(self, mount_target_ext_id):
        if mount_target_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', mount_target_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `mount_target_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__mount_target_ext_id = mount_target_ext_id

    @property
    def path(self):
        """
        Path of infected file

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__path

    @path.setter
    def path(self, path):
        if path is not None and len(path) > 4095:
            raise ValueError("Invalid value for `path`, length must be less than or equal to `4095`")  # noqa: E501

        self.__path = path

    @property
    def threat_description(self):
        """
        Threat details for infected file

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__threat_description

    @threat_description.setter
    def threat_description(self, threat_description):
        if threat_description is not None and len(threat_description) > 180:
            raise ValueError("Invalid value for `threat_description`, length must be less than or equal to `180`")  # noqa: E501

        self.__threat_description = threat_description

    @property
    def scan_time(self):
        """
        Scan timestamp of infected file. This is a read-only field.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__scan_time

    @scan_time.setter
    def scan_time(self, scan_time):

        self.__scan_time = scan_time

    @property
    def partner_server(self):
        """
        Partner server details.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__partner_server

    @partner_server.setter
    def partner_server(self, partner_server):
        if partner_server is not None and len(partner_server) > 2048:
            raise ValueError("Invalid value for `partner_server`, length must be less than or equal to `2048`")  # noqa: E501

        self.__partner_server = partner_server

    @property
    def is_quarantined(self):
        """
        Quarantine status of infected files.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_quarantined

    @is_quarantined.setter
    def is_quarantined(self, is_quarantined):

        self.__is_quarantined = is_quarantined

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(InfectedFile, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InfectedFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

