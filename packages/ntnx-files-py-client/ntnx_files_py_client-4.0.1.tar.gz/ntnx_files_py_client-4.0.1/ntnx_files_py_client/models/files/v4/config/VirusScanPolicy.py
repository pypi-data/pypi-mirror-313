# coding: utf-8


"""
IGNORE:
    Nutanix Files APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_files_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

class VirusScanPolicy(ExternalizableAbstractModel):

    """Antivirus server scan policy information.

    :param scan_timeout_interval_secs: (:attr:`scan_timeout_interval_secs`) Time interval to complete the scan. If it is not completed within the specified time, the request is timed out and the default action is taken.
    :type scan_timeout_interval_secs: 
    
     min=0,
    :param is_scan_on_write_enabled: (:attr:`is_scan_on_write_enabled`) Scan file for presence of virus during write. (**Default** True)
    :type is_scan_on_write_enabled: 
    
    
    :param is_scan_on_read_enabled: (:attr:`is_scan_on_read_enabled`) Scan file for presence of virus during read. (**Default** True)
    :type is_scan_on_read_enabled: 
    
    
    :param max_file_size_threshold_bytes: (:attr:`max_file_size_threshold_bytes`) Maximum file size in bytes for which file scan is allowed.
    :type max_file_size_threshold_bytes: 
    
     min=0,
    :param is_file_access_blocked: (:attr:`is_file_access_blocked`) Indicates if the file access needs to be blocked for the current policy. (**Default** False)
    :type is_file_access_blocked: 
    
    
    :param is_anti_virus_enabled: (:attr:`is_anti_virus_enabled`) Indicates if the antivirus server is enabled for the current policy. (**Default** True)
    :type is_anti_virus_enabled: 
    
    
    :param excluded_file_extensions: (:attr:`excluded_file_extensions`) Files with extension in the listed ones will be excluded during antivirus scan.
    :type excluded_file_extensions: 
    
    
    :param mount_target_reference: (:attr:`mount_target_reference`) The external identifier of the mount target under which the virus scan policy is being created. This field will be set to null if it is a global policy.
    :type mount_target_reference: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'scan_timeout_interval_secs': 'int',
        'is_scan_on_write_enabled': 'bool',
        'is_scan_on_read_enabled': 'bool',
        'max_file_size_threshold_bytes': 'int',
        'is_file_access_blocked': 'bool',
        'is_anti_virus_enabled': 'bool',
        'excluded_file_extensions': 'list[str]',
        'mount_target_reference': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'scan_timeout_interval_secs': 'scanTimeoutIntervalSecs',
        'is_scan_on_write_enabled': 'isScanOnWriteEnabled',
        'is_scan_on_read_enabled': 'isScanOnReadEnabled',
        'max_file_size_threshold_bytes': 'maxFileSizeThresholdBytes',
        'is_file_access_blocked': 'isFileAccessBlocked',
        'is_anti_virus_enabled': 'isAntiVirusEnabled',
        'excluded_file_extensions': 'excludedFileExtensions',
        'mount_target_reference': 'mountTargetReference',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, scan_timeout_interval_secs=None, is_scan_on_write_enabled=True, is_scan_on_read_enabled=True, max_file_size_threshold_bytes=None, is_file_access_blocked=False, is_anti_virus_enabled=True, excluded_file_extensions=None, mount_target_reference=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__scan_timeout_interval_secs = None
        self.__is_scan_on_write_enabled = None
        self.__is_scan_on_read_enabled = None
        self.__max_file_size_threshold_bytes = None
        self.__is_file_access_blocked = None
        self.__is_anti_virus_enabled = None
        self.__excluded_file_extensions = None
        self.__mount_target_reference = None
        self.discriminator = None
        if scan_timeout_interval_secs is not None:
            self.__scan_timeout_interval_secs = scan_timeout_interval_secs
        if is_scan_on_write_enabled is not None:
            self.__is_scan_on_write_enabled = is_scan_on_write_enabled
        if is_scan_on_read_enabled is not None:
            self.__is_scan_on_read_enabled = is_scan_on_read_enabled
        if max_file_size_threshold_bytes is not None:
            self.__max_file_size_threshold_bytes = max_file_size_threshold_bytes
        if is_file_access_blocked is not None:
            self.__is_file_access_blocked = is_file_access_blocked
        if is_anti_virus_enabled is not None:
            self.__is_anti_virus_enabled = is_anti_virus_enabled
        if excluded_file_extensions is not None:
            self.__excluded_file_extensions = excluded_file_extensions
        if mount_target_reference is not None:
            self.__mount_target_reference = mount_target_reference

    def _initialize_object_type(self):
        return 'files.v4.config.VirusScanPolicy'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def scan_timeout_interval_secs(self):
        """
        Time interval to complete the scan. If it is not completed within the specified time, the request is timed out and the default action is taken.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__scan_timeout_interval_secs

    @scan_timeout_interval_secs.setter
    def scan_timeout_interval_secs(self, scan_timeout_interval_secs):
        if scan_timeout_interval_secs is not None and scan_timeout_interval_secs < 0:  # noqa: E501
            raise ValueError("Invalid value for `scan_timeout_interval_secs`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__scan_timeout_interval_secs = scan_timeout_interval_secs

    @property
    def is_scan_on_write_enabled(self):
        """
        Scan file for presence of virus during write.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_scan_on_write_enabled

    @is_scan_on_write_enabled.setter
    def is_scan_on_write_enabled(self, is_scan_on_write_enabled):

        self.__is_scan_on_write_enabled = is_scan_on_write_enabled

    @property
    def is_scan_on_read_enabled(self):
        """
        Scan file for presence of virus during read.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_scan_on_read_enabled

    @is_scan_on_read_enabled.setter
    def is_scan_on_read_enabled(self, is_scan_on_read_enabled):

        self.__is_scan_on_read_enabled = is_scan_on_read_enabled

    @property
    def max_file_size_threshold_bytes(self):
        """
        Maximum file size in bytes for which file scan is allowed.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__max_file_size_threshold_bytes

    @max_file_size_threshold_bytes.setter
    def max_file_size_threshold_bytes(self, max_file_size_threshold_bytes):
        if max_file_size_threshold_bytes is not None and max_file_size_threshold_bytes < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_file_size_threshold_bytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__max_file_size_threshold_bytes = max_file_size_threshold_bytes

    @property
    def is_file_access_blocked(self):
        """
        Indicates if the file access needs to be blocked for the current policy.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_file_access_blocked

    @is_file_access_blocked.setter
    def is_file_access_blocked(self, is_file_access_blocked):

        self.__is_file_access_blocked = is_file_access_blocked

    @property
    def is_anti_virus_enabled(self):
        """
        Indicates if the antivirus server is enabled for the current policy.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_anti_virus_enabled

    @is_anti_virus_enabled.setter
    def is_anti_virus_enabled(self, is_anti_virus_enabled):

        self.__is_anti_virus_enabled = is_anti_virus_enabled

    @property
    def excluded_file_extensions(self):
        """
        Files with extension in the listed ones will be excluded during antivirus scan.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__excluded_file_extensions

    @excluded_file_extensions.setter
    def excluded_file_extensions(self, excluded_file_extensions):

        self.__excluded_file_extensions = excluded_file_extensions

    @property
    def mount_target_reference(self):
        """
        The external identifier of the mount target under which the virus scan policy is being created. This field will be set to null if it is a global policy.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__mount_target_reference

    @mount_target_reference.setter
    def mount_target_reference(self, mount_target_reference):
        if mount_target_reference is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', mount_target_reference):  # noqa: E501
            raise ValueError(r"Invalid value for `mount_target_reference`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__mount_target_reference = mount_target_reference

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VirusScanPolicy, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirusScanPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

