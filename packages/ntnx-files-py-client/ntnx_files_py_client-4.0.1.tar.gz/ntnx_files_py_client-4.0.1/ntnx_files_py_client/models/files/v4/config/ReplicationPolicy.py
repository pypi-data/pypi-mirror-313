# coding: utf-8


"""
IGNORE:
    Nutanix Files APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_files_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.OwnershipSpec import OwnershipSpec  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.PolicyStatus import PolicyStatus  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.ReplicationConfiguration import ReplicationConfiguration  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.ReplicationPolicyType import ReplicationPolicyType  # noqa: F401,E501

class ReplicationPolicy(ExternalizableAbstractModel):

    """Replication policy model.

    :param name: (:attr:`name`) Name of the replication policy.
    :type name: required
     min=1 chars, max=64 chars
    
    :param description: (:attr:`description`) Replication policy description.
    :type description: 
     max=180 chars
    
    :param type: (:attr:`type`) 
    :type type: required
    
    
    :param replication_configurations: (:attr:`replication_configurations`) Replication configuration represents combination of file server entities involved in the replication policy, schedules, policy status and replication summary status. For `SMART_DR` the system supports a single replication configuration object per replication policy. For `DATA_SYNC` or `VDI_SYNC`, replicationConfigurations are allowed between 1 and 10. Note that in `VDI_SYNC`, the primary file server of the first replication entity is the preferred file server for replication.
    :type replication_configurations: required
    
    
    :param status: (:attr:`status`) 
    :type status: 
    
    
    :param should_include_new_mount_targets: (:attr:`should_include_new_mount_targets`) This attribute denotes whether the new mount targets in the file server should be included in the replication policy. By default it is always `true`. If specific mount targets are selected then you should mark this field as `false`. This is applicable for `SMART_DR`.
    :type should_include_new_mount_targets: 
    
    
    :param should_keep_deleted_files: (:attr:`should_keep_deleted_files`) Flag to maintain deleted files or folders on the target that are deleted on the source. This is applicable for `DATA_SYNC`.
    :type should_keep_deleted_files: 
    
    
    :param exclude_file_patterns: (:attr:`exclude_file_patterns`) Display a list of file patterns to exclude from the replication. For example, [\"*.txt\", \"*.yaml\"]. This is applicable for `DATA_SYNC`. 
    :type exclude_file_patterns: 
    
    
    :param change_user_session_ownership_spec: (:attr:`change_user_session_ownership_spec`) 
    :type change_user_session_ownership_spec: 
    
    
    :param is_reverse: (:attr:`is_reverse`) A boolean flag to reverse the data replication configuration during a planned failover or to resume replication from the secondary site. Use this configuration only if reverse replication is required for failover. A reverse policy can be created when the file servers are in a failed-over state. No replication entities need to be specified to create a reverse policy. This configuration is applicable only for the `SMART_DR` policy. (**Default** False)
    :type is_reverse: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'files.v4.config.ReplicationPolicyType',
        'replication_configurations': 'list[files.v4.config.ReplicationConfiguration]',
        'status': 'files.v4.config.PolicyStatus',
        'should_include_new_mount_targets': 'bool',
        'should_keep_deleted_files': 'bool',
        'exclude_file_patterns': 'list[str]',
        'change_user_session_ownership_spec': 'files.v4.config.OwnershipSpec',
        'is_reverse': 'bool',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'replication_configurations': 'replicationConfigurations',
        'status': 'status',
        'should_include_new_mount_targets': 'shouldIncludeNewMountTargets',
        'should_keep_deleted_files': 'shouldKeepDeletedFiles',
        'exclude_file_patterns': 'excludeFilePatterns',
        'change_user_session_ownership_spec': 'changeUserSessionOwnershipSpec',
        'is_reverse': 'isReverse',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, type=None, replication_configurations=None, status=None, should_include_new_mount_targets=None, should_keep_deleted_files=None, exclude_file_patterns=None, change_user_session_ownership_spec=None, is_reverse=False, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__description = None
        self.__type = None
        self.__replication_configurations = None
        self.__status = None
        self.__should_include_new_mount_targets = None
        self.__should_keep_deleted_files = None
        self.__exclude_file_patterns = None
        self.__change_user_session_ownership_spec = None
        self.__is_reverse = None
        self.discriminator = None
        self.__name = name
        if description is not None:
            self.__description = description
        self.__type = type
        self.__replication_configurations = replication_configurations
        if status is not None:
            self.__status = status
        if should_include_new_mount_targets is not None:
            self.__should_include_new_mount_targets = should_include_new_mount_targets
        if should_keep_deleted_files is not None:
            self.__should_keep_deleted_files = should_keep_deleted_files
        if exclude_file_patterns is not None:
            self.__exclude_file_patterns = exclude_file_patterns
        if change_user_session_ownership_spec is not None:
            self.__change_user_session_ownership_spec = change_user_session_ownership_spec
        if is_reverse is not None:
            self.__is_reverse = is_reverse

    def _initialize_object_type(self):
        return 'files.v4.config.ReplicationPolicy'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Name of the replication policy.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """
        Replication policy description.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 180:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `180`")  # noqa: E501

        self.__description = description

    @property
    def type(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.ReplicationPolicyType`
        """  # noqa: E501
        return self.__type

    @type.setter
    def type(self, type):
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self.__type = type

    @property
    def replication_configurations(self):
        """
        Replication configuration represents combination of file server entities involved in the replication policy, schedules, policy status and replication summary status. For `SMART_DR` the system supports a single replication configuration object per replication policy. For `DATA_SYNC` or `VDI_SYNC`, replicationConfigurations are allowed between 1 and 10. Note that in `VDI_SYNC`, the primary file server of the first replication entity is the preferred file server for replication.

        :type:
             list[ :class:`~ntnx_files_py_client.models.files.v4.config.ReplicationConfiguration` ]
        """  # noqa: E501
        return self.__replication_configurations

    @replication_configurations.setter
    def replication_configurations(self, replication_configurations):
        if replication_configurations is None:
            raise ValueError("Invalid value for `replication_configurations`, must not be `None`")  # noqa: E501

        self.__replication_configurations = replication_configurations

    @property
    def status(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.PolicyStatus`
        """  # noqa: E501
        return self.__status

    @status.setter
    def status(self, status):

        self.__status = status

    @property
    def should_include_new_mount_targets(self):
        """
        This attribute denotes whether the new mount targets in the file server should be included in the replication policy. By default it is always `true`. If specific mount targets are selected then you should mark this field as `false`. This is applicable for `SMART_DR`.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__should_include_new_mount_targets

    @should_include_new_mount_targets.setter
    def should_include_new_mount_targets(self, should_include_new_mount_targets):

        self.__should_include_new_mount_targets = should_include_new_mount_targets

    @property
    def should_keep_deleted_files(self):
        """
        Flag to maintain deleted files or folders on the target that are deleted on the source. This is applicable for `DATA_SYNC`.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__should_keep_deleted_files

    @should_keep_deleted_files.setter
    def should_keep_deleted_files(self, should_keep_deleted_files):

        self.__should_keep_deleted_files = should_keep_deleted_files

    @property
    def exclude_file_patterns(self):
        """
        Display a list of file patterns to exclude from the replication. For example, [\"*.txt\", \"*.yaml\"]. This is applicable for `DATA_SYNC`. 

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__exclude_file_patterns

    @exclude_file_patterns.setter
    def exclude_file_patterns(self, exclude_file_patterns):

        self.__exclude_file_patterns = exclude_file_patterns

    @property
    def change_user_session_ownership_spec(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.OwnershipSpec`
        """  # noqa: E501
        return self.__change_user_session_ownership_spec

    @change_user_session_ownership_spec.setter
    def change_user_session_ownership_spec(self, change_user_session_ownership_spec):

        self.__change_user_session_ownership_spec = change_user_session_ownership_spec

    @property
    def is_reverse(self):
        """
        A boolean flag to reverse the data replication configuration during a planned failover or to resume replication from the secondary site. Use this configuration only if reverse replication is required for failover. A reverse policy can be created when the file servers are in a failed-over state. No replication entities need to be specified to create a reverse policy. This configuration is applicable only for the `SMART_DR` policy.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_reverse

    @is_reverse.setter
    def is_reverse(self, is_reverse):

        self.__is_reverse = is_reverse

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ReplicationPolicy, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicationPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

