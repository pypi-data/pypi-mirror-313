# coding: utf-8


"""
IGNORE:
    Nutanix Files APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_files_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.operations.MigrationStatusInfo import MigrationStatusInfo  # noqa: F401,E501

class MigrationJob(ExternalizableAbstractModel):

    """Migration plan job details.

    :param sub_plan_ext_id: (:attr:`sub_plan_ext_id`) The extId of migration sub-plan.
    :type sub_plan_ext_id: 
    
    
    :param iteration_number: (:attr:`iteration_number`) The iteration number for the migration sub-plan.
    :type iteration_number: 
    
    
    :param start_time: (:attr:`start_time`) Start time for the migration sub-plan.
    :type start_time: 
    
    
    :param end_time: (:attr:`end_time`) End time for the migration sub-plan.
    :type end_time: 
    
    
    :param number_of_files_scanned: (:attr:`number_of_files_scanned`) The number of migration sub-plan files scanned. (**Default** 0)
    :type number_of_files_scanned: 
    
    
    :param number_of_files_skipped: (:attr:`number_of_files_skipped`) The number of migration sub-plan files skipped. (**Default** 0)
    :type number_of_files_skipped: 
    
    
    :param number_of_files_transferred: (:attr:`number_of_files_transferred`) The number of the transferred files for the migration sub-plan. (**Default** 0)
    :type number_of_files_transferred: 
    
    
    :param number_of_files_failed: (:attr:`number_of_files_failed`) The number of transferred failed files for the migration sub-plan. (**Default** 0)
    :type number_of_files_failed: 
    
    
    :param number_of_directories_transferred: (:attr:`number_of_directories_transferred`) The number of the transferred directories for the migration sub-plan. (**Default** 0)
    :type number_of_directories_transferred: 
    
    
    :param number_of_directories_failed: (:attr:`number_of_directories_failed`) The number of the transferred failed directories for the migration sub-plan. (**Default** 0)
    :type number_of_directories_failed: 
    
    
    :param number_of_streams_transferred: (:attr:`number_of_streams_transferred`) The number of migration sub-plan streams transferred. (**Default** 0)
    :type number_of_streams_transferred: 
    
    
    :param number_of_streams_failed: (:attr:`number_of_streams_failed`) The number of migration sub-plan failed streams. (**Default** 0)
    :type number_of_streams_failed: 
    
    
    :param number_of_streams_deleted: (:attr:`number_of_streams_deleted`) The number of migration sub-plan deleted streams. (**Default** 0)
    :type number_of_streams_deleted: 
    
    
    :param number_of_files_deleted: (:attr:`number_of_files_deleted`) The number of migration sub-plan deleted files. (**Default** 0)
    :type number_of_files_deleted: 
    
    
    :param number_of_directories_deleted: (:attr:`number_of_directories_deleted`) The number of migration sub-plan deleted directories. (**Default** 0)
    :type number_of_directories_deleted: 
    
    
    :param total_data_skipped_bytes: (:attr:`total_data_skipped_bytes`) The skipped bytes for the migration sub-plan. (**Default** 0)
    :type total_data_skipped_bytes: 
    
    
    :param total_data_transferred_bytes: (:attr:`total_data_transferred_bytes`) The transferred bytes for the migration sub-plan. (**Default** 0)
    :type total_data_transferred_bytes: 
    
    
    :param total_metadata_transferred_bytes: (:attr:`total_metadata_transferred_bytes`) The number of migration sub-plan bytes metadata transferred. (**Default** 0)
    :type total_metadata_transferred_bytes: 
    
    
    :param average_data_throughput_bps: (:attr:`average_data_throughput_bps`) The average data throughput for the migration sub-plan in bytes/sec. (**Default** 0)
    :type average_data_throughput_bps: 
    
    
    :param average_entities_throughput: (:attr:`average_entities_throughput`) The average entities throughput for migration sub-plan in entities/sec. (**Default** 0)
    :type average_entities_throughput: 
    
    
    :param average_files_scanned_per_second: (:attr:`average_files_scanned_per_second`) The average average file scan rate for migration sub-plan in files/sec. (**Default** 0)
    :type average_files_scanned_per_second: 
    
    
    :param overall_status: (:attr:`overall_status`) 
    :type overall_status: 
    
    
    :param sub_jobs_status: (:attr:`sub_jobs_status`) List of sub-job status. When a migration leader's job moves to running state, it creates node jobs on each node of the file server, and the status of the node job can be different than the leader job, for example: one node job can be queued, but another node job can be in a running state, but to maintain consistency, we cannot change the status of the leader job based on node jobs.
    :type sub_jobs_status: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'sub_plan_ext_id': 'str',
        'iteration_number': 'int',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'number_of_files_scanned': 'int',
        'number_of_files_skipped': 'int',
        'number_of_files_transferred': 'int',
        'number_of_files_failed': 'int',
        'number_of_directories_transferred': 'int',
        'number_of_directories_failed': 'int',
        'number_of_streams_transferred': 'int',
        'number_of_streams_failed': 'int',
        'number_of_streams_deleted': 'int',
        'number_of_files_deleted': 'int',
        'number_of_directories_deleted': 'int',
        'total_data_skipped_bytes': 'int',
        'total_data_transferred_bytes': 'int',
        'total_metadata_transferred_bytes': 'int',
        'average_data_throughput_bps': 'float',
        'average_entities_throughput': 'int',
        'average_files_scanned_per_second': 'int',
        'overall_status': 'files.v4.operations.MigrationStatusInfo',
        'sub_jobs_status': 'list[files.v4.operations.MigrationStatusInfo]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'sub_plan_ext_id': 'subPlanExtId',
        'iteration_number': 'iterationNumber',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'number_of_files_scanned': 'numberOfFilesScanned',
        'number_of_files_skipped': 'numberOfFilesSkipped',
        'number_of_files_transferred': 'numberOfFilesTransferred',
        'number_of_files_failed': 'numberOfFilesFailed',
        'number_of_directories_transferred': 'numberOfDirectoriesTransferred',
        'number_of_directories_failed': 'numberOfDirectoriesFailed',
        'number_of_streams_transferred': 'numberOfStreamsTransferred',
        'number_of_streams_failed': 'numberOfStreamsFailed',
        'number_of_streams_deleted': 'numberOfStreamsDeleted',
        'number_of_files_deleted': 'numberOfFilesDeleted',
        'number_of_directories_deleted': 'numberOfDirectoriesDeleted',
        'total_data_skipped_bytes': 'totalDataSkippedBytes',
        'total_data_transferred_bytes': 'totalDataTransferredBytes',
        'total_metadata_transferred_bytes': 'totalMetadataTransferredBytes',
        'average_data_throughput_bps': 'averageDataThroughputBps',
        'average_entities_throughput': 'averageEntitiesThroughput',
        'average_files_scanned_per_second': 'averageFilesScannedPerSecond',
        'overall_status': 'overallStatus',
        'sub_jobs_status': 'subJobsStatus',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, sub_plan_ext_id=None, iteration_number=None, start_time=None, end_time=None, number_of_files_scanned=0, number_of_files_skipped=0, number_of_files_transferred=0, number_of_files_failed=0, number_of_directories_transferred=0, number_of_directories_failed=0, number_of_streams_transferred=0, number_of_streams_failed=0, number_of_streams_deleted=0, number_of_files_deleted=0, number_of_directories_deleted=0, total_data_skipped_bytes=0, total_data_transferred_bytes=0, total_metadata_transferred_bytes=0, average_data_throughput_bps=0, average_entities_throughput=0, average_files_scanned_per_second=0, overall_status=None, sub_jobs_status=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__sub_plan_ext_id = None
        self.__iteration_number = None
        self.__start_time = None
        self.__end_time = None
        self.__number_of_files_scanned = None
        self.__number_of_files_skipped = None
        self.__number_of_files_transferred = None
        self.__number_of_files_failed = None
        self.__number_of_directories_transferred = None
        self.__number_of_directories_failed = None
        self.__number_of_streams_transferred = None
        self.__number_of_streams_failed = None
        self.__number_of_streams_deleted = None
        self.__number_of_files_deleted = None
        self.__number_of_directories_deleted = None
        self.__total_data_skipped_bytes = None
        self.__total_data_transferred_bytes = None
        self.__total_metadata_transferred_bytes = None
        self.__average_data_throughput_bps = None
        self.__average_entities_throughput = None
        self.__average_files_scanned_per_second = None
        self.__overall_status = None
        self.__sub_jobs_status = None
        self.discriminator = None
        if sub_plan_ext_id is not None:
            self.__sub_plan_ext_id = sub_plan_ext_id
        if iteration_number is not None:
            self.__iteration_number = iteration_number
        if start_time is not None:
            self.__start_time = start_time
        if end_time is not None:
            self.__end_time = end_time
        if number_of_files_scanned is not None:
            self.__number_of_files_scanned = number_of_files_scanned
        if number_of_files_skipped is not None:
            self.__number_of_files_skipped = number_of_files_skipped
        if number_of_files_transferred is not None:
            self.__number_of_files_transferred = number_of_files_transferred
        if number_of_files_failed is not None:
            self.__number_of_files_failed = number_of_files_failed
        if number_of_directories_transferred is not None:
            self.__number_of_directories_transferred = number_of_directories_transferred
        if number_of_directories_failed is not None:
            self.__number_of_directories_failed = number_of_directories_failed
        if number_of_streams_transferred is not None:
            self.__number_of_streams_transferred = number_of_streams_transferred
        if number_of_streams_failed is not None:
            self.__number_of_streams_failed = number_of_streams_failed
        if number_of_streams_deleted is not None:
            self.__number_of_streams_deleted = number_of_streams_deleted
        if number_of_files_deleted is not None:
            self.__number_of_files_deleted = number_of_files_deleted
        if number_of_directories_deleted is not None:
            self.__number_of_directories_deleted = number_of_directories_deleted
        if total_data_skipped_bytes is not None:
            self.__total_data_skipped_bytes = total_data_skipped_bytes
        if total_data_transferred_bytes is not None:
            self.__total_data_transferred_bytes = total_data_transferred_bytes
        if total_metadata_transferred_bytes is not None:
            self.__total_metadata_transferred_bytes = total_metadata_transferred_bytes
        if average_data_throughput_bps is not None:
            self.__average_data_throughput_bps = average_data_throughput_bps
        if average_entities_throughput is not None:
            self.__average_entities_throughput = average_entities_throughput
        if average_files_scanned_per_second is not None:
            self.__average_files_scanned_per_second = average_files_scanned_per_second
        if overall_status is not None:
            self.__overall_status = overall_status
        if sub_jobs_status is not None:
            self.__sub_jobs_status = sub_jobs_status

    def _initialize_object_type(self):
        return 'files.v4.operations.MigrationJob'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def sub_plan_ext_id(self):
        """
        The extId of migration sub-plan.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__sub_plan_ext_id

    @sub_plan_ext_id.setter
    def sub_plan_ext_id(self, sub_plan_ext_id):
        if sub_plan_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', sub_plan_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `sub_plan_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__sub_plan_ext_id = sub_plan_ext_id

    @property
    def iteration_number(self):
        """
        The iteration number for the migration sub-plan.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__iteration_number

    @iteration_number.setter
    def iteration_number(self, iteration_number):

        self.__iteration_number = iteration_number

    @property
    def start_time(self):
        """
        Start time for the migration sub-plan.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__start_time

    @start_time.setter
    def start_time(self, start_time):

        self.__start_time = start_time

    @property
    def end_time(self):
        """
        End time for the migration sub-plan.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__end_time

    @end_time.setter
    def end_time(self, end_time):

        self.__end_time = end_time

    @property
    def number_of_files_scanned(self):
        """
        The number of migration sub-plan files scanned.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__number_of_files_scanned

    @number_of_files_scanned.setter
    def number_of_files_scanned(self, number_of_files_scanned):

        self.__number_of_files_scanned = number_of_files_scanned

    @property
    def number_of_files_skipped(self):
        """
        The number of migration sub-plan files skipped.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__number_of_files_skipped

    @number_of_files_skipped.setter
    def number_of_files_skipped(self, number_of_files_skipped):

        self.__number_of_files_skipped = number_of_files_skipped

    @property
    def number_of_files_transferred(self):
        """
        The number of the transferred files for the migration sub-plan.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__number_of_files_transferred

    @number_of_files_transferred.setter
    def number_of_files_transferred(self, number_of_files_transferred):

        self.__number_of_files_transferred = number_of_files_transferred

    @property
    def number_of_files_failed(self):
        """
        The number of transferred failed files for the migration sub-plan.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__number_of_files_failed

    @number_of_files_failed.setter
    def number_of_files_failed(self, number_of_files_failed):

        self.__number_of_files_failed = number_of_files_failed

    @property
    def number_of_directories_transferred(self):
        """
        The number of the transferred directories for the migration sub-plan.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__number_of_directories_transferred

    @number_of_directories_transferred.setter
    def number_of_directories_transferred(self, number_of_directories_transferred):

        self.__number_of_directories_transferred = number_of_directories_transferred

    @property
    def number_of_directories_failed(self):
        """
        The number of the transferred failed directories for the migration sub-plan.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__number_of_directories_failed

    @number_of_directories_failed.setter
    def number_of_directories_failed(self, number_of_directories_failed):

        self.__number_of_directories_failed = number_of_directories_failed

    @property
    def number_of_streams_transferred(self):
        """
        The number of migration sub-plan streams transferred.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__number_of_streams_transferred

    @number_of_streams_transferred.setter
    def number_of_streams_transferred(self, number_of_streams_transferred):

        self.__number_of_streams_transferred = number_of_streams_transferred

    @property
    def number_of_streams_failed(self):
        """
        The number of migration sub-plan failed streams.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__number_of_streams_failed

    @number_of_streams_failed.setter
    def number_of_streams_failed(self, number_of_streams_failed):

        self.__number_of_streams_failed = number_of_streams_failed

    @property
    def number_of_streams_deleted(self):
        """
        The number of migration sub-plan deleted streams.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__number_of_streams_deleted

    @number_of_streams_deleted.setter
    def number_of_streams_deleted(self, number_of_streams_deleted):

        self.__number_of_streams_deleted = number_of_streams_deleted

    @property
    def number_of_files_deleted(self):
        """
        The number of migration sub-plan deleted files.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__number_of_files_deleted

    @number_of_files_deleted.setter
    def number_of_files_deleted(self, number_of_files_deleted):

        self.__number_of_files_deleted = number_of_files_deleted

    @property
    def number_of_directories_deleted(self):
        """
        The number of migration sub-plan deleted directories.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__number_of_directories_deleted

    @number_of_directories_deleted.setter
    def number_of_directories_deleted(self, number_of_directories_deleted):

        self.__number_of_directories_deleted = number_of_directories_deleted

    @property
    def total_data_skipped_bytes(self):
        """
        The skipped bytes for the migration sub-plan.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__total_data_skipped_bytes

    @total_data_skipped_bytes.setter
    def total_data_skipped_bytes(self, total_data_skipped_bytes):

        self.__total_data_skipped_bytes = total_data_skipped_bytes

    @property
    def total_data_transferred_bytes(self):
        """
        The transferred bytes for the migration sub-plan.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__total_data_transferred_bytes

    @total_data_transferred_bytes.setter
    def total_data_transferred_bytes(self, total_data_transferred_bytes):

        self.__total_data_transferred_bytes = total_data_transferred_bytes

    @property
    def total_metadata_transferred_bytes(self):
        """
        The number of migration sub-plan bytes metadata transferred.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__total_metadata_transferred_bytes

    @total_metadata_transferred_bytes.setter
    def total_metadata_transferred_bytes(self, total_metadata_transferred_bytes):

        self.__total_metadata_transferred_bytes = total_metadata_transferred_bytes

    @property
    def average_data_throughput_bps(self):
        """
        The average data throughput for the migration sub-plan in bytes/sec.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__average_data_throughput_bps

    @average_data_throughput_bps.setter
    def average_data_throughput_bps(self, average_data_throughput_bps):

        self.__average_data_throughput_bps = average_data_throughput_bps

    @property
    def average_entities_throughput(self):
        """
        The average entities throughput for migration sub-plan in entities/sec.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__average_entities_throughput

    @average_entities_throughput.setter
    def average_entities_throughput(self, average_entities_throughput):

        self.__average_entities_throughput = average_entities_throughput

    @property
    def average_files_scanned_per_second(self):
        """
        The average average file scan rate for migration sub-plan in files/sec.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__average_files_scanned_per_second

    @average_files_scanned_per_second.setter
    def average_files_scanned_per_second(self, average_files_scanned_per_second):

        self.__average_files_scanned_per_second = average_files_scanned_per_second

    @property
    def overall_status(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.operations.MigrationStatusInfo`
        """  # noqa: E501
        return self.__overall_status

    @overall_status.setter
    def overall_status(self, overall_status):

        self.__overall_status = overall_status

    @property
    def sub_jobs_status(self):
        """
        List of sub-job status. When a migration leader's job moves to running state, it creates node jobs on each node of the file server, and the status of the node job can be different than the leader job, for example: one node job can be queued, but another node job can be in a running state, but to maintain consistency, we cannot change the status of the leader job based on node jobs.

        :type:
             list[ :class:`~ntnx_files_py_client.models.files.v4.operations.MigrationStatusInfo` ]
        """  # noqa: E501
        return self.__sub_jobs_status

    @sub_jobs_status.setter
    def sub_jobs_status(self, sub_jobs_status):

        self.__sub_jobs_status = sub_jobs_status

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(MigrationJob, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

