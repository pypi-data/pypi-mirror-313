# coding: utf-8


"""
IGNORE:
    Nutanix Files APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_files_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.BlockedClient import BlockedClient  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.MountTargetProtocolType import MountTargetProtocolType  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.MountTargetState import MountTargetState  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.MountTargetType import MountTargetType  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.MountTargetWorkloadType import MountTargetWorkloadType  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.MultiProtocolProperties import MultiProtocolProperties  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.NfsProtocolProperties import NfsProtocolProperties  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.SmbProtocolProperties import SmbProtocolProperties  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.StatusType import StatusType  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.WormSpec import WormSpec  # noqa: F401,E501

class MountTarget(ExternalizableAbstractModel):

    """Mount target object.

    :param name: (:attr:`name`) Mount target name.
    :type name: required
     min=1 chars, max=80 chars
    
    :param description: (:attr:`description`) Mount target description.
    :type description: 
     max=180 chars
    
    :param max_size_gb: (:attr:`max_size_gb`) Maximum size of mount target in GiB.
    :type max_size_gb: 
    
     min=0,
    :param type: (:attr:`type`) 
    :type type: 
    
    
    :param path: (:attr:`path`) Path of the nested mount target.
    :type path: 
     max=4095 chars
    
    :param connected_mount_target_path: (:attr:`connected_mount_target_path`) The Connected Shares feature allows you to connect an empty folder, called a junction folder, in one share to another share. This allows you to share content from any part of a share's directory. For example, when creating a connected share, the connectedMountTargetPath is the path of the junction folder.
    :type connected_mount_target_path: 
     max=4095 chars
    
    :param is_compression_enabled: (:attr:`is_compression_enabled`) Flag to enable compression. (**Default** True)
    :type is_compression_enabled: 
    
    
    :param blocked_file_extensions: (:attr:`blocked_file_extensions`) Comma-separated list of blocked file extensions.
    :type blocked_file_extensions: 
    
    
    :param protocol: (:attr:`protocol`) 
    :type protocol: 
    
    
    :param secondary_protocol: (:attr:`secondary_protocol`) List of secondary protocol types for the mount target.
    :type secondary_protocol: 
    
    
    :param is_previous_version_enabled: (:attr:`is_previous_version_enabled`) Flag to enable windows previous version. (**Default** False)
    :type is_previous_version_enabled: 
    
    
    :param smb_properties: (:attr:`smb_properties`) 
    :type smb_properties: 
    
    
    :param nfs_properties: (:attr:`nfs_properties`) 
    :type nfs_properties: 
    
    
    :param multi_protocol_properties: (:attr:`multi_protocol_properties`) 
    :type multi_protocol_properties: 
    
    
    :param blocked_clients: (:attr:`blocked_clients`) 
    :type blocked_clients: 
    
    
    :param is_long_name_enabled: (:attr:`is_long_name_enabled`) Enable long name support. (**Default** False)
    :type is_long_name_enabled: 
    
    
    :param worm_spec: (:attr:`worm_spec`) 
    :type worm_spec: 
    
    
    :param workload_type: (:attr:`workload_type`) 
    :type workload_type: 
    
    
    :param is_snapshot_paused: (:attr:`is_snapshot_paused`) Pause snapshot operations on share.
    :type is_snapshot_paused: 
    
    
    :param parent_mount_target_ext_id: (:attr:`parent_mount_target_ext_id`) external identifier of the parent mount target. This is a read-only field.
    :type parent_mount_target_ext_id: 
    
    
    :param status_type: (:attr:`status_type`) 
    :type status_type: 
    
    
    :param state: (:attr:`state`) 
    :type state: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'max_size_gb': 'int',
        'type': 'files.v4.config.MountTargetType',
        'path': 'str',
        'connected_mount_target_path': 'str',
        'is_compression_enabled': 'bool',
        'blocked_file_extensions': 'list[str]',
        'protocol': 'files.v4.config.MountTargetProtocolType',
        'secondary_protocol': 'list[files.v4.config.MountTargetProtocolType]',
        'is_previous_version_enabled': 'bool',
        'smb_properties': 'files.v4.config.SmbProtocolProperties',
        'nfs_properties': 'files.v4.config.NfsProtocolProperties',
        'multi_protocol_properties': 'files.v4.config.MultiProtocolProperties',
        'blocked_clients': 'files.v4.config.BlockedClient',
        'is_long_name_enabled': 'bool',
        'worm_spec': 'files.v4.config.WormSpec',
        'workload_type': 'files.v4.config.MountTargetWorkloadType',
        'is_snapshot_paused': 'bool',
        'parent_mount_target_ext_id': 'str',
        'status_type': 'files.v4.config.StatusType',
        'state': 'files.v4.config.MountTargetState',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'max_size_gb': 'maxSizeGB',
        'type': 'type',
        'path': 'path',
        'connected_mount_target_path': 'connectedMountTargetPath',
        'is_compression_enabled': 'isCompressionEnabled',
        'blocked_file_extensions': 'blockedFileExtensions',
        'protocol': 'protocol',
        'secondary_protocol': 'secondaryProtocol',
        'is_previous_version_enabled': 'isPreviousVersionEnabled',
        'smb_properties': 'smbProperties',
        'nfs_properties': 'nfsProperties',
        'multi_protocol_properties': 'multiProtocolProperties',
        'blocked_clients': 'blockedClients',
        'is_long_name_enabled': 'isLongNameEnabled',
        'worm_spec': 'wormSpec',
        'workload_type': 'workloadType',
        'is_snapshot_paused': 'isSnapshotPaused',
        'parent_mount_target_ext_id': 'parentMountTargetExtId',
        'status_type': 'statusType',
        'state': 'state',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, max_size_gb=None, type=None, path=None, connected_mount_target_path=None, is_compression_enabled=True, blocked_file_extensions=None, protocol=None, secondary_protocol=None, is_previous_version_enabled=False, smb_properties=None, nfs_properties=None, multi_protocol_properties=None, blocked_clients=None, is_long_name_enabled=False, worm_spec=None, workload_type=None, is_snapshot_paused=None, parent_mount_target_ext_id=None, status_type=None, state=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__description = None
        self.__max_size_gb = None
        self.__type = None
        self.__path = None
        self.__connected_mount_target_path = None
        self.__is_compression_enabled = None
        self.__blocked_file_extensions = None
        self.__protocol = None
        self.__secondary_protocol = None
        self.__is_previous_version_enabled = None
        self.__smb_properties = None
        self.__nfs_properties = None
        self.__multi_protocol_properties = None
        self.__blocked_clients = None
        self.__is_long_name_enabled = None
        self.__worm_spec = None
        self.__workload_type = None
        self.__is_snapshot_paused = None
        self.__parent_mount_target_ext_id = None
        self.__status_type = None
        self.__state = None
        self.discriminator = None
        self.__name = name
        if description is not None:
            self.__description = description
        if max_size_gb is not None:
            self.__max_size_gb = max_size_gb
        if type is not None:
            self.__type = type
        if path is not None:
            self.__path = path
        if connected_mount_target_path is not None:
            self.__connected_mount_target_path = connected_mount_target_path
        if is_compression_enabled is not None:
            self.__is_compression_enabled = is_compression_enabled
        if blocked_file_extensions is not None:
            self.__blocked_file_extensions = blocked_file_extensions
        if protocol is not None:
            self.__protocol = protocol
        if secondary_protocol is not None:
            self.__secondary_protocol = secondary_protocol
        if is_previous_version_enabled is not None:
            self.__is_previous_version_enabled = is_previous_version_enabled
        if smb_properties is not None:
            self.__smb_properties = smb_properties
        if nfs_properties is not None:
            self.__nfs_properties = nfs_properties
        if multi_protocol_properties is not None:
            self.__multi_protocol_properties = multi_protocol_properties
        if blocked_clients is not None:
            self.__blocked_clients = blocked_clients
        if is_long_name_enabled is not None:
            self.__is_long_name_enabled = is_long_name_enabled
        if worm_spec is not None:
            self.__worm_spec = worm_spec
        if workload_type is not None:
            self.__workload_type = workload_type
        if is_snapshot_paused is not None:
            self.__is_snapshot_paused = is_snapshot_paused
        if parent_mount_target_ext_id is not None:
            self.__parent_mount_target_ext_id = parent_mount_target_ext_id
        if status_type is not None:
            self.__status_type = status_type
        if state is not None:
            self.__state = state

    def _initialize_object_type(self):
        return 'files.v4.config.MountTarget'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Mount target name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """
        Mount target description.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 180:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `180`")  # noqa: E501

        self.__description = description

    @property
    def max_size_gb(self):
        """
        Maximum size of mount target in GiB.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__max_size_gb

    @max_size_gb.setter
    def max_size_gb(self, max_size_gb):
        if max_size_gb is not None and max_size_gb < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_size_gb`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__max_size_gb = max_size_gb

    @property
    def type(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.MountTargetType`
        """  # noqa: E501
        return self.__type

    @type.setter
    def type(self, type):

        self.__type = type

    @property
    def path(self):
        """
        Path of the nested mount target.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__path

    @path.setter
    def path(self, path):
        if path is not None and len(path) > 4095:
            raise ValueError("Invalid value for `path`, length must be less than or equal to `4095`")  # noqa: E501

        self.__path = path

    @property
    def connected_mount_target_path(self):
        """
        The Connected Shares feature allows you to connect an empty folder, called a junction folder, in one share to another share. This allows you to share content from any part of a share's directory. For example, when creating a connected share, the connectedMountTargetPath is the path of the junction folder.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__connected_mount_target_path

    @connected_mount_target_path.setter
    def connected_mount_target_path(self, connected_mount_target_path):
        if connected_mount_target_path is not None and len(connected_mount_target_path) > 4095:
            raise ValueError("Invalid value for `connected_mount_target_path`, length must be less than or equal to `4095`")  # noqa: E501

        self.__connected_mount_target_path = connected_mount_target_path

    @property
    def is_compression_enabled(self):
        """
        Flag to enable compression.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_compression_enabled

    @is_compression_enabled.setter
    def is_compression_enabled(self, is_compression_enabled):

        self.__is_compression_enabled = is_compression_enabled

    @property
    def blocked_file_extensions(self):
        """
        Comma-separated list of blocked file extensions.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__blocked_file_extensions

    @blocked_file_extensions.setter
    def blocked_file_extensions(self, blocked_file_extensions):

        self.__blocked_file_extensions = blocked_file_extensions

    @property
    def protocol(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.MountTargetProtocolType`
        """  # noqa: E501
        return self.__protocol

    @protocol.setter
    def protocol(self, protocol):

        self.__protocol = protocol

    @property
    def secondary_protocol(self):
        """
        List of secondary protocol types for the mount target.

        :type:
             list[ :class:`~ntnx_files_py_client.models.files.v4.config.MountTargetProtocolType` ]
        """  # noqa: E501
        return self.__secondary_protocol

    @secondary_protocol.setter
    def secondary_protocol(self, secondary_protocol):

        self.__secondary_protocol = secondary_protocol

    @property
    def is_previous_version_enabled(self):
        """
        Flag to enable windows previous version.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_previous_version_enabled

    @is_previous_version_enabled.setter
    def is_previous_version_enabled(self, is_previous_version_enabled):

        self.__is_previous_version_enabled = is_previous_version_enabled

    @property
    def smb_properties(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.SmbProtocolProperties`
        """  # noqa: E501
        return self.__smb_properties

    @smb_properties.setter
    def smb_properties(self, smb_properties):

        self.__smb_properties = smb_properties

    @property
    def nfs_properties(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.NfsProtocolProperties`
        """  # noqa: E501
        return self.__nfs_properties

    @nfs_properties.setter
    def nfs_properties(self, nfs_properties):

        self.__nfs_properties = nfs_properties

    @property
    def multi_protocol_properties(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.MultiProtocolProperties`
        """  # noqa: E501
        return self.__multi_protocol_properties

    @multi_protocol_properties.setter
    def multi_protocol_properties(self, multi_protocol_properties):

        self.__multi_protocol_properties = multi_protocol_properties

    @property
    def blocked_clients(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.BlockedClient`
        """  # noqa: E501
        return self.__blocked_clients

    @blocked_clients.setter
    def blocked_clients(self, blocked_clients):

        self.__blocked_clients = blocked_clients

    @property
    def is_long_name_enabled(self):
        """
        Enable long name support.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_long_name_enabled

    @is_long_name_enabled.setter
    def is_long_name_enabled(self, is_long_name_enabled):

        self.__is_long_name_enabled = is_long_name_enabled

    @property
    def worm_spec(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.WormSpec`
        """  # noqa: E501
        return self.__worm_spec

    @worm_spec.setter
    def worm_spec(self, worm_spec):

        self.__worm_spec = worm_spec

    @property
    def workload_type(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.MountTargetWorkloadType`
        """  # noqa: E501
        return self.__workload_type

    @workload_type.setter
    def workload_type(self, workload_type):

        self.__workload_type = workload_type

    @property
    def is_snapshot_paused(self):
        """
        Pause snapshot operations on share.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_snapshot_paused

    @is_snapshot_paused.setter
    def is_snapshot_paused(self, is_snapshot_paused):

        self.__is_snapshot_paused = is_snapshot_paused

    @property
    def parent_mount_target_ext_id(self):
        """
        external identifier of the parent mount target. This is a read-only field.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__parent_mount_target_ext_id

    @parent_mount_target_ext_id.setter
    def parent_mount_target_ext_id(self, parent_mount_target_ext_id):
        if parent_mount_target_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', parent_mount_target_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `parent_mount_target_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__parent_mount_target_ext_id = parent_mount_target_ext_id

    @property
    def status_type(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.StatusType`
        """  # noqa: E501
        return self.__status_type

    @status_type.setter
    def status_type(self, status_type):

        self.__status_type = status_type

    @property
    def state(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.MountTargetState`
        """  # noqa: E501
        return self.__state

    @state.setter
    def state(self, state):

        self.__state = state

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(MountTarget, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MountTarget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

