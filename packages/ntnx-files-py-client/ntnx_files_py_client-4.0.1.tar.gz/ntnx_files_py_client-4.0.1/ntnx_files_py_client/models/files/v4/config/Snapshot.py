# coding: utf-8


"""
IGNORE:
    Nutanix Files APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_files_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.SnapshotType import SnapshotType  # noqa: F401,E501

class Snapshot(ExternalizableAbstractModel):

    """Mount target snapshot model.

    :param name: (:attr:`name`) Mount target snapshot name.
    :type name: required
     min=1 chars, max=80 chars
    
    :param type: (:attr:`type`) 
    :type type: 
    
    
    :param create_time: (:attr:`create_time`) Mount target snapshot created time. This is a read-only field.
    :type create_time: 
    
    
    :param total_space_bytes: (:attr:`total_space_bytes`) Mount target snapshot total space in bytes. This is a read-only field. (**Default** 0)
    :type total_space_bytes: 
    
     min=0,
    :param reclaimable_space_bytes: (:attr:`reclaimable_space_bytes`) Mount target snapshot reclaimable space in bytes. This is a read-only field. (**Default** 0)
    :type reclaimable_space_bytes: 
    
     min=0,

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'type': 'files.v4.config.SnapshotType',
        'create_time': 'datetime',
        'total_space_bytes': 'int',
        'reclaimable_space_bytes': 'int',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'create_time': 'createTime',
        'total_space_bytes': 'totalSpaceBytes',
        'reclaimable_space_bytes': 'reclaimableSpaceBytes',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, type=None, create_time=None, total_space_bytes=0, reclaimable_space_bytes=0, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__type = None
        self.__create_time = None
        self.__total_space_bytes = None
        self.__reclaimable_space_bytes = None
        self.discriminator = None
        self.__name = name
        if type is not None:
            self.__type = type
        if create_time is not None:
            self.__create_time = create_time
        if total_space_bytes is not None:
            self.__total_space_bytes = total_space_bytes
        if reclaimable_space_bytes is not None:
            self.__reclaimable_space_bytes = reclaimable_space_bytes

    def _initialize_object_type(self):
        return 'files.v4.config.Snapshot'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Mount target snapshot name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self.__name = name

    @property
    def type(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.SnapshotType`
        """  # noqa: E501
        return self.__type

    @type.setter
    def type(self, type):

        self.__type = type

    @property
    def create_time(self):
        """
        Mount target snapshot created time. This is a read-only field.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__create_time

    @create_time.setter
    def create_time(self, create_time):

        self.__create_time = create_time

    @property
    def total_space_bytes(self):
        """
        Mount target snapshot total space in bytes. This is a read-only field.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__total_space_bytes

    @total_space_bytes.setter
    def total_space_bytes(self, total_space_bytes):
        if total_space_bytes is not None and total_space_bytes < 0:  # noqa: E501
            raise ValueError("Invalid value for `total_space_bytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__total_space_bytes = total_space_bytes

    @property
    def reclaimable_space_bytes(self):
        """
        Mount target snapshot reclaimable space in bytes. This is a read-only field.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__reclaimable_space_bytes

    @reclaimable_space_bytes.setter
    def reclaimable_space_bytes(self, reclaimable_space_bytes):
        if reclaimable_space_bytes is not None and reclaimable_space_bytes < 0:  # noqa: E501
            raise ValueError("Invalid value for `reclaimable_space_bytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__reclaimable_space_bytes = reclaimable_space_bytes

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Snapshot, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Snapshot):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

