# coding: utf-8


"""
IGNORE:
    Nutanix Files APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_files_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.ReplicationSummary import ReplicationSummary  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.operations.JobStatus import JobStatus  # noqa: F401,E501

class ReplicationJob(ExternalizableAbstractModel):

    """Replication job details.

    :param policy_ext_id: (:attr:`policy_ext_id`) External identifier of the policy.
    :type policy_ext_id: 
    
    
    :param source_file_server_ext_id: (:attr:`source_file_server_ext_id`) The external identifier of the primary file server for the replication.
    :type source_file_server_ext_id: 
    
    
    :param target_file_server_ext_id: (:attr:`target_file_server_ext_id`) The external identifier of the secondary file server for the replication.
    :type target_file_server_ext_id: 
    
    
    :param source_mount_target_ext_id: (:attr:`source_mount_target_ext_id`) The external identifier of the source mount target. Example:9c1e537d-6777-4c22-5d41-ddd0c3337aa9.
    :type source_mount_target_ext_id: 
    
    
    :param target_mount_target_ext_id: (:attr:`target_mount_target_ext_id`) The external identifier of the target mount target. Example:9c1e537d-6777-4c22-5d41-ddd0c3337aa9.
    :type target_mount_target_ext_id: 
    
    
    :param source_mount_target_path: (:attr:`source_mount_target_path`) User provided source path for the replication job.
    :type source_mount_target_path: 
    
    
    :param target_mount_target_path: (:attr:`target_mount_target_path`) User provided target path for the replication job.
    :type target_mount_target_path: 
    
    
    :param status_message: (:attr:`status_message`) Status Message for the replication job. If the job failed or completed with errors, this field provides the reason for the failure. If the job succeeded, this field provides the success message - Replication is complete.
    :type status_message: 
    
    
    :param progress_percentage: (:attr:`progress_percentage`) Progress (%) of the replication job.
    :type progress_percentage: 
    
    
    :param replication_summary: (:attr:`replication_summary`) 
    :type replication_summary: 
    
    
    :param status: (:attr:`status`) 
    :type status: 
    
    
    :param start_time: (:attr:`start_time`) Start time for the replication job in ISO format.
    :type start_time: 
    
    
    :param end_time: (:attr:`end_time`) End time for the replication job in ISO format.
    :type end_time: 
    
    
    :param number_of_estimated_files: (:attr:`number_of_estimated_files`) Number of Estimated files for the replication job.
    :type number_of_estimated_files: 
    
    
    :param estimated_bytes: (:attr:`estimated_bytes`) Estimated bytes for the replication job.
    :type estimated_bytes: 
    
    
    :param number_of_files_transferred: (:attr:`number_of_files_transferred`) Number of Actual Files transferred for the replication job.
    :type number_of_files_transferred: 
    
    
    :param bytes_transferred: (:attr:`bytes_transferred`) Actual bytes transferred for the replication job.
    :type bytes_transferred: 
    
    
    :param number_of_files_failed: (:attr:`number_of_files_failed`) Number of Files failed for the replication job.
    :type number_of_files_failed: 
    
    
    :param average_throughput_bps: (:attr:`average_throughput_bps`) Average throughput for the replication job in Bytes per second.
    :type average_throughput_bps: 
    
    
    :param is_delete_propagation_enabled: (:attr:`is_delete_propagation_enabled`) Delete propagation set/unset the replication job. If delete propagation is enabled, the deletes on source will be propagated to target
    :type is_delete_propagation_enabled: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'policy_ext_id': 'str',
        'source_file_server_ext_id': 'str',
        'target_file_server_ext_id': 'str',
        'source_mount_target_ext_id': 'str',
        'target_mount_target_ext_id': 'str',
        'source_mount_target_path': 'str',
        'target_mount_target_path': 'str',
        'status_message': 'str',
        'progress_percentage': 'int',
        'replication_summary': 'files.v4.config.ReplicationSummary',
        'status': 'files.v4.operations.JobStatus',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'number_of_estimated_files': 'int',
        'estimated_bytes': 'int',
        'number_of_files_transferred': 'int',
        'bytes_transferred': 'int',
        'number_of_files_failed': 'int',
        'average_throughput_bps': 'int',
        'is_delete_propagation_enabled': 'bool',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'policy_ext_id': 'policyExtId',
        'source_file_server_ext_id': 'sourceFileServerExtId',
        'target_file_server_ext_id': 'targetFileServerExtId',
        'source_mount_target_ext_id': 'sourceMountTargetExtId',
        'target_mount_target_ext_id': 'targetMountTargetExtId',
        'source_mount_target_path': 'sourceMountTargetPath',
        'target_mount_target_path': 'targetMountTargetPath',
        'status_message': 'statusMessage',
        'progress_percentage': 'progressPercentage',
        'replication_summary': 'replicationSummary',
        'status': 'status',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'number_of_estimated_files': 'numberOfEstimatedFiles',
        'estimated_bytes': 'estimatedBytes',
        'number_of_files_transferred': 'numberOfFilesTransferred',
        'bytes_transferred': 'bytesTransferred',
        'number_of_files_failed': 'numberOfFilesFailed',
        'average_throughput_bps': 'averageThroughputBps',
        'is_delete_propagation_enabled': 'isDeletePropagationEnabled',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, policy_ext_id=None, source_file_server_ext_id=None, target_file_server_ext_id=None, source_mount_target_ext_id=None, target_mount_target_ext_id=None, source_mount_target_path=None, target_mount_target_path=None, status_message=None, progress_percentage=None, replication_summary=None, status=None, start_time=None, end_time=None, number_of_estimated_files=None, estimated_bytes=None, number_of_files_transferred=None, bytes_transferred=None, number_of_files_failed=None, average_throughput_bps=None, is_delete_propagation_enabled=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__policy_ext_id = None
        self.__source_file_server_ext_id = None
        self.__target_file_server_ext_id = None
        self.__source_mount_target_ext_id = None
        self.__target_mount_target_ext_id = None
        self.__source_mount_target_path = None
        self.__target_mount_target_path = None
        self.__status_message = None
        self.__progress_percentage = None
        self.__replication_summary = None
        self.__status = None
        self.__start_time = None
        self.__end_time = None
        self.__number_of_estimated_files = None
        self.__estimated_bytes = None
        self.__number_of_files_transferred = None
        self.__bytes_transferred = None
        self.__number_of_files_failed = None
        self.__average_throughput_bps = None
        self.__is_delete_propagation_enabled = None
        self.discriminator = None
        if policy_ext_id is not None:
            self.__policy_ext_id = policy_ext_id
        if source_file_server_ext_id is not None:
            self.__source_file_server_ext_id = source_file_server_ext_id
        if target_file_server_ext_id is not None:
            self.__target_file_server_ext_id = target_file_server_ext_id
        if source_mount_target_ext_id is not None:
            self.__source_mount_target_ext_id = source_mount_target_ext_id
        if target_mount_target_ext_id is not None:
            self.__target_mount_target_ext_id = target_mount_target_ext_id
        if source_mount_target_path is not None:
            self.__source_mount_target_path = source_mount_target_path
        if target_mount_target_path is not None:
            self.__target_mount_target_path = target_mount_target_path
        if status_message is not None:
            self.__status_message = status_message
        if progress_percentage is not None:
            self.__progress_percentage = progress_percentage
        if replication_summary is not None:
            self.__replication_summary = replication_summary
        if status is not None:
            self.__status = status
        if start_time is not None:
            self.__start_time = start_time
        if end_time is not None:
            self.__end_time = end_time
        if number_of_estimated_files is not None:
            self.__number_of_estimated_files = number_of_estimated_files
        if estimated_bytes is not None:
            self.__estimated_bytes = estimated_bytes
        if number_of_files_transferred is not None:
            self.__number_of_files_transferred = number_of_files_transferred
        if bytes_transferred is not None:
            self.__bytes_transferred = bytes_transferred
        if number_of_files_failed is not None:
            self.__number_of_files_failed = number_of_files_failed
        if average_throughput_bps is not None:
            self.__average_throughput_bps = average_throughput_bps
        if is_delete_propagation_enabled is not None:
            self.__is_delete_propagation_enabled = is_delete_propagation_enabled

    def _initialize_object_type(self):
        return 'files.v4.operations.ReplicationJob'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def policy_ext_id(self):
        """
        External identifier of the policy.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__policy_ext_id

    @policy_ext_id.setter
    def policy_ext_id(self, policy_ext_id):
        if policy_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', policy_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `policy_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__policy_ext_id = policy_ext_id

    @property
    def source_file_server_ext_id(self):
        """
        The external identifier of the primary file server for the replication.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__source_file_server_ext_id

    @source_file_server_ext_id.setter
    def source_file_server_ext_id(self, source_file_server_ext_id):
        if source_file_server_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', source_file_server_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `source_file_server_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__source_file_server_ext_id = source_file_server_ext_id

    @property
    def target_file_server_ext_id(self):
        """
        The external identifier of the secondary file server for the replication.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__target_file_server_ext_id

    @target_file_server_ext_id.setter
    def target_file_server_ext_id(self, target_file_server_ext_id):
        if target_file_server_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', target_file_server_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `target_file_server_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__target_file_server_ext_id = target_file_server_ext_id

    @property
    def source_mount_target_ext_id(self):
        """
        The external identifier of the source mount target. Example:9c1e537d-6777-4c22-5d41-ddd0c3337aa9.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__source_mount_target_ext_id

    @source_mount_target_ext_id.setter
    def source_mount_target_ext_id(self, source_mount_target_ext_id):
        if source_mount_target_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', source_mount_target_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `source_mount_target_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__source_mount_target_ext_id = source_mount_target_ext_id

    @property
    def target_mount_target_ext_id(self):
        """
        The external identifier of the target mount target. Example:9c1e537d-6777-4c22-5d41-ddd0c3337aa9.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__target_mount_target_ext_id

    @target_mount_target_ext_id.setter
    def target_mount_target_ext_id(self, target_mount_target_ext_id):
        if target_mount_target_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', target_mount_target_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `target_mount_target_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__target_mount_target_ext_id = target_mount_target_ext_id

    @property
    def source_mount_target_path(self):
        """
        User provided source path for the replication job.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__source_mount_target_path

    @source_mount_target_path.setter
    def source_mount_target_path(self, source_mount_target_path):

        self.__source_mount_target_path = source_mount_target_path

    @property
    def target_mount_target_path(self):
        """
        User provided target path for the replication job.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__target_mount_target_path

    @target_mount_target_path.setter
    def target_mount_target_path(self, target_mount_target_path):

        self.__target_mount_target_path = target_mount_target_path

    @property
    def status_message(self):
        """
        Status Message for the replication job. If the job failed or completed with errors, this field provides the reason for the failure. If the job succeeded, this field provides the success message - Replication is complete.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__status_message

    @status_message.setter
    def status_message(self, status_message):

        self.__status_message = status_message

    @property
    def progress_percentage(self):
        """
        Progress (%) of the replication job.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__progress_percentage

    @progress_percentage.setter
    def progress_percentage(self, progress_percentage):

        self.__progress_percentage = progress_percentage

    @property
    def replication_summary(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.ReplicationSummary`
        """  # noqa: E501
        return self.__replication_summary

    @replication_summary.setter
    def replication_summary(self, replication_summary):

        self.__replication_summary = replication_summary

    @property
    def status(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.operations.JobStatus`
        """  # noqa: E501
        return self.__status

    @status.setter
    def status(self, status):

        self.__status = status

    @property
    def start_time(self):
        """
        Start time for the replication job in ISO format.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__start_time

    @start_time.setter
    def start_time(self, start_time):

        self.__start_time = start_time

    @property
    def end_time(self):
        """
        End time for the replication job in ISO format.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__end_time

    @end_time.setter
    def end_time(self, end_time):

        self.__end_time = end_time

    @property
    def number_of_estimated_files(self):
        """
        Number of Estimated files for the replication job.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__number_of_estimated_files

    @number_of_estimated_files.setter
    def number_of_estimated_files(self, number_of_estimated_files):

        self.__number_of_estimated_files = number_of_estimated_files

    @property
    def estimated_bytes(self):
        """
        Estimated bytes for the replication job.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__estimated_bytes

    @estimated_bytes.setter
    def estimated_bytes(self, estimated_bytes):

        self.__estimated_bytes = estimated_bytes

    @property
    def number_of_files_transferred(self):
        """
        Number of Actual Files transferred for the replication job.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__number_of_files_transferred

    @number_of_files_transferred.setter
    def number_of_files_transferred(self, number_of_files_transferred):

        self.__number_of_files_transferred = number_of_files_transferred

    @property
    def bytes_transferred(self):
        """
        Actual bytes transferred for the replication job.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__bytes_transferred

    @bytes_transferred.setter
    def bytes_transferred(self, bytes_transferred):

        self.__bytes_transferred = bytes_transferred

    @property
    def number_of_files_failed(self):
        """
        Number of Files failed for the replication job.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__number_of_files_failed

    @number_of_files_failed.setter
    def number_of_files_failed(self, number_of_files_failed):

        self.__number_of_files_failed = number_of_files_failed

    @property
    def average_throughput_bps(self):
        """
        Average throughput for the replication job in Bytes per second.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__average_throughput_bps

    @average_throughput_bps.setter
    def average_throughput_bps(self, average_throughput_bps):

        self.__average_throughput_bps = average_throughput_bps

    @property
    def is_delete_propagation_enabled(self):
        """
        Delete propagation set/unset the replication job. If delete propagation is enabled, the deletes on source will be propagated to target

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_delete_propagation_enabled

    @is_delete_propagation_enabled.setter
    def is_delete_propagation_enabled(self, is_delete_propagation_enabled):

        self.__is_delete_propagation_enabled = is_delete_propagation_enabled

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ReplicationJob, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicationJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

