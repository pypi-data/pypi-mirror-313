# coding: utf-8


"""
IGNORE:
    Nutanix Files APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_files_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.BlockedNotificationClient import BlockedNotificationClient  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.FileBlockingMode import FileBlockingMode  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.FileOperation import FileOperation  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.ProtocolType import ProtocolType  # noqa: F401,E501

class NotificationPolicy(ExternalizableAbstractModel):

    """A representation of a notification policy model.

    :param name: (:attr:`name`) Notification policy name.
    :type name: required
     min=1 chars, max=80 chars
    
    :param description: (:attr:`description`) A description of notification policy entity.
    :type description: 
     max=180 chars
    
    :param has_secured_connection: (:attr:`has_secured_connection`) Setting this flag ensures that a secure connection is established between AFS and the partner server. (**Default** False)
    :type has_secured_connection: 
    
    
    :param protocol_types: (:attr:`protocol_types`) List of mount target protocol type associated to the notification policy.
    :type protocol_types: required
    
    
    :param should_include_all_mount_targets: (:attr:`should_include_all_mount_targets`) Setting this flag ensures that a notification policy is applicable to all the mount targets. (**Default** False)
    :type should_include_all_mount_targets: 
    
    
    :param file_blocking_mode: (:attr:`file_blocking_mode`) 
    :type file_blocking_mode: 
    
    
    :param operations: (:attr:`operations`) Defines the list of operations on the files.
    :type operations: required
    
    
    :param file_extensions: (:attr:`file_extensions`) List of file blocking extensions. For example: *.mp3.
    :type file_extensions: 
    
    
    :param mount_target_ext_ids: (:attr:`mount_target_ext_ids`) A list of mount target external identifiers.
    :type mount_target_ext_ids: 
    
    
    :param partner_server_ext_ids: (:attr:`partner_server_ext_ids`) A list of partner server external identifiers.
    :type partner_server_ext_ids: 
    
    
    :param blocked_clients: (:attr:`blocked_clients`) A list of users and client IPs, whose notifications needs to be blocked for a partner server.
    :type blocked_clients: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'has_secured_connection': 'bool',
        'protocol_types': 'list[files.v4.config.ProtocolType]',
        'should_include_all_mount_targets': 'bool',
        'file_blocking_mode': 'files.v4.config.FileBlockingMode',
        'operations': 'list[files.v4.config.FileOperation]',
        'file_extensions': 'list[str]',
        'mount_target_ext_ids': 'list[str]',
        'partner_server_ext_ids': 'list[str]',
        'blocked_clients': 'list[files.v4.config.BlockedNotificationClient]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'has_secured_connection': 'hasSecuredConnection',
        'protocol_types': 'protocolTypes',
        'should_include_all_mount_targets': 'shouldIncludeAllMountTargets',
        'file_blocking_mode': 'fileBlockingMode',
        'operations': 'operations',
        'file_extensions': 'fileExtensions',
        'mount_target_ext_ids': 'mountTargetExtIds',
        'partner_server_ext_ids': 'partnerServerExtIds',
        'blocked_clients': 'blockedClients',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, has_secured_connection=False, protocol_types=None, should_include_all_mount_targets=False, file_blocking_mode=None, operations=None, file_extensions=None, mount_target_ext_ids=None, partner_server_ext_ids=None, blocked_clients=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__description = None
        self.__has_secured_connection = None
        self.__protocol_types = None
        self.__should_include_all_mount_targets = None
        self.__file_blocking_mode = None
        self.__operations = None
        self.__file_extensions = None
        self.__mount_target_ext_ids = None
        self.__partner_server_ext_ids = None
        self.__blocked_clients = None
        self.discriminator = None
        self.__name = name
        if description is not None:
            self.__description = description
        if has_secured_connection is not None:
            self.__has_secured_connection = has_secured_connection
        self.__protocol_types = protocol_types
        if should_include_all_mount_targets is not None:
            self.__should_include_all_mount_targets = should_include_all_mount_targets
        if file_blocking_mode is not None:
            self.__file_blocking_mode = file_blocking_mode
        self.__operations = operations
        if file_extensions is not None:
            self.__file_extensions = file_extensions
        if mount_target_ext_ids is not None:
            self.__mount_target_ext_ids = mount_target_ext_ids
        if partner_server_ext_ids is not None:
            self.__partner_server_ext_ids = partner_server_ext_ids
        if blocked_clients is not None:
            self.__blocked_clients = blocked_clients

    def _initialize_object_type(self):
        return 'files.v4.config.NotificationPolicy'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Notification policy name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """
        A description of notification policy entity.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 180:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `180`")  # noqa: E501

        self.__description = description

    @property
    def has_secured_connection(self):
        """
        Setting this flag ensures that a secure connection is established between AFS and the partner server.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__has_secured_connection

    @has_secured_connection.setter
    def has_secured_connection(self, has_secured_connection):

        self.__has_secured_connection = has_secured_connection

    @property
    def protocol_types(self):
        """
        List of mount target protocol type associated to the notification policy.

        :type:
             list[ :class:`~ntnx_files_py_client.models.files.v4.config.ProtocolType` ]
        """  # noqa: E501
        return self.__protocol_types

    @protocol_types.setter
    def protocol_types(self, protocol_types):
        if protocol_types is None:
            raise ValueError("Invalid value for `protocol_types`, must not be `None`")  # noqa: E501

        self.__protocol_types = protocol_types

    @property
    def should_include_all_mount_targets(self):
        """
        Setting this flag ensures that a notification policy is applicable to all the mount targets.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__should_include_all_mount_targets

    @should_include_all_mount_targets.setter
    def should_include_all_mount_targets(self, should_include_all_mount_targets):

        self.__should_include_all_mount_targets = should_include_all_mount_targets

    @property
    def file_blocking_mode(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.FileBlockingMode`
        """  # noqa: E501
        return self.__file_blocking_mode

    @file_blocking_mode.setter
    def file_blocking_mode(self, file_blocking_mode):

        self.__file_blocking_mode = file_blocking_mode

    @property
    def operations(self):
        """
        Defines the list of operations on the files.

        :type:
             list[ :class:`~ntnx_files_py_client.models.files.v4.config.FileOperation` ]
        """  # noqa: E501
        return self.__operations

    @operations.setter
    def operations(self, operations):
        if operations is None:
            raise ValueError("Invalid value for `operations`, must not be `None`")  # noqa: E501

        self.__operations = operations

    @property
    def file_extensions(self):
        """
        List of file blocking extensions. For example: *.mp3.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__file_extensions

    @file_extensions.setter
    def file_extensions(self, file_extensions):

        self.__file_extensions = file_extensions

    @property
    def mount_target_ext_ids(self):
        """
        A list of mount target external identifiers.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__mount_target_ext_ids

    @mount_target_ext_ids.setter
    def mount_target_ext_ids(self, mount_target_ext_ids):

        self.__mount_target_ext_ids = mount_target_ext_ids

    @property
    def partner_server_ext_ids(self):
        """
        A list of partner server external identifiers.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__partner_server_ext_ids

    @partner_server_ext_ids.setter
    def partner_server_ext_ids(self, partner_server_ext_ids):

        self.__partner_server_ext_ids = partner_server_ext_ids

    @property
    def blocked_clients(self):
        """
        A list of users and client IPs, whose notifications needs to be blocked for a partner server.

        :type:
             list[ :class:`~ntnx_files_py_client.models.files.v4.config.BlockedNotificationClient` ]
        """  # noqa: E501
        return self.__blocked_clients

    @blocked_clients.setter
    def blocked_clients(self, blocked_clients):

        self.__blocked_clients = blocked_clients

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(NotificationPolicy, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

