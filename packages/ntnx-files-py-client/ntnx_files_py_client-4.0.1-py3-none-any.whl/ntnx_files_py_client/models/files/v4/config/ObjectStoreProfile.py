# coding: utf-8


"""
IGNORE:
    Nutanix Files APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_files_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.MountTargetsEnablementType import MountTargetsEnablementType  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.ObjectStoreConfig import ObjectStoreConfig  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.ObjectStoreType import ObjectStoreType  # noqa: F401,E501

class ObjectStoreProfile(ExternalizableAbstractModel):

    """Object store profile specification.

    :param mount_target_ext_ids: (:attr:`mount_target_ext_ids`) Mount target list which should be included in tiering profile.
    :type mount_target_ext_ids: 
    
    
    :param object_store_type: (:attr:`object_store_type`) 
    :type object_store_type: required
    
    
    :param name: (:attr:`name`) Object store cloud profile name.
    :type name: required
     min=1 chars, max=80 chars
    
    :param mount_targets_enablement_type: (:attr:`mount_targets_enablement_type`) 
    :type mount_targets_enablement_type: 
    
    
    :param retention_period_days: (:attr:`retention_period_days`) Indicates time in days for which the data will be maintained in the cloud after it is deleted from the local storage on the file server. (**Default** 1825)
    :type retention_period_days: 
    
     min=0,
    :param is_ssl_peer_verfication_enabled: (:attr:`is_ssl_peer_verfication_enabled`) Enable SSL verify peer certificate.
    :type is_ssl_peer_verfication_enabled: 
    
    
    :param object_store_config: (:attr:`object_store_config`) 
    :type object_store_config: required
    
    
    :param recovery_object_store_config: (:attr:`recovery_object_store_config`) 
    :type recovery_object_store_config: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'mount_target_ext_ids': 'list[str]',
        'object_store_type': 'files.v4.config.ObjectStoreType',
        'name': 'str',
        'mount_targets_enablement_type': 'files.v4.config.MountTargetsEnablementType',
        'retention_period_days': 'int',
        'is_ssl_peer_verfication_enabled': 'bool',
        'object_store_config': 'files.v4.config.ObjectStoreConfig',
        'recovery_object_store_config': 'files.v4.config.ObjectStoreConfig',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'mount_target_ext_ids': 'mountTargetExtIds',
        'object_store_type': 'objectStoreType',
        'name': 'name',
        'mount_targets_enablement_type': 'mountTargetsEnablementType',
        'retention_period_days': 'retentionPeriodDays',
        'is_ssl_peer_verfication_enabled': 'isSslPeerVerficationEnabled',
        'object_store_config': 'objectStoreConfig',
        'recovery_object_store_config': 'recoveryObjectStoreConfig',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, mount_target_ext_ids=None, object_store_type=None, name=None, mount_targets_enablement_type=None, retention_period_days=1825, is_ssl_peer_verfication_enabled=None, object_store_config=None, recovery_object_store_config=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__mount_target_ext_ids = None
        self.__object_store_type = None
        self.__name = None
        self.__mount_targets_enablement_type = None
        self.__retention_period_days = None
        self.__is_ssl_peer_verfication_enabled = None
        self.__object_store_config = None
        self.__recovery_object_store_config = None
        self.discriminator = None
        if mount_target_ext_ids is not None:
            self.__mount_target_ext_ids = mount_target_ext_ids
        self.__object_store_type = object_store_type
        self.__name = name
        if mount_targets_enablement_type is not None:
            self.__mount_targets_enablement_type = mount_targets_enablement_type
        if retention_period_days is not None:
            self.__retention_period_days = retention_period_days
        if is_ssl_peer_verfication_enabled is not None:
            self.__is_ssl_peer_verfication_enabled = is_ssl_peer_verfication_enabled
        self.__object_store_config = object_store_config
        if recovery_object_store_config is not None:
            self.__recovery_object_store_config = recovery_object_store_config

    def _initialize_object_type(self):
        return 'files.v4.config.ObjectStoreProfile'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def mount_target_ext_ids(self):
        """
        Mount target list which should be included in tiering profile.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__mount_target_ext_ids

    @mount_target_ext_ids.setter
    def mount_target_ext_ids(self, mount_target_ext_ids):

        self.__mount_target_ext_ids = mount_target_ext_ids

    @property
    def object_store_type(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.ObjectStoreType`
        """  # noqa: E501
        return self.__object_store_type

    @object_store_type.setter
    def object_store_type(self, object_store_type):
        if object_store_type is None:
            raise ValueError("Invalid value for `object_store_type`, must not be `None`")  # noqa: E501

        self.__object_store_type = object_store_type

    @property
    def name(self):
        """
        Object store cloud profile name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self.__name = name

    @property
    def mount_targets_enablement_type(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.MountTargetsEnablementType`
        """  # noqa: E501
        return self.__mount_targets_enablement_type

    @mount_targets_enablement_type.setter
    def mount_targets_enablement_type(self, mount_targets_enablement_type):

        self.__mount_targets_enablement_type = mount_targets_enablement_type

    @property
    def retention_period_days(self):
        """
        Indicates time in days for which the data will be maintained in the cloud after it is deleted from the local storage on the file server.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__retention_period_days

    @retention_period_days.setter
    def retention_period_days(self, retention_period_days):
        if retention_period_days is not None and retention_period_days < 0:  # noqa: E501
            raise ValueError("Invalid value for `retention_period_days`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__retention_period_days = retention_period_days

    @property
    def is_ssl_peer_verfication_enabled(self):
        """
        Enable SSL verify peer certificate.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_ssl_peer_verfication_enabled

    @is_ssl_peer_verfication_enabled.setter
    def is_ssl_peer_verfication_enabled(self, is_ssl_peer_verfication_enabled):

        self.__is_ssl_peer_verfication_enabled = is_ssl_peer_verfication_enabled

    @property
    def object_store_config(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.ObjectStoreConfig`
        """  # noqa: E501
        return self.__object_store_config

    @object_store_config.setter
    def object_store_config(self, object_store_config):
        if object_store_config is None:
            raise ValueError("Invalid value for `object_store_config`, must not be `None`")  # noqa: E501

        self.__object_store_config = object_store_config

    @property
    def recovery_object_store_config(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.ObjectStoreConfig`
        """  # noqa: E501
        return self.__recovery_object_store_config

    @recovery_object_store_config.setter
    def recovery_object_store_config(self, recovery_object_store_config):

        self.__recovery_object_store_config = recovery_object_store_config

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ObjectStoreProfile, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectStoreProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

