# coding: utf-8


"""
IGNORE:
    Nutanix Files APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_files_py_client.models.files.v4.config.PolicyStatus import PolicyStatus  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.ReplicationEntity import ReplicationEntity  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.ReplicationSchedule import ReplicationSchedule  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.ReplicationSummary import ReplicationSummary  # noqa: F401,E501

class ReplicationConfiguration(object):

    """Replication configuration represents combination of file server entities involved in the replication policy, schedules, policy status and replication summary status. For `SMART_DR` the system supports a single replication configuration object per replication policy. For `DATA_SYNC` or `VDI_SYNC`, replicationConfigurations are allowed between 1 and 10. Note that in `VDI_SYNC`, the primary file server of the first replication entity is the preferred file server for replication.

    :param primary_file_server_ext_id: (:attr:`primary_file_server_ext_id`) The external identifier of the primary file server for the replication.
    :type primary_file_server_ext_id: required
    
    
    :param secondary_file_server_ext_id: (:attr:`secondary_file_server_ext_id`) The external identifier of the secondary file server for the replication.
    :type secondary_file_server_ext_id: required
    
    
    :param primary_domain_manager_ext_id: (:attr:`primary_domain_manager_ext_id`) Domain manager (ex. Prism central) external identifier where the primary file server of the replication configuration is registered. This is a required field in case of multi Prism central policy. When primary file server is not local to the Prism central.
    :type primary_domain_manager_ext_id: 
    
    
    :param secondary_domain_manager_ext_id: (:attr:`secondary_domain_manager_ext_id`) Domain manager (ex. Prism central) external identifier where the secondary file server of the replication configuration is registered. This is a required field in case of multi Prism central policy. When secondary file server is not local to the Prism central.
    :type secondary_domain_manager_ext_id: 
    
    
    :param replication_entities: (:attr:`replication_entities`) A list of replication entities belonging to the replication configuration.
    :type replication_entities: 
    
    
    :param schedule: (:attr:`schedule`) 
    :type schedule: 
    
    
    :param status: (:attr:`status`) 
    :type status: 
    
    
    :param should_cancel_ongoing_replication_jobs: (:attr:`should_cancel_ongoing_replication_jobs`) This attribute indicates whether all replication jobs associated with the replication configuration need to be aborted during the disable replication configuration operation. This field is ignored if used for any operation other than disabling the policy. It is `false` by default. (**Default** False)
    :type should_cancel_ongoing_replication_jobs: 
    
    
    :param replication_summary: (:attr:`replication_summary`) 
    :type replication_summary: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'primary_file_server_ext_id': 'str',
        'secondary_file_server_ext_id': 'str',
        'primary_domain_manager_ext_id': 'str',
        'secondary_domain_manager_ext_id': 'str',
        'replication_entities': 'list[files.v4.config.ReplicationEntity]',
        'schedule': 'files.v4.config.ReplicationSchedule',
        'status': 'files.v4.config.PolicyStatus',
        'should_cancel_ongoing_replication_jobs': 'bool',
        'replication_summary': 'files.v4.config.ReplicationSummary',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'primary_file_server_ext_id': 'primaryFileServerExtId',
        'secondary_file_server_ext_id': 'secondaryFileServerExtId',
        'primary_domain_manager_ext_id': 'primaryDomainManagerExtId',
        'secondary_domain_manager_ext_id': 'secondaryDomainManagerExtId',
        'replication_entities': 'replicationEntities',
        'schedule': 'schedule',
        'status': 'status',
        'should_cancel_ongoing_replication_jobs': 'shouldCancelOngoingReplicationJobs',
        'replication_summary': 'replicationSummary',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, primary_file_server_ext_id=None, secondary_file_server_ext_id=None, primary_domain_manager_ext_id=None, secondary_domain_manager_ext_id=None, replication_entities=None, schedule=None, status=None, should_cancel_ongoing_replication_jobs=False, replication_summary=None, *args, **kwargs):  # noqa: E501
        self.__primary_file_server_ext_id = None
        self.__secondary_file_server_ext_id = None
        self.__primary_domain_manager_ext_id = None
        self.__secondary_domain_manager_ext_id = None
        self.__replication_entities = None
        self.__schedule = None
        self.__status = None
        self.__should_cancel_ongoing_replication_jobs = None
        self.__replication_summary = None
        self.discriminator = None
        self.__primary_file_server_ext_id = primary_file_server_ext_id
        self.__secondary_file_server_ext_id = secondary_file_server_ext_id
        if primary_domain_manager_ext_id is not None:
            self.__primary_domain_manager_ext_id = primary_domain_manager_ext_id
        if secondary_domain_manager_ext_id is not None:
            self.__secondary_domain_manager_ext_id = secondary_domain_manager_ext_id
        if replication_entities is not None:
            self.__replication_entities = replication_entities
        if schedule is not None:
            self.__schedule = schedule
        if status is not None:
            self.__status = status
        if should_cancel_ongoing_replication_jobs is not None:
            self.__should_cancel_ongoing_replication_jobs = should_cancel_ongoing_replication_jobs
        if replication_summary is not None:
            self.__replication_summary = replication_summary
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'files.v4.config.ReplicationConfiguration'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def primary_file_server_ext_id(self):
        """
        The external identifier of the primary file server for the replication.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__primary_file_server_ext_id

    @primary_file_server_ext_id.setter
    def primary_file_server_ext_id(self, primary_file_server_ext_id):
        if primary_file_server_ext_id is None:
            raise ValueError("Invalid value for `primary_file_server_ext_id`, must not be `None`")  # noqa: E501
        if primary_file_server_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', primary_file_server_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `primary_file_server_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__primary_file_server_ext_id = primary_file_server_ext_id

    @property
    def secondary_file_server_ext_id(self):
        """
        The external identifier of the secondary file server for the replication.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__secondary_file_server_ext_id

    @secondary_file_server_ext_id.setter
    def secondary_file_server_ext_id(self, secondary_file_server_ext_id):
        if secondary_file_server_ext_id is None:
            raise ValueError("Invalid value for `secondary_file_server_ext_id`, must not be `None`")  # noqa: E501
        if secondary_file_server_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', secondary_file_server_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `secondary_file_server_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__secondary_file_server_ext_id = secondary_file_server_ext_id

    @property
    def primary_domain_manager_ext_id(self):
        """
        Domain manager (ex. Prism central) external identifier where the primary file server of the replication configuration is registered. This is a required field in case of multi Prism central policy. When primary file server is not local to the Prism central.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__primary_domain_manager_ext_id

    @primary_domain_manager_ext_id.setter
    def primary_domain_manager_ext_id(self, primary_domain_manager_ext_id):
        if primary_domain_manager_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', primary_domain_manager_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `primary_domain_manager_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__primary_domain_manager_ext_id = primary_domain_manager_ext_id

    @property
    def secondary_domain_manager_ext_id(self):
        """
        Domain manager (ex. Prism central) external identifier where the secondary file server of the replication configuration is registered. This is a required field in case of multi Prism central policy. When secondary file server is not local to the Prism central.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__secondary_domain_manager_ext_id

    @secondary_domain_manager_ext_id.setter
    def secondary_domain_manager_ext_id(self, secondary_domain_manager_ext_id):
        if secondary_domain_manager_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', secondary_domain_manager_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `secondary_domain_manager_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__secondary_domain_manager_ext_id = secondary_domain_manager_ext_id

    @property
    def replication_entities(self):
        """
        A list of replication entities belonging to the replication configuration.

        :type:
             list[ :class:`~ntnx_files_py_client.models.files.v4.config.ReplicationEntity` ]
        """  # noqa: E501
        return self.__replication_entities

    @replication_entities.setter
    def replication_entities(self, replication_entities):

        self.__replication_entities = replication_entities

    @property
    def schedule(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.ReplicationSchedule`
        """  # noqa: E501
        return self.__schedule

    @schedule.setter
    def schedule(self, schedule):

        self.__schedule = schedule

    @property
    def status(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.PolicyStatus`
        """  # noqa: E501
        return self.__status

    @status.setter
    def status(self, status):

        self.__status = status

    @property
    def should_cancel_ongoing_replication_jobs(self):
        """
        This attribute indicates whether all replication jobs associated with the replication configuration need to be aborted during the disable replication configuration operation. This field is ignored if used for any operation other than disabling the policy. It is `false` by default.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__should_cancel_ongoing_replication_jobs

    @should_cancel_ongoing_replication_jobs.setter
    def should_cancel_ongoing_replication_jobs(self, should_cancel_ongoing_replication_jobs):

        self.__should_cancel_ongoing_replication_jobs = should_cancel_ongoing_replication_jobs

    @property
    def replication_summary(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.ReplicationSummary`
        """  # noqa: E501
        return self.__replication_summary

    @replication_summary.setter
    def replication_summary(self, replication_summary):

        self.__replication_summary = replication_summary

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ReplicationConfiguration, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicationConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

