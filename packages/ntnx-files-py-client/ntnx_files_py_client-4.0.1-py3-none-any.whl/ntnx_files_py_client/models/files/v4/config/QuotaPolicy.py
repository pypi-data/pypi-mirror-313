# coding: utf-8


"""
IGNORE:
    Nutanix Files APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_files_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.EnforcementType import EnforcementType  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.PrincipalType import PrincipalType  # noqa: F401,E501

class QuotaPolicy(ExternalizableAbstractModel):

    """Quota policy model.

    :param principal_type: (:attr:`principal_type`) 
    :type principal_type: required
    
    
    :param principal_name: (:attr:`principal_name`) Principal name is the name of the user or group, assigned to the principal type.
    :type principal_name: required
     max=256 chars
    
    :param size_in_bytes: (:attr:`size_in_bytes`) Quota size in bytes. (**Default** 1)
    :type size_in_bytes: required
    
     min=0,
    :param enforcement_type: (:attr:`enforcement_type`) 
    :type enforcement_type: required
    
    
    :param notification_recipients: (:attr:`notification_recipients`) List of recipient's emails.
    :type notification_recipients: 
    
    
    :param is_notification_enabled: (:attr:`is_notification_enabled`) Enables email notifications for the user or group specified in the principal type.A notification will only be sent if the user or group is close to the quota provided. (**Default** True)
    :type is_notification_enabled: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'principal_type': 'files.v4.config.PrincipalType',
        'principal_name': 'str',
        'size_in_bytes': 'int',
        'enforcement_type': 'files.v4.config.EnforcementType',
        'notification_recipients': 'list[str]',
        'is_notification_enabled': 'bool',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'principal_type': 'principalType',
        'principal_name': 'principalName',
        'size_in_bytes': 'sizeInBytes',
        'enforcement_type': 'enforcementType',
        'notification_recipients': 'notificationRecipients',
        'is_notification_enabled': 'isNotificationEnabled',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, principal_type=None, principal_name=None, size_in_bytes=1, enforcement_type=None, notification_recipients=None, is_notification_enabled=True, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__principal_type = None
        self.__principal_name = None
        self.__size_in_bytes = None
        self.__enforcement_type = None
        self.__notification_recipients = None
        self.__is_notification_enabled = None
        self.discriminator = None
        self.__principal_type = principal_type
        self.__principal_name = principal_name
        self.__size_in_bytes = size_in_bytes
        self.__enforcement_type = enforcement_type
        if notification_recipients is not None:
            self.__notification_recipients = notification_recipients
        if is_notification_enabled is not None:
            self.__is_notification_enabled = is_notification_enabled

    def _initialize_object_type(self):
        return 'files.v4.config.QuotaPolicy'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def principal_type(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.PrincipalType`
        """  # noqa: E501
        return self.__principal_type

    @principal_type.setter
    def principal_type(self, principal_type):
        if principal_type is None:
            raise ValueError("Invalid value for `principal_type`, must not be `None`")  # noqa: E501

        self.__principal_type = principal_type

    @property
    def principal_name(self):
        """
        Principal name is the name of the user or group, assigned to the principal type.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__principal_name

    @principal_name.setter
    def principal_name(self, principal_name):
        if principal_name is None:
            raise ValueError("Invalid value for `principal_name`, must not be `None`")  # noqa: E501
        if principal_name is not None and len(principal_name) > 256:
            raise ValueError("Invalid value for `principal_name`, length must be less than or equal to `256`")  # noqa: E501

        self.__principal_name = principal_name

    @property
    def size_in_bytes(self):
        """
        Quota size in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__size_in_bytes

    @size_in_bytes.setter
    def size_in_bytes(self, size_in_bytes):
        if size_in_bytes is None:
            raise ValueError("Invalid value for `size_in_bytes`, must not be `None`")  # noqa: E501
        if size_in_bytes is not None and size_in_bytes < 0:  # noqa: E501
            raise ValueError("Invalid value for `size_in_bytes`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__size_in_bytes = size_in_bytes

    @property
    def enforcement_type(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.EnforcementType`
        """  # noqa: E501
        return self.__enforcement_type

    @enforcement_type.setter
    def enforcement_type(self, enforcement_type):
        if enforcement_type is None:
            raise ValueError("Invalid value for `enforcement_type`, must not be `None`")  # noqa: E501

        self.__enforcement_type = enforcement_type

    @property
    def notification_recipients(self):
        """
        List of recipient's emails.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__notification_recipients

    @notification_recipients.setter
    def notification_recipients(self, notification_recipients):

        self.__notification_recipients = notification_recipients

    @property
    def is_notification_enabled(self):
        """
        Enables email notifications for the user or group specified in the principal type.A notification will only be sent if the user or group is close to the quota provided.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_notification_enabled

    @is_notification_enabled.setter
    def is_notification_enabled(self, is_notification_enabled):

        self.__is_notification_enabled = is_notification_enabled

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(QuotaPolicy, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuotaPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

