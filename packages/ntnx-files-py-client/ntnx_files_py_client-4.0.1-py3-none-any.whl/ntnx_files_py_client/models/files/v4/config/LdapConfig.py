# coding: utf-8


"""
IGNORE:
    Nutanix Files APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_files_py_client.models.files.v4.config.ProtocolType import ProtocolType  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.TLSReqCertStatus import TLSReqCertStatus  # noqa: F401,E501

class LdapConfig(object):

    """LDAP domain associated with the file server.

    :param location: (:attr:`location`) URI of the LDAP domain. Ex. ldap://10.51.38.36
    :type location: 
     max=2048 chars
    
    :param basedn: (:attr:`basedn`) LDAP Base distinguished name (DN) specifies the starting point within an LDAP directory hierarchy for LDAP operations like searches and queries. Ex: DC=ldaps,DC=afs,DC=minerva,DC=com
    :type basedn: 
     max=2048 chars
    
    :param binddn: (:attr:`binddn`) A distinguished name that is used to authenticate and authorize an LDAP client to perform operations on an LDAP directory server. This is an optional field. Ex: CN=example-user,CN=Users,DC=example-domain,DC=com
    :type binddn: 
     max=2048 chars
    
    :param bindpw: (:attr:`bindpw`) LDAP password
    :type bindpw: 
    
    
    :param tls_req_cert_status: (:attr:`tls_req_cert_status`) 
    :type tls_req_cert_status: 
    
    
    :param tls_cacert_content: (:attr:`tls_cacert_content`) LDAP SSH key
    :type tls_cacert_content: 
    
    
    :param protocol_type: (:attr:`protocol_type`) 
    :type protocol_type: required
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'location': 'str',
        'basedn': 'str',
        'binddn': 'str',
        'bindpw': 'str',
        'tls_req_cert_status': 'files.v4.config.TLSReqCertStatus',
        'tls_cacert_content': 'str',
        'protocol_type': 'files.v4.config.ProtocolType',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'location': 'location',
        'basedn': 'basedn',
        'binddn': 'binddn',
        'bindpw': 'bindpw',
        'tls_req_cert_status': 'tlsReqCertStatus',
        'tls_cacert_content': 'tlsCacertContent',
        'protocol_type': 'protocolType',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, location=None, basedn=None, binddn=None, bindpw=None, tls_req_cert_status=None, tls_cacert_content=None, protocol_type=None, *args, **kwargs):  # noqa: E501
        self.__location = None
        self.__basedn = None
        self.__binddn = None
        self.__bindpw = None
        self.__tls_req_cert_status = None
        self.__tls_cacert_content = None
        self.__protocol_type = None
        self.discriminator = None
        if location is not None:
            self.__location = location
        if basedn is not None:
            self.__basedn = basedn
        if binddn is not None:
            self.__binddn = binddn
        if bindpw is not None:
            self.__bindpw = bindpw
        if tls_req_cert_status is not None:
            self.__tls_req_cert_status = tls_req_cert_status
        if tls_cacert_content is not None:
            self.__tls_cacert_content = tls_cacert_content
        self.__protocol_type = protocol_type
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'files.v4.config.LdapConfig'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def location(self):
        """
        URI of the LDAP domain. Ex. ldap://10.51.38.36

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__location

    @location.setter
    def location(self, location):
        if location is not None and len(location) > 2048:
            raise ValueError("Invalid value for `location`, length must be less than or equal to `2048`")  # noqa: E501

        self.__location = location

    @property
    def basedn(self):
        """
        LDAP Base distinguished name (DN) specifies the starting point within an LDAP directory hierarchy for LDAP operations like searches and queries. Ex: DC=ldaps,DC=afs,DC=minerva,DC=com

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__basedn

    @basedn.setter
    def basedn(self, basedn):
        if basedn is not None and len(basedn) > 2048:
            raise ValueError("Invalid value for `basedn`, length must be less than or equal to `2048`")  # noqa: E501

        self.__basedn = basedn

    @property
    def binddn(self):
        """
        A distinguished name that is used to authenticate and authorize an LDAP client to perform operations on an LDAP directory server. This is an optional field. Ex: CN=example-user,CN=Users,DC=example-domain,DC=com

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__binddn

    @binddn.setter
    def binddn(self, binddn):
        if binddn is not None and len(binddn) > 2048:
            raise ValueError("Invalid value for `binddn`, length must be less than or equal to `2048`")  # noqa: E501

        self.__binddn = binddn

    @property
    def bindpw(self):
        """
        LDAP password

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__bindpw

    @bindpw.setter
    def bindpw(self, bindpw):

        self.__bindpw = bindpw

    @property
    def tls_req_cert_status(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.TLSReqCertStatus`
        """  # noqa: E501
        return self.__tls_req_cert_status

    @tls_req_cert_status.setter
    def tls_req_cert_status(self, tls_req_cert_status):

        self.__tls_req_cert_status = tls_req_cert_status

    @property
    def tls_cacert_content(self):
        """
        LDAP SSH key

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__tls_cacert_content

    @tls_cacert_content.setter
    def tls_cacert_content(self, tls_cacert_content):

        self.__tls_cacert_content = tls_cacert_content

    @property
    def protocol_type(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.ProtocolType`
        """  # noqa: E501
        return self.__protocol_type

    @protocol_type.setter
    def protocol_type(self, protocol_type):
        if protocol_type is None:
            raise ValueError("Invalid value for `protocol_type`, must not be `None`")  # noqa: E501

        self.__protocol_type = protocol_type

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(LdapConfig, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LdapConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

