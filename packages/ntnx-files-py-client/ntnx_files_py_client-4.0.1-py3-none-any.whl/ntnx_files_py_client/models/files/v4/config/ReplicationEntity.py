# coding: utf-8


"""
IGNORE:
    Nutanix Files APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path

class ReplicationEntity(object):

    """Replication entity belonging to a replication configuration. Here, for `SMART_DR` and `DATA_SYNC`, primary represents source file server or path, and secondary represents target file server or path.

    :param primary_file_server_mount_target_ext_id: (:attr:`primary_file_server_mount_target_ext_id`) The external identifier of the mount target. Example:9c1e537d-6777-4c22-5d41-ddd0c3337aa9.
    :type primary_file_server_mount_target_ext_id: 
    
    
    :param primary_file_server_mount_target_path: (:attr:`primary_file_server_mount_target_path`) Path of the nested mount target.
    :type primary_file_server_mount_target_path: 
     max=4095 chars
    
    :param secondary_file_server_mount_target_ext_id: (:attr:`secondary_file_server_mount_target_ext_id`) The external identifier of the mount target. Example:9c1e537d-6777-4c22-5d41-ddd0c3337aa9.
    :type secondary_file_server_mount_target_ext_id: 
    
    
    :param secondary_file_server_mount_target_path: (:attr:`secondary_file_server_mount_target_path`) Path of the nested mount target.
    :type secondary_file_server_mount_target_path: 
     max=4095 chars
    
    :param exclude_dir_patterns: (:attr:`exclude_dir_patterns`) Displays a list of wildcard-based patterns to exclude files and directories from replication. Used only for `DATA_SYNC`. The wildcard-based patterns can contain “” which replaces all non-“/“ characters and “*” which replaces any character. Ex. `/share1/subPath/`
    :type exclude_dir_patterns: 
    
    
    :param is_available_for_replication: (:attr:`is_available_for_replication`) A flag indicating whether any of the mount targets of the VDI sync replication entity is unavailable for synchronization. This flag is read-only. This flag will be set to `false` in the following two scenarios: ``` - when the mount target in the replication entity is deleted from the file server - when any file server deletes the sync entity (path) from the policy. ```
    :type is_available_for_replication: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'primary_file_server_mount_target_ext_id': 'str',
        'primary_file_server_mount_target_path': 'str',
        'secondary_file_server_mount_target_ext_id': 'str',
        'secondary_file_server_mount_target_path': 'str',
        'exclude_dir_patterns': 'list[str]',
        'is_available_for_replication': 'bool',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'primary_file_server_mount_target_ext_id': 'primaryFileServerMountTargetExtId',
        'primary_file_server_mount_target_path': 'primaryFileServerMountTargetPath',
        'secondary_file_server_mount_target_ext_id': 'secondaryFileServerMountTargetExtId',
        'secondary_file_server_mount_target_path': 'secondaryFileServerMountTargetPath',
        'exclude_dir_patterns': 'excludeDirPatterns',
        'is_available_for_replication': 'isAvailableForReplication',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, primary_file_server_mount_target_ext_id=None, primary_file_server_mount_target_path=None, secondary_file_server_mount_target_ext_id=None, secondary_file_server_mount_target_path=None, exclude_dir_patterns=None, is_available_for_replication=None, *args, **kwargs):  # noqa: E501
        self.__primary_file_server_mount_target_ext_id = None
        self.__primary_file_server_mount_target_path = None
        self.__secondary_file_server_mount_target_ext_id = None
        self.__secondary_file_server_mount_target_path = None
        self.__exclude_dir_patterns = None
        self.__is_available_for_replication = None
        self.discriminator = None
        if primary_file_server_mount_target_ext_id is not None:
            self.__primary_file_server_mount_target_ext_id = primary_file_server_mount_target_ext_id
        if primary_file_server_mount_target_path is not None:
            self.__primary_file_server_mount_target_path = primary_file_server_mount_target_path
        if secondary_file_server_mount_target_ext_id is not None:
            self.__secondary_file_server_mount_target_ext_id = secondary_file_server_mount_target_ext_id
        if secondary_file_server_mount_target_path is not None:
            self.__secondary_file_server_mount_target_path = secondary_file_server_mount_target_path
        if exclude_dir_patterns is not None:
            self.__exclude_dir_patterns = exclude_dir_patterns
        if is_available_for_replication is not None:
            self.__is_available_for_replication = is_available_for_replication
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'files.v4.config.ReplicationEntity'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def primary_file_server_mount_target_ext_id(self):
        """
        The external identifier of the mount target. Example:9c1e537d-6777-4c22-5d41-ddd0c3337aa9.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__primary_file_server_mount_target_ext_id

    @primary_file_server_mount_target_ext_id.setter
    def primary_file_server_mount_target_ext_id(self, primary_file_server_mount_target_ext_id):
        if primary_file_server_mount_target_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', primary_file_server_mount_target_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `primary_file_server_mount_target_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__primary_file_server_mount_target_ext_id = primary_file_server_mount_target_ext_id

    @property
    def primary_file_server_mount_target_path(self):
        """
        Path of the nested mount target.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__primary_file_server_mount_target_path

    @primary_file_server_mount_target_path.setter
    def primary_file_server_mount_target_path(self, primary_file_server_mount_target_path):
        if primary_file_server_mount_target_path is not None and len(primary_file_server_mount_target_path) > 4095:
            raise ValueError("Invalid value for `primary_file_server_mount_target_path`, length must be less than or equal to `4095`")  # noqa: E501

        self.__primary_file_server_mount_target_path = primary_file_server_mount_target_path

    @property
    def secondary_file_server_mount_target_ext_id(self):
        """
        The external identifier of the mount target. Example:9c1e537d-6777-4c22-5d41-ddd0c3337aa9.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__secondary_file_server_mount_target_ext_id

    @secondary_file_server_mount_target_ext_id.setter
    def secondary_file_server_mount_target_ext_id(self, secondary_file_server_mount_target_ext_id):
        if secondary_file_server_mount_target_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', secondary_file_server_mount_target_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `secondary_file_server_mount_target_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__secondary_file_server_mount_target_ext_id = secondary_file_server_mount_target_ext_id

    @property
    def secondary_file_server_mount_target_path(self):
        """
        Path of the nested mount target.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__secondary_file_server_mount_target_path

    @secondary_file_server_mount_target_path.setter
    def secondary_file_server_mount_target_path(self, secondary_file_server_mount_target_path):
        if secondary_file_server_mount_target_path is not None and len(secondary_file_server_mount_target_path) > 4095:
            raise ValueError("Invalid value for `secondary_file_server_mount_target_path`, length must be less than or equal to `4095`")  # noqa: E501

        self.__secondary_file_server_mount_target_path = secondary_file_server_mount_target_path

    @property
    def exclude_dir_patterns(self):
        """
        Displays a list of wildcard-based patterns to exclude files and directories from replication. Used only for `DATA_SYNC`. The wildcard-based patterns can contain “” which replaces all non-“/“ characters and “*” which replaces any character. Ex. `/share1/subPath/`

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__exclude_dir_patterns

    @exclude_dir_patterns.setter
    def exclude_dir_patterns(self, exclude_dir_patterns):

        self.__exclude_dir_patterns = exclude_dir_patterns

    @property
    def is_available_for_replication(self):
        """
        A flag indicating whether any of the mount targets of the VDI sync replication entity is unavailable for synchronization. This flag is read-only. This flag will be set to `false` in the following two scenarios: ``` - when the mount target in the replication entity is deleted from the file server - when any file server deletes the sync entity (path) from the policy. ```

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_available_for_replication

    @is_available_for_replication.setter
    def is_available_for_replication(self, is_available_for_replication):

        self.__is_available_for_replication = is_available_for_replication

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ReplicationEntity, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicationEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

