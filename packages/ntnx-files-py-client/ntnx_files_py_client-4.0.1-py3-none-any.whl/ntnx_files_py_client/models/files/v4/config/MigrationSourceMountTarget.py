# coding: utf-8


"""
IGNORE:
    Nutanix Files APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_files_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.MountTargetProtocolType import MountTargetProtocolType  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.ScanStatus import ScanStatus  # noqa: F401,E501

class MigrationSourceMountTarget(ExternalizableAbstractModel):

    """Mount target for migration source.

    :param name: (:attr:`name`) Name of the source mount target. Only the mount target name is stored in the database after discovery, but to scan you can specify the mount target name with path, in this case name including path is stored in DB.
    :type name: 
     min=1 chars, max=4096 chars
    
    :param protocol: (:attr:`protocol`) 
    :type protocol: 
    
    
    :param bytes: (:attr:`bytes`) Total bytes present on source path. This is a read-only field. (**Default** 0)
    :type bytes: 
    
    
    :param files: (:attr:`files`) Total files present on source path. This is a read-only field. (**Default** 0)
    :type files: 
    
    
    :param directories: (:attr:`directories`) Total dirs present on source path. This is a read-only field. (**Default** 0)
    :type directories: 
    
    
    :param scan_status: (:attr:`scan_status`) 
    :type scan_status: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'protocol': 'files.v4.config.MountTargetProtocolType',
        'bytes': 'int',
        'files': 'int',
        'directories': 'int',
        'scan_status': 'files.v4.config.ScanStatus',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'protocol': 'protocol',
        'bytes': 'bytes',
        'files': 'files',
        'directories': 'directories',
        'scan_status': 'scanStatus',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, protocol=None, bytes=0, files=0, directories=0, scan_status=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__protocol = None
        self.__bytes = None
        self.__files = None
        self.__directories = None
        self.__scan_status = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if protocol is not None:
            self.__protocol = protocol
        if bytes is not None:
            self.__bytes = bytes
        if files is not None:
            self.__files = files
        if directories is not None:
            self.__directories = directories
        if scan_status is not None:
            self.__scan_status = scan_status

    def _initialize_object_type(self):
        return 'files.v4.config.MigrationSourceMountTarget'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Name of the source mount target. Only the mount target name is stored in the database after discovery, but to scan you can specify the mount target name with path, in this case name including path is stored in DB.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self.__name = name

    @property
    def protocol(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.MountTargetProtocolType`
        """  # noqa: E501
        return self.__protocol

    @protocol.setter
    def protocol(self, protocol):

        self.__protocol = protocol

    @property
    def bytes(self):
        """
        Total bytes present on source path. This is a read-only field.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__bytes

    @bytes.setter
    def bytes(self, bytes):

        self.__bytes = bytes

    @property
    def files(self):
        """
        Total files present on source path. This is a read-only field.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__files

    @files.setter
    def files(self, files):

        self.__files = files

    @property
    def directories(self):
        """
        Total dirs present on source path. This is a read-only field.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__directories

    @directories.setter
    def directories(self, directories):

        self.__directories = directories

    @property
    def scan_status(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.ScanStatus`
        """  # noqa: E501
        return self.__scan_status

    @scan_status.setter
    def scan_status(self, scan_status):

        self.__scan_status = scan_status

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(MigrationSourceMountTarget, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationSourceMountTarget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

