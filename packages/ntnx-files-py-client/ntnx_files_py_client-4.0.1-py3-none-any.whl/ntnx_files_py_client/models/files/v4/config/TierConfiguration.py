# coding: utf-8


"""
IGNORE:
    Nutanix Files APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_files_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.DaySchedule import DaySchedule  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.MountTargetsEnablementType import MountTargetsEnablementType  # noqa: F401,E501

class TierConfiguration(ExternalizableAbstractModel):

    """Request body specification for tiering configuration APIs.

    :param memory_threshold_percent: (:attr:`memory_threshold_percent`) Capacity threshold in percentage for tiering.
    :type memory_threshold_percent: 
    
     min=0, max=100
    :param schedule: (:attr:`schedule`) Tiering schedule for on-prem tiering. Auto tiering can happen at this specified time.
    :type schedule: 
    
    
    :param cooloff_period_seconds: (:attr:`cooloff_period_seconds`) Cool off period in seconds for tiering. Files older than cool off period time will be considered for tiering.
    :type cooloff_period_seconds: 
    
     min=86400,
    :param minimum_file_size_bytes: (:attr:`minimum_file_size_bytes`) Minimum file size for tiering. Files size greater than this will be considered for tiering. (**Default** 65536)
    :type minimum_file_size_bytes: 
    
     min=65536,
    :param mount_targets_enablement_type: (:attr:`mount_targets_enablement_type`) 
    :type mount_targets_enablement_type: 
    
    
    :param mount_target_ext_ids: (:attr:`mount_target_ext_ids`) Mount target list which should be included in tiering configuration.
    :type mount_target_ext_ids: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'memory_threshold_percent': 'int',
        'schedule': 'list[files.v4.config.DaySchedule]',
        'cooloff_period_seconds': 'int',
        'minimum_file_size_bytes': 'int',
        'mount_targets_enablement_type': 'files.v4.config.MountTargetsEnablementType',
        'mount_target_ext_ids': 'list[str]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'memory_threshold_percent': 'memoryThresholdPercent',
        'schedule': 'schedule',
        'cooloff_period_seconds': 'cooloffPeriodSeconds',
        'minimum_file_size_bytes': 'minimumFileSizeBytes',
        'mount_targets_enablement_type': 'mountTargetsEnablementType',
        'mount_target_ext_ids': 'mountTargetExtIds',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, memory_threshold_percent=None, schedule=None, cooloff_period_seconds=None, minimum_file_size_bytes=65536, mount_targets_enablement_type=None, mount_target_ext_ids=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__memory_threshold_percent = None
        self.__schedule = None
        self.__cooloff_period_seconds = None
        self.__minimum_file_size_bytes = None
        self.__mount_targets_enablement_type = None
        self.__mount_target_ext_ids = None
        self.discriminator = None
        if memory_threshold_percent is not None:
            self.__memory_threshold_percent = memory_threshold_percent
        if schedule is not None:
            self.__schedule = schedule
        if cooloff_period_seconds is not None:
            self.__cooloff_period_seconds = cooloff_period_seconds
        if minimum_file_size_bytes is not None:
            self.__minimum_file_size_bytes = minimum_file_size_bytes
        if mount_targets_enablement_type is not None:
            self.__mount_targets_enablement_type = mount_targets_enablement_type
        if mount_target_ext_ids is not None:
            self.__mount_target_ext_ids = mount_target_ext_ids

    def _initialize_object_type(self):
        return 'files.v4.config.TierConfiguration'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def memory_threshold_percent(self):
        """
        Capacity threshold in percentage for tiering.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__memory_threshold_percent

    @memory_threshold_percent.setter
    def memory_threshold_percent(self, memory_threshold_percent):
        if memory_threshold_percent is not None and memory_threshold_percent > 100:  # noqa: E501
            raise ValueError("Invalid value for `memory_threshold_percent`, must be a value less than or equal to `100`")  # noqa: E501
        if memory_threshold_percent is not None and memory_threshold_percent < 0:  # noqa: E501
            raise ValueError("Invalid value for `memory_threshold_percent`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__memory_threshold_percent = memory_threshold_percent

    @property
    def schedule(self):
        """
        Tiering schedule for on-prem tiering. Auto tiering can happen at this specified time.

        :type:
             list[ :class:`~ntnx_files_py_client.models.files.v4.config.DaySchedule` ]
        """  # noqa: E501
        return self.__schedule

    @schedule.setter
    def schedule(self, schedule):

        self.__schedule = schedule

    @property
    def cooloff_period_seconds(self):
        """
        Cool off period in seconds for tiering. Files older than cool off period time will be considered for tiering.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__cooloff_period_seconds

    @cooloff_period_seconds.setter
    def cooloff_period_seconds(self, cooloff_period_seconds):
        if cooloff_period_seconds is not None and cooloff_period_seconds < 86400:  # noqa: E501
            raise ValueError("Invalid value for `cooloff_period_seconds`, must be a value greater than or equal to `86400`")  # noqa: E501

        self.__cooloff_period_seconds = cooloff_period_seconds

    @property
    def minimum_file_size_bytes(self):
        """
        Minimum file size for tiering. Files size greater than this will be considered for tiering.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__minimum_file_size_bytes

    @minimum_file_size_bytes.setter
    def minimum_file_size_bytes(self, minimum_file_size_bytes):
        if minimum_file_size_bytes is not None and minimum_file_size_bytes < 65536:  # noqa: E501
            raise ValueError("Invalid value for `minimum_file_size_bytes`, must be a value greater than or equal to `65536`")  # noqa: E501

        self.__minimum_file_size_bytes = minimum_file_size_bytes

    @property
    def mount_targets_enablement_type(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.MountTargetsEnablementType`
        """  # noqa: E501
        return self.__mount_targets_enablement_type

    @mount_targets_enablement_type.setter
    def mount_targets_enablement_type(self, mount_targets_enablement_type):

        self.__mount_targets_enablement_type = mount_targets_enablement_type

    @property
    def mount_target_ext_ids(self):
        """
        Mount target list which should be included in tiering configuration.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__mount_target_ext_ids

    @mount_target_ext_ids.setter
    def mount_target_ext_ids(self, mount_target_ext_ids):

        self.__mount_target_ext_ids = mount_target_ext_ids

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(TierConfiguration, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TierConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

