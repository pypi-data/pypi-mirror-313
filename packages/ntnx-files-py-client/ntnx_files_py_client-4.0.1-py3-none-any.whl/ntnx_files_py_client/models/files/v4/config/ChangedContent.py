# coding: utf-8


"""
IGNORE:
    Nutanix Files APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_files_py_client.models.files.v4.config.ChangeOperationType import ChangeOperationType  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.ObjectType import ObjectType  # noqa: F401,E501

class ChangedContent(object):

    """Snapshot changed content details. This is a read-only field.

    :param path: (:attr:`path`) Path of the object.
    :type path: 
     max=4095 chars
    
    :param old_path: (:attr:`old_path`) Old path of the object in case of rename.
    :type old_path: 
     max=4095 chars
    
    :param size_bytes: (:attr:`size_bytes`) Size of the object in bytes.
    :type size_bytes: 
    
    
    :param inode_number: (:attr:`inode_number`) Inode number of the object.
    :type inode_number: 
    
    
    :param creation_time: (:attr:`creation_time`) Create time of the object in date-time format..
    :type creation_time: 
    
    
    :param change_time: (:attr:`change_time`) Change time of the object in date-time format.
    :type change_time: 
    
    
    :param access_time: (:attr:`access_time`) Access time of the object in date-time format.
    :type access_time: 
    
    
    :param operation_type: (:attr:`operation_type`) 
    :type operation_type: 
    
    
    :param object_type: (:attr:`object_type`) 
    :type object_type: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'path': 'str',
        'old_path': 'str',
        'size_bytes': 'int',
        'inode_number': 'int',
        'creation_time': 'datetime',
        'change_time': 'datetime',
        'access_time': 'datetime',
        'operation_type': 'files.v4.config.ChangeOperationType',
        'object_type': 'files.v4.config.ObjectType',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'path': 'path',
        'old_path': 'oldPath',
        'size_bytes': 'sizeBytes',
        'inode_number': 'inodeNumber',
        'creation_time': 'creationTime',
        'change_time': 'changeTime',
        'access_time': 'accessTime',
        'operation_type': 'operationType',
        'object_type': 'objectType',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, path=None, old_path=None, size_bytes=None, inode_number=None, creation_time=None, change_time=None, access_time=None, operation_type=None, object_type=None, *args, **kwargs):  # noqa: E501
        self.__path = None
        self.__old_path = None
        self.__size_bytes = None
        self.__inode_number = None
        self.__creation_time = None
        self.__change_time = None
        self.__access_time = None
        self.__operation_type = None
        self.__object_type = None
        self.discriminator = None
        if path is not None:
            self.__path = path
        if old_path is not None:
            self.__old_path = old_path
        if size_bytes is not None:
            self.__size_bytes = size_bytes
        if inode_number is not None:
            self.__inode_number = inode_number
        if creation_time is not None:
            self.__creation_time = creation_time
        if change_time is not None:
            self.__change_time = change_time
        if access_time is not None:
            self.__access_time = access_time
        if operation_type is not None:
            self.__operation_type = operation_type
        if object_type is not None:
            self.__object_type = object_type
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'files.v4.config.ChangedContent'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def path(self):
        """
        Path of the object.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__path

    @path.setter
    def path(self, path):
        if path is not None and len(path) > 4095:
            raise ValueError("Invalid value for `path`, length must be less than or equal to `4095`")  # noqa: E501

        self.__path = path

    @property
    def old_path(self):
        """
        Old path of the object in case of rename.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__old_path

    @old_path.setter
    def old_path(self, old_path):
        if old_path is not None and len(old_path) > 4095:
            raise ValueError("Invalid value for `old_path`, length must be less than or equal to `4095`")  # noqa: E501

        self.__old_path = old_path

    @property
    def size_bytes(self):
        """
        Size of the object in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):

        self.__size_bytes = size_bytes

    @property
    def inode_number(self):
        """
        Inode number of the object.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__inode_number

    @inode_number.setter
    def inode_number(self, inode_number):

        self.__inode_number = inode_number

    @property
    def creation_time(self):
        """
        Create time of the object in date-time format..

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__creation_time

    @creation_time.setter
    def creation_time(self, creation_time):

        self.__creation_time = creation_time

    @property
    def change_time(self):
        """
        Change time of the object in date-time format.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__change_time

    @change_time.setter
    def change_time(self, change_time):

        self.__change_time = change_time

    @property
    def access_time(self):
        """
        Access time of the object in date-time format.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__access_time

    @access_time.setter
    def access_time(self, access_time):

        self.__access_time = access_time

    @property
    def operation_type(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.ChangeOperationType`
        """  # noqa: E501
        return self.__operation_type

    @operation_type.setter
    def operation_type(self, operation_type):

        self.__operation_type = operation_type

    @property
    def object_type(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.ObjectType`
        """  # noqa: E501
        return self.__object_type

    @object_type.setter
    def object_type(self, object_type):

        self.__object_type = object_type

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ChangedContent, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangedContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

