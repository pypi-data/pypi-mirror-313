# coding: utf-8


"""
IGNORE:
    Nutanix Files APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_files_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.ActiveDirectoryConfig import ActiveDirectoryConfig  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.LdapConfig import LdapConfig  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.NfsVersion import NfsVersion  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.ProtocolType import ProtocolType  # noqa: F401,E501

class DirectoryService(ExternalizableAbstractModel):

    """A model for configuring the name and directory services of the file server.

    :param ad_domain: (:attr:`ad_domain`) 
    :type ad_domain: 
    
    
    :param ldap_domain: (:attr:`ldap_domain`) 
    :type ldap_domain: 
    
    
    :param local_domain: (:attr:`local_domain`) 
    :type local_domain: 
    
    
    :param nfs_version: (:attr:`nfs_version`) 
    :type nfs_version: 
    
    
    :param nfs_v4_domain: (:attr:`nfs_v4_domain`) NFS V4 domain associated with the file server. Ex. child4.afs.minerva.com
    :type nfs_v4_domain: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'ad_domain': 'files.v4.config.ActiveDirectoryConfig',
        'ldap_domain': 'files.v4.config.LdapConfig',
        'local_domain': 'files.v4.config.ProtocolType',
        'nfs_version': 'files.v4.config.NfsVersion',
        'nfs_v4_domain': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'ad_domain': 'adDomain',
        'ldap_domain': 'ldapDomain',
        'local_domain': 'localDomain',
        'nfs_version': 'nfsVersion',
        'nfs_v4_domain': 'nfsV4Domain',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, ad_domain=None, ldap_domain=None, local_domain=None, nfs_version=None, nfs_v4_domain=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__ad_domain = None
        self.__ldap_domain = None
        self.__local_domain = None
        self.__nfs_version = None
        self.__nfs_v4_domain = None
        self.discriminator = None
        if ad_domain is not None:
            self.__ad_domain = ad_domain
        if ldap_domain is not None:
            self.__ldap_domain = ldap_domain
        if local_domain is not None:
            self.__local_domain = local_domain
        if nfs_version is not None:
            self.__nfs_version = nfs_version
        if nfs_v4_domain is not None:
            self.__nfs_v4_domain = nfs_v4_domain

    def _initialize_object_type(self):
        return 'files.v4.config.DirectoryService'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def ad_domain(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.ActiveDirectoryConfig`
        """  # noqa: E501
        return self.__ad_domain

    @ad_domain.setter
    def ad_domain(self, ad_domain):

        self.__ad_domain = ad_domain

    @property
    def ldap_domain(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.LdapConfig`
        """  # noqa: E501
        return self.__ldap_domain

    @ldap_domain.setter
    def ldap_domain(self, ldap_domain):

        self.__ldap_domain = ldap_domain

    @property
    def local_domain(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.ProtocolType`
        """  # noqa: E501
        return self.__local_domain

    @local_domain.setter
    def local_domain(self, local_domain):

        self.__local_domain = local_domain

    @property
    def nfs_version(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.NfsVersion`
        """  # noqa: E501
        return self.__nfs_version

    @nfs_version.setter
    def nfs_version(self, nfs_version):

        self.__nfs_version = nfs_version

    @property
    def nfs_v4_domain(self):
        """
        NFS V4 domain associated with the file server. Ex. child4.afs.minerva.com

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__nfs_v4_domain

    @nfs_v4_domain.setter
    def nfs_v4_domain(self, nfs_v4_domain):
        if nfs_v4_domain is not None and not re.search('^([a-z0-9]+(-[a-z0-9]+)*\\.)+([a-z0-9]+(-[a-z0-9]+)*){1,63}$', nfs_v4_domain):  # noqa: E501
            raise ValueError(r"Invalid value for `nfs_v4_domain`, must be a follow pattern or equal to `/^([a-z0-9]+(-[a-z0-9]+)*\\.)+([a-z0-9]+(-[a-z0-9]+)*){1,63}$/`")  # noqa: E501

        self.__nfs_v4_domain = nfs_v4_domain

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(DirectoryService, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectoryService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

