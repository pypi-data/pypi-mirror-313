# coding: utf-8


"""
IGNORE:
    Nutanix Files APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
import ntnx_files_py_client.models
from ntnx_files_py_client.models.OneOffiles.v4.config.SnapshotScheduleschedule import SnapshotScheduleschedule  # noqa: F401,E501
from ntnx_files_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_files_py_client.models.files.v4.config.SnapshotScheduleType import SnapshotScheduleType  # noqa: F401,E501

class SnapshotSchedule(ExternalizableAbstractModel):

    """Snapshot schedule model

    :param type: (:attr:`type`) 
    :type type: required
    
    
    :param schedule: (:attr:`schedule`) Snapshot schedule details for different type of schedules.
    :type schedule: required
    
    
    :param max_retention_count: (:attr:`max_retention_count`) The maximum number of snapshots to be kept locally.
    :type max_retention_count: required
    
     min=1, max=50

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'type': 'files.v4.config.SnapshotScheduleType',
        'schedule': 'OneOffiles.v4.config.SnapshotScheduleschedule',
        'max_retention_count': 'int',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'type': 'type',
        'schedule': 'schedule',
        'max_retention_count': 'maxRetentionCount',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, type=None, schedule=None, max_retention_count=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__type = None
        self.__schedule = None
        self.__max_retention_count = None
        self.discriminator = None
        self.__type = type
        self.__schedule = schedule
        self.__max_retention_count = max_retention_count

    def _initialize_object_type(self):
        return 'files.v4.config.SnapshotSchedule'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def type(self):
        """
        

        :type:
            :class:`~ntnx_files_py_client.models.files.v4.config.SnapshotScheduleType`
        """  # noqa: E501
        return self.__type

    @type.setter
    def type(self, type):
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self.__type = type

    @property
    def schedule(self):
        """
        Snapshot schedule details for different type of schedules.

        :type:
                :class:`~ntnx_files_py_client.models.files.v4.config.DailySchedule` | 
                :class:`~ntnx_files_py_client.models.files.v4.config.WeeklySchedule` | 
                :class:`~ntnx_files_py_client.models.files.v4.config.MonthlySchedule`
        """  # noqa: E501
        return self.__schedule

    @schedule.setter
    def schedule(self, schedule):
        if schedule is None:
            raise ValueError("Invalid value for `schedule`, must not be `None`")  # noqa: E501

        self.__schedule = schedule

    @property
    def max_retention_count(self):
        """
        The maximum number of snapshots to be kept locally.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__max_retention_count

    @max_retention_count.setter
    def max_retention_count(self, max_retention_count):
        if max_retention_count is None:
            raise ValueError("Invalid value for `max_retention_count`, must not be `None`")  # noqa: E501
        if max_retention_count is not None and max_retention_count > 50:  # noqa: E501
            raise ValueError("Invalid value for `max_retention_count`, must be a value less than or equal to `50`")  # noqa: E501
        if max_retention_count is not None and max_retention_count < 1:  # noqa: E501
            raise ValueError("Invalid value for `max_retention_count`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__max_retention_count = max_retention_count

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if attr_type.startswith('OneOf'):
                type = getattr(ntnx_files_py_client.models, attr_type.split('.')[-1])
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(SnapshotSchedule, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnapshotSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

