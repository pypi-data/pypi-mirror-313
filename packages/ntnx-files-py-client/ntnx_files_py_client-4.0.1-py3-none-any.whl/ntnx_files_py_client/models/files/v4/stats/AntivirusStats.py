# coding: utf-8


"""
IGNORE:
    Nutanix Files APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_files_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair import TimeIntValuePair  # noqa: F401,E501

class AntivirusStats(ExternalizableAbstractModel):

    """A model that represents antivirus statistics.

    :param scanned_file_count: (:attr:`scanned_file_count`) The number of files scanned by the antivirus.
    :type scanned_file_count: 
    
    
    :param threat_count: (:attr:`threat_count`) The number of threats found by the antivirus.
    :type threat_count: 
    
    
    :param cleaned_file_count: (:attr:`cleaned_file_count`) The number of files cleaned by the antivirus.
    :type cleaned_file_count: 
    
    
    :param quarantined_file_count: (:attr:`quarantined_file_count`) The number of files quarantined by the antivirus.
    :type quarantined_file_count: 
    
    
    :param latency_ms: (:attr:`latency_ms`) The antivirus average latency in milliseconds.
    :type latency_ms: 
    
    
    :param throughput_bps: (:attr:`throughput_bps`) The antivirus throughput in bytes per second.
    :type throughput_bps: 
    
    
    :param disconnect_count: (:attr:`disconnect_count`) The number of times the antivirus is disconnected.
    :type disconnect_count: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'scanned_file_count': 'list[common.v1.stats.TimeIntValuePair]',
        'threat_count': 'list[common.v1.stats.TimeIntValuePair]',
        'cleaned_file_count': 'list[common.v1.stats.TimeIntValuePair]',
        'quarantined_file_count': 'list[common.v1.stats.TimeIntValuePair]',
        'latency_ms': 'list[common.v1.stats.TimeIntValuePair]',
        'throughput_bps': 'list[common.v1.stats.TimeIntValuePair]',
        'disconnect_count': 'list[common.v1.stats.TimeIntValuePair]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'scanned_file_count': 'scannedFileCount',
        'threat_count': 'threatCount',
        'cleaned_file_count': 'cleanedFileCount',
        'quarantined_file_count': 'quarantinedFileCount',
        'latency_ms': 'latencyMs',
        'throughput_bps': 'throughputBps',
        'disconnect_count': 'disconnectCount',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, scanned_file_count=None, threat_count=None, cleaned_file_count=None, quarantined_file_count=None, latency_ms=None, throughput_bps=None, disconnect_count=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__scanned_file_count = None
        self.__threat_count = None
        self.__cleaned_file_count = None
        self.__quarantined_file_count = None
        self.__latency_ms = None
        self.__throughput_bps = None
        self.__disconnect_count = None
        self.discriminator = None
        if scanned_file_count is not None:
            self.__scanned_file_count = scanned_file_count
        if threat_count is not None:
            self.__threat_count = threat_count
        if cleaned_file_count is not None:
            self.__cleaned_file_count = cleaned_file_count
        if quarantined_file_count is not None:
            self.__quarantined_file_count = quarantined_file_count
        if latency_ms is not None:
            self.__latency_ms = latency_ms
        if throughput_bps is not None:
            self.__throughput_bps = throughput_bps
        if disconnect_count is not None:
            self.__disconnect_count = disconnect_count

    def _initialize_object_type(self):
        return 'files.v4.stats.AntivirusStats'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def scanned_file_count(self):
        """
        The number of files scanned by the antivirus.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__scanned_file_count

    @scanned_file_count.setter
    def scanned_file_count(self, scanned_file_count):

        self.__scanned_file_count = scanned_file_count

    @property
    def threat_count(self):
        """
        The number of threats found by the antivirus.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__threat_count

    @threat_count.setter
    def threat_count(self, threat_count):

        self.__threat_count = threat_count

    @property
    def cleaned_file_count(self):
        """
        The number of files cleaned by the antivirus.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__cleaned_file_count

    @cleaned_file_count.setter
    def cleaned_file_count(self, cleaned_file_count):

        self.__cleaned_file_count = cleaned_file_count

    @property
    def quarantined_file_count(self):
        """
        The number of files quarantined by the antivirus.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__quarantined_file_count

    @quarantined_file_count.setter
    def quarantined_file_count(self, quarantined_file_count):

        self.__quarantined_file_count = quarantined_file_count

    @property
    def latency_ms(self):
        """
        The antivirus average latency in milliseconds.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__latency_ms

    @latency_ms.setter
    def latency_ms(self, latency_ms):

        self.__latency_ms = latency_ms

    @property
    def throughput_bps(self):
        """
        The antivirus throughput in bytes per second.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__throughput_bps

    @throughput_bps.setter
    def throughput_bps(self, throughput_bps):

        self.__throughput_bps = throughput_bps

    @property
    def disconnect_count(self):
        """
        The number of times the antivirus is disconnected.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disconnect_count

    @disconnect_count.setter
    def disconnect_count(self, disconnect_count):

        self.__disconnect_count = disconnect_count

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(AntivirusStats, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AntivirusStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

