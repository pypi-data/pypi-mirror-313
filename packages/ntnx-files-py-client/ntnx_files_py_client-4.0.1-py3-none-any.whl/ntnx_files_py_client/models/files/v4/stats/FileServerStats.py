# coding: utf-8


"""
IGNORE:
    Nutanix Files APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_files_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair import TimeIntValuePair  # noqa: F401,E501

class FileServerStats(ExternalizableAbstractModel):

    """File server statistics model

    :param number_of_files: (:attr:`number_of_files`) The number of files metric.
    :type number_of_files: 
    
    
    :param number_of_connections: (:attr:`number_of_connections`) The number of active connections metric.
    :type number_of_connections: 
    
    
    :param average_latency_us: (:attr:`average_latency_us`) The average access latency metric in microseconds.
    :type average_latency_us: 
    
    
    :param read_latency_us: (:attr:`read_latency_us`) The average read latency metric in microseconds.
    :type read_latency_us: 
    
    
    :param write_latency_us: (:attr:`write_latency_us`) The average write latency metric in microseconds.
    :type write_latency_us: 
    
    
    :param metadata_latency_us: (:attr:`metadata_latency_us`) The average metadata latency in microseconds.
    :type metadata_latency_us: 
    
    
    :param average_throughput_bps: (:attr:`average_throughput_bps`) The average throughput metric in bytes per second.
    :type average_throughput_bps: 
    
    
    :param write_throughput_bps: (:attr:`write_throughput_bps`) The write throughput metric in bytes per second.
    :type write_throughput_bps: 
    
    
    :param read_throughput_bps: (:attr:`read_throughput_bps`) The read throughput metric in bytes per second.
    :type read_throughput_bps: 
    
    
    :param average_iops: (:attr:`average_iops`) The average Input/Output rate metric is measured in IOPS.
    :type average_iops: 
    
    
    :param write_iops: (:attr:`write_iops`) The write Input/Output rate metric is measured in IOPS.
    :type write_iops: 
    
    
    :param read_iops: (:attr:`read_iops`) The file server read Input/Output rate metric is measured in IOPS.
    :type read_iops: 
    
    
    :param metadata_iops: (:attr:`metadata_iops`) The metadata Input/Output rate metric is measured in IOPS.
    :type metadata_iops: 
    
    
    :param snapshot_used_bytes: (:attr:`snapshot_used_bytes`) Disk space in bytes used by the snapshots.
    :type snapshot_used_bytes: 
    
    
    :param dataset_space_used_bytes: (:attr:`dataset_space_used_bytes`) Disk space in bytes used by the file server or mount target dataset.
    :type dataset_space_used_bytes: 
    
    
    :param total_tiered_bytes: (:attr:`total_tiered_bytes`) Total tiered data in bytes to the object store.
    :type total_tiered_bytes: 
    
    
    :param av_scanned_file_count: (:attr:`av_scanned_file_count`) The number of files scanned by the antivirus.
    :type av_scanned_file_count: 
    
    
    :param av_threat_count: (:attr:`av_threat_count`) The number of threats found by the antivirus.
    :type av_threat_count: 
    
    
    :param av_cleaned_file_count: (:attr:`av_cleaned_file_count`) The number of files cleaned by the antivirus.
    :type av_cleaned_file_count: 
    
    
    :param av_quarantined_file_count: (:attr:`av_quarantined_file_count`) The number of files quarantined by the antivirus.
    :type av_quarantined_file_count: 
    
    
    :param av_latency_ms: (:attr:`av_latency_ms`) The antivirus average latency in milliseconds.
    :type av_latency_ms: 
    
    
    :param av_throughput_bps: (:attr:`av_throughput_bps`) The antivirus throughput in bytes per second.
    :type av_throughput_bps: 
    
    
    :param icap_daemon_queue_length: (:attr:`icap_daemon_queue_length`) The length of an antivirus scan queue.
    :type icap_daemon_queue_length: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'number_of_files': 'list[common.v1.stats.TimeIntValuePair]',
        'number_of_connections': 'list[common.v1.stats.TimeIntValuePair]',
        'average_latency_us': 'list[common.v1.stats.TimeIntValuePair]',
        'read_latency_us': 'list[common.v1.stats.TimeIntValuePair]',
        'write_latency_us': 'list[common.v1.stats.TimeIntValuePair]',
        'metadata_latency_us': 'list[common.v1.stats.TimeIntValuePair]',
        'average_throughput_bps': 'list[common.v1.stats.TimeIntValuePair]',
        'write_throughput_bps': 'list[common.v1.stats.TimeIntValuePair]',
        'read_throughput_bps': 'list[common.v1.stats.TimeIntValuePair]',
        'average_iops': 'list[common.v1.stats.TimeIntValuePair]',
        'write_iops': 'list[common.v1.stats.TimeIntValuePair]',
        'read_iops': 'list[common.v1.stats.TimeIntValuePair]',
        'metadata_iops': 'list[common.v1.stats.TimeIntValuePair]',
        'snapshot_used_bytes': 'list[common.v1.stats.TimeIntValuePair]',
        'dataset_space_used_bytes': 'list[common.v1.stats.TimeIntValuePair]',
        'total_tiered_bytes': 'list[common.v1.stats.TimeIntValuePair]',
        'av_scanned_file_count': 'list[common.v1.stats.TimeIntValuePair]',
        'av_threat_count': 'list[common.v1.stats.TimeIntValuePair]',
        'av_cleaned_file_count': 'list[common.v1.stats.TimeIntValuePair]',
        'av_quarantined_file_count': 'list[common.v1.stats.TimeIntValuePair]',
        'av_latency_ms': 'list[common.v1.stats.TimeIntValuePair]',
        'av_throughput_bps': 'list[common.v1.stats.TimeIntValuePair]',
        'icap_daemon_queue_length': 'list[common.v1.stats.TimeIntValuePair]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'number_of_files': 'numberOfFiles',
        'number_of_connections': 'numberOfConnections',
        'average_latency_us': 'averageLatencyUs',
        'read_latency_us': 'readLatencyUs',
        'write_latency_us': 'writeLatencyUs',
        'metadata_latency_us': 'metadataLatencyUs',
        'average_throughput_bps': 'averageThroughputBps',
        'write_throughput_bps': 'writeThroughputBps',
        'read_throughput_bps': 'readThroughputBps',
        'average_iops': 'averageIops',
        'write_iops': 'writeIops',
        'read_iops': 'readIops',
        'metadata_iops': 'metadataIops',
        'snapshot_used_bytes': 'snapshotUsedBytes',
        'dataset_space_used_bytes': 'datasetSpaceUsedBytes',
        'total_tiered_bytes': 'totalTieredBytes',
        'av_scanned_file_count': 'avScannedFileCount',
        'av_threat_count': 'avThreatCount',
        'av_cleaned_file_count': 'avCleanedFileCount',
        'av_quarantined_file_count': 'avQuarantinedFileCount',
        'av_latency_ms': 'avLatencyMs',
        'av_throughput_bps': 'avThroughputBps',
        'icap_daemon_queue_length': 'icapDaemonQueueLength',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, number_of_files=None, number_of_connections=None, average_latency_us=None, read_latency_us=None, write_latency_us=None, metadata_latency_us=None, average_throughput_bps=None, write_throughput_bps=None, read_throughput_bps=None, average_iops=None, write_iops=None, read_iops=None, metadata_iops=None, snapshot_used_bytes=None, dataset_space_used_bytes=None, total_tiered_bytes=None, av_scanned_file_count=None, av_threat_count=None, av_cleaned_file_count=None, av_quarantined_file_count=None, av_latency_ms=None, av_throughput_bps=None, icap_daemon_queue_length=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__number_of_files = None
        self.__number_of_connections = None
        self.__average_latency_us = None
        self.__read_latency_us = None
        self.__write_latency_us = None
        self.__metadata_latency_us = None
        self.__average_throughput_bps = None
        self.__write_throughput_bps = None
        self.__read_throughput_bps = None
        self.__average_iops = None
        self.__write_iops = None
        self.__read_iops = None
        self.__metadata_iops = None
        self.__snapshot_used_bytes = None
        self.__dataset_space_used_bytes = None
        self.__total_tiered_bytes = None
        self.__av_scanned_file_count = None
        self.__av_threat_count = None
        self.__av_cleaned_file_count = None
        self.__av_quarantined_file_count = None
        self.__av_latency_ms = None
        self.__av_throughput_bps = None
        self.__icap_daemon_queue_length = None
        self.discriminator = None
        if number_of_files is not None:
            self.__number_of_files = number_of_files
        if number_of_connections is not None:
            self.__number_of_connections = number_of_connections
        if average_latency_us is not None:
            self.__average_latency_us = average_latency_us
        if read_latency_us is not None:
            self.__read_latency_us = read_latency_us
        if write_latency_us is not None:
            self.__write_latency_us = write_latency_us
        if metadata_latency_us is not None:
            self.__metadata_latency_us = metadata_latency_us
        if average_throughput_bps is not None:
            self.__average_throughput_bps = average_throughput_bps
        if write_throughput_bps is not None:
            self.__write_throughput_bps = write_throughput_bps
        if read_throughput_bps is not None:
            self.__read_throughput_bps = read_throughput_bps
        if average_iops is not None:
            self.__average_iops = average_iops
        if write_iops is not None:
            self.__write_iops = write_iops
        if read_iops is not None:
            self.__read_iops = read_iops
        if metadata_iops is not None:
            self.__metadata_iops = metadata_iops
        if snapshot_used_bytes is not None:
            self.__snapshot_used_bytes = snapshot_used_bytes
        if dataset_space_used_bytes is not None:
            self.__dataset_space_used_bytes = dataset_space_used_bytes
        if total_tiered_bytes is not None:
            self.__total_tiered_bytes = total_tiered_bytes
        if av_scanned_file_count is not None:
            self.__av_scanned_file_count = av_scanned_file_count
        if av_threat_count is not None:
            self.__av_threat_count = av_threat_count
        if av_cleaned_file_count is not None:
            self.__av_cleaned_file_count = av_cleaned_file_count
        if av_quarantined_file_count is not None:
            self.__av_quarantined_file_count = av_quarantined_file_count
        if av_latency_ms is not None:
            self.__av_latency_ms = av_latency_ms
        if av_throughput_bps is not None:
            self.__av_throughput_bps = av_throughput_bps
        if icap_daemon_queue_length is not None:
            self.__icap_daemon_queue_length = icap_daemon_queue_length

    def _initialize_object_type(self):
        return 'files.v4.stats.FileServerStats'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def number_of_files(self):
        """
        The number of files metric.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__number_of_files

    @number_of_files.setter
    def number_of_files(self, number_of_files):

        self.__number_of_files = number_of_files

    @property
    def number_of_connections(self):
        """
        The number of active connections metric.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__number_of_connections

    @number_of_connections.setter
    def number_of_connections(self, number_of_connections):

        self.__number_of_connections = number_of_connections

    @property
    def average_latency_us(self):
        """
        The average access latency metric in microseconds.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__average_latency_us

    @average_latency_us.setter
    def average_latency_us(self, average_latency_us):

        self.__average_latency_us = average_latency_us

    @property
    def read_latency_us(self):
        """
        The average read latency metric in microseconds.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__read_latency_us

    @read_latency_us.setter
    def read_latency_us(self, read_latency_us):

        self.__read_latency_us = read_latency_us

    @property
    def write_latency_us(self):
        """
        The average write latency metric in microseconds.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__write_latency_us

    @write_latency_us.setter
    def write_latency_us(self, write_latency_us):

        self.__write_latency_us = write_latency_us

    @property
    def metadata_latency_us(self):
        """
        The average metadata latency in microseconds.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__metadata_latency_us

    @metadata_latency_us.setter
    def metadata_latency_us(self, metadata_latency_us):

        self.__metadata_latency_us = metadata_latency_us

    @property
    def average_throughput_bps(self):
        """
        The average throughput metric in bytes per second.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__average_throughput_bps

    @average_throughput_bps.setter
    def average_throughput_bps(self, average_throughput_bps):

        self.__average_throughput_bps = average_throughput_bps

    @property
    def write_throughput_bps(self):
        """
        The write throughput metric in bytes per second.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__write_throughput_bps

    @write_throughput_bps.setter
    def write_throughput_bps(self, write_throughput_bps):

        self.__write_throughput_bps = write_throughput_bps

    @property
    def read_throughput_bps(self):
        """
        The read throughput metric in bytes per second.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__read_throughput_bps

    @read_throughput_bps.setter
    def read_throughput_bps(self, read_throughput_bps):

        self.__read_throughput_bps = read_throughput_bps

    @property
    def average_iops(self):
        """
        The average Input/Output rate metric is measured in IOPS.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__average_iops

    @average_iops.setter
    def average_iops(self, average_iops):

        self.__average_iops = average_iops

    @property
    def write_iops(self):
        """
        The write Input/Output rate metric is measured in IOPS.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__write_iops

    @write_iops.setter
    def write_iops(self, write_iops):

        self.__write_iops = write_iops

    @property
    def read_iops(self):
        """
        The file server read Input/Output rate metric is measured in IOPS.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__read_iops

    @read_iops.setter
    def read_iops(self, read_iops):

        self.__read_iops = read_iops

    @property
    def metadata_iops(self):
        """
        The metadata Input/Output rate metric is measured in IOPS.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__metadata_iops

    @metadata_iops.setter
    def metadata_iops(self, metadata_iops):

        self.__metadata_iops = metadata_iops

    @property
    def snapshot_used_bytes(self):
        """
        Disk space in bytes used by the snapshots.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__snapshot_used_bytes

    @snapshot_used_bytes.setter
    def snapshot_used_bytes(self, snapshot_used_bytes):

        self.__snapshot_used_bytes = snapshot_used_bytes

    @property
    def dataset_space_used_bytes(self):
        """
        Disk space in bytes used by the file server or mount target dataset.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__dataset_space_used_bytes

    @dataset_space_used_bytes.setter
    def dataset_space_used_bytes(self, dataset_space_used_bytes):

        self.__dataset_space_used_bytes = dataset_space_used_bytes

    @property
    def total_tiered_bytes(self):
        """
        Total tiered data in bytes to the object store.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__total_tiered_bytes

    @total_tiered_bytes.setter
    def total_tiered_bytes(self, total_tiered_bytes):

        self.__total_tiered_bytes = total_tiered_bytes

    @property
    def av_scanned_file_count(self):
        """
        The number of files scanned by the antivirus.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__av_scanned_file_count

    @av_scanned_file_count.setter
    def av_scanned_file_count(self, av_scanned_file_count):

        self.__av_scanned_file_count = av_scanned_file_count

    @property
    def av_threat_count(self):
        """
        The number of threats found by the antivirus.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__av_threat_count

    @av_threat_count.setter
    def av_threat_count(self, av_threat_count):

        self.__av_threat_count = av_threat_count

    @property
    def av_cleaned_file_count(self):
        """
        The number of files cleaned by the antivirus.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__av_cleaned_file_count

    @av_cleaned_file_count.setter
    def av_cleaned_file_count(self, av_cleaned_file_count):

        self.__av_cleaned_file_count = av_cleaned_file_count

    @property
    def av_quarantined_file_count(self):
        """
        The number of files quarantined by the antivirus.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__av_quarantined_file_count

    @av_quarantined_file_count.setter
    def av_quarantined_file_count(self, av_quarantined_file_count):

        self.__av_quarantined_file_count = av_quarantined_file_count

    @property
    def av_latency_ms(self):
        """
        The antivirus average latency in milliseconds.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__av_latency_ms

    @av_latency_ms.setter
    def av_latency_ms(self, av_latency_ms):

        self.__av_latency_ms = av_latency_ms

    @property
    def av_throughput_bps(self):
        """
        The antivirus throughput in bytes per second.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__av_throughput_bps

    @av_throughput_bps.setter
    def av_throughput_bps(self, av_throughput_bps):

        self.__av_throughput_bps = av_throughput_bps

    @property
    def icap_daemon_queue_length(self):
        """
        The length of an antivirus scan queue.

        :type:
             list[ :class:`~ntnx_files_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__icap_daemon_queue_length

    @icap_daemon_queue_length.setter
    def icap_daemon_queue_length(self, icap_daemon_queue_length):

        self.__icap_daemon_queue_length = icap_daemon_queue_length

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(FileServerStats, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileServerStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

