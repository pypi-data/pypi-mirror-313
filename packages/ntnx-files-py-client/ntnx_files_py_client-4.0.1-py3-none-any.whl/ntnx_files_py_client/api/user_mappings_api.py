# coding: utf-8


"""
IGNORE:
    Nutanix Files APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six
from pathlib import Path

from ntnx_files_py_client.api_client import ApiClient


class UserMappingsApi(object):
    """IGNORE:
    NOTE: A placeholder for class level description
    IGNORE
    """  # noqa: E501

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()

        self.api_client = api_client
        self.__headers_to_skip = { 'authorization', 'cookie', 'host', 'user-agent' }

    def download_user_mappings(self, fileServerExtId, **kwargs):  # noqa: E501
        """Download user mappings

        >>> response = api.download_user_mappings(fileServerExtId)

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True.

        >>> thread = api.download_user_mappings(fileServerExtId, async_req=True)
        >>> result = thread.get()

        :param fileServerExtId: The external identifier of the file server.
        :type fileServerExtId:
            :class:`str`, required
        :param kwargs: kwargs for the method.
                       The following can be passed for an asynchronous HTTP call::

                           async_req=True
        :return: An instance of class :class:`~ntnx_files_py_client.models.files.v4.config.DownloadUserMappingsApiResponse`.

                 If the method is called asynchronously, returns the request thread.
        """ # noqa: E501
        kwargs['_return_http_data_only'] = True

        params = dict(locals())
        for key, val in six.iteritems(params['kwargs']):
            params[key] = val
        del params['kwargs']
        del params['self']

        # verify the required parameter 'fileServerExtId' is set
        if ('fileServerExtId' not in params or params['fileServerExtId'] is None):
            raise ValueError("Missing the required parameter `fileServerExtId` when calling `download_user_mappings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fileServerExtId' in params and params['fileServerExtId'] is not None:
            path_params['fileServerExtId'] = params['fileServerExtId']  # noqa: E501

        query_params = []

        header_params = {}
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client._select_header_accept(
            ['application/octet-stream', 'application/json'])  # noqa: E501
        if 'Accept' in params and params.get('Accept') is not None:
            header_params['Accept'] = params.get('Accept')

        # Process operation specific headers
        extra_params = []
        extra_params.append('async_req')
        extra_params.append('_return_http_data_only')
        extra_params.append('_preload_content')
        extra_params.append('_request_timeout')
        all_params = set(['fileServerExtId'])
        all_params.update(extra_params)
        for key, val in six.iteritems(params):
            if val is not None and key.lower() not in self.__headers_to_skip and key not in all_params:
                if key.lower() == 'if_match'.lower():
                    key = 'If-Match'
                elif key.lower() == 'if_none_match'.lower():
                    key = 'If-None-Match'
                header_params[key] = val

        form_params = []
        local_var_files = {}

        # Authentication setting
        auth_settings = ['apiKeyAuthScheme', 'basicAuthScheme']  # noqa: E501

        body_params = None

        try:
            if kwargs.get('async_req'):
                return self.api_client._call_api(
                    '/api/files/v4.0/config/file-servers/{fileServerExtId}/user-mappings', 'GET',
                    path_params,
                    query_params,
                    header_params,
                    body=body_params,
                    post_params=form_params,
                    files=local_var_files,
                    response_type='files.v4.config.DownloadUserMappingsApiResponse',  # noqa: E501
                    auth_settings=auth_settings,
                    async_req=params.get('async_req'),
                    _return_http_data_only=params.get('_return_http_data_only'),
                    _preload_content=params.get('_preload_content', True),
                    _request_timeout=params.get('_request_timeout'),
                    collection_formats=collection_formats)
            else:
                (data) = self.api_client._call_api(
                    '/api/files/v4.0/config/file-servers/{fileServerExtId}/user-mappings', 'GET',
                    path_params,
                    query_params,
                    header_params,
                    body=body_params,
                    post_params=form_params,
                    files=local_var_files,
                    response_type='files.v4.config.DownloadUserMappingsApiResponse',  # noqa: E501
                    auth_settings=auth_settings,
                    async_req=params.get('async_req'),
                    _return_http_data_only=params.get('_return_http_data_only'),
                    _preload_content=params.get('_preload_content', True),
                    _request_timeout=params.get('_request_timeout'),
                    collection_formats=collection_formats)
                return data
        finally:
            pass

    def upload_user_mappings(self, fileServerExtId, path, **kwargs):  # noqa: E501
        """Upload user mappings

        >>> response = api.upload_user_mappings(fileServerExtId, path)

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True.

        >>> thread = api.upload_user_mappings(fileServerExtId, path, async_req=True)
        >>> result = thread.get()

        :param fileServerExtId: The external identifier of the file server.
        :type fileServerExtId:
            :class:`str`, required
        :param path: 
        :type path:
            :class:`~pathlib.Path`, required
        :param kwargs: kwargs for the method.
                       The following can be passed for an asynchronous HTTP call::

                           async_req=True
        :return: An instance of class :class:`~ntnx_files_py_client.models.files.v4.config.UploadUserMappingsApiResponse`.

                 If the method is called asynchronously, returns the request thread.
        """ # noqa: E501
        kwargs['_return_http_data_only'] = True

        params = dict(locals())
        for key, val in six.iteritems(params['kwargs']):
            params[key] = val
        del params['kwargs']
        del params['self']

        # verify the required parameter 'fileServerExtId' is set
        if ('fileServerExtId' not in params or params['fileServerExtId'] is None):
            raise ValueError("Missing the required parameter `fileServerExtId` when calling `upload_user_mappings`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `upload_user_mappings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fileServerExtId' in params and params['fileServerExtId'] is not None:
            path_params['fileServerExtId'] = params['fileServerExtId']  # noqa: E501

        query_params = []

        header_params = {}
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client._select_header_accept(
            ['application/json'])  # noqa: E501
        if 'Accept' in params and params.get('Accept') is not None:
            header_params['Accept'] = params.get('Accept')

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client._select_header_content_type(  # noqa: E501
            ['application/octet-stream'])  # noqa: E501
        if 'Content-Type' in params and params.get('Content-Type') is not None:
            header_params['Content-Type'] = params.get('Content-Type')

        # Process operation specific headers
        extra_params = []
        extra_params.append('async_req')
        extra_params.append('_return_http_data_only')
        extra_params.append('_preload_content')
        extra_params.append('_request_timeout')
        all_params = set(['fileServerExtId', 'path'])
        all_params.update(extra_params)
        for key, val in six.iteritems(params):
            if val is not None and key.lower() not in self.__headers_to_skip and key not in all_params:
                if key.lower() == 'if_match'.lower():
                    key = 'If-Match'
                elif key.lower() == 'if_none_match'.lower():
                    key = 'If-None-Match'
                header_params[key] = val

        form_params = []
        local_var_files = {}

        # Authentication setting
        auth_settings = ['apiKeyAuthScheme', 'basicAuthScheme']  # noqa: E501

        body_params = None
        if 'path' in params and params['path'] is not None:
            body_params = params['path']
            filepath = params['path']
            if not isinstance(filepath, Path) or not filepath.is_file():
                raise ValueError("The required parameter `path` is not a valid Path file when calling `upload_user_mappings`")  # noqa: E501

            header_params['Content-Length'] = filepath.stat().st_size
            if 'Content-Disposition' not in header_params:
                header_params['Content-Disposition'] = 'attachment; filename="' + filepath.name + '"'

            body_params = filepath.open(mode='rb')

        try:
            if kwargs.get('async_req'):
                return self.api_client._call_api(
                    '/api/files/v4.0/config/file-servers/{fileServerExtId}/$actions/upload-user-mappings', 'POST',
                    path_params,
                    query_params,
                    header_params,
                    body=body_params,
                    post_params=form_params,
                    files=local_var_files,
                    response_type='files.v4.config.UploadUserMappingsApiResponse',  # noqa: E501
                    auth_settings=auth_settings,
                    async_req=params.get('async_req'),
                    _return_http_data_only=params.get('_return_http_data_only'),
                    _preload_content=params.get('_preload_content', True),
                    _request_timeout=params.get('_request_timeout'),
                    collection_formats=collection_formats)
            else:
                (data) = self.api_client._call_api(
                    '/api/files/v4.0/config/file-servers/{fileServerExtId}/$actions/upload-user-mappings', 'POST',
                    path_params,
                    query_params,
                    header_params,
                    body=body_params,
                    post_params=form_params,
                    files=local_var_files,
                    response_type='files.v4.config.UploadUserMappingsApiResponse',  # noqa: E501
                    auth_settings=auth_settings,
                    async_req=params.get('async_req'),
                    _return_http_data_only=params.get('_return_http_data_only'),
                    _preload_content=params.get('_preload_content', True),
                    _request_timeout=params.get('_request_timeout'),
                    collection_formats=collection_formats)
                return data
        finally:
            body_params.close()
            
