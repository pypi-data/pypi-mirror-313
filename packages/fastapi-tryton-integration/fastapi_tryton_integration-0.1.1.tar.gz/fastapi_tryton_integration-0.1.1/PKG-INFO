Metadata-Version: 2.1
Name: fastapi_tryton_integration
Version: 0.1.1
Summary: Adds Tryton support to FastAPI application
Home-page: https://pypi.org/project/fastapi-tryton-integration/
Download-URL: https://code.gruposolutema.com/fastapi-tryton-integration/
Author: Solutema
Author-email: info@solutema.com
License: GPL-3
Project-URL: Source Code, https://code.gruposolutema.com/fastapi-tryton-integration
Keywords: fastapi tryton web
Platform: any
Classifier: Environment :: Web Environment
Classifier: Framework :: Tryton
Classifier: Framework :: FastAPI
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: fastapi<=0.115.6
Requires-Dist: trytond>=6.0

# fastapi-tryton-integration

This package was created from the `fastapi-tryton-async <https://github.com/TinKurbatoff/fastapi-tryton-async>`_ repository developed by Constantine K.

Modifications and adaptations have been made to meet new requirements and extend its functionality.

SUPPORTS ASYNC FUNCTIONS!
*NOTE*: However, the only one transaction in a time supported!

Install:
```
pip3 install fastapi-tryton-integration
```

Usage:
```
from fastapi import FastAPI
from fastapi import Request
from fastapi_tryton_integration import Tryton
from fastapi_tryton_integration import options

options.config['TRYTON_DATABASE'] = "my_database"  # What exact database name
options.config['TRYTON_CONFIG'] = "/etc/tryton.conf" # path to configuration file
options.config['TRYTON_CONNECTION'] = "postgresql://user:my_secret_password@localhost:5432"

app = FastAPI()

try:
    tryton = Tryton(options, configure_jinja=True)
except Exception as e:
    logger.error(f"Cannot initialize Tryton ERP: {e}")
    exit()
User = tryton.pool.get('res.user')  # Important class type - User

# ——— API endpoints
@app.post(f"/hello/")  
@tryton.transaction(readonly=False)
async def hello(request: Request):  # (request: Request) — required!
    user, = User.search([('login', '=', 'admin')])
    return '%s, Hello World!' % user.name

...

```
*NOTE*: request (fastapi Request class) not always is required for the decorated function parameters.

There are three configuration options available:

TRYTON_DATABASE: the Tryton’s database to connect.

TRYTON_USER: the Tryton user id to use, by default 0 (aka root).

TRYTON_CONFIG: the optional path to the Tryton’s configuration.

TRYTON_CONNECTION: full path (uri) to the database
