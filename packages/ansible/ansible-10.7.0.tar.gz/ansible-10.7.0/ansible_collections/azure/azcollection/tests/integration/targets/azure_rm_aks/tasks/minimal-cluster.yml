- name: Set varialbles
  ansible.builtin.set_fact:
    rpfx: "{{ resource_group | hash('md5') | truncate(8, True, '') }}"
    location: westus2

- name: Find available k8s version
  azure_rm_aksversion_info:
    location: "{{ location }}"
  register: versions

- name: Use minimal parameters and system-assigned identity
  azure_rm_aks:
    name: "minimal{{ rpfx }}"
    location: "{{ location }}"
    resource_group: "{{ resource_group }}"
    kubernetes_version: "{{ versions.azure_aks_versions[0] }}"
    dns_prefix: "aks{{ rpfx }}"
    enable_rbac: true
    aad_profile:
      managed: true
      enable_azure_rbac: true
    agent_pool_profiles:
      - name: default
        count: 1
        vm_size: Standard_D2_v2
        mode: System
    api_server_access_profile:
      authorized_ip_ranges:
        - "192.0.2.0"
        - "198.51.100.0"
        - "203.0.113.0"
      enable_private_cluster: false
    network_profile:
      network_plugin_mode: Overlay
      network_plugin: azure
      load_balancer_sku: standard
      outbound_type: loadBalancer
    auto_upgrade_profile:
      node_os_upgrade_channel: NodeImage
      upgrade_channel: patch
  register: output

- name: Assert the AKS instance is well created
  ansible.builtin.assert:
    that:
      - output.changed
      - output.provisioning_state == 'Succeeded'

- name: Get AKS fact
  azure_rm_aks_info:
    name: "minimal{{ rpfx }}"
    resource_group: "{{ resource_group }}"
  register: fact

- name: Assert fact returns the created one
  ansible.builtin.assert:
    that:
      - "fact.aks | length == 1"
      - fact.aks[0].id == output.id
      - fact.aks[0].aad_profile.managed == true
      - fact.aks[0].aad_profile.enable_azure_rbac == true

- name: Use minimal parameters and system-assigned identity (idempotent)
  azure_rm_aks:
    name: "minimal{{ rpfx }}"
    location: "{{ location }}"
    resource_group: "{{ resource_group }}"
    kubernetes_version: "{{ versions.azure_aks_versions[0] }}"
    dns_prefix: "aks{{ rpfx }}"
    enable_rbac: true
    identity:
      type: "SystemAssigned"
    aad_profile:
      managed: true
      enable_azure_rbac: true
    agent_pool_profiles:
      - name: default
        count: 1
        vm_size: Standard_D2_v2
        mode: System
    api_server_access_profile:
      authorized_ip_ranges:
        - "192.0.2.0"
        - "198.51.100.0"
        - "203.0.113.0"
      enable_private_cluster: false
    network_profile:
      network_plugin_mode: Overlay
      network_plugin: azure
      load_balancer_sku: standard
      outbound_type: loadBalancer
    auto_upgrade_profile:
      node_os_upgrade_channel: NodeImage
      upgrade_channel: patch
  register: output

- name: Assert idempotent
  ansible.builtin.assert:
    that:
      - not output.changed

- name: Use minimal parameters and user-assigned identity
  azure_rm_aks:
    name: "minimal{{ rpfx }}"
    location: "{{ location }}"
    resource_group: "{{ resource_group }}"
    kubernetes_version: "{{ versions.azure_aks_versions[0] }}"
    dns_prefix: "aks{{ rpfx }}"
    enable_rbac: true
    identity:
      type: "UserAssigned"
      user_assigned_identities: "{{ user_identity }}"
    aad_profile:
      managed: true
      enable_azure_rbac: true
    agent_pool_profiles:
      - name: default
        count: 1
        vm_size: Standard_D2_v2
        mode: System
    api_server_access_profile:
      authorized_ip_ranges:
        - "192.0.2.0"
        - "198.51.100.0"
        - "203.0.113.0"
      enable_private_cluster: false
    network_profile:
      network_plugin_mode: Overlay
      load_balancer_sku: standard
      outbound_type: loadBalancer
      network_plugin: azure
    auto_upgrade_profile:
      node_os_upgrade_channel: NodeImage
      upgrade_channel: patch
  register: output

- name: Assert the AKS instance is well created
  ansible.builtin.assert:
    that:
      - output.changed
      - output.provisioning_state == 'Succeeded'

- name: Get AKS fact
  azure_rm_aks_info:
    name: "minimal{{ rpfx }}"
    resource_group: "{{ resource_group }}"
  register: fact

- name: Assert fact returns the created one
  ansible.builtin.assert:
    that:
      - "fact.aks | length == 1"
      - fact.aks[0].id == output.id
      - fact.aks[0].aad_profile.managed == true
      - fact.aks[0].network_profile.network_plugin_mode == "overlay"
      - user_identity in fact.aks[0].identity.user_assigned_identities

- name: Use minimal parameters and user-assigned identity (idempotent)
  azure_rm_aks:
    name: "minimal{{ rpfx }}"
    location: "{{ location }}"
    resource_group: "{{ resource_group }}"
    kubernetes_version: "{{ versions.azure_aks_versions[0] }}"
    dns_prefix: "aks{{ rpfx }}"
    enable_rbac: true
    identity:
      type: "UserAssigned"
      user_assigned_identities: "{{ user_identity }}"
    aad_profile:
      managed: true
      enable_azure_rbac: true
    agent_pool_profiles:
      - name: default
        count: 1
        vm_size: Standard_D2_v2
        mode: System
    api_server_access_profile:
      authorized_ip_ranges:
        - "192.0.2.0"
        - "198.51.100.0"
        - "203.0.113.0"
      enable_private_cluster: false
    network_profile:
      network_plugin_mode: Overlay
      network_plugin: azure
      load_balancer_sku: standard
      outbound_type: loadBalancer
    auto_upgrade_profile:
      node_os_upgrade_channel: NodeImage
      upgrade_channel: patch
  register: output

- name: Assert idempotent
  ansible.builtin.assert:
    that:
      - not output.changed

- name: Use minimal parameters and user-assigned 2 identity
  azure_rm_aks:
    name: "minimal{{ rpfx }}"
    location: "{{ location }}"
    resource_group: "{{ resource_group }}"
    kubernetes_version: "{{ versions.azure_aks_versions[0] }}"
    dns_prefix: "aks{{ rpfx }}"
    enable_rbac: true
    identity:
      type: "UserAssigned"
      user_assigned_identities: "{{ user_identity_2 }}"
    aad_profile:
      managed: true
      enable_azure_rbac: true
    agent_pool_profiles:
      - name: default
        count: 1
        vm_size: Standard_D2_v2
        mode: System
    api_server_access_profile:
      authorized_ip_ranges:
        - "192.0.2.0"
        - "198.51.100.0"
        - "203.0.113.0"
      enable_private_cluster: false
    network_profile:
      network_plugin_mode: Overlay
      network_plugin: azure
      load_balancer_sku: standard
      outbound_type: loadBalancer
    auto_upgrade_profile:
      node_os_upgrade_channel: NodeImage
      upgrade_channel: patch
  register: output

- name: Assert the AKS instance is well created
  ansible.builtin.assert:
    that:
      - output.changed
      - output.provisioning_state == 'Succeeded'

- name: Get AKS fact
  azure_rm_aks_info:
    name: "minimal{{ rpfx }}"
    resource_group: "{{ resource_group }}"
  register: fact

- name: Assert fact returns the created one
  ansible.builtin.assert:
    that:
      - "fact.aks | length == 1"
      - fact.aks[0].id == output.id
      - fact.aks[0].aad_profile.managed == true
      - user_identity_2 in fact.aks[0].identity.user_assigned_identities

- name: Update api_server_access_profile and auto_upgrade_channel config
  azure_rm_aks:
    name: "minimal{{ rpfx }}"
    location: "{{ location }}"
    resource_group: "{{ resource_group }}"
    kubernetes_version: "{{ versions.azure_aks_versions[0] }}"
    dns_prefix: "aks{{ rpfx }}"
    enable_rbac: true
    agent_pool_profiles:
      - name: default
        count: 1
        vm_size: Standard_D2_v2
        mode: System
    api_server_access_profile:
      authorized_ip_ranges:
        - "173.0.113.0"
        - "192.0.2.0"
        - "198.51.100.0"
        - "203.0.113.0"
      enable_private_cluster: false
    network_profile:
      network_plugin_mode: Overlay
      network_plugin: azure
      load_balancer_sku: standard
      outbound_type: loadBalancer
    auto_upgrade_profile:
      node_os_upgrade_channel: NodeImage
      upgrade_channel: stable
  register: output

- name: Assert idempotent
  ansible.builtin.assert:
    that:
      - output.changed

- name: Delete the AKS instance
  azure_rm_aks:
    name: "minimal{{ rpfx }}"
    resource_group: "{{ resource_group }}"
    state: absent
  register: output

- name: Assert the AKS instance is well deleted
  ansible.builtin.assert:
    that:
      - output.changed

- name: Get AKS fact
  azure_rm_aks_info:
    name: "minimal{{ rpfx }}"
    resource_group: "{{ resource_group }}"
  register: fact

- name: Assert fact returns empty
  ansible.builtin.assert:
    that:
      - "fact.aks | length == 0"
