from StreamlinedCryptography.util.enforce_types import enforce_types

import base64


class SerializationError(Exception):
    """
    An exception raised when an error occurs during serialization or deserialization.
    """
    pass


@enforce_types()
def serialize_list(data: tuple | list) -> bytes:
    """
    Serializes a list or tuple of bytes into a single byte string.

    Usage:
        serialize_list([b'hello', b'world'])
        # Output: b'aGVsbG8_d29ybGQ='

    Notes:
        - Does not support nested lists or tuples.
        - Does not raise any exceptions apart from those raised by the enforce_types decorator (TypeError).
        - Passing an empty byte string (b'') will result in an empty tuple.

    :param data: tuple[bytes, ...] | list[bytes, ...]
    :return: bytes
    """
    return b"_".join(base64.b64encode(part) for part in data)


@enforce_types()
def deserialize_list(data: bytes) -> tuple[bytes, ...]:
    """
    Deserializes a byte string into a tuple of bytes.

    Usage:
        deserialize_list(b'aGVsbG8_d29ybGQ=')
        # Output: (b'hello', b'world')

    Notes:
        - Does not raise any exceptions apart from those raised by the enforce_types decorator (TypeError).
        - Data must be separated by '_' characters and base64 encoded. (or generated by serialize_list)

    :param data: bytes
    :return: tuple[bytes]
    """
    try:
        encoded_list = data.split(b'_')
        deserialized_list = [base64.b64decode(bytestring) for bytestring in encoded_list]
        return tuple(deserialized_list)
    except Exception as e:
        raise SerializationError(f"Failed to deserialize data: {e}")


@enforce_types()
def pack_signature(signature: bytes, data: bytes) -> bytes:
    """
    Packages a signature and data into a single byte string.

    Usage:
        package_signature(b'hello', b'world')
        # Output: b'hello_world'

    :param signature: bytes
    :param data: bytes
    :return: bytes
    """
    
    encoded_signature = base64.b64encode(signature)
    
    return encoded_signature + b"-" + data


def unpack_signature(packed_data: bytes) -> tuple[bytes, bytes]:
    """
    Unpacks a signature and data from a byte string.

    Usage:
        unpack_signature(b'hello_world')
        # Output: (b'hello', b'world')

    :param packed_data: bytes
    :return: tuple[bytes, bytes]
    """
    signature, data = packed_data.split(b"-", 1)

    decoded_signature = base64.b64decode(signature)
    
    return decoded_signature, data
