# coding: utf-8

"""
    RAG as a Service API

    API for managing RAG configurations, integrations, prompt templates, and backtesting.

    The version of the OpenAPI document: 1.0.0
    Contact: support@ducky.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from lycoai-ducky-sdk.models.integrations_list_response_integrations_inner import IntegrationsListResponseIntegrationsInner

class TestIntegrationsListResponseIntegrationsInner(unittest.TestCase):
    """IntegrationsListResponseIntegrationsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IntegrationsListResponseIntegrationsInner:
        """Test IntegrationsListResponseIntegrationsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IntegrationsListResponseIntegrationsInner`
        """
        model = IntegrationsListResponseIntegrationsInner()
        if include_optional:
            return IntegrationsListResponseIntegrationsInner(
                index_id = '',
                integration_name = '',
                integration_id = '',
                integration_type = '',
                synced_up_to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                sync_start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_sync_attempt = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                items_indexed = 56,
                next_sync = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return IntegrationsListResponseIntegrationsInner(
        )
        """

    def testIntegrationsListResponseIntegrationsInner(self):
        """Test IntegrationsListResponseIntegrationsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
