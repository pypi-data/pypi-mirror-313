# coding: utf-8

"""
    RAG as a Service API

    API for managing RAG configurations, integrations, prompt templates, and backtesting.

    The version of the OpenAPI document: 1.0.0
    Contact: support@ducky.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from lycoai-ducky-sdk.models.run_evaluation_request import RunEvaluationRequest

class TestRunEvaluationRequest(unittest.TestCase):
    """RunEvaluationRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RunEvaluationRequest:
        """Test RunEvaluationRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RunEvaluationRequest`
        """
        model = RunEvaluationRequest()
        if include_optional:
            return RunEvaluationRequest(
                variants = [
                    {"retrieval_strategy":{"result_type":"result_type","rerank":true,"contextual_compression":{"filter_type":"filter_type","enabled":true},"corrective_retrieval":{"fallback":"fallback","enabled":true},"k":0},"prompt_template_id":"prompt_template_id","query_translation_strategy":{"semantic_expansion":true,"multiquery":true,"step_back":true,"decomposition":true},"variant_name":"variant_name","self_correction_strategy":{"fallback_to_web_search":true,"check_hallucinations":true,"enabled":true}}
                    ],
                evaluator_ids = [
                    ''
                    ],
                test_cases = [
                    {"variables":"{}","expected_output":"expected_output"}
                    ]
            )
        else:
            return RunEvaluationRequest(
        )
        """

    def testRunEvaluationRequest(self):
        """Test RunEvaluationRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
