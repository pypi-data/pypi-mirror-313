# coding: utf-8

"""
    RAG as a Service API

    API for managing RAG configurations, integrations, prompt templates, and backtesting.

    The version of the OpenAPI document: 1.0.0
    Contact: support@ducky.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from duckyai.models.retrieval_strategy import RetrievalStrategy
from typing import Optional, Set
from typing_extensions import Self

class RetrieveDocumentsRequest(BaseModel):
    """
    RetrieveDocumentsRequest
    """ # noqa: E501
    index_name: StrictStr = Field(description="The name of the index to retrieve documents from")
    query: StrictStr = Field(description="The search query used for retrieving documents")
    retrieval_strategy: RetrievalStrategy
    filter: Optional[Dict[str, Any]] = Field(default=None, description="The filter object is used to specify query criteria for filtering results. Each key in the filter object represents a field name, and its value is a dictionary of comparison operators. Logical operators can be used within these dictionaries to combine multiple conditions.  - **Comparison Operators**:   - **`$eq`**: Checks if a field is equal to a specified value (string, number, or boolean).     - Simplified form: `\"field1\": \"value1\"` is equivalent to `\"field1\": {\"$eq\": \"value1\"}`.   - **`$ne`**: Checks if a field is not equal to a specified value (string, number, or boolean).   - **`$gt`**: Checks if a field is greater than a specified numeric value.   - **`$gte`**: Checks if a field is greater than or equal to a specified numeric value.   - **`$lt`**: Checks if a field is less than a specified numeric value.   - **`$lte`**: Checks if a field is less than or equal to a specified numeric value.   - **`$in`**: Checks if a field's value is within a specified list of values (strings, numbers).   - **`$nin`**: Checks if a field's value is not within a specified list of values (strings, numbers).  - **Logical Operators** (used within field-specific dictionaries):   - **`$and`**: An array of filter objects, all of which must evaluate to true.   - **`$or`**: An array of filter objects, at least one of which must evaluate to true.  Example: ```json {   \"field1\": \"value1\",  // Simplified equals check   \"field2\": {\"$gt\": 10},   \"field3\": {     \"$or\": [       {\"$in\": [\"value2\", \"value3\"]},       {\"$ne\": \"value4\"}     ]   } } ``` ")
    __properties: ClassVar[List[str]] = ["index_name", "query", "retrieval_strategy", "filter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RetrieveDocumentsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of retrieval_strategy
        if self.retrieval_strategy:
            _dict['retrieval_strategy'] = self.retrieval_strategy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RetrieveDocumentsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "index_name": obj.get("index_name"),
            "query": obj.get("query"),
            "retrieval_strategy": RetrievalStrategy.from_dict(obj["retrieval_strategy"]) if obj.get("retrieval_strategy") is not None else None,
            "filter": obj.get("filter")
        })
        return _obj


