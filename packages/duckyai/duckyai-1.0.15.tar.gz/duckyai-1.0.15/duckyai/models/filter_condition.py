# coding: utf-8

"""
    RAG as a Service API

    API for managing RAG configurations, integrations, prompt templates, and backtesting.

    The version of the OpenAPI document: 1.0.0
    Contact: support@ducky.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FilterCondition(BaseModel):
    """
    A filter condition for fields like $eq, $ne, $gt, etc.
    """ # noqa: E501
    eq: Optional[Dict[str, Any]] = Field(default=None, alias="$eq")
    ne: Optional[Dict[str, Any]] = Field(default=None, alias="$ne")
    gt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="$gt")
    gte: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="$gte")
    lt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="$lt")
    lte: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="$lte")
    var_in: Optional[List[Dict[str, Any]]] = Field(default=None, alias="$in")
    nin: Optional[List[Dict[str, Any]]] = Field(default=None, alias="$nin")
    exists: Optional[StrictBool] = Field(default=None, alias="$exists")
    __properties: ClassVar[List[str]] = ["$eq", "$ne", "$gt", "$gte", "$lt", "$lte", "$in", "$nin", "$exists"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FilterCondition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FilterCondition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "$eq": obj.get("$eq"),
            "$ne": obj.get("$ne"),
            "$gt": obj.get("$gt"),
            "$gte": obj.get("$gte"),
            "$lt": obj.get("$lt"),
            "$lte": obj.get("$lte"),
            "$in": obj.get("$in"),
            "$nin": obj.get("$nin"),
            "$exists": obj.get("$exists")
        })
        return _obj


