# coding: utf-8

"""
    RAG as a Service API

    API for managing RAG configurations, integrations, prompt templates, and backtesting.

    The version of the OpenAPI document: 1.0.0
    Contact: support@ducky.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from duckyai.models.project import Project
from typing import Optional, Set
from typing_extensions import Self

class Organization(BaseModel):
    """
    Organization
    """ # noqa: E501
    org_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the organization from Clerk.")
    org_name: Optional[StrictStr] = Field(default=None, description="The name of the organization.")
    owner_id: Optional[StrictStr] = Field(default=None, description="The user ID of the organization's owner.")
    created_at: Optional[datetime] = Field(default=None, description="The timestamp when the organization was created.")
    updated_at: Optional[datetime] = Field(default=None, description="The timestamp when the organization was last updated.")
    projects: Optional[List[Project]] = None
    __properties: ClassVar[List[str]] = ["org_id", "org_name", "owner_id", "created_at", "updated_at", "projects"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Organization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in projects (list)
        _items = []
        if self.projects:
            for _item_projects in self.projects:
                if _item_projects:
                    _items.append(_item_projects.to_dict())
            _dict['projects'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Organization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "org_id": obj.get("org_id"),
            "org_name": obj.get("org_name"),
            "owner_id": obj.get("owner_id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "projects": [Project.from_dict(_item) for _item in obj["projects"]] if obj.get("projects") is not None else None
        })
        return _obj


