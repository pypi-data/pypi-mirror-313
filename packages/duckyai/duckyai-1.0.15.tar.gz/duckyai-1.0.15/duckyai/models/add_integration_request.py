# coding: utf-8

"""
    RAG as a Service API

    API for managing RAG configurations, integrations, prompt templates, and backtesting.

    The version of the OpenAPI document: 1.0.0
    Contact: support@ducky.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from duckyai.models.add_integration_request_auth_details import AddIntegrationRequestAuthDetails
from typing import Optional, Set
from typing_extensions import Self

class AddIntegrationRequest(BaseModel):
    """
    AddIntegrationRequest
    """ # noqa: E501
    index_id: Optional[StrictStr] = Field(default=None, description="The ID of the index to add the items to")
    integration_name: Optional[StrictStr] = Field(default=None, description="The name of the integration")
    integration_type: Optional[StrictStr] = Field(default=None, description="The type of integration")
    start_date: Optional[datetime] = Field(default=None, description="The start date for data ingestion")
    auth_details: Optional[AddIntegrationRequestAuthDetails] = None
    ingestion_config: Optional[Dict[str, Any]] = Field(default=None, description="Ingestion configuration details")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Metadata associated with the document. Accepts key value pairs where the value can be a string, number, boolean, or list of strings.")
    __properties: ClassVar[List[str]] = ["index_id", "integration_name", "integration_type", "start_date", "auth_details", "ingestion_config", "metadata"]

    @field_validator('integration_type')
    def integration_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['asana', 'notion', 'linear', 'airtable', 'helpscout', 'slack', 'jsm', 'confluence', 'zendesk', 'intercom', 'google_drive']):
            raise ValueError("must be one of enum values ('asana', 'notion', 'linear', 'airtable', 'helpscout', 'slack', 'jsm', 'confluence', 'zendesk', 'intercom', 'google_drive')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddIntegrationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auth_details
        if self.auth_details:
            _dict['auth_details'] = self.auth_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddIntegrationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "index_id": obj.get("index_id"),
            "integration_name": obj.get("integration_name"),
            "integration_type": obj.get("integration_type"),
            "start_date": obj.get("start_date"),
            "auth_details": AddIntegrationRequestAuthDetails.from_dict(obj["auth_details"]) if obj.get("auth_details") is not None else None,
            "ingestion_config": obj.get("ingestion_config"),
            "metadata": obj.get("metadata")
        })
        return _obj


