# coding: utf-8

"""
    RAG as a Service API

    API for managing RAG configurations, integrations, prompt templates, and backtesting.

    The version of the OpenAPI document: 1.0.0
    Contact: support@ducky.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IntegrationsListResponseIntegrationsInner(BaseModel):
    """
    IntegrationsListResponseIntegrationsInner
    """ # noqa: E501
    index_id: Optional[StrictStr] = Field(default=None, description="The ID of the index")
    integration_name: Optional[StrictStr] = Field(default=None, description="The name of the integration")
    integration_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the integration")
    integration_type: Optional[StrictStr] = Field(default=None, description="The type of the integration")
    synced_up_to: Optional[datetime] = Field(default=None, description="The timestamp up to which the integration has been synced")
    sync_start_date: Optional[datetime] = Field(default=None, description="The sync start date")
    last_sync_attempt: Optional[datetime] = Field(default=None, description="The timestamp of the last sync attempt")
    items_indexed: Optional[StrictInt] = Field(default=None, description="Number of items indexed")
    next_sync: Optional[datetime] = Field(default=None, description="When the next sync is scheduled")
    __properties: ClassVar[List[str]] = ["index_id", "integration_name", "integration_id", "integration_type", "synced_up_to", "sync_start_date", "last_sync_attempt", "items_indexed", "next_sync"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntegrationsListResponseIntegrationsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntegrationsListResponseIntegrationsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "index_id": obj.get("index_id"),
            "integration_name": obj.get("integration_name"),
            "integration_id": obj.get("integration_id"),
            "integration_type": obj.get("integration_type"),
            "synced_up_to": obj.get("synced_up_to"),
            "sync_start_date": obj.get("sync_start_date"),
            "last_sync_attempt": obj.get("last_sync_attempt"),
            "items_indexed": obj.get("items_indexed"),
            "next_sync": obj.get("next_sync")
        })
        return _obj


