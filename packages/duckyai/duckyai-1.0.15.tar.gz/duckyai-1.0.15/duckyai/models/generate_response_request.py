# coding: utf-8

"""
    RAG as a Service API

    API for managing RAG configurations, integrations, prompt templates, and backtesting.

    The version of the OpenAPI document: 1.0.0
    Contact: support@ducky.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from duckyai.models.generate_response_request_query_translation_strategy import GenerateResponseRequestQueryTranslationStrategy
from duckyai.models.generate_response_request_retrieval_strategy import GenerateResponseRequestRetrievalStrategy
from duckyai.models.generate_response_request_self_correction_strategy import GenerateResponseRequestSelfCorrectionStrategy
from typing import Optional, Set
from typing_extensions import Self

class GenerateResponseRequest(BaseModel):
    """
    GenerateResponseRequest
    """ # noqa: E501
    max_completion_tokens: Optional[StrictInt] = Field(default=None, description="The max number of completion tokens to generate")
    index_name: Optional[StrictStr] = Field(default=None, description="The name of the index to retrieve documents from")
    retrieval_query: Optional[StrictStr] = Field(default=None, description="The query used to retrieve relevant documents")
    prompt: Optional[StrictStr] = Field(default=None, description="If not using a prompt template, user can specify a prompt manually. Useful for testing.")
    prompt_template_id: Optional[StrictStr] = Field(default=None, description="The ID of the prompt template to use")
    variables: Optional[Dict[str, StrictStr]] = Field(default=None, description="Variables to inject into the prompt")
    evaluation_id: Optional[StrictStr] = Field(default=None, description="The ID representing the evaluation to compare variant results in (optional)")
    variant_name: Optional[StrictStr] = Field(default=None, description="A name of the evaluation variant to use, allowing you to track performance across different variants (optional)")
    retrieval_strategy: Optional[GenerateResponseRequestRetrievalStrategy] = None
    self_correction_strategy: Optional[GenerateResponseRequestSelfCorrectionStrategy] = None
    query_translation_strategy: Optional[GenerateResponseRequestQueryTranslationStrategy] = None
    __properties: ClassVar[List[str]] = ["max_completion_tokens", "index_name", "retrieval_query", "prompt", "prompt_template_id", "variables", "evaluation_id", "variant_name", "retrieval_strategy", "self_correction_strategy", "query_translation_strategy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenerateResponseRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of retrieval_strategy
        if self.retrieval_strategy:
            _dict['retrieval_strategy'] = self.retrieval_strategy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of self_correction_strategy
        if self.self_correction_strategy:
            _dict['self_correction_strategy'] = self.self_correction_strategy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query_translation_strategy
        if self.query_translation_strategy:
            _dict['query_translation_strategy'] = self.query_translation_strategy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenerateResponseRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "max_completion_tokens": obj.get("max_completion_tokens"),
            "index_name": obj.get("index_name"),
            "retrieval_query": obj.get("retrieval_query"),
            "prompt": obj.get("prompt"),
            "prompt_template_id": obj.get("prompt_template_id"),
            "variables": obj.get("variables"),
            "evaluation_id": obj.get("evaluation_id"),
            "variant_name": obj.get("variant_name"),
            "retrieval_strategy": GenerateResponseRequestRetrievalStrategy.from_dict(obj["retrieval_strategy"]) if obj.get("retrieval_strategy") is not None else None,
            "self_correction_strategy": GenerateResponseRequestSelfCorrectionStrategy.from_dict(obj["self_correction_strategy"]) if obj.get("self_correction_strategy") is not None else None,
            "query_translation_strategy": GenerateResponseRequestQueryTranslationStrategy.from_dict(obj["query_translation_strategy"]) if obj.get("query_translation_strategy") is not None else None
        })
        return _obj


