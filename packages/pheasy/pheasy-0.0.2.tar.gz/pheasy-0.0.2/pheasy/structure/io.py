"""Classes and functions for io process of materials' information."""
# -*- coding: utf-8 -*-
# Copyright (C) 2021-2022 Changpeng Lin
# All rights reserved.

__all__ = ["read_dielectrics", "read_cell", "write_cell", "write_symops"]

import numpy as np
import ase.io as aseio

from pheasy.structure.atoms import Atoms
from pheasy.basic_io import logger


def read_dielectrics(filename="BORN"):
    """Return dielectric properties read from file.

    Parameters
    ----------
    filename : str
        Name of file containing dielectric tensor
        and Born effective charges. The format of
        file should be:
        3x3 block of dielectric tensor
        3x3 block of Born effective charge of first atom
        3x3 block of Born effective charge of second atom
        ...

    Returns
    -------
    tuple(epsilon, zeff)

    """
    born_info = np.loadtxt(filename)
    epsilon = born_info[:3, :]
    zeff = np.reshape(born_info[3:, :], (-1, 3, 3))
    return (epsilon, zeff)


def read_cell(filename=None, settings=None, format=None, supercell=False):
    """
    Read crystal structure from file.

    This is a wrapper for ase.io.read. It can automatically determine
    the calculator, VASP or QE.

    Parameters
    ----------
    filename : str
        Filename of crystal structure. If not given, the filename is
        'POSCAR' for VASP and 'pw.in' for QE.
    settings: argparse.Namespace
        Namespace generated by argparse. It is used to determine the
        calculator (VASP or QE) so as to read the correct file. This
        argument cannot be set together with format.
    format: str
        Format of crystal structure file, passed to ase.io.read. This
        argument cannot be set together with settings.
    supercell: bool
        Only valid when filename is None and settings is not None.
        This argument asks code look for the file of supercell when
        filename is not given. The code will try to read from 'SPOSCAR'
        for VASP and 'supercell.in' for QE.

    Returns
    -------
    pheasy.Atoms

    """
    if format is not None and settings is not None:
        logger.error("Argument settings and format cannot be set together.")
        raise NotImplementedError
    elif format is not None:
        if filename is None:
            if format == "espresso-in":
                try:
                    cell_ase = aseio.read("pw.in", format=format)
                except FileNotFoundError:
                    logger.error(
                        "Cannot find QE input file containing crystal structure."
                    )
                    raise FileNotFoundError
            elif format == "vasp":
                try:
                    cell_ase = aseio.read("POSCAR", format=format)
                except FileNotFoundError:
                    logger.error("Cannot find VASP input containing crystal structure.")
                    raise FileNotFoundError
            else:
                logger.error("Unknown format %s for read_cell." % format)
                raise ValueError
        else:
            cell_ase = aseio.read(filename, format=format)
    else:
        if settings.QE:
            if supercell:
                if filename is None:
                    try:
                        cell_ase = aseio.read("supercell.in", format="espresso-in")
                    except FileNotFoundError:
                        logger.error(
                            "Cannot find file supercell.in containing crystal structure."
                        )
                        raise FileNotFoundError
                else:
                    cell_ase = aseio.read(settings.SCELL_FILENAME, format="espresso-in")
            else:
                if filename is None:
                    try:
                        cell_ase = aseio.read("pw.in", format="espresso-in")
                    except FileNotFoundError:
                        logger.error(
                            "Cannot find file pw.in containing crystal structure."
                        )
                        raise FileNotFoundError
                else:
                    cell_ase = aseio.read(settings.PCELL_FILENAME, format="espresso-in")
        else:
            if supercell:
                if filename is None:
                    try:
                        cell_ase = aseio.read("SPOSCAR", format="vasp")
                    except FileNotFoundError:
                        logger.error(
                            "Cannot find SPOSCAR containing crystal structure."
                        )
                        raise FileNotFoundError
                else:
                    cell_ase = aseio.read(settings.SCELL_FILENAME, format="vasp")
            else:
                if filename is None:
                    try:
                        cell_ase = aseio.read("POSCAR", format="vasp")
                    except FileNotFoundError:
                        logger.error("Cannot find POSCAR containing crystal structure.")
                        raise FileNotFoundError
                else:
                    cell_ase = aseio.read(settings.PCELL_FILENAME, format="vasp")
    cell = Atoms(cell_ase)
    return cell


def write_cell(cell, filename=None, settings=None, format=None, **kwargs):
    """
    Write crystal structure into file.

    This is a wrapper for ase.io.write. It can automatically determine
    the calculator, VASP or QE.

    Parameters
    ----------
    cell : pheasy.Atoms
        Crystal structure to be written into file.
    filename : str
        Filename of crystal structure. If not given, this means to write
        perfect supecell into file. In this case, if SCELL_NAME is not
        set, the default is SPOSCAR for VASP and supercell.in for QE.
    settings: argparse.Namespace
        Namespace generated by argparse. It is used to determine the
        calculator (VASP or QE) so as to write the correct file. This
        argument cannot be set together with format.
    format: str
        Format of crystal structure file, passed to ase.io.write. This
        argument cannot be set together with settings.

    """
    if format is not None and settings is not None:
        logger.error("Argument settings and format cannot be set together.")
        raise NotImplementedError
    elif format is not None:
        if filename is None:
            logger.error("Filename is not given.")
            raise NameError
        else:
            cell.write(filename, format=format, **kwargs)
    else:
        if filename is None:
            if settings.QE:
                if settings.SCELL_FILENAME is None:
                    cell.write_pw_in("supercell.in", direct=True)
                else:
                    cell.write_pw_in(settings.SCELL_FILENAME, direct=True)
            else:
                if settings.SCELL_FILENAME is None:
                    cell.write("SPOSCAR", format=format, direct=True)
                else:
                    cell.write(settings.SCELL_FILENAME, format=format, direct=True)
        else:
            if settings.QE:
                cell.write_pw_in(filename, direct=True)
            else:
                cell.write("filename", format=format, direct=True)


def write_symops(symops, filename="spglib.symops"):
    """Write symmetry operations searched by spglib into file."""
    nsym = symops["translations"].shape[0]
    with open(filename, "w") as f:
        f.write("%d\n" % nsym)
        for i in range(nsym):
            f.write(
                "{0[0][0]:4d} {0[0][1]:4d} {0[0][2]:4d} {0[1][0]:4d} {0[1][1]:4d} {0[1][2]:4d} {0[2][0]:4d} {0[2][1]:4d} {0[2][2]:4d}\n".format(
                    symops["rotations"][i].tolist()
                )
            )
            f.write(
                "{0[0]:8.6f} {0[1]:8.6f} {0[2]:8.6f}\n".format(
                    symops["translations"][i].tolist()
                )
            )
