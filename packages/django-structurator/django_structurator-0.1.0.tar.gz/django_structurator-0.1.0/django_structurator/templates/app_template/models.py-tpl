from django.db import models
from django.core.exceptions import ValidationError
# Create your models here.

# class ExampleModel(models.Model):
#     # Basic Field Types
#     char_field = models.CharField(
#         max_length=255,  # Maximum length for the field
#         unique=True,  # Ensures uniqueness at the database level
#         null=False,  # Allows NULL in the database
#         blank=False,  # Allows empty values in forms
#         default="",  # Default value for the field
#         help_text="A short description for the field.",  # Provides additional information for forms
#         validators=[],
#         verbose_name="Character Field",  # Human-readable name for the field
#         error_messages= {
#            "unique":"Username is not available.",
#            "max_length":"Username is too long, Max - 30."
#         },
#     )
# 
#     # Date and Time Fields
#     created_at = models.DateTimeField(
#         auto_now_add=True,  # Automatically sets the field to now when the object is created
#         help_text="Timestamp when this object was created.",
#     )
#     updated_at = models.DateTimeField(
#         auto_now=True,  # Automatically updates the field to now every time the object is saved
#         help_text="Timestamp when this object was last updated.",
#     )
# 
#     # Foreign Key and Many-to-Many Relationships
#     related_model = models.ForeignKey(
#         "AnotherModel",  # Replace with the actual related model
#         on_delete=models.CASCADE,  # Action to take when the related object is deleted
#         related_name="examples",  # Name for reverse relation
#         null=True,
#         blank=True,
#         help_text="A foreign key to AnotherModel.",
#     )
# 
#     # File and Image Fields
#     image_field = models.ImageField(
#         upload_to="images/",  # Directory to store uploaded images or
#         upload_to=function_name,  # function to get directory path
#         null=True,
#         blank=True,
#         help_text="An image file field.",
#     )
# 
#     class Meta:
#         verbose_name = "Example Model"
#         verbose_name_plural = "Example Models"
#         ordering = ["-created_at"]  # Default ordering for querysets
#         unique_together = ["char_field", "integer_field"]  # Unique together constraint
# 
#     def save(self, *args, **kwargs):
#         # Example: Automatically capitalize the char_field before saving
#         if self.char_field:
#             self.char_field = self.char_field.capitalize()
# 
#         # Call the parent class's save method
#         super().save(*args, **kwargs)
# 
#     def clean(self):
#         super().clean()
# 
#         # Example: Ensure integer_field is always even
#         if self.integer_field and self.integer_field % 2 != 0:
#             raise ValidationError({"integer_field": "Integer field must be an even number."})
# 
#     def __str__(self):
#         return f"ExampleModel ({self.char_field})"
