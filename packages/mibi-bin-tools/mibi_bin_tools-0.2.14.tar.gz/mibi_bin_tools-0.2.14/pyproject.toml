[build-system]
requires = [
    "setuptools",
    "wheel",
    "Cython>=3",
    "oldest-supported-numpy",
    "setuptools_scm[toml]>=6.2",
]
build-backend = "setuptools.build_meta"

[project]
dependencies = [
    "Cython>=3",
    "matplotlib>=3",
    "numpy>=1.25",
    "pandas>=2",
    "scikit-image>=0.19",
    "alpineer>=0.1.9",
    "xarray>=2023",
]
name = "mibi-bin-tools"
authors = [{ name = "Angelo Lab", email = "theangelolab@gmail.com" }]
description = "Source for extracting .bin files from the commercial MIBI."
readme = "README.md"
requires-python = ">=3.9"
license = { text = "Modified Apache License 2.0" }
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Cython",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: Apache Software License",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]
dynamic = ["version"]
urls = { repository = "https://github.com/angelolab/mibi-bin-tools" }

[project.optional-dependencies]
test = [
    "coveralls[toml]",
    "pytest",
    "pytest-cases",
    "pytest-cov",
    "pytest-mock",
    "pytest-pycodestyle",
]

[tool.setuptools_scm]
version_scheme = "release-branch-semver"
local_scheme = "no-local-version"

[tool.cibuildwheel]
build = ["cp39-*", "cp310-*", "cp311-*", "cp312-*"]
skip = [
    "cp36-*",         # Python 3.6
    "cp37-*",         # Python 3.7
    "cp38-*",         # Python 3.8
    "*-musllinux_*",  # Musllinux
    "pp*",            # PyPy wheels on all platforms
    "*_i686",         # 32bit Linux Wheels
    "*_s390x",        # IBM System/390, "mainframe"
    "*-win32",        # 32bit Windows Wheels
    "*_ppc64le",      # PowerPC
    "cp39-win_arm64", # Windows ARM64 Python 3.9 wheels do not build.
]

build-frontend = "build"

# Avoid testing on emulated architectures
test-skip = [
    "*-win_arm64",               # Skip testing emulated arm64 biulds on Windows
    "*-*linux_aarch64",          # Skip testing emulated Linux builds
    "*-macosx_arm64",            # Skip testing emulated arm64 builds on Intel Macs
    "*-macosx_universal2:arm64", # Skip testing emulated arm64 portion of universal2 builds
]

# "manylinux" versioning
# PEP 600: https://peps.python.org/pep-0600/
# Build using the manylinux_2_28 image
manylinux-x86_64-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"

# On a Linux Intel runner with qemu installed, build Intel and aarch64 (arm) wheels
[tool.cibuildwheel.linux]
archs = ["x86_64", "aarch64"]
repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"

# Build `universal2` and `arm64` wheels on an Intel runner.
# Note that the `arm64` wheel and the `arm64` part of the `universal2` wheel cannot be tested in this configuration.
[tool.cibuildwheel.macos]
archs = ["x86_64", "arm64", "universal2"]
repair-wheel-command = "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"

# Build for Windows x86_64, and ARM 64
[tool.cibuildwheel.windows]
archs = ["AMD64", "ARM64"]
# might not need to repair with delvewheel?
# before-build = "pip install delvewheel"                          # Use delvewheel on windows
# repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel}"

# Coverage
[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["mibi_bin_tools"]

[tool.coverage.report]
exclude_lines = [
    "except ImportError",
    "raise AssertionError",
    "raise NotImplementedError",
    "(ArrowInvalid, OSError, IOError)",
]

# Pytest Options
[tool.pytest.ini_options]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
addopts = [
    "-v",
    "-s",
    "--durations=20",
    "--cov=mibi_bin_tools",
    "--cov-report=lcov",
    "--pycodestyle",
]
console_output_style = "count"
testpaths = ["tests"]
