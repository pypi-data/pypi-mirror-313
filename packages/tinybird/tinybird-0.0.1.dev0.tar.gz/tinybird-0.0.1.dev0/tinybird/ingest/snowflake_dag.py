snowflake_dag_template = """
import datetime
import json
import base64

from kubernetes.client import models as k8s
from airflow import models
from airflow.providers.cncf.kubernetes.operators.kubernetes_pod import KubernetesPodOperator
from kubernetes.client import models as k8s_models
from datetime import timedelta

with models.DAG(
        dag_id="{{ ID }}",
        description="dev DAG",
        default_args={
            'depends_on_past': False,
            'email_on_failure': False,
            'email_on_retry': False,
            'retries': 2,
            'retry_delay': timedelta(seconds=60),
            'retry_exponential_backoff': True,
            'max_retry_delay': timedelta(seconds=300),
            'task_concurrency': 1
        },
        concurrency=1,
        max_active_tasks=1,
        max_active_runs=1,
        schedule_interval="{{ CRON }}",
        tags=["snowflake"],
    ) as dag:

    kubernetes_min_pod = KubernetesPodOperator(
        task_id='replace_task',
        name='replace_task',
        namespace='composer-user-workloads',
        image='{{ CDK_IMAGE }}',
        # image_pull_secrets=[k8s.V1LocalObjectReference('gitlab')],
        start_date=datetime.datetime.strptime("{{ START_DATE }}", "%Y-%m-%d %H:%M:%S"),
        # This two configs below are required since cncf v 5.0.
        # See: https://cloud.google.com/composer/docs/composer-2/use-kubernetes-pod-operator#version-5-0-0
        kubernetes_conn_id='kubernetes_default',
        config_file="/home/airflow/composer_kube_config",
        image_pull_policy="IfNotPresent",
        startup_timeout_seconds=300,
        container_resources=k8s_models.V1ResourceRequirements(
            requests={"cpu": "100m", "memory": "250M"},
            limits={"cpu": "100m", "memory": "250M"},
        ),
        labels={"workspace_id": "{{ TB_WORKSPACE_ID }}", "datasource_id": "{{ TB_DATASOURCE_ID}}", "external_datasource_kind": "snowflake"},
        pool="{{ POOL_ID }}_pool",
        env_vars={
            'ENVIRONMENT': "{{ ENVIRONMENT_TEMPLATE }}",
            'SENTRY_DSN': "{{ SENTRY_CONN_TEMPLATE }}",
            'TB_WORKSPACE_ID': "{{ TB_WORKSPACE_ID }}",
            'TB_DATASOURCE_ID': "{{ TB_DATASOURCE_ID }}",
            'TB_CDK_TOKEN': "{{ TB_TOKEN }}",
            'GCS_BUCKET': "{{ GCS_BUCKET }}",
            'TB_CDK_TAG': "{{ ID }}",
            'GOOGLE_APPLICATION_CREDENTIALS_JSON': "{{ GCP_SA_KEY }}",
            'TB_CDK_ENDPOINT': "{{ TB_CDK_ENDPOINT }}",
            'CONNECTOR': "{{ SERVICE }}",
            'COMMAND': "{{ MODE }}",
            'TB_LOGS_ENDPOINT': "{{ TB_LOGS_ENDPOINT_TEMPLATE }}",
            'TB_LOGS_TOKEN': "{{ TB_LOGS_TOKEN_TEMPLATE }}",
            'TB_LOGS_DATASOURCE': "{{ TB_LOGS_DATASOURCE_TEMPLATE }}",
            'SQL_QUERY': "{{ SQL_QUERY }}",
            'SQL_QUERY_AUTOGENERATED': "{{ SQL_QUERY_AUTOGENERATED }}",
            'ROW_LIMIT': "{{ ROW_LIMIT }}",
            'SF_ACCOUNT': base64.b64decode("{{ SF_ACCOUNT }}").decode('ascii').replace('$', '$$'),
            'SF_USER': base64.b64decode("{{ SF_USER }}").decode('ascii').replace('$', '$$'),
            'SF_PWD': base64.b64decode("{{ SF_PWD }}").decode('ascii').replace('$', '$$'),
            'SF_ROLE': "{{ SF_ROLE }}",
            'SF_WAREHOUSE': "{{ SF_WAREHOUSE }}",
            'SF_DATABASE': "{{ SF_DATABASE }}",
            'SF_SCHEMA': "{{ SF_SCHEMA }}",
            'SF_STAGE': "{{ SF_STAGE }}",
       },
    )
"""
