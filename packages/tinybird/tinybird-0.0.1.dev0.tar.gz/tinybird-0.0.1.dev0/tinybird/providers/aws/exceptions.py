import logging
from typing import NoReturn

import botocore
import botocore.exceptions


class AWSClientException(Exception):
    pass


class AuthenticationFailed(AWSClientException):  # Equivalent to status code 401: Unauthorized
    pass


class Forbidden(AWSClientException):  # Equivalent to status code 403: Forbidden
    pass


class SignatureDoesNotMatch(AuthenticationFailed):
    pass


class InvalidAccessKeyId(AuthenticationFailed):
    pass


class InvalidRoleARN(AuthenticationFailed):
    pass


class InvalidClientTokenID(AuthenticationFailed):
    pass


class InvalidS3URL(Exception):
    pass


class ExpiredToken(AuthenticationFailed):
    pass


class AccessDenied(Forbidden):
    pass


class UnableToAssumeRole(Forbidden):
    pass


class ValidationException(AWSClientException):
    pass


class MalformedAWSAPIResponse(AWSClientException):
    pass


class NoSuchBucket(AWSClientException):
    pass


class NoSuchDynamoDBTable(AWSClientException):
    pass


class InvalidRegionName(AWSClientException):
    pass


class UnexpectedBotoClientError(AWSClientException):
    pass


# Session tokens are generated by AWS when assuming a role so if we get this error something went wrong
class InvalidSessionToken(AWSClientException):
    pass


class InvalidIdentityToken(AWSClientException):
    pass


class CredentialsNotFound(AWSClientException):
    pass


class PITRExportNotAvailable(AWSClientException):
    pass


def _handle_botocore_client_exception(err: botocore.exceptions.ClientError) -> NoReturn:
    # API references
    # S3: https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList
    # DynamoDB: https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/CommonErrors.html
    err_code = str(err.response.get("Error", {}).get("Code"))
    err_msg = err.response.get("Error", {}).get("Message")
    if "SignatureDoesNotMatch" == err_code:
        raise SignatureDoesNotMatch(err_msg) from err
    elif "InvalidAccessKeyId" == err_code:
        raise InvalidAccessKeyId(err_msg) from err
    elif "InvalidTokenId" == err_code:
        raise InvalidSessionToken() from err
    elif err_code.find("AccessDenied") > -1:
        logging.info("Access denied: %s", err_msg)
        raise AccessDenied(err_msg) from err
    elif err_code.find("Validation") > -1:
        logging.info("Validation Exception: %s", err_msg)
        raise ValidationException(err_msg) from err
    else:
        logging.error(err)
        raise UnexpectedBotoClientError(err_msg, err_code) from err
