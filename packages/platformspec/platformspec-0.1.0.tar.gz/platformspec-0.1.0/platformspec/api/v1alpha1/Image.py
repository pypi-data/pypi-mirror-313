# generated by datamodel-codegen:
#   filename:  tmpnz87z_d0
#   timestamp: 2024-12-07T00:34:57+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Category(Enum):
    machine = 'machine'
    container = 'container'


class Builder(BaseModel):
    config: Optional[Any] = Field(
        None,
        description='Contains configuration parameters specific to the chosen builder driver',
    )
    driver: str = Field(
        ...,
        description='Specifies the type of image builder to use for creating this image',
    )


class EnvironmentRef(BaseModel):
    apiVersion: Optional[str] = Field(None, description='API version of the referent.')
    fieldPath: Optional[str] = Field(
        None,
        description='If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n"spec.containers{name}" (where "name" refers to the name of the container that triggered\nthe event) or if no container name is specified "spec.containers[2]" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )
    resourceVersion: Optional[str] = Field(
        None,
        description='Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency',
    )
    uid: Optional[str] = Field(
        None,
        description='UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids',
    )


class ProviderRef(BaseModel):
    apiVersion: Optional[str] = Field(None, description='API version of the referent.')
    fieldPath: Optional[str] = Field(
        None,
        description='If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n"spec.containers{name}" (where "name" refers to the name of the container that triggered\nthe event) or if no container name is specified "spec.containers[2]" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )
    resourceVersion: Optional[str] = Field(
        None,
        description='Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency',
    )
    uid: Optional[str] = Field(
        None,
        description='UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids',
    )


class Reference(BaseModel):
    id: str = Field(
        ...,
        description="Unique identifier of a pre-existing image (e.g., AMI ID for machine images). This field is used when you are referencing an image that already exists in your cloud provider's registry.",
    )
    location: Optional[str] = Field(
        None,
        description='Specifies the region where the pre-existing image is located.',
    )


class Spec1(BaseModel):
    builder: Optional[Builder] = None
    default: Optional[bool] = Field(
        False,
        description='Indicates whether this image is the default choice for a given provider and environment combination. This helps simplify deployments by setting up common starting points.',
    )
    environmentRefs: List[EnvironmentRef] = Field(
        ...,
        description='References Environment resources indicating the environments where this image is intended to be used. This ensures that the correct images are targeted for different deployment stages.',
    )
    providerRefs: List[ProviderRef] = Field(
        ...,
        description='References Provider resources specifying the cloud platform on which the image can be deployed (e.g., AWS, Azure).',
    )
    reference: Optional[Reference] = None
    version: str = Field(
        ...,
        description='Represents the version of the image using semantic versioning (e.g., v1.28.13). This helps track and manage image updates effectively.',
    )


class Spec(BaseModel):
    category: Category = Field(
        ..., description='Indicates the type of image being defined.'
    )
    spec: Spec1 = Field(
        ..., description='Contains configuration details specific to the image.'
    )


class Image(BaseModel):
    apiVersion: Optional[str] = Field(
        'core.platformspec.io/v1alpha1',
        description='APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        'Image',
        description='Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Optional[Spec] = Field(
        None, description='ImageSpec defines the desired state of Image.'
    )
    status: Optional[Dict[str, Any]] = Field(
        None, description='ImageStatus defines the observed state of Image.'
    )
