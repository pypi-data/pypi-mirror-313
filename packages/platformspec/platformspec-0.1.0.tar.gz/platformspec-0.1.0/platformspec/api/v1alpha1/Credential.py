# generated by datamodel-codegen:
#   filename:  tmphbquf68i
#   timestamp: 2024-12-07T00:34:56+00:00

from __future__ import annotations

from typing import Any, Dict, Optional

from pydantic import BaseModel, Field


class Spec(BaseModel):
    fields: Any = Field(
        ...,
        description='Defines the specific credential attributes required by the specified schema. These fields can be simple string values, complex JSON objects, or other data types depending on the chosen schema. Ensure the field-value matches the format expected by the provider and its associated APIs.',
    )
    schema_: Optional[str] = Field(
        None,
        alias='schema',
        description='Specifies the type of credentials being managed. This defines the expected format and structure of the fields.',
    )
    source: str = Field(
        ..., description='Determines how the credential values are obtained.'
    )


class Credential(BaseModel):
    apiVersion: Optional[str] = Field(
        'core.platformspec.io/v1alpha1',
        description='APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        'Credential',
        description='Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Optional[Spec] = Field(
        None, description='CredentialSpec defines the desired state of Credential.'
    )
    status: Optional[Dict[str, Any]] = Field(
        None, description='CredentialStatus defines the observed state of Credential.'
    )
