# -*- coding: UTF-8 -*-
from typing import Dict, Union, List, Any, NoReturn, Tuple
# ! pip install tqdm
import sys
import json
import time
import pandas as pd
from collections import defaultdict
from tqdm import tqdm
from aitool import send_alert_msg, pip_install


def merge_extended_member(groups, members):
    # 将已经过人工验证的扩展出的uid加入种子团伙
    for k, v in groups.items():
        if k in members:
            groups[k] = list(set(v) | set(members[k]))
    return groups


def get_timestamp():
    # 算24小时前的时间。因为每天早上凌晨5点更新出最新的（昨天）的分区
    _t = time.localtime(time.time() - 86400)
    mon = str(_t.tm_mon)
    day = str(_t.tm_mday)
    if len(mon) == 1:
        mon = '0' + mon
    if len(day) == 1:
        day = '0' + day
    print(_t.tm_mon)
    timestamp = '{}{}{}'.format(_t.tm_year, mon, day)
    return timestamp


def sql_collect(sql):
    try:
        from pyspark.sql import SparkSession
    except ModuleNotFoundError as e:
        pip_install('pyspark')
        from pyspark.sql import SparkSession
    spark = SparkSession.builder.enableHiveSupport().getOrCreate()
    ss = spark.sql(sql)
    result = ss.collect()
    return result


def sql_bad2other(timestamp, ids):
    # 构建sql
    ids_str = ','.join(list(map(str, ids)))
    sql = """
    select
    user_id,
    item_id,  ---视频id
    author_id,   ---作者id
    item_status,    ---视频状态，102 通过 22用户删除 23运营删除 140隐私 141不通过 （跟reviewed=1 审核下架）143 好友可见 144审核自见 -1未知
    item_rate,   ---视频的热度，视频热度，-1未取到值处理、0、3、6热门、10不推荐、11可放出、12新鲜、20 or 1数据较少，可以忽略
    item_create_time,  ---视频创建时间，长整型
    vv,  ---播放次数
    play_time,  ---播放时长-单位s
    finish_vv,  ---播放完成次数
    like_cnt,   ---点赞次数
    comment_cnt,  ---评论次数
    follow_cnt,   ---关注次数
    download_cnt,  ---下载次数
    share_video_cnt  ---视频分享次数（默认是站外分享）
    from
    aweme.mds_bhv_uid_item_day
    where
    date='{}' and
    user_id in ({})
    limit 1000000000
    """.format(timestamp, ids_str)

    # 执行sql
    result = sql_collect(sql)
    print('len sql', len(result))
    return result


def anal_bad2other(data):
    fv = defaultdict(list)
    lc = defaultdict(list)
    cc = defaultdict(list)
    fc = defaultdict(list)
    sv = defaultdict(list)
    bad = set()
    for user_id, item_id, author_id, item_status, item_rate, item_create_time, vv, play_time, finish_vv, like_cnt, comment_cnt, follow_cnt, download_cnt, share_video_cnt in tqdm(
            data, desc='bad2other'):
        user_id = int(user_id)
        item_id = int(item_id)
        author_id = int(author_id)
        finish_vv = int(finish_vv)
        like_cnt = int(like_cnt)
        comment_cnt = int(comment_cnt)
        follow_cnt = int(follow_cnt)
        share_video_cnt = int(share_video_cnt)
        bad.add(user_id)
        if int(finish_vv) > 0:
            fv[author_id].append([user_id, item_id, author_id])
        if int(like_cnt) > 0:
            lc[author_id].append([user_id, item_id, author_id])
        if int(comment_cnt) > 0:
            cc[author_id].append([user_id, item_id, author_id])
        if int(follow_cnt) > 0:
            fc[author_id].append([user_id, item_id, author_id])
        if int(share_video_cnt) > 0:
            sv[author_id].append([user_id, item_id, author_id])

    # 可靠性指标(bad之间的的关联性)
    def _bad_avg(statistic, ids):
        if len(ids) == 0:
            return 0
        sum = 0
        for uid in ids:
            if uid in statistic:
                sum += len(statistic[uid])
        return sum / len(ids)

    print('finish_vv', _bad_avg(fv, bad))
    print('like_cnt', _bad_avg(lc, bad))
    print('comment_cnt', _bad_avg(cc, bad))
    print('follow_cnt', _bad_avg(fc, bad))
    print('share_video_cnt', _bad_avg(sv, bad))

    # 构建输出格式
    def _format_output(data, exception_uid):
        find = [['user_id', '关联人数']]
        for uid, vd in data.items():
            if uid in exception_uid:
                continue
            people = set()
            obj = defaultdict(set)
            for _user_id, _item_id, _author_id in vd:
                people.add(_user_id)
                obj[_item_id].add(_user_id)
            out_detail = []
            for ok, ov in obj.items():
                out_detail.append(str(ok))
                out_detail.append(str(len(ov)))
            find.append([str(uid), str(len(people))])
        find_order = sorted(find, key=lambda x: x[1], reverse=True)
        return find_order

    result = {
        'finish_vv': _format_output(fv, bad),
        'like_cnt': _format_output(lc, bad),
        'comment_cnt': _format_output(cc, bad),
        'follow_cnt': _format_output(fc, bad),
        'share_video_cnt': _format_output(sv, bad),
    }
    return result


def send_alert_msg(final_result, msg="刷单广告相关", ):
    # final_result是list格式需要转换
    final_result = pd.DataFrame(final_result)

    # 以下是原本内容未做修改
    LARK_GROUP_ID = "7165715141332516866"  # 蓝军色导视频监控群
    # CHAT_ID = "oc_4ee52beb531b4b47671361fbe442f779"  # chat_id是一个群聊的唯一标识。当创建一个群聊的时候，系统会自动生成该ID。
    # LARK_TEST_GROUP_ID = "7101233672254275587"  # 蓝军告警测试群
    # FOLDER_TOKEN = "fldcn3IROX1Tc1OccuWYRkjM3Xf"  # 抖音举报报警
    FOLDER_TOKEN = "fldcnUnI2gLSddUtGcJtdpWcuch"  # 我的目录fang_foler

    total_cnt = final_result.shape[0]
    display_cnt = 90000
    # risk_cnt = final_result[final_result["decision_result"]].shape[0]

    print("开始 发送告警:")
    timestamp = get_timestamp()
    df_dict = {"扩展_{}_".format(timestamp): final_result.head(display_cnt)}
    send_alert_msg(
        msg,
        df_dict,
        most_num=1,
        group_id=LARK_GROUP_ID,
        # chat_id=CHAT_ID,
        fold_token=FOLDER_TOKEN,
    )


def action_extend(task, ids):
    # 获取时间
    timestamp = get_timestamp()
    print('timestamp', timestamp)
    # 查sql
    sql_result_bad2other = sql_bad2other(timestamp, ids)
    # 做处理
    anal_result_bad2other = anal_bad2other(sql_result_bad2other)
    # 输出结果
    for k, v in anal_result_bad2other.items():
        send_alert_msg(v, msg=task + '_' + k + '_' + timestamp)


if __name__ == '__main__':
    # 本地生成的种子数据，key为团伙名，value为团伙内的uid
    # json_groups = """{"小玛丽": ["89914267900","3795990976405054","1891632418927520","3835560562791080","85908132599","1349790123167379","2111526110240380","1544177303425691","2159900397414476","104823730735","64544101646","1632134794577983","676904783319581","31266378098723","1135149590515335","3039528154044783","3672830922721192","805322208054900","1632154582516504","963649026925200","4196213815259031","3611257900112350","3263820192297918","2898789515924483","4028226354813592","104969503982","329445987067460","654943160634396","2554892181844771","2300615260376743","4499676745446701","619744320822452","2740458387940187","3760807425868404","1865224111264701","2722870921802276","4432877094968573","466661504720381","624150353283880","157957544486190","2955951607644296","1350639183746008","2582131228542996","2247875100156792","800896702495747","4165429519191263","98480048998","193987961426152","1846829072256893","998772915312580","55403154608","1007614356101949","3847944182445262","770132944623949","109735458249","3210221206384222","1969947996598365","92241087937","3664053652170168","3083475410762903","2933972330882851","2749192368559319","4134583282177940","312735210668880","3272625835214952","3403676234558051","2686809383372605","58838172822","100405727980","2195104543028503","110201336885","62529234993","101942870190","2594491523671741","58983356111","4288533451510040","4218159691494926","567785720132567","3359715555554760","149969101659383","3100253760788419","100156744472","154406400582027","704125098262968","2242600913087412","1473823856922876","3303411905999544","3171420980128835","104925499972","1785205703587886","2714018815940622","99736541941","2810828905517075","101732575364","237930869439917","2321807022496891","65308800659","4200612041067438","96716304691","93458389615","3971912882717788","108753143103","93294533930","1509009998492559","3364143993982707","3936726432356328","2476579132286766","4007083382415563","106136414735","4177795590668109","3637661660877662","1667283371959486","101652396797","2472170703033773","106551439462","3558468508987661","3215451420361468","66088847507","80749534975","905610220545255","1925979523001000","189544856566392","2458983186572676","559030669411629","1429007060699966","422669394642839","84080172321","4305276476333213","1715651181286627","1112339666965742","105113980270","1104387973851404","4464493376318827","101490714648","1209941413606715","104858394130","2559261619000267","307470157751375","78967540139","51078750164","817635831591559","1434235179400699","64628560078","2599720651337901","2739602354608318","3101098856682024","1843258330712605","106629462424","1552927266982008","72786286138","1544187462288312","690915455546487","2797633604959261","86456992707","3781940356061309","101897895514","84410278397","3457340191814095","88426942568559","97415336347","2318242913200376","83966416329","3641182610525975","96798680000","110384103829068","3426545562827639","97123338211","81878844687","62676277799","2784432708924592","2406195655613620","106092163799","100813048044","44437688300685","792067808704951","73888379582","2810830348117949","602164818621067","104292180355","4103808299319080","100637207596","1275910333409431","3588446069472632","97602982889","3039498856049367","2885558340703879","2555733936450973","2696468462310878","1561781652950536","1350614918106638","66895033359","4138199160203021","101484021961","2779202376181982","963650201336032","99759743581","102430556507","4212963436665213","109818297133","2071960037626228","972383927933960","4429266850169723","629381305734685","1746451551490616","3593666789389047","97408582513","53195005708","3579618216130959","506254788138663","3790732899919166","89841634218","3677195560027003","97058386612","95001677083","110690932285","75911153824","110896646742","2388614558269595","82387210848","2230269393251283","1384986335525358","56628713005","87422129299","567786289770263","3945516932805671","110162329895","453474969989556","4266518364561277","80735304706","981201064825276","1429837511924237","1535333975207403","99191814136","1626881980894680","101565458752","4037000940752547","1456230240879124","96974689319","1253084836408523","330331115230271","171147437280968","664582305100846","1614558211610573","1657698466667980","453478923372676","1728883446519613","3250634664447308","1755297398659071","59076286938","2321820261028381","4341312062491021","1038385343631646","76953995987","104656408432","1569740853093293","93296799713","4397668131416660","541419987536959","2194258775249603","71212213763","105191171769","4024686267608047"]}"""
    json_groups = """{"直播盲盒": ["97433792120","981210603980615","1218693808011517","86101351628","4323755961881504","94731192499","1420179916733780","103199370036","506207195381459","703321956945389","1245120181836984","2141474311646780","2467770672363608","4438057684050878","3065109105","54355616614","77876811151","101467021365","110106162361","1231042878906573","1720115565441779","2120326641619648","2142308475616653","2247867402303128","2265463399135604","2414975576707112","2476567453242926","3180258567659879","3324510924705623","3356160591932638","3505706342296376","3831152345622462","51933911170","52461873512","60118551480","60331832384","62525182223","67964053235","71469688626","81788751023","93415200560","96007514382","99660263718","101621776321","104798557943","111311801688","13654114187507","154402570904815","189580113355995","268758830809471","295143551544908","734936255444631","910853866006728","949617008844583","971616161893976","1012024251522436","1192310007412392","1262668826282621","1491396203657799","1666447523981422","1702496163071027","1702516279754301","2071942573853011","2111498014429655","2154691193747487","2590103234421739","2722865605518744","2916377838495246","3039479516372670","3109890894601588","3224236829188480","3227791099182190","3312169440778455","3570856138377310","3795988550527875","3831171884263256","3901540255407550","4042279154364284","4376529653737444","5205069960","50798737404","51259826948","52470818196","53229685129","58944305316","58969734399","60462555716","61494200446","61780850963","61829177399","62346548809","62606798449","62806628804","63585797142","63987367061","64113245434","64240742855","65031448625","65520100158","70046993852","70244369774","71786726098","72480272543","73807009532","73877896317","74290092965","74339586495","76178930253","81791861871","83724381285","86841137195","91499206974","93680314939","93874551006","94255942075","94277409953","94316697524","94856880059","95303584574","96011356463","96131470501","96349809118","96616194346","96868650439","97066781308","97184309735","97931423279","98694796705","100279247202","100505150215","104013920343","104685045457","104769175256","106072807501","106823514018","108123757111","109389912032","111450421026","111495163969","145614597002844","158804001957027","189537027360781","193952955504959","215971266571005","241510522037368","242334327643056","281891193489304","286324859605416","290731777601423","330329370138990","339116604526744","351474975510094","378708044026056","413896184695486","422625877173390","465792170208639","466644467988008","488632509269431","488656596110503","492996047932302","506246291794424","506250156842910","572219235515424","611760658194558","677745110826877","699740092118356","739352190131144","786868370422811","853637771303543","858093150018750","985581113602253","994412979560519","998801582064989","1019936946264382","1055120252732088","1081570230292349","1086790505876583","1086796902453948","1104355125900555","1113183197865047","1174724874340691","1178264985142093","1178312335427951","1209926955573559","1231882060840231","1257474775323819","1288249605885831","1314663214120136","1473807326661704","1588172104409789","1596962152912720","1605749605150795","1632097686280759","1632117402643054","1658511403790109","1662937969461453","1676081721785127","1684869995046536","1684930851507725","1780828930319283","1790473709557837","1843245563262669","1874014833233406","1882014751674093","1909178013331144","1913610869148843","1921570101266509","1948785608494078","2001575288517847","2005127273397191","2045566018921576","2071941215954124","2119514635375671","2159912793935550","2176669753301245","2177499298278891","2212696044091243","2283049923908492","2322588674301160","2353423683432460","2371020849164332","2388615488867422","2458928940057582","2475720945700492","2475753840061085","2494164150518923","2510904930601283","2529354701343976","2582126360794959","2626110687820560","2634858581993840","2652476299543599","2652486520815404","2682434668474888","2736043983374142","2740461038745735","2758046454648221","2806376162144447","2810826912182792","2815221482134284","2867125121192381","2898791272030061","2950712127139352","2981469302302686","3065905302745744","3092302255104536","3162653952845694","3211010579640816","3233002168779036","3250582934523451","3250627211170141","3250633205089192","3259432022049790","3263802667716200","3284950590954487","3303370161135883","3320978685049700","3333318272355079","3373774284273732","3400159849095716","3435320610927199","3444141351249416","3474092634945255","3496881011833799","3567256122691837","3567292244565823","3637605876379752","3655251020491156","3690432954382256","3724761660402477","3751971931035832","3791582476113496","3813578603244804","3821543167363486","3848765091620664","3892751725770408","3963063097655063","4024690847791315","4051024003742999","4102995111581931","4218204961910077","4234940032228243","4270931219063971","4270981847195259","4283339320595184","4353710512680455","4372072685901917","4394107237570856","4450414986265789","4482023671470164","4482041729261580","4482046981576164","4482085628419005","4499654826294989","4503660591298784"]}"""
    data_groups = json.loads(json_groups)
    merge_extended_member(data_groups, {})
    for _task, _ids in data_groups.items():
        action_extend(_task, _ids)
