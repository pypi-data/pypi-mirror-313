# -*- coding: UTF-8 -*-
# Copyright©2022 xiangyuejia@qq.com All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""

"""
from typing import Dict, Union, List, Any, NoReturn, Tuple
from collections import defaultdict
from aitool import auto_sql, send_feishu_sheet, sql_result2list
from random import sample


def case_extension(
        uids=None,
        vids=None,
        task_name='no_task_name',
        **kwargs,
):
    kwargs['epochs'] = 1 if 'epochs' not in kwargs else kwargs['epochs']
    kwargs['skip_final'] = True if 'skip_final' not in kwargs else kwargs['skip_final']
    kwargs['rst_limit_seed'] = 2000 if 'rst_limit_seed' not in kwargs else kwargs['rst_limit_seed']
    kwargs['rst_limit_optimize'] = 10000 if 'rst_limit_optimize' not in kwargs else kwargs['rst_limit_optimize']
    kwargs['rst_limit_final'] = 5000 if 'rst_limit_final' not in kwargs else kwargs['rst_limit_final']
    kwargs['send2tos'] = False if 'send2tos' not in kwargs else kwargs['send2tos']
    kwargs['time_range_seed'] = 180 if 'time_range_seed' not in kwargs else kwargs['time_range_seed']

    rst, all_links, vid_info = auto_sql(
        uids=uids,
        vids=vids,
        task_name=task_name,
        return_links=True,
        **kwargs,
    )
    return rst, uids, vids, task_name, all_links, vid_info


def refactor_auto_sql(
        rst,
        uids,
        vids,
        task_name,
        all_links,
        min_score=10,
        chosen_count=1,
        send_sheet=True,
        feishu_size_limit=2000,
        **kwargs,
):
    # 是否聚合
    sql_with_collect_set = False if 'sql_with_collect_set' not in kwargs else kwargs['sql_with_collect_set']
    # 计算公开可见率
    rst_state = [_.asDict()['status'] for _ in rst]
    count_open = 0
    for item_state in rst_state:
        if not sql_with_collect_set:
            if item_state == 102 or item_state == '102':
                count_open += 1
        else:
            if '102' in item_state:
                count_open += 1
    # 计算vid数量大于等于3的uid
    uid2vid = defaultdict(list)
    uid2score = defaultdict(list)
    uid2score_time = defaultdict(int)
    uid2aweme = defaultdict(list)
    chosen_uids = []
    chosen_score = []
    uids = [] if uids is None else uids
    vids = [] if vids is None else vids
    rst_uid = [
        ['seed_name', task_name, '', '', '', '', ''],
        ['seed_uids', ','.join(map(str, uids)), '', '', '', '', ''],
        ['seed_vids', ','.join(map(str, vids)), '', '', '', '', ''],
    ]
    for lk, lv in all_links.items():
        rst_uid.append([lk, lv, '', '', '', '', ''])
    rst_uid.append(['选中的uid', '抖音号', '入选视频', '数量', '总分', '平均分', '最高分'])
    for itm in rst:
        if int(itm.asDict()['count_keyword']) >= min_score:
            uid2vid[itm.asDict()['user_id']].append(itm.asDict()['item_id'])
            uid2score[itm.asDict()['user_id']].append(int(itm.asDict()['count_keyword']))
            uid2aweme[itm.asDict()['user_id']].append(itm.asDict()['aweme_id'])
            if sql_with_collect_set:
                uid2score_time[itm.asDict()['user_id']] = itm.asDict()['size_count_keyword']

    text_250_300 = sql_result2list(
        rst[250:300],
        row=['item_title', 'music_title', 'asr1', 'asr2', 'ocr', 'province', 'city_name_cn', 'nickname', 'signature',
             'user_report', 'item_report', 'item_comment', 'user_comment', 'poi_name', 'product_name']
    )
    text_250_300 = ['。'.join(map(str, text_one)) for text_one in text_250_300]

    sample_1_10 = []
    sample_41_50 = []
    sample_141_150 = []
    sample_291_300 = []
    scores_1_10 = []
    scores_41_50 = []
    scores_141_150 = []
    scores_291_300 = []
    for itm in rst[0:10]:
        sample_1_10.extend(itm.asDict()['item_id'].split(','))
        scores_1_10.append(int(itm.asDict()['count_keyword']))
    for itm in rst[40:50]:
        sample_41_50.extend(itm.asDict()['item_id'].split(','))
        scores_41_50.append(int(itm.asDict()['count_keyword']))
    for itm in rst[140:150]:
        sample_141_150.extend(itm.asDict()['item_id'].split(','))
        scores_141_150.append(int(itm.asDict()['count_keyword']))
    for itm in rst[290:300]:
        sample_291_300.extend(itm.asDict()['item_id'].split(','))
        scores_291_300.append(int(itm.asDict()['count_keyword']))
    if len(scores_1_10) > 0:
        scores_1_10 = sum(scores_1_10) / len(scores_1_10)
    else:
        scores_1_10 = 0
    if len(scores_41_50) > 0:
        scores_41_50 = sum(scores_41_50) / len(scores_41_50)
    else:
        scores_41_50 = 0
    if len(scores_141_150) > 0:
        scores_141_150 = sum(scores_141_150) / len(scores_141_150)
    else:
        scores_141_150 = 0
    if len(scores_291_300) > 0:
        scores_291_300 = sum(scores_291_300) / len(scores_291_300)
    else:
        scores_291_300 = 0
    quality_scores = {
        'scores_1_10': scores_1_10,
        'scores_41_50': scores_41_50,
        'scores_141_150': scores_141_150,
        'scores_291_300': scores_291_300,
    }
    if len(sample_1_10) > 0:
        sample_1_10 = 'https://redshield.bytedance.net/Home/Audit/search?type=video&data={}&from=list'.format(
            '%2C%20'.join(map(str, sample(sample_1_10, min(20, len(vids))))))
    else:
        sample_1_10 = ''
    if len(sample_41_50) > 0:
        sample_41_50 = 'https://redshield.bytedance.net/Home/Audit/search?type=video&data={}&from=list'.format(
            '%2C%20'.join(map(str, sample(sample_41_50, min(20, len(vids))))))
    else:
        sample_41_50 = ''
    if len(sample_141_150) > 0:
        sample_141_150 = 'https://redshield.bytedance.net/Home/Audit/search?type=video&data={}&from=list'.format(
            '%2C%20'.join(map(str, sample(sample_141_150, min(20, len(vids))))))
    else:
        sample_141_150 = ''
    if len(sample_291_300) > 0:
        sample_291_300 = 'https://redshield.bytedance.net/Home/Audit/search?type=video&data={}&from=list'.format(
            '%2C%20'.join(map(str, sample(sample_291_300, min(20, len(vids))))))
    else:
        sample_291_300 = ''

    simples = {
        'sample_1_10': sample_1_10,
        'sample_41_50': sample_41_50,
        'sample_141_150': sample_141_150,
        'sample_291_300': sample_291_300,
    }

    for us, vs in uid2vid.items():
        ss = uid2score[us]
        aweme = uid2aweme[us][0]
        if sql_with_collect_set:
            if uid2score_time[us] >= chosen_count:
                aweme = ','.join(list(set(aweme.split('。'))))
                vs = ','.join(vs[0].split('。'))
                rst_uid.append([us, aweme, vs, uid2score_time[us], '-', '-', ss[0]])
                chosen_uids.append(us)
                chosen_score.append(ss[0])
        if not sql_with_collect_set:
            if len(ss) >= chosen_count:
                rst_uid.append([us, aweme, vs, len(ss), sum(ss), sum(ss)/len(ss), max(ss)])
                chosen_uids.append(us)
                chosen_score.append(max(ss))
    link = None
    if send_sheet:
        link = send_feishu_sheet(rst_uid[:feishu_size_limit],  result_title='info_{}'.format(task_name))
    return rst, chosen_uids, chosen_score, link, text_250_300, quality_scores, simples


if __name__ == '__main__':
    _rst, _uids, _vids, _task_name, _all_links, _text_250_300, _quality_scores, _simples = case_extension(
        uids=[3422161009909288],
        task_name='医美培训',
        min_score=3,
    )
    refactor_auto_sql(_rst, _uids, _vids, _task_name, _all_links, min_score=15, chosen_count=1)

    # https://bytedance.feishu.cn/sheets/EDn1s2ZEChkwbgtiR1Rc5w4Tnzb?sheet=a5TSIp
    case_extension(
        vids=[7230723788684528908,7233703663351467316,7232632842386197763,7233001463293775162,7231395507954781444,7232533937120234813,7233628738892795193,7230000235752197433,7232201736423738663,7235623798249098500,7226332772523101443,7235540145091398973,7232631860910673211,7230768841347861815,7234370365948988733,7231176283210779919,7232083293204696376,7235495498059205899,7225184028876459316,7231194464457346356,7227422723360771365,7233719864915987764,7231778106405604640,7234134535057788171,7232259329657703739,7232570170709953829,7233723032001400064,7234750248671841597,7230695981006753036,7231760729278401830,7232950852456090880,7236023919298301221,7231471517261925690,7235154583104933152,7232627301584817448,7232627109850631459,7231928941450153250,7235092174365363471,7228974282473344256,7230791695850409227,7233722794826108218,7232671699144035588,7231928594627333433,7232718030814367033,7229246586243616052,7232926095119617338,7229622738716052796,7230350428460846396,7230294347365846329,7232964345284611384,7230654353504324919,7232640943680146726,7233028084872678660,7232203004240235831,7225115140566388003,7229957245302246668,7230802267031588131,7234470259053415680,7234154877679701303,7233397119724293437,7231159229371911461,7229885513027702072,7229948743209045263,7234092834654113079,7232198454133493007,7224905979090062627,7234450388273925388,7234451221602422056,7232223472506653955,7236023633963912483,7233707273799961896,7225577664852069644,7233032337200516355,7234448604776271163,7229660199173311803,7228159720719224068,7230345960763788601,7225169257720450361,7234448654499695887,7233691000055598340,7234186593320373556,7231766057122303235,7231401909268106499,7225157176996678968,7232641451455155456,7235803032049421607,7233394422849883396,7231893994328886561,7232486043709197626,7232532234404662588,7228886938604916002,7229465855363484928,7235545299513511207,7230701357643222331,7230384613556817184,7225851154222140672,7231829585493527860,7235214723522907450,7229135289745231165,7229372505364942092,7233386696312704293,7235928848372747523,7229947682591231284,7225236670562585912,7224905403396590904,7229611370533162279,7235636517396434237,7232289414771133700,7234158909848636675,7232474320050588961,7227341909470104872,7228947227278904631,7225210497572867366,7225099465533689125,7226976268212915517,7228947630930414848,7235474236238761228,7233814859169762575,7235429230916554044,7231780163418066237,7225072907100097852,7228136309032865079,7225101427964742971,7234894164863880460,7225240985536695584,7233052821795376396,7229135257256217859,7234111917923503375,7234809290521922873,7235615624179748129,7235870740107595065,7232299871628184866,7229551540632145207,7227423240598113571,7234546471582846247,7225243096659938595,7229992271494630671,7234397576911408439,7224906069015809320,7235215475435687183,7230615763256757515,7227136336954789179,7228892765231369533,7229645663909317925,7230044252514880827,7234171270001118503,7229141349306469672,7233654898720574720,7235929720779590950,7232858805485309239,7235258437364354315,7231509089807912248,7231172300458970423,7229088259123481913,7230619098072321295,7233238452865649977,7225252435835587898,7234395085935365428,7234004043398384948,7226806207565090063,7225109051082951970,7233756237542788392,7231770109528771898,7232962178129644835,7225095411545984294,7225412919792635151,7233614288647097637,7229629576685571380,7226950801632120068,7227327495916227880,7230089689770855739,7226806571433528591,7229326899284151613,7235087368393395514,7234368447545724199,7231454625126173987,7235961239283830071,7233794852943695108,7234112269913787683,7234455662506413312,7233070319265778979,7232863745058327819,7235954698040184068,7230774895716633912,7235516753881697573,7235174694867995956,7230797172101401912,7229982903696903476,7229700222731980044,7227790975425400104,7226527038511844619,7233336887740550415,7232258402330676480,7229310226988649785,7231392650593586489,7229656025257774348,7232882508499619109,7235924557956123965,7231763154588437819,7231412000318852412,7225054737467575586,7235935744978603324,7227657407873174799,7234548271010680079,7225882120617528580,7235840896376311096,7230048406461254924,7231115600498674996,7230439447857204520,7234136577373523200,7225637203622366476,7233776801753894196,7227372832425004300,7235857632035163444,7225601802966748428,7225942451121343784,7225044764305984783,7229659599492664576,7230057016146791691,7225879649228836099,7229165958273846561,7226220245222968608,7232524821857406265,7231932417513164047,7230651187878432035,7227836943906639156,7230057351552830720,7229227076782476582,7235968334724959543,7230243277583273256,7230975534761594171,7228559766048509219,7229987967522163983,7225467789295848704,7229846881776569634,7231234274517683459,7228967797886422328,7235138319321959691,7234720702115450123,7229166576560278784,7232293220783361292,7227005820746108195,7233471892328418615,7231990084910763279,7227664470561115404,7232131924125404475,7228509536452168960,7227878183817710900,7227127986925931787,7230306357436583202,7235865910962048291,7227339341536775458,7234073388011015436,7235076331984178470,7231558721468517635],
        task_name='车友会招嫖_扩展',
        exclude_uid=[4347891618943524,1075750663633871,400656719690157,4048818078488109,4136783020563341,1515553598749411,2630480469699240,3637629846815532,3221994609327296,3338529801246927,488627089979515,103356556885,2940530922110830,946020694367127,1374817480620605,3438912311662784,1058161276233357,284112597302132,1322033079920571,3837726831419696,277555573696279,1786083337052672,3749761139344696,1533157383079771,2124731126656012,87525518654,620603650350620,1851196967496685,1104387564115863,1673870434901148,2799786268048899,3749773258262212,48797987904903,3063665848499572,207186820611312,213732949502396,1363852034844279,1972962835315200,2834974174362144,2863572562746363,3433112166737118,1912800694502195,325930456202423,600759517323552,325053252378653,2535911014022808,407246588360616,1937752915716871,4365495930725597,1972953577954909,3573845749138398,635943675772109,1568318465536541,1533148639004734,2359966778793648,1744258391086628,1533149036952686,2163478355271831,3732177604590413,1304459415127784,2916368945517149,1585928733989363,3098850601992237,2025737912627616,98603910028,1832202621430911,794284232030215,618362407238120,99659787935,3936697739655341,301699136490588,3362735956956195,4112651763330848,600770214376830,1849810133454125,2870156459775172,2641441103818839,4073056652509027,3661810847718941,4488643663640155,1931159416869312,3338592121784815,2623851138913172,3598063660702583,3971910664987663,523803724102971,4389706937676660,409446669368350,4147798639910109,109684878015,3756387620369016,3292370828008364,3872917151561741,3679398870656301,800089856032446,3362732780567052,527368213244091,1333054485044398,2553483791697227,826449168957629,1779439576024078,3096647141426352,1234070769510168,3046076669497576,3996051835470212,248913363211860,1779447011750712,2518318344836103,25863031010,4066423707809851,1050771858664382,105084007992,1025173754218751,1409996949304093,104420247514,2375419753925820,1530171191726668,3908088659450911,125768745091440,1849802287760039,954017502992300,2867947586566208,3161851260860702,776690285948491,71654129716,4363305303941636,2201655231389827,3206650098098236,4142555733428200,2054320792800011,71379917797,2335820755508967,2289610440588190,3738820401444503,361072262132093,1709058770342766,629379174514392,73004967014061,1491414377824952,166725928885720,55399298109838,717356705255016,3945498107188679,61523601407,101803559735,2626063993412919,109462522677,3046085895137116,2999062935643230,308291811683159,3993838963668167,1675276830380407,3690375597007976,91699577952,2219238210147784,3422132382218151,1403418941865544,2940533012182076,1093348897070732,2344589792124055,4354520790609472,1867398627197672,1517783901538263,2201646104057870,4353669478489163,1621109608558171,94058336601,3837730655321936,2405366250078263,1902584427194476,738493928077064,37805990624544,98767064747,4108210678543079,3549675390250771,2641450664470335,1181292473629278,70253629739,3465302911491895,3521063173242720,477616772483920,108405036265,69927793022,163201950167741,2641464939252071,2673633566922510,57836720432,794276386845327,776670024831624,1605727575083147,2518305379725511,231327162180479,110814130599,1091135093174720,3433090884313940,935010987156188,2236832854844056,987785225578324,3169229013531216,3767355513519384,3872907860378732,2186275706113534,4376477227301815,2307210809709324,653541212427198,1319887062973240,77034570079,108175883254222,2289618346053360,1726663350556477,2359983193719195,3644198545543715,2582132661161053,3057088759857744,3523284332455656,791250962744798,4328137598174824,1005384425017692,1931188851979803,2309392702642403,89924692892,374253606405656,2176650587413259,74281262359,3661808791721036,30442247952759,3633217193385788,1990539797858016,100647443993,67210363802,3749767896891422,37817042611631,3661809111278400,114785925990808,1849810717516348,109226205899,1779444252411054,1909224611525220,4503672109722645,354476004477184,2986728433390543,101372471545,3901520147912717,2233812080664174,2031541292635982,1600516991491416,4275338553330760,2190686203414813,1058162684738939,3591434304757119,3070308988500925,131564172217821,4042249425138899,3609013770010190,1104355794623230],
    )
