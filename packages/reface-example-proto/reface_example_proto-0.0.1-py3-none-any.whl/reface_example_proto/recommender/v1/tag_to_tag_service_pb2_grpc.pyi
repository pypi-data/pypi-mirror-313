"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import reface_example_proto.recommender.v1.tag_to_tag_service_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class TagToTagRecommenderServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    TagToTagAssets: grpc.UnaryUnaryMultiCallable[
        reface_example_proto.recommender.v1.tag_to_tag_service_pb2.TagToTagAssetsRequest,
        reface_example_proto.recommender.v1.tag_to_tag_service_pb2.TagToTagAssetsResponse,
    ]

class TagToTagRecommenderServiceAsyncStub:
    TagToTagAssets: grpc.aio.UnaryUnaryMultiCallable[
        reface_example_proto.recommender.v1.tag_to_tag_service_pb2.TagToTagAssetsRequest,
        reface_example_proto.recommender.v1.tag_to_tag_service_pb2.TagToTagAssetsResponse,
    ]

class TagToTagRecommenderServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def TagToTagAssets(
        self,
        request: reface_example_proto.recommender.v1.tag_to_tag_service_pb2.TagToTagAssetsRequest,
        context: _ServicerContext,
    ) -> typing.Union[reface_example_proto.recommender.v1.tag_to_tag_service_pb2.TagToTagAssetsResponse, collections.abc.Awaitable[reface_example_proto.recommender.v1.tag_to_tag_service_pb2.TagToTagAssetsResponse]]: ...

def add_TagToTagRecommenderServiceServicer_to_server(servicer: TagToTagRecommenderServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
