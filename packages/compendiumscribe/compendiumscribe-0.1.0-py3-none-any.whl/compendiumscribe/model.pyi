import xml.etree.ElementTree as ET
from _typeshed import Incomplete
from dataclasses import dataclass

@dataclass
class Concept:
    name: str
    keywords: list[str] = ...
    questions: list[str] = ...
    prerequisites: list[str] = ...
    content: str = ...
    def to_xml(self) -> ET.Element: ...
    def __init__(self, name, keywords=..., questions=..., prerequisites=..., content=...) -> None: ...

@dataclass
class Topic:
    name: str
    topic_summary: str = ...
    concepts: list[Concept] = ...
    def to_xml(self) -> ET.Element: ...
    def __init__(self, name, topic_summary=..., concepts=...) -> None: ...

@dataclass
class Domain:
    name: str
    summary: str = ...
    topics: list[Topic] = ...
    def to_xml(self) -> ET.Element: ...
    def to_xml_string(self) -> str: ...
    def __init__(self, name, summary=..., topics=...) -> None: ...

def etree_to_string(elem, cdata_tags: Incomplete | None = None): ...
