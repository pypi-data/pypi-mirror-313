# coding: utf-8

"""
    AI model Service Restful API

    This is an ai model service  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
import six


class LLMEvalJudgerRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'model_name': 'str',
        'model': 'str',
        'messages': 'list[LLMEvalJudgerRequestMessages]'
    }

    attribute_map = {
        'action': 'action',
        'model_name': 'model_name',
        'model': 'model',
        'messages': 'messages'
    }

    def __init__(self, action=None, model_name=None, model=None, messages=None):  # noqa: E501
        """LLMEvalJudgerRequest - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._model_name = None
        self._model = None
        self._messages = None
        self.discriminator = None
        self.action = action
        if model_name is not None:
            self.model_name = model_name
        self.model = model
        self.messages = messages

    @property
    def action(self):
        """Gets the action of this LLMEvalJudgerRequest.  # noqa: E501


        :return: The action of this LLMEvalJudgerRequest.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this LLMEvalJudgerRequest.


        :param action: The action of this LLMEvalJudgerRequest.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def model_name(self):
        """Gets the model_name of this LLMEvalJudgerRequest.  # noqa: E501


        :return: The model_name of this LLMEvalJudgerRequest.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this LLMEvalJudgerRequest.


        :param model_name: The model_name of this LLMEvalJudgerRequest.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def model(self):
        """Gets the model of this LLMEvalJudgerRequest.  # noqa: E501


        :return: The model of this LLMEvalJudgerRequest.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this LLMEvalJudgerRequest.


        :param model: The model of this LLMEvalJudgerRequest.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def messages(self):
        """Gets the messages of this LLMEvalJudgerRequest.  # noqa: E501


        :return: The messages of this LLMEvalJudgerRequest.  # noqa: E501
        :rtype: list[LLMEvalJudgerRequestMessages]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this LLMEvalJudgerRequest.


        :param messages: The messages of this LLMEvalJudgerRequest.  # noqa: E501
        :type: list[LLMEvalJudgerRequestMessages]
        """
        if messages is None:
            raise ValueError("Invalid value for `messages`, must not be `None`")  # noqa: E501

        self._messages = messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LLMEvalJudgerRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LLMEvalJudgerRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

