# coding: utf-8

"""
    AI model Service Restful API

    This is an ai model service  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ai_service_python_sdk.client.api_client import ApiClient
from ai_service_python_sdk.client.models.text_request import TextRequest


class AiServiceTextApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client):
        self.api_client = api_client

    def ai_model_text(self, body, **kwargs):  # noqa: E501
        """文本检测接口  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ai_model_text(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TextRequest body: 文本检测body (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ai_model_text_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.ai_model_text_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def ai_model_text_with_http_info(self, body, **kwargs):  # noqa: E501
        """文本检测接口  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ai_model_text_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TextRequest body: 文本检测body (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ai_model_text" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `ai_model_text`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path = "/api/v1/text"

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth', 'requestTime']  # noqa: E501

        sign = self.api_client.client_create_sign(self.api_client.configuration, path, 'POST',
                                                  body_params.to_dict(),
                                                  path_params)

        header_params['Authorization'] = self.api_client.configuration.appid + ':' + sign

        return self.api_client.call_api(
            path, 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def key_word_text(self, text, model_name, configure):
        request = TextRequest('KeyWordText', text, model_name, configure)
        thread = self.ai_model_text(request)
        return thread

    def ner_text(self, text, model_name, configure):
        request = TextRequest('NERText', text, model_name, configure)
        thread = self.ai_model_text(request)
        return thread

    def fine_grained_label_text(self, text, model_name, configure):
        request = TextRequest('FineGrainedLabelText', text, model_name, configure)
        thread = self.ai_model_text(request)
        return thread

    def vectorization_text(self, text, model_name, configure):
        request = TextRequest('VectorizationText', text, model_name, configure)
        thread = self.ai_model_text(request)
        return thread

    def anti_spam_text(self, text, model_name, configure):
        request = TextRequest('AntiSpamText', text, model_name, configure)
        thread = self.ai_model_text(request)
        return thread

    def sentiment_analysis_text(self, text, model_name, configure):
        request = TextRequest('SentimentAnalysisText', text, model_name, configure)
        thread = self.ai_model_text(request)
        return thread

    def ecomerce_review_sentiment_analysis_text(self, text, model_name, configure):
        request = TextRequest('EcomerceReviewSentimentAnalysisText', text, model_name, configure)
        thread = self.ai_model_text(request)
        return thread
