# coding: utf-8

"""
    AI model Service Restful API

    This is an ai model service  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six


class AiServiceJobApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client):
        self.api_client = api_client

    def get_async_job(self, job_id, **kwargs):  # noqa: E501
        """根据 jobid 查询异步任务  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_async_job(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: job id (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_async_job_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_async_job_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def get_async_job_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """根据 jobid 查询异步任务  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_async_job_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: job id (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_async_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `get_async_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['job_id'] = params['job_id']  # noqa: E501

        query_params = []
        path = f'/api/v1/async_jobs/{job_id}'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth', 'requestTime']  # noqa: E501

        sign = self.api_client.client_create_sign(self.api_client.configuration, path, 'POST',
                                                  body_params,
                                                  path_params)
        header_params['Authorization'] = self.api_client.configuration.appid + ':' + sign

        return self.api_client.call_api(
            path, 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_batch_job(self, batch_id, **kwargs):  # noqa: E501
        """根据 batch id 查询异步任务  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_batch_job(batch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int batch_id: batch id (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_batch_job_with_http_info(batch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_batch_job_with_http_info(batch_id, **kwargs)  # noqa: E501
            return data

    def get_batch_job_with_http_info(self, batch_id, **kwargs):  # noqa: E501
        """根据 batch id 查询异步任务  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_batch_job_with_http_info(batch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int batch_id: batch id (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['batch_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_batch_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'batch_id' is set
        if ('batch_id' not in params or
                params['batch_id'] is None):
            raise ValueError("Missing the required parameter `batch_id` when calling `get_batch_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        # if 'batch_id' in params:
        #     path_params["batch_id"] = params['batch_id']  # noqa: E501

        query_params = []
        path = f'/api/v1/batch_jobs/{batch_id}'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth', 'requestTime']  # noqa: E501

        sign = self.api_client.client_create_sign(self.api_client.configuration, path, 'GET',
                                                  body_params,
                                                  path_params)
        header_params['Authorization'] = self.api_client.configuration.appid + ':' + sign

        return self.api_client.call_api(
            path, 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_async_job_with_id(self, job_id):
        return self.get_async_job(job_id)

    def get_batch_job_with_id(self, batch_id):
        return self.get_batch_job(batch_id)
