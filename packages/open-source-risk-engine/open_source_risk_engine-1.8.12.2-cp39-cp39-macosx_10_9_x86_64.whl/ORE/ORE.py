# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ORE
else:
    import _ORE

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ORE.delete_SwigPyIterator

    def value(self):
        return _ORE.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ORE.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ORE.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ORE.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ORE.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ORE.SwigPyIterator_copy(self)

    def next(self):
        return _ORE.SwigPyIterator_next(self)

    def __next__(self):
        return _ORE.SwigPyIterator___next__(self)

    def previous(self):
        return _ORE.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ORE.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ORE.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ORE.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ORE.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ORE.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ORE.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ORE.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ORE:
_ORE.SwigPyIterator_swigregister(SwigPyIterator)
cvar = _ORE.cvar
__hexversion__ = cvar.__hexversion__
__version__ = cvar.__version__

SHARED_PTR_DISOWN = _ORE.SHARED_PTR_DISOWN
Sunday = _ORE.Sunday
Monday = _ORE.Monday
Tuesday = _ORE.Tuesday
Wednesday = _ORE.Wednesday
Thursday = _ORE.Thursday
Friday = _ORE.Friday
Saturday = _ORE.Saturday
January = _ORE.January
February = _ORE.February
March = _ORE.March
April = _ORE.April
May = _ORE.May
June = _ORE.June
July = _ORE.July
August = _ORE.August
September = _ORE.September
October = _ORE.October
November = _ORE.November
December = _ORE.December
Days = _ORE.Days
Weeks = _ORE.Weeks
Months = _ORE.Months
Years = _ORE.Years
Hours = _ORE.Hours
Minutes = _ORE.Minutes
Seconds = _ORE.Seconds
Milliseconds = _ORE.Milliseconds
Microseconds = _ORE.Microseconds
NoFrequency = _ORE.NoFrequency
Once = _ORE.Once
Annual = _ORE.Annual
Semiannual = _ORE.Semiannual
EveryFourthMonth = _ORE.EveryFourthMonth
Quarterly = _ORE.Quarterly
Bimonthly = _ORE.Bimonthly
Monthly = _ORE.Monthly
EveryFourthWeek = _ORE.EveryFourthWeek
Biweekly = _ORE.Biweekly
Weekly = _ORE.Weekly
Daily = _ORE.Daily
OtherFrequency = _ORE.OtherFrequency
class Period(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def length(self):
        return _ORE.Period_length(self)

    def units(self):
        return _ORE.Period_units(self)

    def frequency(self):
        return _ORE.Period_frequency(self)

    def normalized(self):
        return _ORE.Period_normalized(self)

    def __init__(self, *args):
        _ORE.Period_swiginit(self, _ORE.new_Period(*args))

    def __str__(self):
        return _ORE.Period___str__(self)

    def __repr__(self):
        return _ORE.Period___repr__(self)

    def __neg__(self):
        return _ORE.Period___neg__(self)

    def __add__(self, p):
        return _ORE.Period___add__(self, p)

    def __sub__(self, p):
        return _ORE.Period___sub__(self, p)

    def __mul__(self, n):
        return _ORE.Period___mul__(self, n)

    def __rmul__(self, n):
        return _ORE.Period___rmul__(self, n)

    def __lt__(self, other):
        return _ORE.Period___lt__(self, other)

    def __gt__(self, other):
        return _ORE.Period___gt__(self, other)

    def __le__(self, other):
        return _ORE.Period___le__(self, other)

    def __ge__(self, other):
        return _ORE.Period___ge__(self, other)

    def __eq__(self, other):
        return _ORE.Period___eq__(self, other)

    def __cmp__(self, other):
        return _ORE.Period___cmp__(self, other)

    def __hash__(self):
        return hash(str(self.normalized()))

    __swig_destroy__ = _ORE.delete_Period

# Register Period in _ORE:
_ORE.Period_swigregister(Period)

class PeriodVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.PeriodVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.PeriodVector___nonzero__(self)

    def __bool__(self):
        return _ORE.PeriodVector___bool__(self)

    def __len__(self):
        return _ORE.PeriodVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.PeriodVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.PeriodVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.PeriodVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.PeriodVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.PeriodVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.PeriodVector___setitem__(self, *args)

    def pop(self):
        return _ORE.PeriodVector_pop(self)

    def append(self, x):
        return _ORE.PeriodVector_append(self, x)

    def empty(self):
        return _ORE.PeriodVector_empty(self)

    def size(self):
        return _ORE.PeriodVector_size(self)

    def swap(self, v):
        return _ORE.PeriodVector_swap(self, v)

    def begin(self):
        return _ORE.PeriodVector_begin(self)

    def end(self):
        return _ORE.PeriodVector_end(self)

    def rbegin(self):
        return _ORE.PeriodVector_rbegin(self)

    def rend(self):
        return _ORE.PeriodVector_rend(self)

    def clear(self):
        return _ORE.PeriodVector_clear(self)

    def get_allocator(self):
        return _ORE.PeriodVector_get_allocator(self)

    def pop_back(self):
        return _ORE.PeriodVector_pop_back(self)

    def erase(self, *args):
        return _ORE.PeriodVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.PeriodVector_swiginit(self, _ORE.new_PeriodVector(*args))

    def push_back(self, x):
        return _ORE.PeriodVector_push_back(self, x)

    def front(self):
        return _ORE.PeriodVector_front(self)

    def back(self):
        return _ORE.PeriodVector_back(self)

    def assign(self, n, x):
        return _ORE.PeriodVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.PeriodVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.PeriodVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.PeriodVector_reserve(self, n)

    def capacity(self):
        return _ORE.PeriodVector_capacity(self)
    __swig_destroy__ = _ORE.delete_PeriodVector

# Register PeriodVector in _ORE:
_ORE.PeriodVector_swigregister(PeriodVector)


import datetime as _datetime

class Date(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def weekday(self):
        return _ORE.Date_weekday(self)

    def dayOfMonth(self):
        return _ORE.Date_dayOfMonth(self)

    def dayOfYear(self):
        return _ORE.Date_dayOfYear(self)

    def month(self):
        return _ORE.Date_month(self)

    def year(self):
        return _ORE.Date_year(self)

    def hours(self):
        return _ORE.Date_hours(self)

    def minutes(self):
        return _ORE.Date_minutes(self)

    def seconds(self):
        return _ORE.Date_seconds(self)

    def milliseconds(self):
        return _ORE.Date_milliseconds(self)

    def microseconds(self):
        return _ORE.Date_microseconds(self)

    def fractionOfDay(self):
        return _ORE.Date_fractionOfDay(self)

    def fractionOfSecond(self):
        return _ORE.Date_fractionOfSecond(self)

    def serialNumber(self):
        return _ORE.Date_serialNumber(self)

    @staticmethod
    def isLeap(y):
        return _ORE.Date_isLeap(y)

    @staticmethod
    def minDate():
        return _ORE.Date_minDate()

    @staticmethod
    def maxDate():
        return _ORE.Date_maxDate()

    @staticmethod
    def todaysDate():
        return _ORE.Date_todaysDate()

    @staticmethod
    def localDateTime():
        return _ORE.Date_localDateTime()

    @staticmethod
    def universalDateTime():
        return _ORE.Date_universalDateTime()

    @staticmethod
    def endOfMonth(arg1):
        return _ORE.Date_endOfMonth(arg1)

    @staticmethod
    def isEndOfMonth(arg1):
        return _ORE.Date_isEndOfMonth(arg1)

    @staticmethod
    def nextWeekday(arg1, arg2):
        return _ORE.Date_nextWeekday(arg1, arg2)

    @staticmethod
    def nthWeekday(n, arg2, m, y):
        return _ORE.Date_nthWeekday(n, arg2, m, y)

    def __add__(self, *args):
        return _ORE.Date___add__(self, *args)

    def __init__(self, *args):
        _ORE.Date_swiginit(self, _ORE.new_Date(*args))

    def weekdayNumber(self):
        return _ORE.Date_weekdayNumber(self)

    def __str__(self):
        return _ORE.Date___str__(self)

    def __repr__(self):
        return _ORE.Date___repr__(self)

    def ISO(self):
        return _ORE.Date_ISO(self)

    def __sub__(self, *args):
        return _ORE.Date___sub__(self, *args)

    def __eq__(self, other):
        return _ORE.Date___eq__(self, other)

    def __cmp__(self, other):
        return _ORE.Date___cmp__(self, other)

    def __nonzero__(self):
        return _ORE.Date___nonzero__(self)

    def __bool__(self):
        return _ORE.Date___bool__(self)

    def __hash__(self):
        return _ORE.Date___hash__(self)

    def __lt__(self, other):
        return _ORE.Date___lt__(self, other)

    def __gt__(self, other):
        return _ORE.Date___gt__(self, other)

    def __le__(self, other):
        return _ORE.Date___le__(self, other)

    def __ge__(self, other):
        return _ORE.Date___ge__(self, other)

    def __ne__(self, other):
        return _ORE.Date___ne__(self, other)

    def to_date(self):
        return _datetime.date(self.year(), self.month(), self.dayOfMonth())

    @staticmethod
    def from_date(date):
        return Date(date.day, date.month, date.year)

    __swig_destroy__ = _ORE.delete_Date

# Register Date in _ORE:
_ORE.Date_swigregister(Date)

def Date_isLeap(y):
    return _ORE.Date_isLeap(y)

def Date_minDate():
    return _ORE.Date_minDate()

def Date_maxDate():
    return _ORE.Date_maxDate()

def Date_todaysDate():
    return _ORE.Date_todaysDate()

def Date_localDateTime():
    return _ORE.Date_localDateTime()

def Date_universalDateTime():
    return _ORE.Date_universalDateTime()

def Date_endOfMonth(arg1):
    return _ORE.Date_endOfMonth(arg1)

def Date_isEndOfMonth(arg1):
    return _ORE.Date_isEndOfMonth(arg1)

def Date_nextWeekday(arg1, arg2):
    return _ORE.Date_nextWeekday(arg1, arg2)

def Date_nthWeekday(n, arg2, m, y):
    return _ORE.Date_nthWeekday(n, arg2, m, y)

class DateParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def parseFormatted(str, fmt):
        return _ORE.DateParser_parseFormatted(str, fmt)

    @staticmethod
    def parseISO(str):
        return _ORE.DateParser_parseISO(str)

    @staticmethod
    def parse(str, fmt):
        return _ORE.DateParser_parse(str, fmt)

    def __init__(self):
        _ORE.DateParser_swiginit(self, _ORE.new_DateParser())
    __swig_destroy__ = _ORE.delete_DateParser

# Register DateParser in _ORE:
_ORE.DateParser_swigregister(DateParser)

def DateParser_parseFormatted(str, fmt):
    return _ORE.DateParser_parseFormatted(str, fmt)

def DateParser_parseISO(str):
    return _ORE.DateParser_parseISO(str)

def DateParser_parse(str, fmt):
    return _ORE.DateParser_parse(str, fmt)

class PeriodParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def parse(str):
        return _ORE.PeriodParser_parse(str)

    def __init__(self):
        _ORE.PeriodParser_swiginit(self, _ORE.new_PeriodParser())
    __swig_destroy__ = _ORE.delete_PeriodParser

# Register PeriodParser in _ORE:
_ORE.PeriodParser_swigregister(PeriodParser)

def PeriodParser_parse(str):
    return _ORE.PeriodParser_parse(str)


Date._old___add__ = Date.__add__
Date._old___sub__ = Date.__sub__
def Date_new___add__(self,x):
    if type(x) is tuple and len(x) == 2:
        return self._old___add__(Period(x[0],x[1]))
    else:
        return self._old___add__(x)
def Date_new___sub__(self,x):
    if type(x) is tuple and len(x) == 2:
        return self._old___sub__(Period(x[0],x[1]))
    else:
        return self._old___sub__(x)
Date.__add__ = Date_new___add__
Date.__sub__ = Date_new___sub__

class DateVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.DateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.DateVector___nonzero__(self)

    def __bool__(self):
        return _ORE.DateVector___bool__(self)

    def __len__(self):
        return _ORE.DateVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.DateVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.DateVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.DateVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.DateVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.DateVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.DateVector___setitem__(self, *args)

    def pop(self):
        return _ORE.DateVector_pop(self)

    def append(self, x):
        return _ORE.DateVector_append(self, x)

    def empty(self):
        return _ORE.DateVector_empty(self)

    def size(self):
        return _ORE.DateVector_size(self)

    def swap(self, v):
        return _ORE.DateVector_swap(self, v)

    def begin(self):
        return _ORE.DateVector_begin(self)

    def end(self):
        return _ORE.DateVector_end(self)

    def rbegin(self):
        return _ORE.DateVector_rbegin(self)

    def rend(self):
        return _ORE.DateVector_rend(self)

    def clear(self):
        return _ORE.DateVector_clear(self)

    def get_allocator(self):
        return _ORE.DateVector_get_allocator(self)

    def pop_back(self):
        return _ORE.DateVector_pop_back(self)

    def erase(self, *args):
        return _ORE.DateVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.DateVector_swiginit(self, _ORE.new_DateVector(*args))

    def push_back(self, x):
        return _ORE.DateVector_push_back(self, x)

    def front(self):
        return _ORE.DateVector_front(self)

    def back(self):
        return _ORE.DateVector_back(self)

    def assign(self, n, x):
        return _ORE.DateVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.DateVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.DateVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.DateVector_reserve(self, n)

    def capacity(self):
        return _ORE.DateVector_capacity(self)
    __swig_destroy__ = _ORE.delete_DateVector

# Register DateVector in _ORE:
_ORE.DateVector_swigregister(DateVector)


def daysBetween(arg1, arg2):
    return _ORE.daysBetween(arg1, arg2)
class IMM(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    F = _ORE.IMM_F
    G = _ORE.IMM_G
    H = _ORE.IMM_H
    J = _ORE.IMM_J
    K = _ORE.IMM_K
    M = _ORE.IMM_M
    N = _ORE.IMM_N
    Q = _ORE.IMM_Q
    U = _ORE.IMM_U
    V = _ORE.IMM_V
    X = _ORE.IMM_X
    Z = _ORE.IMM_Z

    @staticmethod
    def isIMMdate(d, mainCycle=True):
        return _ORE.IMM_isIMMdate(d, mainCycle)

    @staticmethod
    def isIMMcode(code, mainCycle=True):
        return _ORE.IMM_isIMMcode(code, mainCycle)

    @staticmethod
    def code(immDate):
        return _ORE.IMM_code(immDate)

    @staticmethod
    def date(*args):
        return _ORE.IMM_date(*args)

    @staticmethod
    def nextDate(*args):
        return _ORE.IMM_nextDate(*args)

    @staticmethod
    def nextCode(*args):
        return _ORE.IMM_nextCode(*args)

    def __init__(self):
        _ORE.IMM_swiginit(self, _ORE.new_IMM())
    __swig_destroy__ = _ORE.delete_IMM

# Register IMM in _ORE:
_ORE.IMM_swigregister(IMM)

def IMM_isIMMdate(d, mainCycle=True):
    return _ORE.IMM_isIMMdate(d, mainCycle)

def IMM_isIMMcode(code, mainCycle=True):
    return _ORE.IMM_isIMMcode(code, mainCycle)

def IMM_code(immDate):
    return _ORE.IMM_code(immDate)

def IMM_date(*args):
    return _ORE.IMM_date(*args)

def IMM_nextDate(*args):
    return _ORE.IMM_nextDate(*args)

def IMM_nextCode(*args):
    return _ORE.IMM_nextCode(*args)

class ASX(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    F = _ORE.ASX_F
    G = _ORE.ASX_G
    H = _ORE.ASX_H
    J = _ORE.ASX_J
    K = _ORE.ASX_K
    M = _ORE.ASX_M
    N = _ORE.ASX_N
    Q = _ORE.ASX_Q
    U = _ORE.ASX_U
    V = _ORE.ASX_V
    X = _ORE.ASX_X
    Z = _ORE.ASX_Z

    @staticmethod
    def isASXdate(d, mainCycle=True):
        return _ORE.ASX_isASXdate(d, mainCycle)

    @staticmethod
    def isASXcode(code, mainCycle=True):
        return _ORE.ASX_isASXcode(code, mainCycle)

    @staticmethod
    def code(asxDate):
        return _ORE.ASX_code(asxDate)

    @staticmethod
    def date(*args):
        return _ORE.ASX_date(*args)

    @staticmethod
    def nextDate(*args):
        return _ORE.ASX_nextDate(*args)

    @staticmethod
    def nextCode(*args):
        return _ORE.ASX_nextCode(*args)

    def __init__(self):
        _ORE.ASX_swiginit(self, _ORE.new_ASX())
    __swig_destroy__ = _ORE.delete_ASX

# Register ASX in _ORE:
_ORE.ASX_swigregister(ASX)

def ASX_isASXdate(d, mainCycle=True):
    return _ORE.ASX_isASXdate(d, mainCycle)

def ASX_isASXcode(code, mainCycle=True):
    return _ORE.ASX_isASXcode(code, mainCycle)

def ASX_code(asxDate):
    return _ORE.ASX_code(asxDate)

def ASX_date(*args):
    return _ORE.ASX_date(*args)

def ASX_nextDate(*args):
    return _ORE.ASX_nextDate(*args)

def ASX_nextCode(*args):
    return _ORE.ASX_nextCode(*args)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.IntVector___nonzero__(self)

    def __bool__(self):
        return _ORE.IntVector___bool__(self)

    def __len__(self):
        return _ORE.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.IntVector___setitem__(self, *args)

    def pop(self):
        return _ORE.IntVector_pop(self)

    def append(self, x):
        return _ORE.IntVector_append(self, x)

    def empty(self):
        return _ORE.IntVector_empty(self)

    def size(self):
        return _ORE.IntVector_size(self)

    def swap(self, v):
        return _ORE.IntVector_swap(self, v)

    def begin(self):
        return _ORE.IntVector_begin(self)

    def end(self):
        return _ORE.IntVector_end(self)

    def rbegin(self):
        return _ORE.IntVector_rbegin(self)

    def rend(self):
        return _ORE.IntVector_rend(self)

    def clear(self):
        return _ORE.IntVector_clear(self)

    def get_allocator(self):
        return _ORE.IntVector_get_allocator(self)

    def pop_back(self):
        return _ORE.IntVector_pop_back(self)

    def erase(self, *args):
        return _ORE.IntVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.IntVector_swiginit(self, _ORE.new_IntVector(*args))

    def push_back(self, x):
        return _ORE.IntVector_push_back(self, x)

    def front(self):
        return _ORE.IntVector_front(self)

    def back(self):
        return _ORE.IntVector_back(self)

    def assign(self, n, x):
        return _ORE.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.IntVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.IntVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.IntVector_reserve(self, n)

    def capacity(self):
        return _ORE.IntVector_capacity(self)
    __swig_destroy__ = _ORE.delete_IntVector

# Register IntVector in _ORE:
_ORE.IntVector_swigregister(IntVector)

class UnsignedIntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.UnsignedIntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.UnsignedIntVector___nonzero__(self)

    def __bool__(self):
        return _ORE.UnsignedIntVector___bool__(self)

    def __len__(self):
        return _ORE.UnsignedIntVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.UnsignedIntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.UnsignedIntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.UnsignedIntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.UnsignedIntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.UnsignedIntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.UnsignedIntVector___setitem__(self, *args)

    def pop(self):
        return _ORE.UnsignedIntVector_pop(self)

    def append(self, x):
        return _ORE.UnsignedIntVector_append(self, x)

    def empty(self):
        return _ORE.UnsignedIntVector_empty(self)

    def size(self):
        return _ORE.UnsignedIntVector_size(self)

    def swap(self, v):
        return _ORE.UnsignedIntVector_swap(self, v)

    def begin(self):
        return _ORE.UnsignedIntVector_begin(self)

    def end(self):
        return _ORE.UnsignedIntVector_end(self)

    def rbegin(self):
        return _ORE.UnsignedIntVector_rbegin(self)

    def rend(self):
        return _ORE.UnsignedIntVector_rend(self)

    def clear(self):
        return _ORE.UnsignedIntVector_clear(self)

    def get_allocator(self):
        return _ORE.UnsignedIntVector_get_allocator(self)

    def pop_back(self):
        return _ORE.UnsignedIntVector_pop_back(self)

    def erase(self, *args):
        return _ORE.UnsignedIntVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.UnsignedIntVector_swiginit(self, _ORE.new_UnsignedIntVector(*args))

    def push_back(self, x):
        return _ORE.UnsignedIntVector_push_back(self, x)

    def front(self):
        return _ORE.UnsignedIntVector_front(self)

    def back(self):
        return _ORE.UnsignedIntVector_back(self)

    def assign(self, n, x):
        return _ORE.UnsignedIntVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.UnsignedIntVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.UnsignedIntVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.UnsignedIntVector_reserve(self, n)

    def capacity(self):
        return _ORE.UnsignedIntVector_capacity(self)
    __swig_destroy__ = _ORE.delete_UnsignedIntVector

# Register UnsignedIntVector in _ORE:
_ORE.UnsignedIntVector_swigregister(UnsignedIntVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _ORE.DoubleVector___bool__(self)

    def __len__(self):
        return _ORE.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _ORE.DoubleVector_pop(self)

    def append(self, x):
        return _ORE.DoubleVector_append(self, x)

    def empty(self):
        return _ORE.DoubleVector_empty(self)

    def size(self):
        return _ORE.DoubleVector_size(self)

    def swap(self, v):
        return _ORE.DoubleVector_swap(self, v)

    def begin(self):
        return _ORE.DoubleVector_begin(self)

    def end(self):
        return _ORE.DoubleVector_end(self)

    def rbegin(self):
        return _ORE.DoubleVector_rbegin(self)

    def rend(self):
        return _ORE.DoubleVector_rend(self)

    def clear(self):
        return _ORE.DoubleVector_clear(self)

    def get_allocator(self):
        return _ORE.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _ORE.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _ORE.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.DoubleVector_swiginit(self, _ORE.new_DoubleVector(*args))

    def push_back(self, x):
        return _ORE.DoubleVector_push_back(self, x)

    def front(self):
        return _ORE.DoubleVector_front(self)

    def back(self):
        return _ORE.DoubleVector_back(self)

    def assign(self, n, x):
        return _ORE.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.DoubleVector_reserve(self, n)

    def capacity(self):
        return _ORE.DoubleVector_capacity(self)
    __swig_destroy__ = _ORE.delete_DoubleVector

# Register DoubleVector in _ORE:
_ORE.DoubleVector_swigregister(DoubleVector)

class StrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.StrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.StrVector___nonzero__(self)

    def __bool__(self):
        return _ORE.StrVector___bool__(self)

    def __len__(self):
        return _ORE.StrVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.StrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.StrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.StrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.StrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.StrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.StrVector___setitem__(self, *args)

    def pop(self):
        return _ORE.StrVector_pop(self)

    def append(self, x):
        return _ORE.StrVector_append(self, x)

    def empty(self):
        return _ORE.StrVector_empty(self)

    def size(self):
        return _ORE.StrVector_size(self)

    def swap(self, v):
        return _ORE.StrVector_swap(self, v)

    def begin(self):
        return _ORE.StrVector_begin(self)

    def end(self):
        return _ORE.StrVector_end(self)

    def rbegin(self):
        return _ORE.StrVector_rbegin(self)

    def rend(self):
        return _ORE.StrVector_rend(self)

    def clear(self):
        return _ORE.StrVector_clear(self)

    def get_allocator(self):
        return _ORE.StrVector_get_allocator(self)

    def pop_back(self):
        return _ORE.StrVector_pop_back(self)

    def erase(self, *args):
        return _ORE.StrVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.StrVector_swiginit(self, _ORE.new_StrVector(*args))

    def push_back(self, x):
        return _ORE.StrVector_push_back(self, x)

    def front(self):
        return _ORE.StrVector_front(self)

    def back(self):
        return _ORE.StrVector_back(self)

    def assign(self, n, x):
        return _ORE.StrVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.StrVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.StrVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.StrVector_reserve(self, n)

    def capacity(self):
        return _ORE.StrVector_capacity(self)
    __swig_destroy__ = _ORE.delete_StrVector

# Register StrVector in _ORE:
_ORE.StrVector_swigregister(StrVector)

class BoolVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.BoolVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.BoolVector___nonzero__(self)

    def __bool__(self):
        return _ORE.BoolVector___bool__(self)

    def __len__(self):
        return _ORE.BoolVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.BoolVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.BoolVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.BoolVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.BoolVector___setitem__(self, *args)

    def pop(self):
        return _ORE.BoolVector_pop(self)

    def append(self, x):
        return _ORE.BoolVector_append(self, x)

    def empty(self):
        return _ORE.BoolVector_empty(self)

    def size(self):
        return _ORE.BoolVector_size(self)

    def swap(self, v):
        return _ORE.BoolVector_swap(self, v)

    def begin(self):
        return _ORE.BoolVector_begin(self)

    def end(self):
        return _ORE.BoolVector_end(self)

    def rbegin(self):
        return _ORE.BoolVector_rbegin(self)

    def rend(self):
        return _ORE.BoolVector_rend(self)

    def clear(self):
        return _ORE.BoolVector_clear(self)

    def get_allocator(self):
        return _ORE.BoolVector_get_allocator(self)

    def pop_back(self):
        return _ORE.BoolVector_pop_back(self)

    def erase(self, *args):
        return _ORE.BoolVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.BoolVector_swiginit(self, _ORE.new_BoolVector(*args))

    def push_back(self, x):
        return _ORE.BoolVector_push_back(self, x)

    def front(self):
        return _ORE.BoolVector_front(self)

    def back(self):
        return _ORE.BoolVector_back(self)

    def assign(self, n, x):
        return _ORE.BoolVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.BoolVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.BoolVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.BoolVector_reserve(self, n)

    def capacity(self):
        return _ORE.BoolVector_capacity(self)
    __swig_destroy__ = _ORE.delete_BoolVector

# Register BoolVector in _ORE:
_ORE.BoolVector_swigregister(BoolVector)

class DoubleVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.DoubleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.DoubleVectorVector___nonzero__(self)

    def __bool__(self):
        return _ORE.DoubleVectorVector___bool__(self)

    def __len__(self):
        return _ORE.DoubleVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.DoubleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.DoubleVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.DoubleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.DoubleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.DoubleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.DoubleVectorVector___setitem__(self, *args)

    def pop(self):
        return _ORE.DoubleVectorVector_pop(self)

    def append(self, x):
        return _ORE.DoubleVectorVector_append(self, x)

    def empty(self):
        return _ORE.DoubleVectorVector_empty(self)

    def size(self):
        return _ORE.DoubleVectorVector_size(self)

    def swap(self, v):
        return _ORE.DoubleVectorVector_swap(self, v)

    def begin(self):
        return _ORE.DoubleVectorVector_begin(self)

    def end(self):
        return _ORE.DoubleVectorVector_end(self)

    def rbegin(self):
        return _ORE.DoubleVectorVector_rbegin(self)

    def rend(self):
        return _ORE.DoubleVectorVector_rend(self)

    def clear(self):
        return _ORE.DoubleVectorVector_clear(self)

    def get_allocator(self):
        return _ORE.DoubleVectorVector_get_allocator(self)

    def pop_back(self):
        return _ORE.DoubleVectorVector_pop_back(self)

    def erase(self, *args):
        return _ORE.DoubleVectorVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.DoubleVectorVector_swiginit(self, _ORE.new_DoubleVectorVector(*args))

    def push_back(self, x):
        return _ORE.DoubleVectorVector_push_back(self, x)

    def front(self):
        return _ORE.DoubleVectorVector_front(self)

    def back(self):
        return _ORE.DoubleVectorVector_back(self)

    def assign(self, n, x):
        return _ORE.DoubleVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.DoubleVectorVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.DoubleVectorVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.DoubleVectorVector_reserve(self, n)

    def capacity(self):
        return _ORE.DoubleVectorVector_capacity(self)
    __swig_destroy__ = _ORE.delete_DoubleVectorVector

# Register DoubleVectorVector in _ORE:
_ORE.DoubleVectorVector_swigregister(DoubleVectorVector)

class DoublePair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.DoublePair_swiginit(self, _ORE.new_DoublePair(*args))
    first = property(_ORE.DoublePair_first_get, _ORE.DoublePair_first_set)
    second = property(_ORE.DoublePair_second_get, _ORE.DoublePair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _ORE.delete_DoublePair

# Register DoublePair in _ORE:
_ORE.DoublePair_swigregister(DoublePair)

class DoublePairVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.DoublePairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.DoublePairVector___nonzero__(self)

    def __bool__(self):
        return _ORE.DoublePairVector___bool__(self)

    def __len__(self):
        return _ORE.DoublePairVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.DoublePairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.DoublePairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.DoublePairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.DoublePairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.DoublePairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.DoublePairVector___setitem__(self, *args)

    def pop(self):
        return _ORE.DoublePairVector_pop(self)

    def append(self, x):
        return _ORE.DoublePairVector_append(self, x)

    def empty(self):
        return _ORE.DoublePairVector_empty(self)

    def size(self):
        return _ORE.DoublePairVector_size(self)

    def swap(self, v):
        return _ORE.DoublePairVector_swap(self, v)

    def begin(self):
        return _ORE.DoublePairVector_begin(self)

    def end(self):
        return _ORE.DoublePairVector_end(self)

    def rbegin(self):
        return _ORE.DoublePairVector_rbegin(self)

    def rend(self):
        return _ORE.DoublePairVector_rend(self)

    def clear(self):
        return _ORE.DoublePairVector_clear(self)

    def get_allocator(self):
        return _ORE.DoublePairVector_get_allocator(self)

    def pop_back(self):
        return _ORE.DoublePairVector_pop_back(self)

    def erase(self, *args):
        return _ORE.DoublePairVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.DoublePairVector_swiginit(self, _ORE.new_DoublePairVector(*args))

    def push_back(self, x):
        return _ORE.DoublePairVector_push_back(self, x)

    def front(self):
        return _ORE.DoublePairVector_front(self)

    def back(self):
        return _ORE.DoublePairVector_back(self)

    def assign(self, n, x):
        return _ORE.DoublePairVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.DoublePairVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.DoublePairVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.DoublePairVector_reserve(self, n)

    def capacity(self):
        return _ORE.DoublePairVector_capacity(self)
    __swig_destroy__ = _ORE.delete_DoublePairVector

# Register DoublePairVector in _ORE:
_ORE.DoublePairVector_swigregister(DoublePairVector)

class PairDoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.PairDoubleVector_swiginit(self, _ORE.new_PairDoubleVector(*args))
    first = property(_ORE.PairDoubleVector_first_get, _ORE.PairDoubleVector_first_set)
    second = property(_ORE.PairDoubleVector_second_get, _ORE.PairDoubleVector_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _ORE.delete_PairDoubleVector

# Register PairDoubleVector in _ORE:
_ORE.PairDoubleVector_swigregister(PairDoubleVector)

class UnsignedIntPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.UnsignedIntPair_swiginit(self, _ORE.new_UnsignedIntPair(*args))
    first = property(_ORE.UnsignedIntPair_first_get, _ORE.UnsignedIntPair_first_set)
    second = property(_ORE.UnsignedIntPair_second_get, _ORE.UnsignedIntPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _ORE.delete_UnsignedIntPair

# Register UnsignedIntPair in _ORE:
_ORE.UnsignedIntPair_swigregister(UnsignedIntPair)

class UnsignedIntPairVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.UnsignedIntPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.UnsignedIntPairVector___nonzero__(self)

    def __bool__(self):
        return _ORE.UnsignedIntPairVector___bool__(self)

    def __len__(self):
        return _ORE.UnsignedIntPairVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.UnsignedIntPairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.UnsignedIntPairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.UnsignedIntPairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.UnsignedIntPairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.UnsignedIntPairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.UnsignedIntPairVector___setitem__(self, *args)

    def pop(self):
        return _ORE.UnsignedIntPairVector_pop(self)

    def append(self, x):
        return _ORE.UnsignedIntPairVector_append(self, x)

    def empty(self):
        return _ORE.UnsignedIntPairVector_empty(self)

    def size(self):
        return _ORE.UnsignedIntPairVector_size(self)

    def swap(self, v):
        return _ORE.UnsignedIntPairVector_swap(self, v)

    def begin(self):
        return _ORE.UnsignedIntPairVector_begin(self)

    def end(self):
        return _ORE.UnsignedIntPairVector_end(self)

    def rbegin(self):
        return _ORE.UnsignedIntPairVector_rbegin(self)

    def rend(self):
        return _ORE.UnsignedIntPairVector_rend(self)

    def clear(self):
        return _ORE.UnsignedIntPairVector_clear(self)

    def get_allocator(self):
        return _ORE.UnsignedIntPairVector_get_allocator(self)

    def pop_back(self):
        return _ORE.UnsignedIntPairVector_pop_back(self)

    def erase(self, *args):
        return _ORE.UnsignedIntPairVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.UnsignedIntPairVector_swiginit(self, _ORE.new_UnsignedIntPairVector(*args))

    def push_back(self, x):
        return _ORE.UnsignedIntPairVector_push_back(self, x)

    def front(self):
        return _ORE.UnsignedIntPairVector_front(self)

    def back(self):
        return _ORE.UnsignedIntPairVector_back(self)

    def assign(self, n, x):
        return _ORE.UnsignedIntPairVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.UnsignedIntPairVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.UnsignedIntPairVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.UnsignedIntPairVector_reserve(self, n)

    def capacity(self):
        return _ORE.UnsignedIntPairVector_capacity(self)
    __swig_destroy__ = _ORE.delete_UnsignedIntPairVector

# Register UnsignedIntPairVector in _ORE:
_ORE.UnsignedIntPairVector_swigregister(UnsignedIntPairVector)

class NodePair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.NodePair_swiginit(self, _ORE.new_NodePair(*args))
    first = property(_ORE.NodePair_first_get, _ORE.NodePair_first_set)
    second = property(_ORE.NodePair_second_get, _ORE.NodePair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _ORE.delete_NodePair

# Register NodePair in _ORE:
_ORE.NodePair_swigregister(NodePair)

class NodeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.NodeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.NodeVector___nonzero__(self)

    def __bool__(self):
        return _ORE.NodeVector___bool__(self)

    def __len__(self):
        return _ORE.NodeVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.NodeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.NodeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.NodeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.NodeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.NodeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.NodeVector___setitem__(self, *args)

    def pop(self):
        return _ORE.NodeVector_pop(self)

    def append(self, x):
        return _ORE.NodeVector_append(self, x)

    def empty(self):
        return _ORE.NodeVector_empty(self)

    def size(self):
        return _ORE.NodeVector_size(self)

    def swap(self, v):
        return _ORE.NodeVector_swap(self, v)

    def begin(self):
        return _ORE.NodeVector_begin(self)

    def end(self):
        return _ORE.NodeVector_end(self)

    def rbegin(self):
        return _ORE.NodeVector_rbegin(self)

    def rend(self):
        return _ORE.NodeVector_rend(self)

    def clear(self):
        return _ORE.NodeVector_clear(self)

    def get_allocator(self):
        return _ORE.NodeVector_get_allocator(self)

    def pop_back(self):
        return _ORE.NodeVector_pop_back(self)

    def erase(self, *args):
        return _ORE.NodeVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.NodeVector_swiginit(self, _ORE.new_NodeVector(*args))

    def push_back(self, x):
        return _ORE.NodeVector_push_back(self, x)

    def front(self):
        return _ORE.NodeVector_front(self)

    def back(self):
        return _ORE.NodeVector_back(self)

    def assign(self, n, x):
        return _ORE.NodeVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.NodeVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.NodeVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.NodeVector_reserve(self, n)

    def capacity(self):
        return _ORE.NodeVector_capacity(self)
    __swig_destroy__ = _ORE.delete_NodeVector

# Register NodeVector in _ORE:
_ORE.NodeVector_swigregister(NodeVector)

Following = _ORE.Following
ModifiedFollowing = _ORE.ModifiedFollowing
Preceding = _ORE.Preceding
ModifiedPreceding = _ORE.ModifiedPreceding
Unadjusted = _ORE.Unadjusted
HalfMonthModifiedFollowing = _ORE.HalfMonthModifiedFollowing
Nearest = _ORE.Nearest
JoinHolidays = _ORE.JoinHolidays
JoinBusinessDays = _ORE.JoinBusinessDays
class Calendar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isWeekend(self, w):
        return _ORE.Calendar_isWeekend(self, w)

    def endOfMonth(self, arg2):
        return _ORE.Calendar_endOfMonth(self, arg2)

    def isBusinessDay(self, arg2):
        return _ORE.Calendar_isBusinessDay(self, arg2)

    def isHoliday(self, arg2):
        return _ORE.Calendar_isHoliday(self, arg2)

    def isEndOfMonth(self, arg2):
        return _ORE.Calendar_isEndOfMonth(self, arg2)

    def addHoliday(self, arg2):
        return _ORE.Calendar_addHoliday(self, arg2)

    def removeHoliday(self, arg2):
        return _ORE.Calendar_removeHoliday(self, arg2)

    def adjust(self, *args):
        return _ORE.Calendar_adjust(self, *args)

    def advance(self, *args):
        return _ORE.Calendar_advance(self, *args)

    def businessDaysBetween(self, _from, to, includeFirst=True, includeLast=False):
        return _ORE.Calendar_businessDaysBetween(self, _from, to, includeFirst, includeLast)

    def holidayList(self, _from, to, includeWeekEnds=False):
        return _ORE.Calendar_holidayList(self, _from, to, includeWeekEnds)

    def businessDayList(self, _from, to):
        return _ORE.Calendar_businessDayList(self, _from, to)

    def name(self):
        return _ORE.Calendar_name(self)

    def __str__(self):
        return _ORE.Calendar___str__(self)

    def __eq__(self, other):
        return _ORE.Calendar___eq__(self, other)

    def __ne__(self, other):
        return _ORE.Calendar___ne__(self, other)

    def __hash__(self):
        return hash(self.name())

    __swig_destroy__ = _ORE.delete_Calendar

# Register Calendar in _ORE:
_ORE.Calendar_swigregister(Calendar)

class CalendarVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.CalendarVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.CalendarVector___nonzero__(self)

    def __bool__(self):
        return _ORE.CalendarVector___bool__(self)

    def __len__(self):
        return _ORE.CalendarVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.CalendarVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.CalendarVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.CalendarVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.CalendarVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.CalendarVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.CalendarVector___setitem__(self, *args)

    def pop(self):
        return _ORE.CalendarVector_pop(self)

    def append(self, x):
        return _ORE.CalendarVector_append(self, x)

    def empty(self):
        return _ORE.CalendarVector_empty(self)

    def size(self):
        return _ORE.CalendarVector_size(self)

    def swap(self, v):
        return _ORE.CalendarVector_swap(self, v)

    def begin(self):
        return _ORE.CalendarVector_begin(self)

    def end(self):
        return _ORE.CalendarVector_end(self)

    def rbegin(self):
        return _ORE.CalendarVector_rbegin(self)

    def rend(self):
        return _ORE.CalendarVector_rend(self)

    def clear(self):
        return _ORE.CalendarVector_clear(self)

    def get_allocator(self):
        return _ORE.CalendarVector_get_allocator(self)

    def pop_back(self):
        return _ORE.CalendarVector_pop_back(self)

    def erase(self, *args):
        return _ORE.CalendarVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.CalendarVector_swiginit(self, _ORE.new_CalendarVector(*args))

    def push_back(self, x):
        return _ORE.CalendarVector_push_back(self, x)

    def front(self):
        return _ORE.CalendarVector_front(self)

    def back(self):
        return _ORE.CalendarVector_back(self)

    def assign(self, n, x):
        return _ORE.CalendarVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.CalendarVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.CalendarVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.CalendarVector_reserve(self, n)

    def capacity(self):
        return _ORE.CalendarVector_capacity(self)
    __swig_destroy__ = _ORE.delete_CalendarVector

# Register CalendarVector in _ORE:
_ORE.CalendarVector_swigregister(CalendarVector)

class Argentina(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Merval = _ORE.Argentina_Merval

    def __init__(self, *args):
        _ORE.Argentina_swiginit(self, _ORE.new_Argentina(*args))
    __swig_destroy__ = _ORE.delete_Argentina

# Register Argentina in _ORE:
_ORE.Argentina_swigregister(Argentina)

class Australia(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _ORE.Australia_Settlement
    ASX = _ORE.Australia_ASX

    def __init__(self, *args):
        _ORE.Australia_swiginit(self, _ORE.new_Australia(*args))
    __swig_destroy__ = _ORE.delete_Australia

# Register Australia in _ORE:
_ORE.Australia_swigregister(Australia)

class Austria(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _ORE.Austria_Settlement
    Exchange = _ORE.Austria_Exchange

    def __init__(self, *args):
        _ORE.Austria_swiginit(self, _ORE.new_Austria(*args))
    __swig_destroy__ = _ORE.delete_Austria

# Register Austria in _ORE:
_ORE.Austria_swigregister(Austria)

class Botswana(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Botswana_swiginit(self, _ORE.new_Botswana())
    __swig_destroy__ = _ORE.delete_Botswana

# Register Botswana in _ORE:
_ORE.Botswana_swigregister(Botswana)

class Brazil(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _ORE.Brazil_Settlement
    Exchange = _ORE.Brazil_Exchange

    def __init__(self, *args):
        _ORE.Brazil_swiginit(self, _ORE.new_Brazil(*args))
    __swig_destroy__ = _ORE.delete_Brazil

# Register Brazil in _ORE:
_ORE.Brazil_swigregister(Brazil)

class Canada(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _ORE.Canada_Settlement
    TSX = _ORE.Canada_TSX

    def __init__(self, *args):
        _ORE.Canada_swiginit(self, _ORE.new_Canada(*args))
    __swig_destroy__ = _ORE.delete_Canada

# Register Canada in _ORE:
_ORE.Canada_swigregister(Canada)

class Chile(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SSE = _ORE.Chile_SSE

    def __init__(self, *args):
        _ORE.Chile_swiginit(self, _ORE.new_Chile(*args))
    __swig_destroy__ = _ORE.delete_Chile

# Register Chile in _ORE:
_ORE.Chile_swigregister(Chile)

class China(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SSE = _ORE.China_SSE
    IB = _ORE.China_IB

    def __init__(self, *args):
        _ORE.China_swiginit(self, _ORE.new_China(*args))
    __swig_destroy__ = _ORE.delete_China

# Register China in _ORE:
_ORE.China_swigregister(China)

class CzechRepublic(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PSE = _ORE.CzechRepublic_PSE

    def __init__(self, *args):
        _ORE.CzechRepublic_swiginit(self, _ORE.new_CzechRepublic(*args))
    __swig_destroy__ = _ORE.delete_CzechRepublic

# Register CzechRepublic in _ORE:
_ORE.CzechRepublic_swigregister(CzechRepublic)

class Denmark(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Denmark_swiginit(self, _ORE.new_Denmark())
    __swig_destroy__ = _ORE.delete_Denmark

# Register Denmark in _ORE:
_ORE.Denmark_swigregister(Denmark)

class Finland(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Finland_swiginit(self, _ORE.new_Finland())
    __swig_destroy__ = _ORE.delete_Finland

# Register Finland in _ORE:
_ORE.Finland_swigregister(Finland)

class France(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _ORE.France_Settlement
    Exchange = _ORE.France_Exchange

    def __init__(self, *args):
        _ORE.France_swiginit(self, _ORE.new_France(*args))
    __swig_destroy__ = _ORE.delete_France

# Register France in _ORE:
_ORE.France_swigregister(France)

class Germany(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _ORE.Germany_Settlement
    FrankfurtStockExchange = _ORE.Germany_FrankfurtStockExchange
    Xetra = _ORE.Germany_Xetra
    Eurex = _ORE.Germany_Eurex

    def __init__(self, *args):
        _ORE.Germany_swiginit(self, _ORE.new_Germany(*args))
    __swig_destroy__ = _ORE.delete_Germany

# Register Germany in _ORE:
_ORE.Germany_swigregister(Germany)

class HongKong(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HKEx = _ORE.HongKong_HKEx

    def __init__(self, *args):
        _ORE.HongKong_swiginit(self, _ORE.new_HongKong(*args))
    __swig_destroy__ = _ORE.delete_HongKong

# Register HongKong in _ORE:
_ORE.HongKong_swigregister(HongKong)

class Hungary(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Hungary_swiginit(self, _ORE.new_Hungary())
    __swig_destroy__ = _ORE.delete_Hungary

# Register Hungary in _ORE:
_ORE.Hungary_swigregister(Hungary)

class Iceland(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ICEX = _ORE.Iceland_ICEX

    def __init__(self, *args):
        _ORE.Iceland_swiginit(self, _ORE.new_Iceland(*args))
    __swig_destroy__ = _ORE.delete_Iceland

# Register Iceland in _ORE:
_ORE.Iceland_swigregister(Iceland)

class India(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NSE = _ORE.India_NSE

    def __init__(self, *args):
        _ORE.India_swiginit(self, _ORE.new_India(*args))
    __swig_destroy__ = _ORE.delete_India

# Register India in _ORE:
_ORE.India_swigregister(India)

class Indonesia(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BEJ = _ORE.Indonesia_BEJ
    JSX = _ORE.Indonesia_JSX

    def __init__(self, *args):
        _ORE.Indonesia_swiginit(self, _ORE.new_Indonesia(*args))
    __swig_destroy__ = _ORE.delete_Indonesia

# Register Indonesia in _ORE:
_ORE.Indonesia_swigregister(Indonesia)

class Israel(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _ORE.Israel_Settlement
    TASE = _ORE.Israel_TASE

    def __init__(self, *args):
        _ORE.Israel_swiginit(self, _ORE.new_Israel(*args))
    __swig_destroy__ = _ORE.delete_Israel

# Register Israel in _ORE:
_ORE.Israel_swigregister(Israel)

class Italy(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _ORE.Italy_Settlement
    Exchange = _ORE.Italy_Exchange

    def __init__(self, *args):
        _ORE.Italy_swiginit(self, _ORE.new_Italy(*args))
    __swig_destroy__ = _ORE.delete_Italy

# Register Italy in _ORE:
_ORE.Italy_swigregister(Italy)

class Japan(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Japan_swiginit(self, _ORE.new_Japan())
    __swig_destroy__ = _ORE.delete_Japan

# Register Japan in _ORE:
_ORE.Japan_swigregister(Japan)

class Mexico(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BMV = _ORE.Mexico_BMV

    def __init__(self, *args):
        _ORE.Mexico_swiginit(self, _ORE.new_Mexico(*args))
    __swig_destroy__ = _ORE.delete_Mexico

# Register Mexico in _ORE:
_ORE.Mexico_swigregister(Mexico)

class NewZealand(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.NewZealand_swiginit(self, _ORE.new_NewZealand())
    __swig_destroy__ = _ORE.delete_NewZealand

# Register NewZealand in _ORE:
_ORE.NewZealand_swigregister(NewZealand)

class Norway(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Norway_swiginit(self, _ORE.new_Norway())
    __swig_destroy__ = _ORE.delete_Norway

# Register Norway in _ORE:
_ORE.Norway_swigregister(Norway)

class Poland(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Poland_swiginit(self, _ORE.new_Poland())
    __swig_destroy__ = _ORE.delete_Poland

# Register Poland in _ORE:
_ORE.Poland_swigregister(Poland)

class Romania(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Public = _ORE.Romania_Public
    BVB = _ORE.Romania_BVB

    def __init__(self, *args):
        _ORE.Romania_swiginit(self, _ORE.new_Romania(*args))
    __swig_destroy__ = _ORE.delete_Romania

# Register Romania in _ORE:
_ORE.Romania_swigregister(Romania)

class Russia(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _ORE.Russia_Settlement
    MOEX = _ORE.Russia_MOEX

    def __init__(self, *args):
        _ORE.Russia_swiginit(self, _ORE.new_Russia(*args))
    __swig_destroy__ = _ORE.delete_Russia

# Register Russia in _ORE:
_ORE.Russia_swigregister(Russia)

class SaudiArabia(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Tadawul = _ORE.SaudiArabia_Tadawul

    def __init__(self, *args):
        _ORE.SaudiArabia_swiginit(self, _ORE.new_SaudiArabia(*args))
    __swig_destroy__ = _ORE.delete_SaudiArabia

# Register SaudiArabia in _ORE:
_ORE.SaudiArabia_swigregister(SaudiArabia)

class Singapore(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SGX = _ORE.Singapore_SGX

    def __init__(self, *args):
        _ORE.Singapore_swiginit(self, _ORE.new_Singapore(*args))
    __swig_destroy__ = _ORE.delete_Singapore

# Register Singapore in _ORE:
_ORE.Singapore_swigregister(Singapore)

class Slovakia(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BSSE = _ORE.Slovakia_BSSE

    def __init__(self, *args):
        _ORE.Slovakia_swiginit(self, _ORE.new_Slovakia(*args))
    __swig_destroy__ = _ORE.delete_Slovakia

# Register Slovakia in _ORE:
_ORE.Slovakia_swigregister(Slovakia)

class SouthAfrica(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.SouthAfrica_swiginit(self, _ORE.new_SouthAfrica())
    __swig_destroy__ = _ORE.delete_SouthAfrica

# Register SouthAfrica in _ORE:
_ORE.SouthAfrica_swigregister(SouthAfrica)

class SouthKorea(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _ORE.SouthKorea_Settlement
    KRX = _ORE.SouthKorea_KRX

    def __init__(self, *args):
        _ORE.SouthKorea_swiginit(self, _ORE.new_SouthKorea(*args))
    __swig_destroy__ = _ORE.delete_SouthKorea

# Register SouthKorea in _ORE:
_ORE.SouthKorea_swigregister(SouthKorea)

class Sweden(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Sweden_swiginit(self, _ORE.new_Sweden())
    __swig_destroy__ = _ORE.delete_Sweden

# Register Sweden in _ORE:
_ORE.Sweden_swigregister(Sweden)

class Switzerland(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Switzerland_swiginit(self, _ORE.new_Switzerland())
    __swig_destroy__ = _ORE.delete_Switzerland

# Register Switzerland in _ORE:
_ORE.Switzerland_swigregister(Switzerland)

class Taiwan(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TSEC = _ORE.Taiwan_TSEC

    def __init__(self, *args):
        _ORE.Taiwan_swiginit(self, _ORE.new_Taiwan(*args))
    __swig_destroy__ = _ORE.delete_Taiwan

# Register Taiwan in _ORE:
_ORE.Taiwan_swigregister(Taiwan)

class TARGET(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.TARGET_swiginit(self, _ORE.new_TARGET())
    __swig_destroy__ = _ORE.delete_TARGET

# Register TARGET in _ORE:
_ORE.TARGET_swigregister(TARGET)

class Thailand(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Thailand_swiginit(self, _ORE.new_Thailand())
    __swig_destroy__ = _ORE.delete_Thailand

# Register Thailand in _ORE:
_ORE.Thailand_swigregister(Thailand)

class Turkey(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Turkey_swiginit(self, _ORE.new_Turkey())
    __swig_destroy__ = _ORE.delete_Turkey

# Register Turkey in _ORE:
_ORE.Turkey_swigregister(Turkey)

class Ukraine(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    USE = _ORE.Ukraine_USE

    def __init__(self, *args):
        _ORE.Ukraine_swiginit(self, _ORE.new_Ukraine(*args))
    __swig_destroy__ = _ORE.delete_Ukraine

# Register Ukraine in _ORE:
_ORE.Ukraine_swigregister(Ukraine)

class UnitedKingdom(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _ORE.UnitedKingdom_Settlement
    Exchange = _ORE.UnitedKingdom_Exchange
    Metals = _ORE.UnitedKingdom_Metals

    def __init__(self, *args):
        _ORE.UnitedKingdom_swiginit(self, _ORE.new_UnitedKingdom(*args))
    __swig_destroy__ = _ORE.delete_UnitedKingdom

# Register UnitedKingdom in _ORE:
_ORE.UnitedKingdom_swigregister(UnitedKingdom)

class UnitedStates(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _ORE.UnitedStates_Settlement
    NYSE = _ORE.UnitedStates_NYSE
    GovernmentBond = _ORE.UnitedStates_GovernmentBond
    NERC = _ORE.UnitedStates_NERC
    LiborImpact = _ORE.UnitedStates_LiborImpact
    FederalReserve = _ORE.UnitedStates_FederalReserve
    SOFR = _ORE.UnitedStates_SOFR

    def __init__(self, m):
        _ORE.UnitedStates_swiginit(self, _ORE.new_UnitedStates(m))
    __swig_destroy__ = _ORE.delete_UnitedStates

# Register UnitedStates in _ORE:
_ORE.UnitedStates_swigregister(UnitedStates)

class NullCalendar(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.NullCalendar_swiginit(self, _ORE.new_NullCalendar())
    __swig_destroy__ = _ORE.delete_NullCalendar

# Register NullCalendar in _ORE:
_ORE.NullCalendar_swigregister(NullCalendar)

class WeekendsOnly(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.WeekendsOnly_swiginit(self, _ORE.new_WeekendsOnly())
    __swig_destroy__ = _ORE.delete_WeekendsOnly

# Register WeekendsOnly in _ORE:
_ORE.WeekendsOnly_swigregister(WeekendsOnly)

class JointCalendar(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.JointCalendar_swiginit(self, _ORE.new_JointCalendar(*args))
    __swig_destroy__ = _ORE.delete_JointCalendar

# Register JointCalendar in _ORE:
_ORE.JointCalendar_swigregister(JointCalendar)

class BespokeCalendar(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        _ORE.BespokeCalendar_swiginit(self, _ORE.new_BespokeCalendar(name))

    def addWeekend(self, arg2):
        return _ORE.BespokeCalendar_addWeekend(self, arg2)
    __swig_destroy__ = _ORE.delete_BespokeCalendar

# Register BespokeCalendar in _ORE:
_ORE.BespokeCalendar_swigregister(BespokeCalendar)


def nullInt():
    return _ORE.nullInt()

def nullDouble():
    return _ORE.nullDouble()
class DayCounter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def dayCount(self, d1, d2):
        return _ORE.DayCounter_dayCount(self, d1, d2)

    def yearFraction(self, *args):
        return _ORE.DayCounter_yearFraction(self, *args)

    def name(self):
        return _ORE.DayCounter_name(self)

    def __str__(self):
        return _ORE.DayCounter___str__(self)

    def __eq__(self, other):
        return _ORE.DayCounter___eq__(self, other)

    def __ne__(self, other):
        return _ORE.DayCounter___ne__(self, other)

    def __hash__(self):
        return hash(self.name())

    __swig_destroy__ = _ORE.delete_DayCounter

# Register DayCounter in _ORE:
_ORE.DayCounter_swigregister(DayCounter)

class Actual360(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, includeLastDay=False):
        _ORE.Actual360_swiginit(self, _ORE.new_Actual360(includeLastDay))
    __swig_destroy__ = _ORE.delete_Actual360

# Register Actual360 in _ORE:
_ORE.Actual360_swigregister(Actual360)

class Actual366(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, includeLastDay=False):
        _ORE.Actual366_swiginit(self, _ORE.new_Actual366(includeLastDay))
    __swig_destroy__ = _ORE.delete_Actual366

# Register Actual366 in _ORE:
_ORE.Actual366_swigregister(Actual366)

class Actual36525(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, includeLastDay=False):
        _ORE.Actual36525_swiginit(self, _ORE.new_Actual36525(includeLastDay))
    __swig_destroy__ = _ORE.delete_Actual36525

# Register Actual36525 in _ORE:
_ORE.Actual36525_swigregister(Actual36525)

class Actual364(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Actual364_swiginit(self, _ORE.new_Actual364())
    __swig_destroy__ = _ORE.delete_Actual364

# Register Actual364 in _ORE:
_ORE.Actual364_swigregister(Actual364)

class Actual365Fixed(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Standard = _ORE.Actual365Fixed_Standard
    Canadian = _ORE.Actual365Fixed_Canadian
    NoLeap = _ORE.Actual365Fixed_NoLeap

    def __init__(self, *args):
        _ORE.Actual365Fixed_swiginit(self, _ORE.new_Actual365Fixed(*args))
    __swig_destroy__ = _ORE.delete_Actual365Fixed

# Register Actual365Fixed in _ORE:
_ORE.Actual365Fixed_swigregister(Actual365Fixed)

class Thirty360(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    USA = _ORE.Thirty360_USA
    BondBasis = _ORE.Thirty360_BondBasis
    European = _ORE.Thirty360_European
    EurobondBasis = _ORE.Thirty360_EurobondBasis
    Italian = _ORE.Thirty360_Italian
    German = _ORE.Thirty360_German
    ISMA = _ORE.Thirty360_ISMA
    ISDA = _ORE.Thirty360_ISDA
    NASD = _ORE.Thirty360_NASD

    def __init__(self, *args):
        _ORE.Thirty360_swiginit(self, _ORE.new_Thirty360(*args))
    __swig_destroy__ = _ORE.delete_Thirty360

# Register Thirty360 in _ORE:
_ORE.Thirty360_swigregister(Thirty360)

class Thirty365(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Thirty365_swiginit(self, _ORE.new_Thirty365())
    __swig_destroy__ = _ORE.delete_Thirty365

# Register Thirty365 in _ORE:
_ORE.Thirty365_swigregister(Thirty365)

class ActualActual(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ISMA = _ORE.ActualActual_ISMA
    Bond = _ORE.ActualActual_Bond
    ISDA = _ORE.ActualActual_ISDA
    Historical = _ORE.ActualActual_Historical
    Actual365 = _ORE.ActualActual_Actual365
    AFB = _ORE.ActualActual_AFB
    Euro = _ORE.ActualActual_Euro

    def __init__(self, *args):
        _ORE.ActualActual_swiginit(self, _ORE.new_ActualActual(*args))
    __swig_destroy__ = _ORE.delete_ActualActual

# Register ActualActual in _ORE:
_ORE.ActualActual_swigregister(ActualActual)

class OneDayCounter(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.OneDayCounter_swiginit(self, _ORE.new_OneDayCounter())
    __swig_destroy__ = _ORE.delete_OneDayCounter

# Register OneDayCounter in _ORE:
_ORE.OneDayCounter_swigregister(OneDayCounter)

class SimpleDayCounter(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.SimpleDayCounter_swiginit(self, _ORE.new_SimpleDayCounter())
    __swig_destroy__ = _ORE.delete_SimpleDayCounter

# Register SimpleDayCounter in _ORE:
_ORE.SimpleDayCounter_swigregister(SimpleDayCounter)

class Business252(DayCounter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Business252_swiginit(self, _ORE.new_Business252(*args))
    __swig_destroy__ = _ORE.delete_Business252

# Register Business252 in _ORE:
_ORE.Business252_swigregister(Business252)

class Rounding(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Rounding_swiginit(self, _ORE.new_Rounding())

    def __call__(self, value):
        return _ORE.Rounding___call__(self, value)
    __swig_destroy__ = _ORE.delete_Rounding

# Register Rounding in _ORE:
_ORE.Rounding_swigregister(Rounding)

class UpRounding(Rounding):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, precision, digit=5):
        _ORE.UpRounding_swiginit(self, _ORE.new_UpRounding(precision, digit))
    __swig_destroy__ = _ORE.delete_UpRounding

# Register UpRounding in _ORE:
_ORE.UpRounding_swigregister(UpRounding)

class DownRounding(Rounding):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, precision, digit=5):
        _ORE.DownRounding_swiginit(self, _ORE.new_DownRounding(precision, digit))
    __swig_destroy__ = _ORE.delete_DownRounding

# Register DownRounding in _ORE:
_ORE.DownRounding_swigregister(DownRounding)

class ClosestRounding(Rounding):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, precision, digit=5):
        _ORE.ClosestRounding_swiginit(self, _ORE.new_ClosestRounding(precision, digit))
    __swig_destroy__ = _ORE.delete_ClosestRounding

# Register ClosestRounding in _ORE:
_ORE.ClosestRounding_swigregister(ClosestRounding)

class CeilingTruncation(Rounding):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, precision, digit=5):
        _ORE.CeilingTruncation_swiginit(self, _ORE.new_CeilingTruncation(precision, digit))
    __swig_destroy__ = _ORE.delete_CeilingTruncation

# Register CeilingTruncation in _ORE:
_ORE.CeilingTruncation_swigregister(CeilingTruncation)

class FloorTruncation(Rounding):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, precision, digit=5):
        _ORE.FloorTruncation_swiginit(self, _ORE.new_FloorTruncation(precision, digit))
    __swig_destroy__ = _ORE.delete_FloorTruncation

# Register FloorTruncation in _ORE:
_ORE.FloorTruncation_swigregister(FloorTruncation)

class Currency(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Currency_swiginit(self, _ORE.new_Currency(*args))

    def name(self):
        return _ORE.Currency_name(self)

    def code(self):
        return _ORE.Currency_code(self)

    def numericCode(self):
        return _ORE.Currency_numericCode(self)

    def symbol(self):
        return _ORE.Currency_symbol(self)

    def fractionSymbol(self):
        return _ORE.Currency_fractionSymbol(self)

    def fractionsPerUnit(self):
        return _ORE.Currency_fractionsPerUnit(self)

    def rounding(self):
        return _ORE.Currency_rounding(self)

    def format(self):
        return _ORE.Currency_format(self)

    def empty(self):
        return _ORE.Currency_empty(self)

    def triangulationCurrency(self):
        return _ORE.Currency_triangulationCurrency(self)

    def __str__(self):
        return _ORE.Currency___str__(self)

    def __eq__(self, other):
        return _ORE.Currency___eq__(self, other)

    def __ne__(self, other):
        return _ORE.Currency___ne__(self, other)

    def __mul__(self, x):
        return _ORE.Currency___mul__(self, x)

    def __rmul__(self, x):
        return _ORE.Currency___rmul__(self, x)

    def __nonzero__(self):
        return _ORE.Currency___nonzero__(self)

    def __bool__(self):
        return _ORE.Currency___bool__(self)

    def __hash__(self):
        return hash(self.name())

    __swig_destroy__ = _ORE.delete_Currency

# Register Currency in _ORE:
_ORE.Currency_swigregister(Currency)

class AEDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.AEDCurrency_swiginit(self, _ORE.new_AEDCurrency())
    __swig_destroy__ = _ORE.delete_AEDCurrency

# Register AEDCurrency in _ORE:
_ORE.AEDCurrency_swigregister(AEDCurrency)

class AOACurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.AOACurrency_swiginit(self, _ORE.new_AOACurrency())
    __swig_destroy__ = _ORE.delete_AOACurrency

# Register AOACurrency in _ORE:
_ORE.AOACurrency_swigregister(AOACurrency)

class ARSCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.ARSCurrency_swiginit(self, _ORE.new_ARSCurrency())
    __swig_destroy__ = _ORE.delete_ARSCurrency

# Register ARSCurrency in _ORE:
_ORE.ARSCurrency_swigregister(ARSCurrency)

class ATSCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.ATSCurrency_swiginit(self, _ORE.new_ATSCurrency())
    __swig_destroy__ = _ORE.delete_ATSCurrency

# Register ATSCurrency in _ORE:
_ORE.ATSCurrency_swigregister(ATSCurrency)

class AUDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.AUDCurrency_swiginit(self, _ORE.new_AUDCurrency())
    __swig_destroy__ = _ORE.delete_AUDCurrency

# Register AUDCurrency in _ORE:
_ORE.AUDCurrency_swigregister(AUDCurrency)

class BDTCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.BDTCurrency_swiginit(self, _ORE.new_BDTCurrency())
    __swig_destroy__ = _ORE.delete_BDTCurrency

# Register BDTCurrency in _ORE:
_ORE.BDTCurrency_swigregister(BDTCurrency)

class BEFCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.BEFCurrency_swiginit(self, _ORE.new_BEFCurrency())
    __swig_destroy__ = _ORE.delete_BEFCurrency

# Register BEFCurrency in _ORE:
_ORE.BEFCurrency_swigregister(BEFCurrency)

class BHDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.BHDCurrency_swiginit(self, _ORE.new_BHDCurrency())
    __swig_destroy__ = _ORE.delete_BHDCurrency

# Register BHDCurrency in _ORE:
_ORE.BHDCurrency_swigregister(BHDCurrency)

class BGLCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.BGLCurrency_swiginit(self, _ORE.new_BGLCurrency())
    __swig_destroy__ = _ORE.delete_BGLCurrency

# Register BGLCurrency in _ORE:
_ORE.BGLCurrency_swigregister(BGLCurrency)

class BGNCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.BGNCurrency_swiginit(self, _ORE.new_BGNCurrency())
    __swig_destroy__ = _ORE.delete_BGNCurrency

# Register BGNCurrency in _ORE:
_ORE.BGNCurrency_swigregister(BGNCurrency)

class BRLCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.BRLCurrency_swiginit(self, _ORE.new_BRLCurrency())
    __swig_destroy__ = _ORE.delete_BRLCurrency

# Register BRLCurrency in _ORE:
_ORE.BRLCurrency_swigregister(BRLCurrency)

class BWPCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.BWPCurrency_swiginit(self, _ORE.new_BWPCurrency())
    __swig_destroy__ = _ORE.delete_BWPCurrency

# Register BWPCurrency in _ORE:
_ORE.BWPCurrency_swigregister(BWPCurrency)

class BYRCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.BYRCurrency_swiginit(self, _ORE.new_BYRCurrency())
    __swig_destroy__ = _ORE.delete_BYRCurrency

# Register BYRCurrency in _ORE:
_ORE.BYRCurrency_swigregister(BYRCurrency)

class CADCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.CADCurrency_swiginit(self, _ORE.new_CADCurrency())
    __swig_destroy__ = _ORE.delete_CADCurrency

# Register CADCurrency in _ORE:
_ORE.CADCurrency_swigregister(CADCurrency)

class CHFCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.CHFCurrency_swiginit(self, _ORE.new_CHFCurrency())
    __swig_destroy__ = _ORE.delete_CHFCurrency

# Register CHFCurrency in _ORE:
_ORE.CHFCurrency_swigregister(CHFCurrency)

class CLFCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.CLFCurrency_swiginit(self, _ORE.new_CLFCurrency())
    __swig_destroy__ = _ORE.delete_CLFCurrency

# Register CLFCurrency in _ORE:
_ORE.CLFCurrency_swigregister(CLFCurrency)

class CLPCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.CLPCurrency_swiginit(self, _ORE.new_CLPCurrency())
    __swig_destroy__ = _ORE.delete_CLPCurrency

# Register CLPCurrency in _ORE:
_ORE.CLPCurrency_swigregister(CLPCurrency)

class CNHCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.CNHCurrency_swiginit(self, _ORE.new_CNHCurrency())
    __swig_destroy__ = _ORE.delete_CNHCurrency

# Register CNHCurrency in _ORE:
_ORE.CNHCurrency_swigregister(CNHCurrency)

class CNYCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.CNYCurrency_swiginit(self, _ORE.new_CNYCurrency())
    __swig_destroy__ = _ORE.delete_CNYCurrency

# Register CNYCurrency in _ORE:
_ORE.CNYCurrency_swigregister(CNYCurrency)

class COPCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.COPCurrency_swiginit(self, _ORE.new_COPCurrency())
    __swig_destroy__ = _ORE.delete_COPCurrency

# Register COPCurrency in _ORE:
_ORE.COPCurrency_swigregister(COPCurrency)

class COUCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.COUCurrency_swiginit(self, _ORE.new_COUCurrency())
    __swig_destroy__ = _ORE.delete_COUCurrency

# Register COUCurrency in _ORE:
_ORE.COUCurrency_swigregister(COUCurrency)

class CYPCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.CYPCurrency_swiginit(self, _ORE.new_CYPCurrency())
    __swig_destroy__ = _ORE.delete_CYPCurrency

# Register CYPCurrency in _ORE:
_ORE.CYPCurrency_swigregister(CYPCurrency)

class CZKCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.CZKCurrency_swiginit(self, _ORE.new_CZKCurrency())
    __swig_destroy__ = _ORE.delete_CZKCurrency

# Register CZKCurrency in _ORE:
_ORE.CZKCurrency_swigregister(CZKCurrency)

class DEMCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.DEMCurrency_swiginit(self, _ORE.new_DEMCurrency())
    __swig_destroy__ = _ORE.delete_DEMCurrency

# Register DEMCurrency in _ORE:
_ORE.DEMCurrency_swigregister(DEMCurrency)

class DKKCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.DKKCurrency_swiginit(self, _ORE.new_DKKCurrency())
    __swig_destroy__ = _ORE.delete_DKKCurrency

# Register DKKCurrency in _ORE:
_ORE.DKKCurrency_swigregister(DKKCurrency)

class EEKCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.EEKCurrency_swiginit(self, _ORE.new_EEKCurrency())
    __swig_destroy__ = _ORE.delete_EEKCurrency

# Register EEKCurrency in _ORE:
_ORE.EEKCurrency_swigregister(EEKCurrency)

class EGPCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.EGPCurrency_swiginit(self, _ORE.new_EGPCurrency())
    __swig_destroy__ = _ORE.delete_EGPCurrency

# Register EGPCurrency in _ORE:
_ORE.EGPCurrency_swigregister(EGPCurrency)

class ESPCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.ESPCurrency_swiginit(self, _ORE.new_ESPCurrency())
    __swig_destroy__ = _ORE.delete_ESPCurrency

# Register ESPCurrency in _ORE:
_ORE.ESPCurrency_swigregister(ESPCurrency)

class ETBCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.ETBCurrency_swiginit(self, _ORE.new_ETBCurrency())
    __swig_destroy__ = _ORE.delete_ETBCurrency

# Register ETBCurrency in _ORE:
_ORE.ETBCurrency_swigregister(ETBCurrency)

class EURCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.EURCurrency_swiginit(self, _ORE.new_EURCurrency())
    __swig_destroy__ = _ORE.delete_EURCurrency

# Register EURCurrency in _ORE:
_ORE.EURCurrency_swigregister(EURCurrency)

class FIMCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.FIMCurrency_swiginit(self, _ORE.new_FIMCurrency())
    __swig_destroy__ = _ORE.delete_FIMCurrency

# Register FIMCurrency in _ORE:
_ORE.FIMCurrency_swigregister(FIMCurrency)

class FRFCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.FRFCurrency_swiginit(self, _ORE.new_FRFCurrency())
    __swig_destroy__ = _ORE.delete_FRFCurrency

# Register FRFCurrency in _ORE:
_ORE.FRFCurrency_swigregister(FRFCurrency)

class GELCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.GELCurrency_swiginit(self, _ORE.new_GELCurrency())
    __swig_destroy__ = _ORE.delete_GELCurrency

# Register GELCurrency in _ORE:
_ORE.GELCurrency_swigregister(GELCurrency)

class GBPCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.GBPCurrency_swiginit(self, _ORE.new_GBPCurrency())
    __swig_destroy__ = _ORE.delete_GBPCurrency

# Register GBPCurrency in _ORE:
_ORE.GBPCurrency_swigregister(GBPCurrency)

class GHSCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.GHSCurrency_swiginit(self, _ORE.new_GHSCurrency())
    __swig_destroy__ = _ORE.delete_GHSCurrency

# Register GHSCurrency in _ORE:
_ORE.GHSCurrency_swigregister(GHSCurrency)

class GRDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.GRDCurrency_swiginit(self, _ORE.new_GRDCurrency())
    __swig_destroy__ = _ORE.delete_GRDCurrency

# Register GRDCurrency in _ORE:
_ORE.GRDCurrency_swigregister(GRDCurrency)

class HKDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.HKDCurrency_swiginit(self, _ORE.new_HKDCurrency())
    __swig_destroy__ = _ORE.delete_HKDCurrency

# Register HKDCurrency in _ORE:
_ORE.HKDCurrency_swigregister(HKDCurrency)

class HRKCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.HRKCurrency_swiginit(self, _ORE.new_HRKCurrency())
    __swig_destroy__ = _ORE.delete_HRKCurrency

# Register HRKCurrency in _ORE:
_ORE.HRKCurrency_swigregister(HRKCurrency)

class HUFCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.HUFCurrency_swiginit(self, _ORE.new_HUFCurrency())
    __swig_destroy__ = _ORE.delete_HUFCurrency

# Register HUFCurrency in _ORE:
_ORE.HUFCurrency_swigregister(HUFCurrency)

class IDRCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.IDRCurrency_swiginit(self, _ORE.new_IDRCurrency())
    __swig_destroy__ = _ORE.delete_IDRCurrency

# Register IDRCurrency in _ORE:
_ORE.IDRCurrency_swigregister(IDRCurrency)

class IEPCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.IEPCurrency_swiginit(self, _ORE.new_IEPCurrency())
    __swig_destroy__ = _ORE.delete_IEPCurrency

# Register IEPCurrency in _ORE:
_ORE.IEPCurrency_swigregister(IEPCurrency)

class ILSCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.ILSCurrency_swiginit(self, _ORE.new_ILSCurrency())
    __swig_destroy__ = _ORE.delete_ILSCurrency

# Register ILSCurrency in _ORE:
_ORE.ILSCurrency_swigregister(ILSCurrency)

class INRCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.INRCurrency_swiginit(self, _ORE.new_INRCurrency())
    __swig_destroy__ = _ORE.delete_INRCurrency

# Register INRCurrency in _ORE:
_ORE.INRCurrency_swigregister(INRCurrency)

class IQDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.IQDCurrency_swiginit(self, _ORE.new_IQDCurrency())
    __swig_destroy__ = _ORE.delete_IQDCurrency

# Register IQDCurrency in _ORE:
_ORE.IQDCurrency_swigregister(IQDCurrency)

class IRRCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.IRRCurrency_swiginit(self, _ORE.new_IRRCurrency())
    __swig_destroy__ = _ORE.delete_IRRCurrency

# Register IRRCurrency in _ORE:
_ORE.IRRCurrency_swigregister(IRRCurrency)

class ISKCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.ISKCurrency_swiginit(self, _ORE.new_ISKCurrency())
    __swig_destroy__ = _ORE.delete_ISKCurrency

# Register ISKCurrency in _ORE:
_ORE.ISKCurrency_swigregister(ISKCurrency)

class ITLCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.ITLCurrency_swiginit(self, _ORE.new_ITLCurrency())
    __swig_destroy__ = _ORE.delete_ITLCurrency

# Register ITLCurrency in _ORE:
_ORE.ITLCurrency_swigregister(ITLCurrency)

class JODCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.JODCurrency_swiginit(self, _ORE.new_JODCurrency())
    __swig_destroy__ = _ORE.delete_JODCurrency

# Register JODCurrency in _ORE:
_ORE.JODCurrency_swigregister(JODCurrency)

class JPYCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.JPYCurrency_swiginit(self, _ORE.new_JPYCurrency())
    __swig_destroy__ = _ORE.delete_JPYCurrency

# Register JPYCurrency in _ORE:
_ORE.JPYCurrency_swigregister(JPYCurrency)

class KESCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.KESCurrency_swiginit(self, _ORE.new_KESCurrency())
    __swig_destroy__ = _ORE.delete_KESCurrency

# Register KESCurrency in _ORE:
_ORE.KESCurrency_swigregister(KESCurrency)

class KRWCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.KRWCurrency_swiginit(self, _ORE.new_KRWCurrency())
    __swig_destroy__ = _ORE.delete_KRWCurrency

# Register KRWCurrency in _ORE:
_ORE.KRWCurrency_swigregister(KRWCurrency)

class KWDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.KWDCurrency_swiginit(self, _ORE.new_KWDCurrency())
    __swig_destroy__ = _ORE.delete_KWDCurrency

# Register KWDCurrency in _ORE:
_ORE.KWDCurrency_swigregister(KWDCurrency)

class KZTCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.KZTCurrency_swiginit(self, _ORE.new_KZTCurrency())
    __swig_destroy__ = _ORE.delete_KZTCurrency

# Register KZTCurrency in _ORE:
_ORE.KZTCurrency_swigregister(KZTCurrency)

class LKRCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.LKRCurrency_swiginit(self, _ORE.new_LKRCurrency())
    __swig_destroy__ = _ORE.delete_LKRCurrency

# Register LKRCurrency in _ORE:
_ORE.LKRCurrency_swigregister(LKRCurrency)

class LTLCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.LTLCurrency_swiginit(self, _ORE.new_LTLCurrency())
    __swig_destroy__ = _ORE.delete_LTLCurrency

# Register LTLCurrency in _ORE:
_ORE.LTLCurrency_swigregister(LTLCurrency)

class LUFCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.LUFCurrency_swiginit(self, _ORE.new_LUFCurrency())
    __swig_destroy__ = _ORE.delete_LUFCurrency

# Register LUFCurrency in _ORE:
_ORE.LUFCurrency_swigregister(LUFCurrency)

class LVLCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.LVLCurrency_swiginit(self, _ORE.new_LVLCurrency())
    __swig_destroy__ = _ORE.delete_LVLCurrency

# Register LVLCurrency in _ORE:
_ORE.LVLCurrency_swigregister(LVLCurrency)

class MADCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.MADCurrency_swiginit(self, _ORE.new_MADCurrency())
    __swig_destroy__ = _ORE.delete_MADCurrency

# Register MADCurrency in _ORE:
_ORE.MADCurrency_swigregister(MADCurrency)

class MTLCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.MTLCurrency_swiginit(self, _ORE.new_MTLCurrency())
    __swig_destroy__ = _ORE.delete_MTLCurrency

# Register MTLCurrency in _ORE:
_ORE.MTLCurrency_swigregister(MTLCurrency)

class MURCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.MURCurrency_swiginit(self, _ORE.new_MURCurrency())
    __swig_destroy__ = _ORE.delete_MURCurrency

# Register MURCurrency in _ORE:
_ORE.MURCurrency_swigregister(MURCurrency)

class MXNCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.MXNCurrency_swiginit(self, _ORE.new_MXNCurrency())
    __swig_destroy__ = _ORE.delete_MXNCurrency

# Register MXNCurrency in _ORE:
_ORE.MXNCurrency_swigregister(MXNCurrency)

class MXVCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.MXVCurrency_swiginit(self, _ORE.new_MXVCurrency())
    __swig_destroy__ = _ORE.delete_MXVCurrency

# Register MXVCurrency in _ORE:
_ORE.MXVCurrency_swigregister(MXVCurrency)

class MYRCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.MYRCurrency_swiginit(self, _ORE.new_MYRCurrency())
    __swig_destroy__ = _ORE.delete_MYRCurrency

# Register MYRCurrency in _ORE:
_ORE.MYRCurrency_swigregister(MYRCurrency)

class NGNCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.NGNCurrency_swiginit(self, _ORE.new_NGNCurrency())
    __swig_destroy__ = _ORE.delete_NGNCurrency

# Register NGNCurrency in _ORE:
_ORE.NGNCurrency_swigregister(NGNCurrency)

class NLGCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.NLGCurrency_swiginit(self, _ORE.new_NLGCurrency())
    __swig_destroy__ = _ORE.delete_NLGCurrency

# Register NLGCurrency in _ORE:
_ORE.NLGCurrency_swigregister(NLGCurrency)

class NOKCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.NOKCurrency_swiginit(self, _ORE.new_NOKCurrency())
    __swig_destroy__ = _ORE.delete_NOKCurrency

# Register NOKCurrency in _ORE:
_ORE.NOKCurrency_swigregister(NOKCurrency)

class NPRCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.NPRCurrency_swiginit(self, _ORE.new_NPRCurrency())
    __swig_destroy__ = _ORE.delete_NPRCurrency

# Register NPRCurrency in _ORE:
_ORE.NPRCurrency_swigregister(NPRCurrency)

class NZDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.NZDCurrency_swiginit(self, _ORE.new_NZDCurrency())
    __swig_destroy__ = _ORE.delete_NZDCurrency

# Register NZDCurrency in _ORE:
_ORE.NZDCurrency_swigregister(NZDCurrency)

class OMRCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.OMRCurrency_swiginit(self, _ORE.new_OMRCurrency())
    __swig_destroy__ = _ORE.delete_OMRCurrency

# Register OMRCurrency in _ORE:
_ORE.OMRCurrency_swigregister(OMRCurrency)

class PEHCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.PEHCurrency_swiginit(self, _ORE.new_PEHCurrency())
    __swig_destroy__ = _ORE.delete_PEHCurrency

# Register PEHCurrency in _ORE:
_ORE.PEHCurrency_swigregister(PEHCurrency)

class PEICurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.PEICurrency_swiginit(self, _ORE.new_PEICurrency())
    __swig_destroy__ = _ORE.delete_PEICurrency

# Register PEICurrency in _ORE:
_ORE.PEICurrency_swigregister(PEICurrency)

class PENCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.PENCurrency_swiginit(self, _ORE.new_PENCurrency())
    __swig_destroy__ = _ORE.delete_PENCurrency

# Register PENCurrency in _ORE:
_ORE.PENCurrency_swigregister(PENCurrency)

class PHPCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.PHPCurrency_swiginit(self, _ORE.new_PHPCurrency())
    __swig_destroy__ = _ORE.delete_PHPCurrency

# Register PHPCurrency in _ORE:
_ORE.PHPCurrency_swigregister(PHPCurrency)

class PKRCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.PKRCurrency_swiginit(self, _ORE.new_PKRCurrency())
    __swig_destroy__ = _ORE.delete_PKRCurrency

# Register PKRCurrency in _ORE:
_ORE.PKRCurrency_swigregister(PKRCurrency)

class PLNCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.PLNCurrency_swiginit(self, _ORE.new_PLNCurrency())
    __swig_destroy__ = _ORE.delete_PLNCurrency

# Register PLNCurrency in _ORE:
_ORE.PLNCurrency_swigregister(PLNCurrency)

class PTECurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.PTECurrency_swiginit(self, _ORE.new_PTECurrency())
    __swig_destroy__ = _ORE.delete_PTECurrency

# Register PTECurrency in _ORE:
_ORE.PTECurrency_swigregister(PTECurrency)

class QARCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.QARCurrency_swiginit(self, _ORE.new_QARCurrency())
    __swig_destroy__ = _ORE.delete_QARCurrency

# Register QARCurrency in _ORE:
_ORE.QARCurrency_swigregister(QARCurrency)

class ROLCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.ROLCurrency_swiginit(self, _ORE.new_ROLCurrency())
    __swig_destroy__ = _ORE.delete_ROLCurrency

# Register ROLCurrency in _ORE:
_ORE.ROLCurrency_swigregister(ROLCurrency)

class RONCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.RONCurrency_swiginit(self, _ORE.new_RONCurrency())
    __swig_destroy__ = _ORE.delete_RONCurrency

# Register RONCurrency in _ORE:
_ORE.RONCurrency_swigregister(RONCurrency)

class RSDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.RSDCurrency_swiginit(self, _ORE.new_RSDCurrency())
    __swig_destroy__ = _ORE.delete_RSDCurrency

# Register RSDCurrency in _ORE:
_ORE.RSDCurrency_swigregister(RSDCurrency)

class RUBCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.RUBCurrency_swiginit(self, _ORE.new_RUBCurrency())
    __swig_destroy__ = _ORE.delete_RUBCurrency

# Register RUBCurrency in _ORE:
_ORE.RUBCurrency_swigregister(RUBCurrency)

class SARCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.SARCurrency_swiginit(self, _ORE.new_SARCurrency())
    __swig_destroy__ = _ORE.delete_SARCurrency

# Register SARCurrency in _ORE:
_ORE.SARCurrency_swigregister(SARCurrency)

class SEKCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.SEKCurrency_swiginit(self, _ORE.new_SEKCurrency())
    __swig_destroy__ = _ORE.delete_SEKCurrency

# Register SEKCurrency in _ORE:
_ORE.SEKCurrency_swigregister(SEKCurrency)

class SGDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.SGDCurrency_swiginit(self, _ORE.new_SGDCurrency())
    __swig_destroy__ = _ORE.delete_SGDCurrency

# Register SGDCurrency in _ORE:
_ORE.SGDCurrency_swigregister(SGDCurrency)

class SITCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.SITCurrency_swiginit(self, _ORE.new_SITCurrency())
    __swig_destroy__ = _ORE.delete_SITCurrency

# Register SITCurrency in _ORE:
_ORE.SITCurrency_swigregister(SITCurrency)

class SKKCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.SKKCurrency_swiginit(self, _ORE.new_SKKCurrency())
    __swig_destroy__ = _ORE.delete_SKKCurrency

# Register SKKCurrency in _ORE:
_ORE.SKKCurrency_swigregister(SKKCurrency)

class THBCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.THBCurrency_swiginit(self, _ORE.new_THBCurrency())
    __swig_destroy__ = _ORE.delete_THBCurrency

# Register THBCurrency in _ORE:
_ORE.THBCurrency_swigregister(THBCurrency)

class TNDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.TNDCurrency_swiginit(self, _ORE.new_TNDCurrency())
    __swig_destroy__ = _ORE.delete_TNDCurrency

# Register TNDCurrency in _ORE:
_ORE.TNDCurrency_swigregister(TNDCurrency)

class TRLCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.TRLCurrency_swiginit(self, _ORE.new_TRLCurrency())
    __swig_destroy__ = _ORE.delete_TRLCurrency

# Register TRLCurrency in _ORE:
_ORE.TRLCurrency_swigregister(TRLCurrency)

class TRYCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.TRYCurrency_swiginit(self, _ORE.new_TRYCurrency())
    __swig_destroy__ = _ORE.delete_TRYCurrency

# Register TRYCurrency in _ORE:
_ORE.TRYCurrency_swigregister(TRYCurrency)

class TTDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.TTDCurrency_swiginit(self, _ORE.new_TTDCurrency())
    __swig_destroy__ = _ORE.delete_TTDCurrency

# Register TTDCurrency in _ORE:
_ORE.TTDCurrency_swigregister(TTDCurrency)

class TWDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.TWDCurrency_swiginit(self, _ORE.new_TWDCurrency())
    __swig_destroy__ = _ORE.delete_TWDCurrency

# Register TWDCurrency in _ORE:
_ORE.TWDCurrency_swigregister(TWDCurrency)

class UAHCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.UAHCurrency_swiginit(self, _ORE.new_UAHCurrency())
    __swig_destroy__ = _ORE.delete_UAHCurrency

# Register UAHCurrency in _ORE:
_ORE.UAHCurrency_swigregister(UAHCurrency)

class UGXCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.UGXCurrency_swiginit(self, _ORE.new_UGXCurrency())
    __swig_destroy__ = _ORE.delete_UGXCurrency

# Register UGXCurrency in _ORE:
_ORE.UGXCurrency_swigregister(UGXCurrency)

class USDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.USDCurrency_swiginit(self, _ORE.new_USDCurrency())
    __swig_destroy__ = _ORE.delete_USDCurrency

# Register USDCurrency in _ORE:
_ORE.USDCurrency_swigregister(USDCurrency)

class UYUCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.UYUCurrency_swiginit(self, _ORE.new_UYUCurrency())
    __swig_destroy__ = _ORE.delete_UYUCurrency

# Register UYUCurrency in _ORE:
_ORE.UYUCurrency_swigregister(UYUCurrency)

class VEBCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.VEBCurrency_swiginit(self, _ORE.new_VEBCurrency())
    __swig_destroy__ = _ORE.delete_VEBCurrency

# Register VEBCurrency in _ORE:
_ORE.VEBCurrency_swigregister(VEBCurrency)

class VNDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.VNDCurrency_swiginit(self, _ORE.new_VNDCurrency())
    __swig_destroy__ = _ORE.delete_VNDCurrency

# Register VNDCurrency in _ORE:
_ORE.VNDCurrency_swigregister(VNDCurrency)

class XOFCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.XOFCurrency_swiginit(self, _ORE.new_XOFCurrency())
    __swig_destroy__ = _ORE.delete_XOFCurrency

# Register XOFCurrency in _ORE:
_ORE.XOFCurrency_swigregister(XOFCurrency)

class ZARCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.ZARCurrency_swiginit(self, _ORE.new_ZARCurrency())
    __swig_destroy__ = _ORE.delete_ZARCurrency

# Register ZARCurrency in _ORE:
_ORE.ZARCurrency_swigregister(ZARCurrency)

class ZMWCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.ZMWCurrency_swiginit(self, _ORE.new_ZMWCurrency())
    __swig_destroy__ = _ORE.delete_ZMWCurrency

# Register ZMWCurrency in _ORE:
_ORE.ZMWCurrency_swigregister(ZMWCurrency)

class BCHCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.BCHCurrency_swiginit(self, _ORE.new_BCHCurrency())
    __swig_destroy__ = _ORE.delete_BCHCurrency

# Register BCHCurrency in _ORE:
_ORE.BCHCurrency_swigregister(BCHCurrency)

class BTCCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.BTCCurrency_swiginit(self, _ORE.new_BTCCurrency())
    __swig_destroy__ = _ORE.delete_BTCCurrency

# Register BTCCurrency in _ORE:
_ORE.BTCCurrency_swigregister(BTCCurrency)

class DASHCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.DASHCurrency_swiginit(self, _ORE.new_DASHCurrency())
    __swig_destroy__ = _ORE.delete_DASHCurrency

# Register DASHCurrency in _ORE:
_ORE.DASHCurrency_swigregister(DASHCurrency)

class ETCCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.ETCCurrency_swiginit(self, _ORE.new_ETCCurrency())
    __swig_destroy__ = _ORE.delete_ETCCurrency

# Register ETCCurrency in _ORE:
_ORE.ETCCurrency_swigregister(ETCCurrency)

class ETHCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.ETHCurrency_swiginit(self, _ORE.new_ETHCurrency())
    __swig_destroy__ = _ORE.delete_ETHCurrency

# Register ETHCurrency in _ORE:
_ORE.ETHCurrency_swigregister(ETHCurrency)

class LTCCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.LTCCurrency_swiginit(self, _ORE.new_LTCCurrency())
    __swig_destroy__ = _ORE.delete_LTCCurrency

# Register LTCCurrency in _ORE:
_ORE.LTCCurrency_swigregister(LTCCurrency)

class XRPCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.XRPCurrency_swiginit(self, _ORE.new_XRPCurrency())
    __swig_destroy__ = _ORE.delete_XRPCurrency

# Register XRPCurrency in _ORE:
_ORE.XRPCurrency_swigregister(XRPCurrency)

class ZECCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.ZECCurrency_swiginit(self, _ORE.new_ZECCurrency())
    __swig_destroy__ = _ORE.delete_ZECCurrency

# Register ZECCurrency in _ORE:
_ORE.ZECCurrency_swigregister(ZECCurrency)

Simple = _ORE.Simple
Compounded = _ORE.Compounded
Continuous = _ORE.Continuous
SimpleThenCompounded = _ORE.SimpleThenCompounded
CompoundedThenSimple = _ORE.CompoundedThenSimple
class InterestRate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.InterestRate_swiginit(self, _ORE.new_InterestRate(*args))

    def rate(self):
        return _ORE.InterestRate_rate(self)

    def dayCounter(self):
        return _ORE.InterestRate_dayCounter(self)

    def compounding(self):
        return _ORE.InterestRate_compounding(self)

    def frequency(self):
        return _ORE.InterestRate_frequency(self)

    def discountFactor(self, *args):
        return _ORE.InterestRate_discountFactor(self, *args)

    def compoundFactor(self, *args):
        return _ORE.InterestRate_compoundFactor(self, *args)

    @staticmethod
    def impliedRate(*args):
        return _ORE.InterestRate_impliedRate(*args)

    def equivalentRate(self, *args):
        return _ORE.InterestRate_equivalentRate(self, *args)

    def __str__(self):
        return _ORE.InterestRate___str__(self)
    __swig_destroy__ = _ORE.delete_InterestRate

# Register InterestRate in _ORE:
_ORE.InterestRate_swigregister(InterestRate)

def InterestRate_impliedRate(*args):
    return _ORE.InterestRate_impliedRate(*args)

class InterestRateVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.InterestRateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.InterestRateVector___nonzero__(self)

    def __bool__(self):
        return _ORE.InterestRateVector___bool__(self)

    def __len__(self):
        return _ORE.InterestRateVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.InterestRateVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.InterestRateVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.InterestRateVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.InterestRateVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.InterestRateVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.InterestRateVector___setitem__(self, *args)

    def pop(self):
        return _ORE.InterestRateVector_pop(self)

    def append(self, x):
        return _ORE.InterestRateVector_append(self, x)

    def empty(self):
        return _ORE.InterestRateVector_empty(self)

    def size(self):
        return _ORE.InterestRateVector_size(self)

    def swap(self, v):
        return _ORE.InterestRateVector_swap(self, v)

    def begin(self):
        return _ORE.InterestRateVector_begin(self)

    def end(self):
        return _ORE.InterestRateVector_end(self)

    def rbegin(self):
        return _ORE.InterestRateVector_rbegin(self)

    def rend(self):
        return _ORE.InterestRateVector_rend(self)

    def clear(self):
        return _ORE.InterestRateVector_clear(self)

    def get_allocator(self):
        return _ORE.InterestRateVector_get_allocator(self)

    def pop_back(self):
        return _ORE.InterestRateVector_pop_back(self)

    def erase(self, *args):
        return _ORE.InterestRateVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.InterestRateVector_swiginit(self, _ORE.new_InterestRateVector(*args))

    def push_back(self, x):
        return _ORE.InterestRateVector_push_back(self, x)

    def front(self):
        return _ORE.InterestRateVector_front(self)

    def back(self):
        return _ORE.InterestRateVector_back(self)

    def assign(self, n, x):
        return _ORE.InterestRateVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.InterestRateVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.InterestRateVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.InterestRateVector_reserve(self, n)

    def capacity(self):
        return _ORE.InterestRateVector_capacity(self)
    __swig_destroy__ = _ORE.delete_InterestRateVector

# Register InterestRateVector in _ORE:
_ORE.InterestRateVector_swigregister(InterestRateVector)

class Observable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Observable_swiginit(self, _ORE.new_Observable())
    __swig_destroy__ = _ORE.delete_Observable

# Register Observable in _ORE:
_ORE.Observable_swigregister(Observable)

class Observer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, callback):
        _ORE.Observer_swiginit(self, _ORE.new_Observer(callback))

    def _registerWith(self, arg2):
        return _ORE.Observer__registerWith(self, arg2)

    def _unregisterWith(self, arg2):
        return _ORE.Observer__unregisterWith(self, arg2)

    def registerWith(self,x):
        if hasattr(x, "asObservable"):
            self._registerWith(x.asObservable())
        else:
            self._registerWith(x)
    def unregisterWith(self,x):
        if hasattr(x, "asObservable"):
            self._unregisterWith(x.asObservable())
        else:
            self._unregisterWith(x)

    __swig_destroy__ = _ORE.delete_Observer

# Register Observer in _ORE:
_ORE.Observer_swigregister(Observer)

class Array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Array_swiginit(self, _ORE.new_Array(*args))

    def __len__(self):
        return _ORE.Array___len__(self)

    def __str__(self):
        return _ORE.Array___str__(self)

    def __add__(self, a):
        return _ORE.Array___add__(self, a)

    def __sub__(self, a):
        return _ORE.Array___sub__(self, a)

    def __mul__(self, *args):
        return _ORE.Array___mul__(self, *args)

    def __div__(self, a):
        return _ORE.Array___div__(self, a)

    def __rmul__(self, a):
        return _ORE.Array___rmul__(self, a)

    def __getslice__(self, i, j):
        return _ORE.Array___getslice__(self, i, j)

    def __setslice__(self, i, j, rhs):
        return _ORE.Array___setslice__(self, i, j, rhs)

    def __nonzero__(self):
        return _ORE.Array___nonzero__(self)

    def __bool__(self):
        return _ORE.Array___bool__(self)

    def __getitem__(self, i):
        return _ORE.Array___getitem__(self, i)

    def __setitem__(self, i, x):
        return _ORE.Array___setitem__(self, i, x)
    __swig_destroy__ = _ORE.delete_Array

# Register Array in _ORE:
_ORE.Array_swigregister(Array)

class MatrixRow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __getitem__(self, i):
        return _ORE.MatrixRow___getitem__(self, i)

    def __setitem__(self, i, x):
        return _ORE.MatrixRow___setitem__(self, i, x)
    __swig_destroy__ = _ORE.delete_MatrixRow

# Register MatrixRow in _ORE:
_ORE.MatrixRow_swigregister(MatrixRow)

class Matrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Matrix_swiginit(self, _ORE.new_Matrix(*args))

    def rows(self):
        return _ORE.Matrix_rows(self)

    def columns(self):
        return _ORE.Matrix_columns(self)

    def __str__(self):
        return _ORE.Matrix___str__(self)

    def __add__(self, m):
        return _ORE.Matrix___add__(self, m)

    def __sub__(self, m):
        return _ORE.Matrix___sub__(self, m)

    def __mul__(self, *args):
        return _ORE.Matrix___mul__(self, *args)

    def __div__(self, x):
        return _ORE.Matrix___div__(self, x)

    def __getitem__(self, i):
        return _ORE.Matrix___getitem__(self, i)

    def __rmul__(self, *args):
        return _ORE.Matrix___rmul__(self, *args)
    __swig_destroy__ = _ORE.delete_Matrix

# Register Matrix in _ORE:
_ORE.Matrix_swigregister(Matrix)

class SalvagingAlgorithm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoAlgorithm = _ORE.SalvagingAlgorithm_NoAlgorithm
    Spectral = _ORE.SalvagingAlgorithm_Spectral

    def __init__(self):
        _ORE.SalvagingAlgorithm_swiginit(self, _ORE.new_SalvagingAlgorithm())
    __swig_destroy__ = _ORE.delete_SalvagingAlgorithm

# Register SalvagingAlgorithm in _ORE:
_ORE.SalvagingAlgorithm_swigregister(SalvagingAlgorithm)


def inverse(m):
    return _ORE.inverse(m)

def transpose(m):
    return _ORE.transpose(m)

def outerProduct(v1, v2):
    return _ORE.outerProduct(v1, v2)

def pseudoSqrt(m, a):
    return _ORE.pseudoSqrt(m, a)
class SVD(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2):
        _ORE.SVD_swiginit(self, _ORE.new_SVD(arg2))

    def U(self):
        return _ORE.SVD_U(self)

    def V(self):
        return _ORE.SVD_V(self)

    def S(self):
        return _ORE.SVD_S(self)

    def singularValues(self):
        return _ORE.SVD_singularValues(self)
    __swig_destroy__ = _ORE.delete_SVD

# Register SVD in _ORE:
_ORE.SVD_swigregister(SVD)

class MatrixMultiplicationProxy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, matrixMult):
        _ORE.MatrixMultiplicationProxy_swiginit(self, _ORE.new_MatrixMultiplicationProxy(matrixMult))

    def __call__(self, x):
        return _ORE.MatrixMultiplicationProxy___call__(self, x)
    __swig_destroy__ = _ORE.delete_MatrixMultiplicationProxy

# Register MatrixMultiplicationProxy in _ORE:
_ORE.MatrixMultiplicationProxy_swigregister(MatrixMultiplicationProxy)

class BiCGstab(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def solve(self, *args):
        return _ORE.BiCGstab_solve(self, *args)

    def __init__(self, *args):
        _ORE.BiCGstab_swiginit(self, _ORE.new_BiCGstab(*args))
    __swig_destroy__ = _ORE.delete_BiCGstab

# Register BiCGstab in _ORE:
_ORE.BiCGstab_swigregister(BiCGstab)

class GMRES(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def solve(self, *args):
        return _ORE.GMRES_solve(self, *args)

    def solveWithRestart(self, *args):
        return _ORE.GMRES_solveWithRestart(self, *args)

    def __init__(self, *args):
        _ORE.GMRES_swiginit(self, _ORE.new_GMRES(*args))
    __swig_destroy__ = _ORE.delete_GMRES

# Register GMRES in _ORE:
_ORE.GMRES_swigregister(GMRES)


def close(*args):
    return _ORE.close(*args)

def close_enough(*args):
    return _ORE.close_enough(*args)
class Quote(Observable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self):
        return _ORE.Quote_value(self)

    def isValid(self):
        return _ORE.Quote_isValid(self)
    __swig_destroy__ = _ORE.delete_Quote

# Register Quote in _ORE:
_ORE.Quote_swigregister(Quote)

class QuoteHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.QuoteHandle_swiginit(self, _ORE.new_QuoteHandle(*args))

    def __deref__(self):
        return _ORE.QuoteHandle___deref__(self)

    def currentLink(self):
        return _ORE.QuoteHandle_currentLink(self)

    def __nonzero__(self):
        return _ORE.QuoteHandle___nonzero__(self)

    def __bool__(self):
        return _ORE.QuoteHandle___bool__(self)

    def asObservable(self):
        return _ORE.QuoteHandle_asObservable(self)
    __swig_destroy__ = _ORE.delete_QuoteHandle

    def value(self):
        return _ORE.QuoteHandle_value(self)

    def isValid(self):
        return _ORE.QuoteHandle_isValid(self)

# Register QuoteHandle in _ORE:
_ORE.QuoteHandle_swigregister(QuoteHandle)

class RelinkableQuoteHandle(QuoteHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.RelinkableQuoteHandle_swiginit(self, _ORE.new_RelinkableQuoteHandle(*args))

    def linkTo(self, arg2):
        return _ORE.RelinkableQuoteHandle_linkTo(self, arg2)

    def reset(self):
        return _ORE.RelinkableQuoteHandle_reset(self)
    __swig_destroy__ = _ORE.delete_RelinkableQuoteHandle

# Register RelinkableQuoteHandle in _ORE:
_ORE.RelinkableQuoteHandle_swigregister(RelinkableQuoteHandle)

class SimpleQuote(Quote):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value):
        _ORE.SimpleQuote_swiginit(self, _ORE.new_SimpleQuote(value))

    def setValue(self, value):
        return _ORE.SimpleQuote_setValue(self, value)
    __swig_destroy__ = _ORE.delete_SimpleQuote

# Register SimpleQuote in _ORE:
_ORE.SimpleQuote_swigregister(SimpleQuote)

class DerivedQuote(Quote):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, h, function):
        _ORE.DerivedQuote_swiginit(self, _ORE.new_DerivedQuote(h, function))
    __swig_destroy__ = _ORE.delete_DerivedQuote

# Register DerivedQuote in _ORE:
_ORE.DerivedQuote_swigregister(DerivedQuote)

class CompositeQuote(Quote):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, h1, h2, function):
        _ORE.CompositeQuote_swiginit(self, _ORE.new_CompositeQuote(h1, h2, function))
    __swig_destroy__ = _ORE.delete_CompositeQuote

# Register CompositeQuote in _ORE:
_ORE.CompositeQuote_swigregister(CompositeQuote)

class QuoteVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.QuoteVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.QuoteVector___nonzero__(self)

    def __bool__(self):
        return _ORE.QuoteVector___bool__(self)

    def __len__(self):
        return _ORE.QuoteVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.QuoteVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.QuoteVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.QuoteVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.QuoteVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.QuoteVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.QuoteVector___setitem__(self, *args)

    def pop(self):
        return _ORE.QuoteVector_pop(self)

    def append(self, x):
        return _ORE.QuoteVector_append(self, x)

    def empty(self):
        return _ORE.QuoteVector_empty(self)

    def size(self):
        return _ORE.QuoteVector_size(self)

    def swap(self, v):
        return _ORE.QuoteVector_swap(self, v)

    def begin(self):
        return _ORE.QuoteVector_begin(self)

    def end(self):
        return _ORE.QuoteVector_end(self)

    def rbegin(self):
        return _ORE.QuoteVector_rbegin(self)

    def rend(self):
        return _ORE.QuoteVector_rend(self)

    def clear(self):
        return _ORE.QuoteVector_clear(self)

    def get_allocator(self):
        return _ORE.QuoteVector_get_allocator(self)

    def pop_back(self):
        return _ORE.QuoteVector_pop_back(self)

    def erase(self, *args):
        return _ORE.QuoteVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.QuoteVector_swiginit(self, _ORE.new_QuoteVector(*args))

    def push_back(self, x):
        return _ORE.QuoteVector_push_back(self, x)

    def front(self):
        return _ORE.QuoteVector_front(self)

    def back(self):
        return _ORE.QuoteVector_back(self)

    def assign(self, n, x):
        return _ORE.QuoteVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.QuoteVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.QuoteVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.QuoteVector_reserve(self, n)

    def capacity(self):
        return _ORE.QuoteVector_capacity(self)
    __swig_destroy__ = _ORE.delete_QuoteVector

# Register QuoteVector in _ORE:
_ORE.QuoteVector_swigregister(QuoteVector)

class QuoteVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.QuoteVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.QuoteVectorVector___nonzero__(self)

    def __bool__(self):
        return _ORE.QuoteVectorVector___bool__(self)

    def __len__(self):
        return _ORE.QuoteVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.QuoteVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.QuoteVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.QuoteVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.QuoteVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.QuoteVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.QuoteVectorVector___setitem__(self, *args)

    def pop(self):
        return _ORE.QuoteVectorVector_pop(self)

    def append(self, x):
        return _ORE.QuoteVectorVector_append(self, x)

    def empty(self):
        return _ORE.QuoteVectorVector_empty(self)

    def size(self):
        return _ORE.QuoteVectorVector_size(self)

    def swap(self, v):
        return _ORE.QuoteVectorVector_swap(self, v)

    def begin(self):
        return _ORE.QuoteVectorVector_begin(self)

    def end(self):
        return _ORE.QuoteVectorVector_end(self)

    def rbegin(self):
        return _ORE.QuoteVectorVector_rbegin(self)

    def rend(self):
        return _ORE.QuoteVectorVector_rend(self)

    def clear(self):
        return _ORE.QuoteVectorVector_clear(self)

    def get_allocator(self):
        return _ORE.QuoteVectorVector_get_allocator(self)

    def pop_back(self):
        return _ORE.QuoteVectorVector_pop_back(self)

    def erase(self, *args):
        return _ORE.QuoteVectorVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.QuoteVectorVector_swiginit(self, _ORE.new_QuoteVectorVector(*args))

    def push_back(self, x):
        return _ORE.QuoteVectorVector_push_back(self, x)

    def front(self):
        return _ORE.QuoteVectorVector_front(self)

    def back(self):
        return _ORE.QuoteVectorVector_back(self)

    def assign(self, n, x):
        return _ORE.QuoteVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.QuoteVectorVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.QuoteVectorVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.QuoteVectorVector_reserve(self, n)

    def capacity(self):
        return _ORE.QuoteVectorVector_capacity(self)
    __swig_destroy__ = _ORE.delete_QuoteVectorVector

# Register QuoteVectorVector in _ORE:
_ORE.QuoteVectorVector_swigregister(QuoteVectorVector)

class QuoteHandleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.QuoteHandleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.QuoteHandleVector___nonzero__(self)

    def __bool__(self):
        return _ORE.QuoteHandleVector___bool__(self)

    def __len__(self):
        return _ORE.QuoteHandleVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.QuoteHandleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.QuoteHandleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.QuoteHandleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.QuoteHandleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.QuoteHandleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.QuoteHandleVector___setitem__(self, *args)

    def pop(self):
        return _ORE.QuoteHandleVector_pop(self)

    def append(self, x):
        return _ORE.QuoteHandleVector_append(self, x)

    def empty(self):
        return _ORE.QuoteHandleVector_empty(self)

    def size(self):
        return _ORE.QuoteHandleVector_size(self)

    def swap(self, v):
        return _ORE.QuoteHandleVector_swap(self, v)

    def begin(self):
        return _ORE.QuoteHandleVector_begin(self)

    def end(self):
        return _ORE.QuoteHandleVector_end(self)

    def rbegin(self):
        return _ORE.QuoteHandleVector_rbegin(self)

    def rend(self):
        return _ORE.QuoteHandleVector_rend(self)

    def clear(self):
        return _ORE.QuoteHandleVector_clear(self)

    def get_allocator(self):
        return _ORE.QuoteHandleVector_get_allocator(self)

    def pop_back(self):
        return _ORE.QuoteHandleVector_pop_back(self)

    def erase(self, *args):
        return _ORE.QuoteHandleVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.QuoteHandleVector_swiginit(self, _ORE.new_QuoteHandleVector(*args))

    def push_back(self, x):
        return _ORE.QuoteHandleVector_push_back(self, x)

    def front(self):
        return _ORE.QuoteHandleVector_front(self)

    def back(self):
        return _ORE.QuoteHandleVector_back(self)

    def assign(self, n, x):
        return _ORE.QuoteHandleVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.QuoteHandleVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.QuoteHandleVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.QuoteHandleVector_reserve(self, n)

    def capacity(self):
        return _ORE.QuoteHandleVector_capacity(self)
    __swig_destroy__ = _ORE.delete_QuoteHandleVector

# Register QuoteHandleVector in _ORE:
_ORE.QuoteHandleVector_swigregister(QuoteHandleVector)

class QuoteHandleVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.QuoteHandleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.QuoteHandleVectorVector___nonzero__(self)

    def __bool__(self):
        return _ORE.QuoteHandleVectorVector___bool__(self)

    def __len__(self):
        return _ORE.QuoteHandleVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.QuoteHandleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.QuoteHandleVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.QuoteHandleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.QuoteHandleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.QuoteHandleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.QuoteHandleVectorVector___setitem__(self, *args)

    def pop(self):
        return _ORE.QuoteHandleVectorVector_pop(self)

    def append(self, x):
        return _ORE.QuoteHandleVectorVector_append(self, x)

    def empty(self):
        return _ORE.QuoteHandleVectorVector_empty(self)

    def size(self):
        return _ORE.QuoteHandleVectorVector_size(self)

    def swap(self, v):
        return _ORE.QuoteHandleVectorVector_swap(self, v)

    def begin(self):
        return _ORE.QuoteHandleVectorVector_begin(self)

    def end(self):
        return _ORE.QuoteHandleVectorVector_end(self)

    def rbegin(self):
        return _ORE.QuoteHandleVectorVector_rbegin(self)

    def rend(self):
        return _ORE.QuoteHandleVectorVector_rend(self)

    def clear(self):
        return _ORE.QuoteHandleVectorVector_clear(self)

    def get_allocator(self):
        return _ORE.QuoteHandleVectorVector_get_allocator(self)

    def pop_back(self):
        return _ORE.QuoteHandleVectorVector_pop_back(self)

    def erase(self, *args):
        return _ORE.QuoteHandleVectorVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.QuoteHandleVectorVector_swiginit(self, _ORE.new_QuoteHandleVectorVector(*args))

    def push_back(self, x):
        return _ORE.QuoteHandleVectorVector_push_back(self, x)

    def front(self):
        return _ORE.QuoteHandleVectorVector_front(self)

    def back(self):
        return _ORE.QuoteHandleVectorVector_back(self)

    def assign(self, n, x):
        return _ORE.QuoteHandleVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.QuoteHandleVectorVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.QuoteHandleVectorVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.QuoteHandleVectorVector_reserve(self, n)

    def capacity(self):
        return _ORE.QuoteHandleVectorVector_capacity(self)
    __swig_destroy__ = _ORE.delete_QuoteHandleVectorVector

# Register QuoteHandleVectorVector in _ORE:
_ORE.QuoteHandleVectorVector_swigregister(QuoteHandleVectorVector)

class RelinkableQuoteHandleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.RelinkableQuoteHandleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.RelinkableQuoteHandleVector___nonzero__(self)

    def __bool__(self):
        return _ORE.RelinkableQuoteHandleVector___bool__(self)

    def __len__(self):
        return _ORE.RelinkableQuoteHandleVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.RelinkableQuoteHandleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.RelinkableQuoteHandleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.RelinkableQuoteHandleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.RelinkableQuoteHandleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.RelinkableQuoteHandleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.RelinkableQuoteHandleVector___setitem__(self, *args)

    def pop(self):
        return _ORE.RelinkableQuoteHandleVector_pop(self)

    def append(self, x):
        return _ORE.RelinkableQuoteHandleVector_append(self, x)

    def empty(self):
        return _ORE.RelinkableQuoteHandleVector_empty(self)

    def size(self):
        return _ORE.RelinkableQuoteHandleVector_size(self)

    def swap(self, v):
        return _ORE.RelinkableQuoteHandleVector_swap(self, v)

    def begin(self):
        return _ORE.RelinkableQuoteHandleVector_begin(self)

    def end(self):
        return _ORE.RelinkableQuoteHandleVector_end(self)

    def rbegin(self):
        return _ORE.RelinkableQuoteHandleVector_rbegin(self)

    def rend(self):
        return _ORE.RelinkableQuoteHandleVector_rend(self)

    def clear(self):
        return _ORE.RelinkableQuoteHandleVector_clear(self)

    def get_allocator(self):
        return _ORE.RelinkableQuoteHandleVector_get_allocator(self)

    def pop_back(self):
        return _ORE.RelinkableQuoteHandleVector_pop_back(self)

    def erase(self, *args):
        return _ORE.RelinkableQuoteHandleVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.RelinkableQuoteHandleVector_swiginit(self, _ORE.new_RelinkableQuoteHandleVector(*args))

    def push_back(self, x):
        return _ORE.RelinkableQuoteHandleVector_push_back(self, x)

    def front(self):
        return _ORE.RelinkableQuoteHandleVector_front(self)

    def back(self):
        return _ORE.RelinkableQuoteHandleVector_back(self)

    def assign(self, n, x):
        return _ORE.RelinkableQuoteHandleVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.RelinkableQuoteHandleVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.RelinkableQuoteHandleVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.RelinkableQuoteHandleVector_reserve(self, n)

    def capacity(self):
        return _ORE.RelinkableQuoteHandleVector_capacity(self)
    __swig_destroy__ = _ORE.delete_RelinkableQuoteHandleVector

# Register RelinkableQuoteHandleVector in _ORE:
_ORE.RelinkableQuoteHandleVector_swigregister(RelinkableQuoteHandleVector)

class RelinkableQuoteHandleVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.RelinkableQuoteHandleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.RelinkableQuoteHandleVectorVector___nonzero__(self)

    def __bool__(self):
        return _ORE.RelinkableQuoteHandleVectorVector___bool__(self)

    def __len__(self):
        return _ORE.RelinkableQuoteHandleVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.RelinkableQuoteHandleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.RelinkableQuoteHandleVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.RelinkableQuoteHandleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.RelinkableQuoteHandleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.RelinkableQuoteHandleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.RelinkableQuoteHandleVectorVector___setitem__(self, *args)

    def pop(self):
        return _ORE.RelinkableQuoteHandleVectorVector_pop(self)

    def append(self, x):
        return _ORE.RelinkableQuoteHandleVectorVector_append(self, x)

    def empty(self):
        return _ORE.RelinkableQuoteHandleVectorVector_empty(self)

    def size(self):
        return _ORE.RelinkableQuoteHandleVectorVector_size(self)

    def swap(self, v):
        return _ORE.RelinkableQuoteHandleVectorVector_swap(self, v)

    def begin(self):
        return _ORE.RelinkableQuoteHandleVectorVector_begin(self)

    def end(self):
        return _ORE.RelinkableQuoteHandleVectorVector_end(self)

    def rbegin(self):
        return _ORE.RelinkableQuoteHandleVectorVector_rbegin(self)

    def rend(self):
        return _ORE.RelinkableQuoteHandleVectorVector_rend(self)

    def clear(self):
        return _ORE.RelinkableQuoteHandleVectorVector_clear(self)

    def get_allocator(self):
        return _ORE.RelinkableQuoteHandleVectorVector_get_allocator(self)

    def pop_back(self):
        return _ORE.RelinkableQuoteHandleVectorVector_pop_back(self)

    def erase(self, *args):
        return _ORE.RelinkableQuoteHandleVectorVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.RelinkableQuoteHandleVectorVector_swiginit(self, _ORE.new_RelinkableQuoteHandleVectorVector(*args))

    def push_back(self, x):
        return _ORE.RelinkableQuoteHandleVectorVector_push_back(self, x)

    def front(self):
        return _ORE.RelinkableQuoteHandleVectorVector_front(self)

    def back(self):
        return _ORE.RelinkableQuoteHandleVectorVector_back(self)

    def assign(self, n, x):
        return _ORE.RelinkableQuoteHandleVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.RelinkableQuoteHandleVectorVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.RelinkableQuoteHandleVectorVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.RelinkableQuoteHandleVectorVector_reserve(self, n)

    def capacity(self):
        return _ORE.RelinkableQuoteHandleVectorVector_capacity(self)
    __swig_destroy__ = _ORE.delete_RelinkableQuoteHandleVectorVector

# Register RelinkableQuoteHandleVectorVector in _ORE:
_ORE.RelinkableQuoteHandleVectorVector_swigregister(RelinkableQuoteHandleVectorVector)

class Brent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations):
        return _ORE.Brent_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound):
        return _ORE.Brent_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound):
        return _ORE.Brent_setUpperBound(self, upperBound)

    def solve(self, *args):
        return _ORE.Brent_solve(self, *args)

    def __init__(self):
        _ORE.Brent_swiginit(self, _ORE.new_Brent())
    __swig_destroy__ = _ORE.delete_Brent

# Register Brent in _ORE:
_ORE.Brent_swigregister(Brent)

class Bisection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations):
        return _ORE.Bisection_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound):
        return _ORE.Bisection_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound):
        return _ORE.Bisection_setUpperBound(self, upperBound)

    def solve(self, *args):
        return _ORE.Bisection_solve(self, *args)

    def __init__(self):
        _ORE.Bisection_swiginit(self, _ORE.new_Bisection())
    __swig_destroy__ = _ORE.delete_Bisection

# Register Bisection in _ORE:
_ORE.Bisection_swigregister(Bisection)

class FalsePosition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations):
        return _ORE.FalsePosition_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound):
        return _ORE.FalsePosition_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound):
        return _ORE.FalsePosition_setUpperBound(self, upperBound)

    def solve(self, *args):
        return _ORE.FalsePosition_solve(self, *args)

    def __init__(self):
        _ORE.FalsePosition_swiginit(self, _ORE.new_FalsePosition())
    __swig_destroy__ = _ORE.delete_FalsePosition

# Register FalsePosition in _ORE:
_ORE.FalsePosition_swigregister(FalsePosition)

class Ridder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations):
        return _ORE.Ridder_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound):
        return _ORE.Ridder_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound):
        return _ORE.Ridder_setUpperBound(self, upperBound)

    def solve(self, *args):
        return _ORE.Ridder_solve(self, *args)

    def __init__(self):
        _ORE.Ridder_swiginit(self, _ORE.new_Ridder())
    __swig_destroy__ = _ORE.delete_Ridder

# Register Ridder in _ORE:
_ORE.Ridder_swigregister(Ridder)

class Secant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations):
        return _ORE.Secant_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound):
        return _ORE.Secant_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound):
        return _ORE.Secant_setUpperBound(self, upperBound)

    def solve(self, *args):
        return _ORE.Secant_solve(self, *args)

    def __init__(self):
        _ORE.Secant_swiginit(self, _ORE.new_Secant())
    __swig_destroy__ = _ORE.delete_Secant

# Register Secant in _ORE:
_ORE.Secant_swigregister(Secant)

class Newton(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations):
        return _ORE.Newton_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound):
        return _ORE.Newton_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound):
        return _ORE.Newton_setUpperBound(self, upperBound)

    def solve(self, *args):
        return _ORE.Newton_solve(self, *args)

    def __init__(self):
        _ORE.Newton_swiginit(self, _ORE.new_Newton())
    __swig_destroy__ = _ORE.delete_Newton

# Register Newton in _ORE:
_ORE.Newton_swigregister(Newton)

class NewtonSafe(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations):
        return _ORE.NewtonSafe_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound):
        return _ORE.NewtonSafe_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound):
        return _ORE.NewtonSafe_setUpperBound(self, upperBound)

    def solve(self, *args):
        return _ORE.NewtonSafe_solve(self, *args)

    def __init__(self):
        _ORE.NewtonSafe_swiginit(self, _ORE.new_NewtonSafe())
    __swig_destroy__ = _ORE.delete_NewtonSafe

# Register NewtonSafe in _ORE:
_ORE.NewtonSafe_swigregister(NewtonSafe)

class Constraint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ORE.delete_Constraint

# Register Constraint in _ORE:
_ORE.Constraint_swigregister(Constraint)

class BoundaryConstraint(Constraint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lower, upper):
        _ORE.BoundaryConstraint_swiginit(self, _ORE.new_BoundaryConstraint(lower, upper))
    __swig_destroy__ = _ORE.delete_BoundaryConstraint

# Register BoundaryConstraint in _ORE:
_ORE.BoundaryConstraint_swigregister(BoundaryConstraint)

class NoConstraint(Constraint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.NoConstraint_swiginit(self, _ORE.new_NoConstraint())
    __swig_destroy__ = _ORE.delete_NoConstraint

# Register NoConstraint in _ORE:
_ORE.NoConstraint_swigregister(NoConstraint)

class PositiveConstraint(Constraint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.PositiveConstraint_swiginit(self, _ORE.new_PositiveConstraint())
    __swig_destroy__ = _ORE.delete_PositiveConstraint

# Register PositiveConstraint in _ORE:
_ORE.PositiveConstraint_swigregister(PositiveConstraint)

class CompositeConstraint(Constraint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, c1, c2):
        _ORE.CompositeConstraint_swiginit(self, _ORE.new_CompositeConstraint(c1, c2))
    __swig_destroy__ = _ORE.delete_CompositeConstraint

# Register CompositeConstraint in _ORE:
_ORE.CompositeConstraint_swigregister(CompositeConstraint)

class NonhomogeneousBoundaryConstraint(Constraint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, l, u):
        _ORE.NonhomogeneousBoundaryConstraint_swiginit(self, _ORE.new_NonhomogeneousBoundaryConstraint(l, u))
    __swig_destroy__ = _ORE.delete_NonhomogeneousBoundaryConstraint

# Register NonhomogeneousBoundaryConstraint in _ORE:
_ORE.NonhomogeneousBoundaryConstraint_swigregister(NonhomogeneousBoundaryConstraint)

class EndCriteria(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoCriteria = _ORE.EndCriteria_NoCriteria
    MaxIterations = _ORE.EndCriteria_MaxIterations
    StationaryPoint = _ORE.EndCriteria_StationaryPoint
    StationaryFunctionValue = _ORE.EndCriteria_StationaryFunctionValue
    StationaryFunctionAccuracy = _ORE.EndCriteria_StationaryFunctionAccuracy
    ZeroGradientNorm = _ORE.EndCriteria_ZeroGradientNorm
    Unknown = _ORE.EndCriteria_Unknown

    def __init__(self, maxIteration, maxStationaryStateIterations, rootEpsilon, functionEpsilon, gradientNormEpsilon):
        _ORE.EndCriteria_swiginit(self, _ORE.new_EndCriteria(maxIteration, maxStationaryStateIterations, rootEpsilon, functionEpsilon, gradientNormEpsilon))

    def __call__(self, iteration, statState, positiveOptimization, fold, normgold, fnew, normgnewx, ecType):
        return _ORE.EndCriteria___call__(self, iteration, statState, positiveOptimization, fold, normgold, fnew, normgnewx, ecType)
    __swig_destroy__ = _ORE.delete_EndCriteria

# Register EndCriteria in _ORE:
_ORE.EndCriteria_swigregister(EndCriteria)

class OptimizationMethod(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ORE.delete_OptimizationMethod

# Register OptimizationMethod in _ORE:
_ORE.OptimizationMethod_swigregister(OptimizationMethod)

class ConjugateGradient(OptimizationMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.ConjugateGradient_swiginit(self, _ORE.new_ConjugateGradient())
    __swig_destroy__ = _ORE.delete_ConjugateGradient

# Register ConjugateGradient in _ORE:
_ORE.ConjugateGradient_swigregister(ConjugateGradient)

class Simplex(OptimizationMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lambda_parameter):
        _ORE.Simplex_swiginit(self, _ORE.new_Simplex(lambda_parameter))

    def getLambda(self):
        return _ORE.Simplex_getLambda(self)
    __swig_destroy__ = _ORE.delete_Simplex

# Register Simplex in _ORE:
_ORE.Simplex_swigregister(Simplex)

class SteepestDescent(OptimizationMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.SteepestDescent_swiginit(self, _ORE.new_SteepestDescent())
    __swig_destroy__ = _ORE.delete_SteepestDescent

# Register SteepestDescent in _ORE:
_ORE.SteepestDescent_swigregister(SteepestDescent)

class BFGS(OptimizationMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.BFGS_swiginit(self, _ORE.new_BFGS())
    __swig_destroy__ = _ORE.delete_BFGS

# Register BFGS in _ORE:
_ORE.BFGS_swigregister(BFGS)

class LevenbergMarquardt(OptimizationMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, epsfcn=1.0e-8, xtol=1.0e-8, gtol=1.0e-8, useCostFunctionsJacobian=False):
        _ORE.LevenbergMarquardt_swiginit(self, _ORE.new_LevenbergMarquardt(epsfcn, xtol, gtol, useCostFunctionsJacobian))
    __swig_destroy__ = _ORE.delete_LevenbergMarquardt

# Register LevenbergMarquardt in _ORE:
_ORE.LevenbergMarquardt_swigregister(LevenbergMarquardt)

class DifferentialEvolution(OptimizationMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.DifferentialEvolution_swiginit(self, _ORE.new_DifferentialEvolution())
    __swig_destroy__ = _ORE.delete_DifferentialEvolution

# Register DifferentialEvolution in _ORE:
_ORE.DifferentialEvolution_swigregister(DifferentialEvolution)

class SamplerGaussian(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        _ORE.SamplerGaussian_swiginit(self, _ORE.new_SamplerGaussian(seed))
    __swig_destroy__ = _ORE.delete_SamplerGaussian

# Register SamplerGaussian in _ORE:
_ORE.SamplerGaussian_swigregister(SamplerGaussian)

class SamplerLogNormal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        _ORE.SamplerLogNormal_swiginit(self, _ORE.new_SamplerLogNormal(seed))
    __swig_destroy__ = _ORE.delete_SamplerLogNormal

# Register SamplerLogNormal in _ORE:
_ORE.SamplerLogNormal_swigregister(SamplerLogNormal)

class SamplerMirrorGaussian(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lower, upper, seed=0):
        _ORE.SamplerMirrorGaussian_swiginit(self, _ORE.new_SamplerMirrorGaussian(lower, upper, seed))
    __swig_destroy__ = _ORE.delete_SamplerMirrorGaussian

# Register SamplerMirrorGaussian in _ORE:
_ORE.SamplerMirrorGaussian_swigregister(SamplerMirrorGaussian)

class ProbabilityBoltzmannDownhill(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        _ORE.ProbabilityBoltzmannDownhill_swiginit(self, _ORE.new_ProbabilityBoltzmannDownhill(seed))
    __swig_destroy__ = _ORE.delete_ProbabilityBoltzmannDownhill

# Register ProbabilityBoltzmannDownhill in _ORE:
_ORE.ProbabilityBoltzmannDownhill_swigregister(ProbabilityBoltzmannDownhill)

class TemperatureExponential(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, initialTemp, dimension, power=0.95):
        _ORE.TemperatureExponential_swiginit(self, _ORE.new_TemperatureExponential(initialTemp, dimension, power))
    __swig_destroy__ = _ORE.delete_TemperatureExponential

# Register TemperatureExponential in _ORE:
_ORE.TemperatureExponential_swigregister(TemperatureExponential)

class ReannealingTrivial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.ReannealingTrivial_swiginit(self, _ORE.new_ReannealingTrivial())
    __swig_destroy__ = _ORE.delete_ReannealingTrivial

# Register ReannealingTrivial in _ORE:
_ORE.ReannealingTrivial_swigregister(ReannealingTrivial)

class GaussianSimulatedAnnealing(OptimizationMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoResetScheme = _ORE.GaussianSimulatedAnnealing_NoResetScheme
    ResetToBestPoint = _ORE.GaussianSimulatedAnnealing_ResetToBestPoint
    ResetToOrigin = _ORE.GaussianSimulatedAnnealing_ResetToOrigin

    def __init__(self, *args):
        _ORE.GaussianSimulatedAnnealing_swiginit(self, _ORE.new_GaussianSimulatedAnnealing(*args))
    __swig_destroy__ = _ORE.delete_GaussianSimulatedAnnealing

# Register GaussianSimulatedAnnealing in _ORE:
_ORE.GaussianSimulatedAnnealing_swigregister(GaussianSimulatedAnnealing)

class MirrorGaussianSimulatedAnnealing(OptimizationMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoResetScheme = _ORE.MirrorGaussianSimulatedAnnealing_NoResetScheme
    ResetToBestPoint = _ORE.MirrorGaussianSimulatedAnnealing_ResetToBestPoint
    ResetToOrigin = _ORE.MirrorGaussianSimulatedAnnealing_ResetToOrigin

    def __init__(self, *args):
        _ORE.MirrorGaussianSimulatedAnnealing_swiginit(self, _ORE.new_MirrorGaussianSimulatedAnnealing(*args))
    __swig_destroy__ = _ORE.delete_MirrorGaussianSimulatedAnnealing

# Register MirrorGaussianSimulatedAnnealing in _ORE:
_ORE.MirrorGaussianSimulatedAnnealing_swigregister(MirrorGaussianSimulatedAnnealing)

class LogNormalSimulatedAnnealing(OptimizationMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoResetScheme = _ORE.LogNormalSimulatedAnnealing_NoResetScheme
    ResetToBestPoint = _ORE.LogNormalSimulatedAnnealing_ResetToBestPoint
    ResetToOrigin = _ORE.LogNormalSimulatedAnnealing_ResetToOrigin

    def __init__(self, *args):
        _ORE.LogNormalSimulatedAnnealing_swiginit(self, _ORE.new_LogNormalSimulatedAnnealing(*args))
    __swig_destroy__ = _ORE.delete_LogNormalSimulatedAnnealing

# Register LogNormalSimulatedAnnealing in _ORE:
_ORE.LogNormalSimulatedAnnealing_swigregister(LogNormalSimulatedAnnealing)

class Optimizer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def solve(self, function, c, m, e, iv):
        return _ORE.Optimizer_solve(self, function, c, m, e, iv)

    def __init__(self):
        _ORE.Optimizer_swiginit(self, _ORE.new_Optimizer())
    __swig_destroy__ = _ORE.delete_Optimizer

# Register Optimizer in _ORE:
_ORE.Optimizer_swigregister(Optimizer)

class LinearInterpolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        _ORE.LinearInterpolation_swiginit(self, _ORE.new_LinearInterpolation(x, y))

    def __call__(self, x, allowExtrapolation=False):
        return _ORE.LinearInterpolation___call__(self, x, allowExtrapolation)
    __swig_destroy__ = _ORE.delete_LinearInterpolation

# Register LinearInterpolation in _ORE:
_ORE.LinearInterpolation_swigregister(LinearInterpolation)

class LogLinearInterpolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        _ORE.LogLinearInterpolation_swiginit(self, _ORE.new_LogLinearInterpolation(x, y))

    def __call__(self, x, allowExtrapolation=False):
        return _ORE.LogLinearInterpolation___call__(self, x, allowExtrapolation)
    __swig_destroy__ = _ORE.delete_LogLinearInterpolation

# Register LogLinearInterpolation in _ORE:
_ORE.LogLinearInterpolation_swigregister(LogLinearInterpolation)

class BackwardFlatInterpolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        _ORE.BackwardFlatInterpolation_swiginit(self, _ORE.new_BackwardFlatInterpolation(x, y))

    def __call__(self, x, allowExtrapolation=False):
        return _ORE.BackwardFlatInterpolation___call__(self, x, allowExtrapolation)
    __swig_destroy__ = _ORE.delete_BackwardFlatInterpolation

# Register BackwardFlatInterpolation in _ORE:
_ORE.BackwardFlatInterpolation_swigregister(BackwardFlatInterpolation)

class ForwardFlatInterpolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        _ORE.ForwardFlatInterpolation_swiginit(self, _ORE.new_ForwardFlatInterpolation(x, y))

    def __call__(self, x, allowExtrapolation=False):
        return _ORE.ForwardFlatInterpolation___call__(self, x, allowExtrapolation)
    __swig_destroy__ = _ORE.delete_ForwardFlatInterpolation

# Register ForwardFlatInterpolation in _ORE:
_ORE.ForwardFlatInterpolation_swigregister(ForwardFlatInterpolation)

class CubicNaturalSpline(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        _ORE.CubicNaturalSpline_swiginit(self, _ORE.new_CubicNaturalSpline(x, y))

    def __call__(self, x, allowExtrapolation=False):
        return _ORE.CubicNaturalSpline___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _ORE.CubicNaturalSpline_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _ORE.CubicNaturalSpline_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _ORE.CubicNaturalSpline_primitive(self, x, extrapolate)
    __swig_destroy__ = _ORE.delete_CubicNaturalSpline

# Register CubicNaturalSpline in _ORE:
_ORE.CubicNaturalSpline_swigregister(CubicNaturalSpline)

class LogCubicNaturalSpline(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        _ORE.LogCubicNaturalSpline_swiginit(self, _ORE.new_LogCubicNaturalSpline(x, y))

    def __call__(self, x, allowExtrapolation=False):
        return _ORE.LogCubicNaturalSpline___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _ORE.LogCubicNaturalSpline_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _ORE.LogCubicNaturalSpline_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _ORE.LogCubicNaturalSpline_primitive(self, x, extrapolate)
    __swig_destroy__ = _ORE.delete_LogCubicNaturalSpline

# Register LogCubicNaturalSpline in _ORE:
_ORE.LogCubicNaturalSpline_swigregister(LogCubicNaturalSpline)

class MonotonicCubicNaturalSpline(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        _ORE.MonotonicCubicNaturalSpline_swiginit(self, _ORE.new_MonotonicCubicNaturalSpline(x, y))

    def __call__(self, x, allowExtrapolation=False):
        return _ORE.MonotonicCubicNaturalSpline___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _ORE.MonotonicCubicNaturalSpline_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _ORE.MonotonicCubicNaturalSpline_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _ORE.MonotonicCubicNaturalSpline_primitive(self, x, extrapolate)
    __swig_destroy__ = _ORE.delete_MonotonicCubicNaturalSpline

# Register MonotonicCubicNaturalSpline in _ORE:
_ORE.MonotonicCubicNaturalSpline_swigregister(MonotonicCubicNaturalSpline)

class MonotonicLogCubicNaturalSpline(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        _ORE.MonotonicLogCubicNaturalSpline_swiginit(self, _ORE.new_MonotonicLogCubicNaturalSpline(x, y))

    def __call__(self, x, allowExtrapolation=False):
        return _ORE.MonotonicLogCubicNaturalSpline___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _ORE.MonotonicLogCubicNaturalSpline_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _ORE.MonotonicLogCubicNaturalSpline_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _ORE.MonotonicLogCubicNaturalSpline_primitive(self, x, extrapolate)
    __swig_destroy__ = _ORE.delete_MonotonicLogCubicNaturalSpline

# Register MonotonicLogCubicNaturalSpline in _ORE:
_ORE.MonotonicLogCubicNaturalSpline_swigregister(MonotonicLogCubicNaturalSpline)

class KrugerCubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        _ORE.KrugerCubic_swiginit(self, _ORE.new_KrugerCubic(x, y))

    def __call__(self, x, allowExtrapolation=False):
        return _ORE.KrugerCubic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _ORE.KrugerCubic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _ORE.KrugerCubic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _ORE.KrugerCubic_primitive(self, x, extrapolate)
    __swig_destroy__ = _ORE.delete_KrugerCubic

# Register KrugerCubic in _ORE:
_ORE.KrugerCubic_swigregister(KrugerCubic)

class KrugerLogCubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        _ORE.KrugerLogCubic_swiginit(self, _ORE.new_KrugerLogCubic(x, y))

    def __call__(self, x, allowExtrapolation=False):
        return _ORE.KrugerLogCubic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _ORE.KrugerLogCubic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _ORE.KrugerLogCubic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _ORE.KrugerLogCubic_primitive(self, x, extrapolate)
    __swig_destroy__ = _ORE.delete_KrugerLogCubic

# Register KrugerLogCubic in _ORE:
_ORE.KrugerLogCubic_swigregister(KrugerLogCubic)

class FritschButlandCubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        _ORE.FritschButlandCubic_swiginit(self, _ORE.new_FritschButlandCubic(x, y))

    def __call__(self, x, allowExtrapolation=False):
        return _ORE.FritschButlandCubic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _ORE.FritschButlandCubic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _ORE.FritschButlandCubic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _ORE.FritschButlandCubic_primitive(self, x, extrapolate)
    __swig_destroy__ = _ORE.delete_FritschButlandCubic

# Register FritschButlandCubic in _ORE:
_ORE.FritschButlandCubic_swigregister(FritschButlandCubic)

class FritschButlandLogCubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        _ORE.FritschButlandLogCubic_swiginit(self, _ORE.new_FritschButlandLogCubic(x, y))

    def __call__(self, x, allowExtrapolation=False):
        return _ORE.FritschButlandLogCubic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _ORE.FritschButlandLogCubic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _ORE.FritschButlandLogCubic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _ORE.FritschButlandLogCubic_primitive(self, x, extrapolate)
    __swig_destroy__ = _ORE.delete_FritschButlandLogCubic

# Register FritschButlandLogCubic in _ORE:
_ORE.FritschButlandLogCubic_swigregister(FritschButlandLogCubic)

class Parabolic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        _ORE.Parabolic_swiginit(self, _ORE.new_Parabolic(x, y))

    def __call__(self, x, allowExtrapolation=False):
        return _ORE.Parabolic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _ORE.Parabolic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _ORE.Parabolic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _ORE.Parabolic_primitive(self, x, extrapolate)
    __swig_destroy__ = _ORE.delete_Parabolic

# Register Parabolic in _ORE:
_ORE.Parabolic_swigregister(Parabolic)

class LogParabolic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        _ORE.LogParabolic_swiginit(self, _ORE.new_LogParabolic(x, y))

    def __call__(self, x, allowExtrapolation=False):
        return _ORE.LogParabolic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _ORE.LogParabolic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _ORE.LogParabolic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _ORE.LogParabolic_primitive(self, x, extrapolate)
    __swig_destroy__ = _ORE.delete_LogParabolic

# Register LogParabolic in _ORE:
_ORE.LogParabolic_swigregister(LogParabolic)

class MonotonicParabolic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        _ORE.MonotonicParabolic_swiginit(self, _ORE.new_MonotonicParabolic(x, y))

    def __call__(self, x, allowExtrapolation=False):
        return _ORE.MonotonicParabolic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _ORE.MonotonicParabolic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _ORE.MonotonicParabolic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _ORE.MonotonicParabolic_primitive(self, x, extrapolate)
    __swig_destroy__ = _ORE.delete_MonotonicParabolic

# Register MonotonicParabolic in _ORE:
_ORE.MonotonicParabolic_swigregister(MonotonicParabolic)

class MonotonicLogParabolic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        _ORE.MonotonicLogParabolic_swiginit(self, _ORE.new_MonotonicLogParabolic(x, y))

    def __call__(self, x, allowExtrapolation=False):
        return _ORE.MonotonicLogParabolic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _ORE.MonotonicLogParabolic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _ORE.MonotonicLogParabolic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _ORE.MonotonicLogParabolic_primitive(self, x, extrapolate)
    __swig_destroy__ = _ORE.delete_MonotonicLogParabolic

# Register MonotonicLogParabolic in _ORE:
_ORE.MonotonicLogParabolic_swigregister(MonotonicLogParabolic)

class BilinearInterpolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y, m):
        _ORE.BilinearInterpolation_swiginit(self, _ORE.new_BilinearInterpolation(x, y, m))

    def __call__(self, x, y, allowExtrapolation=False):
        return _ORE.BilinearInterpolation___call__(self, x, y, allowExtrapolation)
    __swig_destroy__ = _ORE.delete_BilinearInterpolation

# Register BilinearInterpolation in _ORE:
_ORE.BilinearInterpolation_swigregister(BilinearInterpolation)

class BicubicSpline(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y, m):
        _ORE.BicubicSpline_swiginit(self, _ORE.new_BicubicSpline(x, y, m))

    def __call__(self, x, y, allowExtrapolation=False):
        return _ORE.BicubicSpline___call__(self, x, y, allowExtrapolation)
    __swig_destroy__ = _ORE.delete_BicubicSpline

# Register BicubicSpline in _ORE:
_ORE.BicubicSpline_swigregister(BicubicSpline)

class CubicInterpolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Spline = _ORE.CubicInterpolation_Spline
    SplineOM1 = _ORE.CubicInterpolation_SplineOM1
    SplineOM2 = _ORE.CubicInterpolation_SplineOM2
    FourthOrder = _ORE.CubicInterpolation_FourthOrder
    Parabolic = _ORE.CubicInterpolation_Parabolic
    FritschButland = _ORE.CubicInterpolation_FritschButland
    Akima = _ORE.CubicInterpolation_Akima
    Kruger = _ORE.CubicInterpolation_Kruger
    Harmonic = _ORE.CubicInterpolation_Harmonic
    __swig_destroy__ = _ORE.delete_CubicInterpolation

# Register CubicInterpolation in _ORE:
_ORE.CubicInterpolation_swigregister(CubicInterpolation)

class MixedInterpolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ShareRanges = _ORE.MixedInterpolation_ShareRanges
    SplitRanges = _ORE.MixedInterpolation_SplitRanges
    __swig_destroy__ = _ORE.delete_MixedInterpolation

# Register MixedInterpolation in _ORE:
_ORE.MixedInterpolation_swigregister(MixedInterpolation)

class BackwardFlat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.BackwardFlat_swiginit(self, _ORE.new_BackwardFlat())
    __swig_destroy__ = _ORE.delete_BackwardFlat

# Register BackwardFlat in _ORE:
_ORE.BackwardFlat_swigregister(BackwardFlat)

class ForwardFlat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.ForwardFlat_swiginit(self, _ORE.new_ForwardFlat())
    __swig_destroy__ = _ORE.delete_ForwardFlat

# Register ForwardFlat in _ORE:
_ORE.ForwardFlat_swigregister(ForwardFlat)

class Linear(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Linear_swiginit(self, _ORE.new_Linear())
    __swig_destroy__ = _ORE.delete_Linear

# Register Linear in _ORE:
_ORE.Linear_swigregister(Linear)

class LogLinear(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.LogLinear_swiginit(self, _ORE.new_LogLinear())
    __swig_destroy__ = _ORE.delete_LogLinear

# Register LogLinear in _ORE:
_ORE.LogLinear_swigregister(LogLinear)

class Cubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Cubic_swiginit(self, _ORE.new_Cubic())
    __swig_destroy__ = _ORE.delete_Cubic

# Register Cubic in _ORE:
_ORE.Cubic_swigregister(Cubic)

class Bicubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Bicubic_swiginit(self, _ORE.new_Bicubic())
    __swig_destroy__ = _ORE.delete_Bicubic

# Register Bicubic in _ORE:
_ORE.Bicubic_swigregister(Bicubic)

class MonotonicCubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.MonotonicCubic_swiginit(self, _ORE.new_MonotonicCubic())
    __swig_destroy__ = _ORE.delete_MonotonicCubic

# Register MonotonicCubic in _ORE:
_ORE.MonotonicCubic_swigregister(MonotonicCubic)

class DefaultLogCubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.DefaultLogCubic_swiginit(self, _ORE.new_DefaultLogCubic())
    __swig_destroy__ = _ORE.delete_DefaultLogCubic

# Register DefaultLogCubic in _ORE:
_ORE.DefaultLogCubic_swigregister(DefaultLogCubic)

class MonotonicLogCubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.MonotonicLogCubic_swiginit(self, _ORE.new_MonotonicLogCubic())
    __swig_destroy__ = _ORE.delete_MonotonicLogCubic

# Register MonotonicLogCubic in _ORE:
_ORE.MonotonicLogCubic_swigregister(MonotonicLogCubic)

class SplineCubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.SplineCubic_swiginit(self, _ORE.new_SplineCubic())
    __swig_destroy__ = _ORE.delete_SplineCubic

# Register SplineCubic in _ORE:
_ORE.SplineCubic_swigregister(SplineCubic)

class SplineLogCubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.SplineLogCubic_swiginit(self, _ORE.new_SplineLogCubic())
    __swig_destroy__ = _ORE.delete_SplineLogCubic

# Register SplineLogCubic in _ORE:
_ORE.SplineLogCubic_swigregister(SplineLogCubic)

class Kruger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Kruger_swiginit(self, _ORE.new_Kruger())
    __swig_destroy__ = _ORE.delete_Kruger

# Register Kruger in _ORE:
_ORE.Kruger_swigregister(Kruger)

class KrugerLog(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.KrugerLog_swiginit(self, _ORE.new_KrugerLog())
    __swig_destroy__ = _ORE.delete_KrugerLog

# Register KrugerLog in _ORE:
_ORE.KrugerLog_swigregister(KrugerLog)

class ConvexMonotone(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, quadraticity=0.3, monotonicity=0.7, forcePositive=True):
        _ORE.ConvexMonotone_swiginit(self, _ORE.new_ConvexMonotone(quadraticity, monotonicity, forcePositive))
    __swig_destroy__ = _ORE.delete_ConvexMonotone

# Register ConvexMonotone in _ORE:
_ORE.ConvexMonotone_swigregister(ConvexMonotone)

class LogMixedLinearCubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.LogMixedLinearCubic_swiginit(self, _ORE.new_LogMixedLinearCubic(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_LogMixedLinearCubic

# Register LogMixedLinearCubic in _ORE:
_ORE.LogMixedLinearCubic_swigregister(LogMixedLinearCubic)

class SABRInterpolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.SABRInterpolation_swiginit(self, _ORE.new_SABRInterpolation(*args, **kwargs))

    def __call__(self, x, allowExtrapolation=False):
        return _ORE.SABRInterpolation___call__(self, x, allowExtrapolation)

    def alpha(self):
        return _ORE.SABRInterpolation_alpha(self)

    def beta(self):
        return _ORE.SABRInterpolation_beta(self)

    def rho(self):
        return _ORE.SABRInterpolation_rho(self)

    def nu(self):
        return _ORE.SABRInterpolation_nu(self)
    __swig_destroy__ = _ORE.delete_SABRInterpolation

# Register SABRInterpolation in _ORE:
_ORE.SABRInterpolation_swigregister(SABRInterpolation)

class RichardsonExtrapolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, *args):
        return _ORE.RichardsonExtrapolation___call__(self, *args)

    def __init__(self, *args):
        _ORE.RichardsonExtrapolation_swiginit(self, _ORE.new_RichardsonExtrapolation(*args))
    __swig_destroy__ = _ORE.delete_RichardsonExtrapolation

# Register RichardsonExtrapolation in _ORE:
_ORE.RichardsonExtrapolation_swigregister(RichardsonExtrapolation)

class ChebyshevInterpolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FirstKind = _ORE.ChebyshevInterpolation_FirstKind
    SecondKind = _ORE.ChebyshevInterpolation_SecondKind

    def __init__(self, *args):
        _ORE.ChebyshevInterpolation_swiginit(self, _ORE.new_ChebyshevInterpolation(*args))

    def __call__(self, z, allowExtrapolation=False):
        return _ORE.ChebyshevInterpolation___call__(self, z, allowExtrapolation)

    @staticmethod
    def nodes(n, pointsType):
        return _ORE.ChebyshevInterpolation_nodes(n, pointsType)
    __swig_destroy__ = _ORE.delete_ChebyshevInterpolation

# Register ChebyshevInterpolation in _ORE:
_ORE.ChebyshevInterpolation_swigregister(ChebyshevInterpolation)

def ChebyshevInterpolation_nodes(n, pointsType):
    return _ORE.ChebyshevInterpolation_nodes(n, pointsType)

class ConvexMonotoneInterpolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y, quadraticity=0.3, monotonicity=0.7, forcePositive=True):
        _ORE.ConvexMonotoneInterpolation_swiginit(self, _ORE.new_ConvexMonotoneInterpolation(x, y, quadraticity, monotonicity, forcePositive))

    def __call__(self, x, allowExtrapolation=False):
        return _ORE.ConvexMonotoneInterpolation___call__(self, x, allowExtrapolation)
    __swig_destroy__ = _ORE.delete_ConvexMonotoneInterpolation

# Register ConvexMonotoneInterpolation in _ORE:
_ORE.ConvexMonotoneInterpolation_swigregister(ConvexMonotoneInterpolation)

class TermStructure(Observable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def dayCounter(self):
        return _ORE.TermStructure_dayCounter(self)

    def timeFromReference(self, date):
        return _ORE.TermStructure_timeFromReference(self, date)

    def calendar(self):
        return _ORE.TermStructure_calendar(self)

    def referenceDate(self):
        return _ORE.TermStructure_referenceDate(self)

    def maxDate(self):
        return _ORE.TermStructure_maxDate(self)

    def maxTime(self):
        return _ORE.TermStructure_maxTime(self)

    def enableExtrapolation(self):
        return _ORE.TermStructure_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _ORE.TermStructure_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _ORE.TermStructure_allowsExtrapolation(self)
    __swig_destroy__ = _ORE.delete_TermStructure

# Register TermStructure in _ORE:
_ORE.TermStructure_swigregister(TermStructure)

class YieldTermStructure(TermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def discount(self, *args):
        return _ORE.YieldTermStructure_discount(self, *args)

    def zeroRate(self, *args):
        return _ORE.YieldTermStructure_zeroRate(self, *args)

    def forwardRate(self, *args):
        return _ORE.YieldTermStructure_forwardRate(self, *args)
    __swig_destroy__ = _ORE.delete_YieldTermStructure

# Register YieldTermStructure in _ORE:
_ORE.YieldTermStructure_swigregister(YieldTermStructure)

class YieldTermStructureHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.YieldTermStructureHandle_swiginit(self, _ORE.new_YieldTermStructureHandle(*args))

    def __deref__(self):
        return _ORE.YieldTermStructureHandle___deref__(self)

    def currentLink(self):
        return _ORE.YieldTermStructureHandle_currentLink(self)

    def __nonzero__(self):
        return _ORE.YieldTermStructureHandle___nonzero__(self)

    def __bool__(self):
        return _ORE.YieldTermStructureHandle___bool__(self)

    def asObservable(self):
        return _ORE.YieldTermStructureHandle_asObservable(self)
    __swig_destroy__ = _ORE.delete_YieldTermStructureHandle

    def discount(self, *args):
        return _ORE.YieldTermStructureHandle_discount(self, *args)

    def zeroRate(self, *args):
        return _ORE.YieldTermStructureHandle_zeroRate(self, *args)

    def forwardRate(self, *args):
        return _ORE.YieldTermStructureHandle_forwardRate(self, *args)

    def dayCounter(self):
        return _ORE.YieldTermStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _ORE.YieldTermStructureHandle_timeFromReference(self, date)

    def calendar(self):
        return _ORE.YieldTermStructureHandle_calendar(self)

    def referenceDate(self):
        return _ORE.YieldTermStructureHandle_referenceDate(self)

    def maxDate(self):
        return _ORE.YieldTermStructureHandle_maxDate(self)

    def maxTime(self):
        return _ORE.YieldTermStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        return _ORE.YieldTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _ORE.YieldTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _ORE.YieldTermStructureHandle_allowsExtrapolation(self)

# Register YieldTermStructureHandle in _ORE:
_ORE.YieldTermStructureHandle_swigregister(YieldTermStructureHandle)

class RelinkableYieldTermStructureHandle(YieldTermStructureHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.RelinkableYieldTermStructureHandle_swiginit(self, _ORE.new_RelinkableYieldTermStructureHandle(*args))

    def linkTo(self, arg2):
        return _ORE.RelinkableYieldTermStructureHandle_linkTo(self, arg2)

    def reset(self):
        return _ORE.RelinkableYieldTermStructureHandle_reset(self)
    __swig_destroy__ = _ORE.delete_RelinkableYieldTermStructureHandle

# Register RelinkableYieldTermStructureHandle in _ORE:
_ORE.RelinkableYieldTermStructureHandle_swigregister(RelinkableYieldTermStructureHandle)

class ImpliedTermStructure(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, curveHandle, referenceDate):
        _ORE.ImpliedTermStructure_swiginit(self, _ORE.new_ImpliedTermStructure(curveHandle, referenceDate))
    __swig_destroy__ = _ORE.delete_ImpliedTermStructure

# Register ImpliedTermStructure in _ORE:
_ORE.ImpliedTermStructure_swigregister(ImpliedTermStructure)

class ZeroSpreadedTermStructure(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ZeroSpreadedTermStructure_swiginit(self, _ORE.new_ZeroSpreadedTermStructure(*args))
    __swig_destroy__ = _ORE.delete_ZeroSpreadedTermStructure

# Register ZeroSpreadedTermStructure in _ORE:
_ORE.ZeroSpreadedTermStructure_swigregister(ZeroSpreadedTermStructure)

class ForwardSpreadedTermStructure(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, curveHandle, spreadHandle):
        _ORE.ForwardSpreadedTermStructure_swiginit(self, _ORE.new_ForwardSpreadedTermStructure(curveHandle, spreadHandle))
    __swig_destroy__ = _ORE.delete_ForwardSpreadedTermStructure

# Register ForwardSpreadedTermStructure in _ORE:
_ORE.ForwardSpreadedTermStructure_swigregister(ForwardSpreadedTermStructure)

class PiecewiseZeroSpreadedTermStructure(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.PiecewiseZeroSpreadedTermStructure_swiginit(self, _ORE.new_PiecewiseZeroSpreadedTermStructure(*args))
    __swig_destroy__ = _ORE.delete_PiecewiseZeroSpreadedTermStructure

# Register PiecewiseZeroSpreadedTermStructure in _ORE:
_ORE.PiecewiseZeroSpreadedTermStructure_swigregister(PiecewiseZeroSpreadedTermStructure)

class SpreadedLinearZeroInterpolatedTermStructure(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SpreadedLinearZeroInterpolatedTermStructure_swiginit(self, _ORE.new_SpreadedLinearZeroInterpolatedTermStructure(*args))
    __swig_destroy__ = _ORE.delete_SpreadedLinearZeroInterpolatedTermStructure

# Register SpreadedLinearZeroInterpolatedTermStructure in _ORE:
_ORE.SpreadedLinearZeroInterpolatedTermStructure_swigregister(SpreadedLinearZeroInterpolatedTermStructure)

class SpreadedBackwardFlatZeroInterpolatedTermStructure(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SpreadedBackwardFlatZeroInterpolatedTermStructure_swiginit(self, _ORE.new_SpreadedBackwardFlatZeroInterpolatedTermStructure(*args))
    __swig_destroy__ = _ORE.delete_SpreadedBackwardFlatZeroInterpolatedTermStructure

# Register SpreadedBackwardFlatZeroInterpolatedTermStructure in _ORE:
_ORE.SpreadedBackwardFlatZeroInterpolatedTermStructure_swigregister(SpreadedBackwardFlatZeroInterpolatedTermStructure)

class FlatForward(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FlatForward_swiginit(self, _ORE.new_FlatForward(*args))
    __swig_destroy__ = _ORE.delete_FlatForward

# Register FlatForward in _ORE:
_ORE.FlatForward_swigregister(FlatForward)

class UltimateForwardTermStructure(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, curveHandle, lastLiquidForwardRate, ultimateForwardRate, firstSmoothingPoint, alpha):
        _ORE.UltimateForwardTermStructure_swiginit(self, _ORE.new_UltimateForwardTermStructure(curveHandle, lastLiquidForwardRate, ultimateForwardRate, firstSmoothingPoint, alpha))
    __swig_destroy__ = _ORE.delete_UltimateForwardTermStructure

# Register UltimateForwardTermStructure in _ORE:
_ORE.UltimateForwardTermStructure_swigregister(UltimateForwardTermStructure)

class CompositeZeroYieldStructure(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CompositeZeroYieldStructure_swiginit(self, _ORE.new_CompositeZeroYieldStructure(*args))
    __swig_destroy__ = _ORE.delete_CompositeZeroYieldStructure

# Register CompositeZeroYieldStructure in _ORE:
_ORE.CompositeZeroYieldStructure_swigregister(CompositeZeroYieldStructure)

class QuantoTermStructure(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, underlyingDividendTS, riskFreeTS, foreignRiskFreeTS, underlyingBlackVolTS, strike, exchRateBlackVolTS, exchRateATMlevel, underlyingExchRateCorrelation):
        _ORE.QuantoTermStructure_swiginit(self, _ORE.new_QuantoTermStructure(underlyingDividendTS, riskFreeTS, foreignRiskFreeTS, underlyingBlackVolTS, strike, exchRateBlackVolTS, exchRateATMlevel, underlyingExchRateCorrelation))
    __swig_destroy__ = _ORE.delete_QuantoTermStructure

# Register QuantoTermStructure in _ORE:
_ORE.QuantoTermStructure_swigregister(QuantoTermStructure)

class RealTimeSeries(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.RealTimeSeries_swiginit(self, _ORE.new_RealTimeSeries(*args))

    def dates(self):
        return _ORE.RealTimeSeries_dates(self)

    def values(self):
        return _ORE.RealTimeSeries_values(self)

    def __len__(self):
        return _ORE.RealTimeSeries___len__(self)

    def __getitem__(self, d):
        return _ORE.RealTimeSeries___getitem__(self, d)

    def __setitem__(self, d, value):
        return _ORE.RealTimeSeries___setitem__(self, d, value)
    __swig_destroy__ = _ORE.delete_RealTimeSeries

# Register RealTimeSeries in _ORE:
_ORE.RealTimeSeries_swigregister(RealTimeSeries)

class IntervalPriceTimeSeries(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.IntervalPriceTimeSeries_swiginit(self, _ORE.new_IntervalPriceTimeSeries(*args))

    def dates(self):
        return _ORE.IntervalPriceTimeSeries_dates(self)

    def values(self):
        return _ORE.IntervalPriceTimeSeries_values(self)

    def __len__(self):
        return _ORE.IntervalPriceTimeSeries___len__(self)

    def __getitem__(self, d):
        return _ORE.IntervalPriceTimeSeries___getitem__(self, d)

    def __setitem__(self, d, value):
        return _ORE.IntervalPriceTimeSeries___setitem__(self, d, value)
    __swig_destroy__ = _ORE.delete_IntervalPriceTimeSeries

# Register IntervalPriceTimeSeries in _ORE:
_ORE.IntervalPriceTimeSeries_swigregister(IntervalPriceTimeSeries)

class IntervalPriceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.IntervalPriceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.IntervalPriceVector___nonzero__(self)

    def __bool__(self):
        return _ORE.IntervalPriceVector___bool__(self)

    def __len__(self):
        return _ORE.IntervalPriceVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.IntervalPriceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.IntervalPriceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.IntervalPriceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.IntervalPriceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.IntervalPriceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.IntervalPriceVector___setitem__(self, *args)

    def pop(self):
        return _ORE.IntervalPriceVector_pop(self)

    def append(self, x):
        return _ORE.IntervalPriceVector_append(self, x)

    def empty(self):
        return _ORE.IntervalPriceVector_empty(self)

    def size(self):
        return _ORE.IntervalPriceVector_size(self)

    def swap(self, v):
        return _ORE.IntervalPriceVector_swap(self, v)

    def begin(self):
        return _ORE.IntervalPriceVector_begin(self)

    def end(self):
        return _ORE.IntervalPriceVector_end(self)

    def rbegin(self):
        return _ORE.IntervalPriceVector_rbegin(self)

    def rend(self):
        return _ORE.IntervalPriceVector_rend(self)

    def clear(self):
        return _ORE.IntervalPriceVector_clear(self)

    def get_allocator(self):
        return _ORE.IntervalPriceVector_get_allocator(self)

    def pop_back(self):
        return _ORE.IntervalPriceVector_pop_back(self)

    def erase(self, *args):
        return _ORE.IntervalPriceVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.IntervalPriceVector_swiginit(self, _ORE.new_IntervalPriceVector(*args))

    def push_back(self, x):
        return _ORE.IntervalPriceVector_push_back(self, x)

    def front(self):
        return _ORE.IntervalPriceVector_front(self)

    def back(self):
        return _ORE.IntervalPriceVector_back(self)

    def assign(self, n, x):
        return _ORE.IntervalPriceVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.IntervalPriceVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.IntervalPriceVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.IntervalPriceVector_reserve(self, n)

    def capacity(self):
        return _ORE.IntervalPriceVector_capacity(self)
    __swig_destroy__ = _ORE.delete_IntervalPriceVector

# Register IntervalPriceVector in _ORE:
_ORE.IntervalPriceVector_swigregister(IntervalPriceVector)

class IntervalPrice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Open = _ORE.IntervalPrice_Open
    Close = _ORE.IntervalPrice_Close
    High = _ORE.IntervalPrice_High
    Low = _ORE.IntervalPrice_Low

    def __init__(self, arg2, arg3, arg4, arg5):
        _ORE.IntervalPrice_swiginit(self, _ORE.new_IntervalPrice(arg2, arg3, arg4, arg5))

    def setValue(self, arg2, arg3):
        return _ORE.IntervalPrice_setValue(self, arg2, arg3)

    def setValues(self, arg2, arg3, arg4, arg5):
        return _ORE.IntervalPrice_setValues(self, arg2, arg3, arg4, arg5)

    def value(self, t):
        return _ORE.IntervalPrice_value(self, t)

    def open(self):
        return _ORE.IntervalPrice_open(self)

    def close(self):
        return _ORE.IntervalPrice_close(self)

    def high(self):
        return _ORE.IntervalPrice_high(self)

    def low(self):
        return _ORE.IntervalPrice_low(self)

    @staticmethod
    def makeSeries(d, open, close, high, low):
        return _ORE.IntervalPrice_makeSeries(d, open, close, high, low)

    @staticmethod
    def extractValues(arg1, t):
        return _ORE.IntervalPrice_extractValues(arg1, t)

    @staticmethod
    def extractComponent(arg1, t):
        return _ORE.IntervalPrice_extractComponent(arg1, t)
    __swig_destroy__ = _ORE.delete_IntervalPrice

# Register IntervalPrice in _ORE:
_ORE.IntervalPrice_swigregister(IntervalPrice)

def IntervalPrice_makeSeries(d, open, close, high, low):
    return _ORE.IntervalPrice_makeSeries(d, open, close, high, low)

def IntervalPrice_extractValues(arg1, t):
    return _ORE.IntervalPrice_extractValues(arg1, t)

def IntervalPrice_extractComponent(arg1, t):
    return _ORE.IntervalPrice_extractComponent(arg1, t)

class IndexManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def instance():
        return _ORE.IndexManager_instance()

    def setHistory(self, name, fixings):
        return _ORE.IndexManager_setHistory(self, name, fixings)

    def getHistory(self, name):
        return _ORE.IndexManager_getHistory(self, name)

    def hasHistory(self, name):
        return _ORE.IndexManager_hasHistory(self, name)

    def histories(self):
        return _ORE.IndexManager_histories(self)

    def clearHistory(self, name):
        return _ORE.IndexManager_clearHistory(self, name)

    def clearHistories(self):
        return _ORE.IndexManager_clearHistories(self)

    def hasHistoricalFixing(self, name, fixingDate):
        return _ORE.IndexManager_hasHistoricalFixing(self, name, fixingDate)
    __swig_destroy__ = _ORE.delete_IndexManager

# Register IndexManager in _ORE:
_ORE.IndexManager_swigregister(IndexManager)

def IndexManager_instance():
    return _ORE.IndexManager_instance()

class Index(Observable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def name(self):
        return _ORE.Index_name(self)

    def fixingCalendar(self):
        return _ORE.Index_fixingCalendar(self)

    def isValidFixingDate(self, fixingDate):
        return _ORE.Index_isValidFixingDate(self, fixingDate)

    def hasHistoricalFixing(self, fixingDate):
        return _ORE.Index_hasHistoricalFixing(self, fixingDate)

    def fixing(self, fixingDate, forecastTodaysFixing=False):
        return _ORE.Index_fixing(self, fixingDate, forecastTodaysFixing)

    def addFixing(self, fixingDate, fixing, forceOverwrite=False):
        return _ORE.Index_addFixing(self, fixingDate, fixing, forceOverwrite)

    def timeSeries(self):
        return _ORE.Index_timeSeries(self)

    def clearFixings(self):
        return _ORE.Index_clearFixings(self)

    def addFixings(self, fixingDates, fixings, forceOverwrite=False):
        return _ORE.Index_addFixings(self, fixingDates, fixings, forceOverwrite)

    def __str__(self):
        return _ORE.Index___str__(self)
    __swig_destroy__ = _ORE.delete_Index

# Register Index in _ORE:
_ORE.Index_swigregister(Index)

class InterestRateIndex(Index):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def familyName(self):
        return _ORE.InterestRateIndex_familyName(self)

    def tenor(self):
        return _ORE.InterestRateIndex_tenor(self)

    def fixingDays(self):
        return _ORE.InterestRateIndex_fixingDays(self)

    def fixingDate(self, valueDate):
        return _ORE.InterestRateIndex_fixingDate(self, valueDate)

    def currency(self):
        return _ORE.InterestRateIndex_currency(self)

    def dayCounter(self):
        return _ORE.InterestRateIndex_dayCounter(self)

    def maturityDate(self, valueDate):
        return _ORE.InterestRateIndex_maturityDate(self, valueDate)

    def valueDate(self, fixingDate):
        return _ORE.InterestRateIndex_valueDate(self, fixingDate)
    __swig_destroy__ = _ORE.delete_InterestRateIndex

# Register InterestRateIndex in _ORE:
_ORE.InterestRateIndex_swigregister(InterestRateIndex)

class IborIndex(InterestRateIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.IborIndex_swiginit(self, _ORE.new_IborIndex(*args))

    def businessDayConvention(self):
        return _ORE.IborIndex_businessDayConvention(self)

    def endOfMonth(self):
        return _ORE.IborIndex_endOfMonth(self)

    def forwardingTermStructure(self):
        return _ORE.IborIndex_forwardingTermStructure(self)

    def clone(self, arg2):
        return _ORE.IborIndex_clone(self, arg2)
    __swig_destroy__ = _ORE.delete_IborIndex

# Register IborIndex in _ORE:
_ORE.IborIndex_swigregister(IborIndex)


def as_iborindex(index):
    return _ORE.as_iborindex(index)
class OvernightIndex(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.OvernightIndex_swiginit(self, _ORE.new_OvernightIndex(*args))

    def clone(self, h):
        return _ORE.OvernightIndex_clone(self, h)
    __swig_destroy__ = _ORE.delete_OvernightIndex

# Register OvernightIndex in _ORE:
_ORE.OvernightIndex_swigregister(OvernightIndex)

class Libor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Libor_swiginit(self, _ORE.new_Libor(*args))
    __swig_destroy__ = _ORE.delete_Libor

# Register Libor in _ORE:
_ORE.Libor_swigregister(Libor)

class DailyTenorLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.DailyTenorLibor_swiginit(self, _ORE.new_DailyTenorLibor(*args))
    __swig_destroy__ = _ORE.delete_DailyTenorLibor

# Register DailyTenorLibor in _ORE:
_ORE.DailyTenorLibor_swigregister(DailyTenorLibor)

class SwapIndex(InterestRateIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SwapIndex_swiginit(self, _ORE.new_SwapIndex(*args))

    def fixedLegTenor(self):
        return _ORE.SwapIndex_fixedLegTenor(self)

    def fixedLegConvention(self):
        return _ORE.SwapIndex_fixedLegConvention(self)

    def iborIndex(self):
        return _ORE.SwapIndex_iborIndex(self)

    def forwardingTermStructure(self):
        return _ORE.SwapIndex_forwardingTermStructure(self)

    def discountingTermStructure(self):
        return _ORE.SwapIndex_discountingTermStructure(self)

    def clone(self, *args):
        return _ORE.SwapIndex_clone(self, *args)
    __swig_destroy__ = _ORE.delete_SwapIndex

# Register SwapIndex in _ORE:
_ORE.SwapIndex_swigregister(SwapIndex)

class SwapIndexVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.SwapIndexVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.SwapIndexVector___nonzero__(self)

    def __bool__(self):
        return _ORE.SwapIndexVector___bool__(self)

    def __len__(self):
        return _ORE.SwapIndexVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.SwapIndexVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.SwapIndexVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.SwapIndexVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.SwapIndexVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.SwapIndexVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.SwapIndexVector___setitem__(self, *args)

    def pop(self):
        return _ORE.SwapIndexVector_pop(self)

    def append(self, x):
        return _ORE.SwapIndexVector_append(self, x)

    def empty(self):
        return _ORE.SwapIndexVector_empty(self)

    def size(self):
        return _ORE.SwapIndexVector_size(self)

    def swap(self, v):
        return _ORE.SwapIndexVector_swap(self, v)

    def begin(self):
        return _ORE.SwapIndexVector_begin(self)

    def end(self):
        return _ORE.SwapIndexVector_end(self)

    def rbegin(self):
        return _ORE.SwapIndexVector_rbegin(self)

    def rend(self):
        return _ORE.SwapIndexVector_rend(self)

    def clear(self):
        return _ORE.SwapIndexVector_clear(self)

    def get_allocator(self):
        return _ORE.SwapIndexVector_get_allocator(self)

    def pop_back(self):
        return _ORE.SwapIndexVector_pop_back(self)

    def erase(self, *args):
        return _ORE.SwapIndexVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.SwapIndexVector_swiginit(self, _ORE.new_SwapIndexVector(*args))

    def push_back(self, x):
        return _ORE.SwapIndexVector_push_back(self, x)

    def front(self):
        return _ORE.SwapIndexVector_front(self)

    def back(self):
        return _ORE.SwapIndexVector_back(self)

    def assign(self, n, x):
        return _ORE.SwapIndexVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.SwapIndexVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.SwapIndexVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.SwapIndexVector_reserve(self, n)

    def capacity(self):
        return _ORE.SwapIndexVector_capacity(self)
    __swig_destroy__ = _ORE.delete_SwapIndexVector

# Register SwapIndexVector in _ORE:
_ORE.SwapIndexVector_swigregister(SwapIndexVector)


def as_swap_index(index):
    return _ORE.as_swap_index(index)
class SwapSpreadIndex(InterestRateIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, familyName, swapIndex1, swapIndex2, gearing1=1.0, gearing2=-1.0):
        _ORE.SwapSpreadIndex_swiginit(self, _ORE.new_SwapSpreadIndex(familyName, swapIndex1, swapIndex2, gearing1, gearing2))

    def forecastFixing(self, fixingDate):
        return _ORE.SwapSpreadIndex_forecastFixing(self, fixingDate)

    def pastFixing(self, fixingDate):
        return _ORE.SwapSpreadIndex_pastFixing(self, fixingDate)

    def swapIndex1(self):
        return _ORE.SwapSpreadIndex_swapIndex1(self)

    def swapIndex2(self):
        return _ORE.SwapSpreadIndex_swapIndex2(self)

    def gearing1(self):
        return _ORE.SwapSpreadIndex_gearing1(self)

    def gearing2(self):
        return _ORE.SwapSpreadIndex_gearing2(self)
    __swig_destroy__ = _ORE.delete_SwapSpreadIndex

# Register SwapSpreadIndex in _ORE:
_ORE.SwapSpreadIndex_swigregister(SwapSpreadIndex)

class EquityIndex(Index):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EquityIndex_swiginit(self, _ORE.new_EquityIndex(*args))

    def equityInterestRateCurve(self):
        return _ORE.EquityIndex_equityInterestRateCurve(self)

    def equityDividendCurve(self):
        return _ORE.EquityIndex_equityDividendCurve(self)

    def spot(self):
        return _ORE.EquityIndex_spot(self)

    def clone(self, interest, dividend, spot):
        return _ORE.EquityIndex_clone(self, interest, dividend, spot)
    __swig_destroy__ = _ORE.delete_EquityIndex

# Register EquityIndex in _ORE:
_ORE.EquityIndex_swigregister(EquityIndex)

class AUDLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.AUDLibor_swiginit(self, _ORE.new_AUDLibor(*args))
    __swig_destroy__ = _ORE.delete_AUDLibor

# Register AUDLibor in _ORE:
_ORE.AUDLibor_swigregister(AUDLibor)

class CADLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CADLibor_swiginit(self, _ORE.new_CADLibor(*args))
    __swig_destroy__ = _ORE.delete_CADLibor

# Register CADLibor in _ORE:
_ORE.CADLibor_swigregister(CADLibor)

class CADLiborON(DailyTenorLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CADLiborON_swiginit(self, _ORE.new_CADLiborON(*args))
    __swig_destroy__ = _ORE.delete_CADLiborON

# Register CADLiborON in _ORE:
_ORE.CADLiborON_swigregister(CADLiborON)

class Cdor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Cdor_swiginit(self, _ORE.new_Cdor(*args))
    __swig_destroy__ = _ORE.delete_Cdor

# Register Cdor in _ORE:
_ORE.Cdor_swigregister(Cdor)

class CHFLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CHFLibor_swiginit(self, _ORE.new_CHFLibor(*args))
    __swig_destroy__ = _ORE.delete_CHFLibor

# Register CHFLibor in _ORE:
_ORE.CHFLibor_swigregister(CHFLibor)

class DKKLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.DKKLibor_swiginit(self, _ORE.new_DKKLibor(*args))
    __swig_destroy__ = _ORE.delete_DKKLibor

# Register DKKLibor in _ORE:
_ORE.DKKLibor_swigregister(DKKLibor)

class Bbsw(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Bbsw_swiginit(self, _ORE.new_Bbsw(*args))
    __swig_destroy__ = _ORE.delete_Bbsw

# Register Bbsw in _ORE:
_ORE.Bbsw_swigregister(Bbsw)

class Bbsw1M(Bbsw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Bbsw1M_swiginit(self, _ORE.new_Bbsw1M(*args))
    __swig_destroy__ = _ORE.delete_Bbsw1M

# Register Bbsw1M in _ORE:
_ORE.Bbsw1M_swigregister(Bbsw1M)

class Bbsw2M(Bbsw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Bbsw2M_swiginit(self, _ORE.new_Bbsw2M(*args))
    __swig_destroy__ = _ORE.delete_Bbsw2M

# Register Bbsw2M in _ORE:
_ORE.Bbsw2M_swigregister(Bbsw2M)

class Bbsw3M(Bbsw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Bbsw3M_swiginit(self, _ORE.new_Bbsw3M(*args))
    __swig_destroy__ = _ORE.delete_Bbsw3M

# Register Bbsw3M in _ORE:
_ORE.Bbsw3M_swigregister(Bbsw3M)

class Bbsw4M(Bbsw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Bbsw4M_swiginit(self, _ORE.new_Bbsw4M(*args))
    __swig_destroy__ = _ORE.delete_Bbsw4M

# Register Bbsw4M in _ORE:
_ORE.Bbsw4M_swigregister(Bbsw4M)

class Bbsw5M(Bbsw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Bbsw5M_swiginit(self, _ORE.new_Bbsw5M(*args))
    __swig_destroy__ = _ORE.delete_Bbsw5M

# Register Bbsw5M in _ORE:
_ORE.Bbsw5M_swigregister(Bbsw5M)

class Bbsw6M(Bbsw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Bbsw6M_swiginit(self, _ORE.new_Bbsw6M(*args))
    __swig_destroy__ = _ORE.delete_Bbsw6M

# Register Bbsw6M in _ORE:
_ORE.Bbsw6M_swigregister(Bbsw6M)

class Bkbm(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Bkbm_swiginit(self, _ORE.new_Bkbm(*args))
    __swig_destroy__ = _ORE.delete_Bkbm

# Register Bkbm in _ORE:
_ORE.Bkbm_swigregister(Bkbm)

class Bkbm1M(Bkbm):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Bkbm1M_swiginit(self, _ORE.new_Bkbm1M(*args))
    __swig_destroy__ = _ORE.delete_Bkbm1M

# Register Bkbm1M in _ORE:
_ORE.Bkbm1M_swigregister(Bkbm1M)

class Bkbm2M(Bkbm):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Bkbm2M_swiginit(self, _ORE.new_Bkbm2M(*args))
    __swig_destroy__ = _ORE.delete_Bkbm2M

# Register Bkbm2M in _ORE:
_ORE.Bkbm2M_swigregister(Bkbm2M)

class Bkbm3M(Bkbm):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Bkbm3M_swiginit(self, _ORE.new_Bkbm3M(*args))
    __swig_destroy__ = _ORE.delete_Bkbm3M

# Register Bkbm3M in _ORE:
_ORE.Bkbm3M_swigregister(Bkbm3M)

class Bkbm4M(Bkbm):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Bkbm4M_swiginit(self, _ORE.new_Bkbm4M(*args))
    __swig_destroy__ = _ORE.delete_Bkbm4M

# Register Bkbm4M in _ORE:
_ORE.Bkbm4M_swigregister(Bkbm4M)

class Bkbm5M(Bkbm):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Bkbm5M_swiginit(self, _ORE.new_Bkbm5M(*args))
    __swig_destroy__ = _ORE.delete_Bkbm5M

# Register Bkbm5M in _ORE:
_ORE.Bkbm5M_swigregister(Bkbm5M)

class Bkbm6M(Bkbm):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Bkbm6M_swiginit(self, _ORE.new_Bkbm6M(*args))
    __swig_destroy__ = _ORE.delete_Bkbm6M

# Register Bkbm6M in _ORE:
_ORE.Bkbm6M_swigregister(Bkbm6M)

class Euribor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor_swiginit(self, _ORE.new_Euribor(*args))
    __swig_destroy__ = _ORE.delete_Euribor

# Register Euribor in _ORE:
_ORE.Euribor_swigregister(Euribor)

class EuriborSW(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EuriborSW_swiginit(self, _ORE.new_EuriborSW(*args))
    __swig_destroy__ = _ORE.delete_EuriborSW

# Register EuriborSW in _ORE:
_ORE.EuriborSW_swigregister(EuriborSW)

class Euribor2W(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor2W_swiginit(self, _ORE.new_Euribor2W(*args))
    __swig_destroy__ = _ORE.delete_Euribor2W

# Register Euribor2W in _ORE:
_ORE.Euribor2W_swigregister(Euribor2W)

class Euribor3W(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor3W_swiginit(self, _ORE.new_Euribor3W(*args))
    __swig_destroy__ = _ORE.delete_Euribor3W

# Register Euribor3W in _ORE:
_ORE.Euribor3W_swigregister(Euribor3W)

class Euribor1M(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor1M_swiginit(self, _ORE.new_Euribor1M(*args))
    __swig_destroy__ = _ORE.delete_Euribor1M

# Register Euribor1M in _ORE:
_ORE.Euribor1M_swigregister(Euribor1M)

class Euribor2M(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor2M_swiginit(self, _ORE.new_Euribor2M(*args))
    __swig_destroy__ = _ORE.delete_Euribor2M

# Register Euribor2M in _ORE:
_ORE.Euribor2M_swigregister(Euribor2M)

class Euribor3M(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor3M_swiginit(self, _ORE.new_Euribor3M(*args))
    __swig_destroy__ = _ORE.delete_Euribor3M

# Register Euribor3M in _ORE:
_ORE.Euribor3M_swigregister(Euribor3M)

class Euribor4M(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor4M_swiginit(self, _ORE.new_Euribor4M(*args))
    __swig_destroy__ = _ORE.delete_Euribor4M

# Register Euribor4M in _ORE:
_ORE.Euribor4M_swigregister(Euribor4M)

class Euribor5M(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor5M_swiginit(self, _ORE.new_Euribor5M(*args))
    __swig_destroy__ = _ORE.delete_Euribor5M

# Register Euribor5M in _ORE:
_ORE.Euribor5M_swigregister(Euribor5M)

class Euribor6M(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor6M_swiginit(self, _ORE.new_Euribor6M(*args))
    __swig_destroy__ = _ORE.delete_Euribor6M

# Register Euribor6M in _ORE:
_ORE.Euribor6M_swigregister(Euribor6M)

class Euribor7M(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor7M_swiginit(self, _ORE.new_Euribor7M(*args))
    __swig_destroy__ = _ORE.delete_Euribor7M

# Register Euribor7M in _ORE:
_ORE.Euribor7M_swigregister(Euribor7M)

class Euribor8M(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor8M_swiginit(self, _ORE.new_Euribor8M(*args))
    __swig_destroy__ = _ORE.delete_Euribor8M

# Register Euribor8M in _ORE:
_ORE.Euribor8M_swigregister(Euribor8M)

class Euribor9M(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor9M_swiginit(self, _ORE.new_Euribor9M(*args))
    __swig_destroy__ = _ORE.delete_Euribor9M

# Register Euribor9M in _ORE:
_ORE.Euribor9M_swigregister(Euribor9M)

class Euribor10M(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor10M_swiginit(self, _ORE.new_Euribor10M(*args))
    __swig_destroy__ = _ORE.delete_Euribor10M

# Register Euribor10M in _ORE:
_ORE.Euribor10M_swigregister(Euribor10M)

class Euribor11M(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor11M_swiginit(self, _ORE.new_Euribor11M(*args))
    __swig_destroy__ = _ORE.delete_Euribor11M

# Register Euribor11M in _ORE:
_ORE.Euribor11M_swigregister(Euribor11M)

class Euribor1Y(Euribor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor1Y_swiginit(self, _ORE.new_Euribor1Y(*args))
    __swig_destroy__ = _ORE.delete_Euribor1Y

# Register Euribor1Y in _ORE:
_ORE.Euribor1Y_swigregister(Euribor1Y)

class Euribor365(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor365_swiginit(self, _ORE.new_Euribor365(*args))
    __swig_destroy__ = _ORE.delete_Euribor365

# Register Euribor365 in _ORE:
_ORE.Euribor365_swigregister(Euribor365)

class Euribor365_SW(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor365_SW_swiginit(self, _ORE.new_Euribor365_SW(*args))
    __swig_destroy__ = _ORE.delete_Euribor365_SW

# Register Euribor365_SW in _ORE:
_ORE.Euribor365_SW_swigregister(Euribor365_SW)

class Euribor365_2W(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor365_2W_swiginit(self, _ORE.new_Euribor365_2W(*args))
    __swig_destroy__ = _ORE.delete_Euribor365_2W

# Register Euribor365_2W in _ORE:
_ORE.Euribor365_2W_swigregister(Euribor365_2W)

class Euribor365_3W(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor365_3W_swiginit(self, _ORE.new_Euribor365_3W(*args))
    __swig_destroy__ = _ORE.delete_Euribor365_3W

# Register Euribor365_3W in _ORE:
_ORE.Euribor365_3W_swigregister(Euribor365_3W)

class Euribor365_1M(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor365_1M_swiginit(self, _ORE.new_Euribor365_1M(*args))
    __swig_destroy__ = _ORE.delete_Euribor365_1M

# Register Euribor365_1M in _ORE:
_ORE.Euribor365_1M_swigregister(Euribor365_1M)

class Euribor365_2M(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor365_2M_swiginit(self, _ORE.new_Euribor365_2M(*args))
    __swig_destroy__ = _ORE.delete_Euribor365_2M

# Register Euribor365_2M in _ORE:
_ORE.Euribor365_2M_swigregister(Euribor365_2M)

class Euribor365_3M(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor365_3M_swiginit(self, _ORE.new_Euribor365_3M(*args))
    __swig_destroy__ = _ORE.delete_Euribor365_3M

# Register Euribor365_3M in _ORE:
_ORE.Euribor365_3M_swigregister(Euribor365_3M)

class Euribor365_4M(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor365_4M_swiginit(self, _ORE.new_Euribor365_4M(*args))
    __swig_destroy__ = _ORE.delete_Euribor365_4M

# Register Euribor365_4M in _ORE:
_ORE.Euribor365_4M_swigregister(Euribor365_4M)

class Euribor365_5M(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor365_5M_swiginit(self, _ORE.new_Euribor365_5M(*args))
    __swig_destroy__ = _ORE.delete_Euribor365_5M

# Register Euribor365_5M in _ORE:
_ORE.Euribor365_5M_swigregister(Euribor365_5M)

class Euribor365_6M(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor365_6M_swiginit(self, _ORE.new_Euribor365_6M(*args))
    __swig_destroy__ = _ORE.delete_Euribor365_6M

# Register Euribor365_6M in _ORE:
_ORE.Euribor365_6M_swigregister(Euribor365_6M)

class Euribor365_7M(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor365_7M_swiginit(self, _ORE.new_Euribor365_7M(*args))
    __swig_destroy__ = _ORE.delete_Euribor365_7M

# Register Euribor365_7M in _ORE:
_ORE.Euribor365_7M_swigregister(Euribor365_7M)

class Euribor365_8M(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor365_8M_swiginit(self, _ORE.new_Euribor365_8M(*args))
    __swig_destroy__ = _ORE.delete_Euribor365_8M

# Register Euribor365_8M in _ORE:
_ORE.Euribor365_8M_swigregister(Euribor365_8M)

class Euribor365_9M(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor365_9M_swiginit(self, _ORE.new_Euribor365_9M(*args))
    __swig_destroy__ = _ORE.delete_Euribor365_9M

# Register Euribor365_9M in _ORE:
_ORE.Euribor365_9M_swigregister(Euribor365_9M)

class Euribor365_10M(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor365_10M_swiginit(self, _ORE.new_Euribor365_10M(*args))
    __swig_destroy__ = _ORE.delete_Euribor365_10M

# Register Euribor365_10M in _ORE:
_ORE.Euribor365_10M_swigregister(Euribor365_10M)

class Euribor365_11M(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor365_11M_swiginit(self, _ORE.new_Euribor365_11M(*args))
    __swig_destroy__ = _ORE.delete_Euribor365_11M

# Register Euribor365_11M in _ORE:
_ORE.Euribor365_11M_swigregister(Euribor365_11M)

class Euribor365_1Y(Euribor365):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Euribor365_1Y_swiginit(self, _ORE.new_Euribor365_1Y(*args))
    __swig_destroy__ = _ORE.delete_Euribor365_1Y

# Register Euribor365_1Y in _ORE:
_ORE.Euribor365_1Y_swigregister(Euribor365_1Y)

class EURLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EURLibor_swiginit(self, _ORE.new_EURLibor(*args))
    __swig_destroy__ = _ORE.delete_EURLibor

# Register EURLibor in _ORE:
_ORE.EURLibor_swigregister(EURLibor)

class EURLiborSW(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EURLiborSW_swiginit(self, _ORE.new_EURLiborSW(*args))
    __swig_destroy__ = _ORE.delete_EURLiborSW

# Register EURLiborSW in _ORE:
_ORE.EURLiborSW_swigregister(EURLiborSW)

class EURLibor2W(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EURLibor2W_swiginit(self, _ORE.new_EURLibor2W(*args))
    __swig_destroy__ = _ORE.delete_EURLibor2W

# Register EURLibor2W in _ORE:
_ORE.EURLibor2W_swigregister(EURLibor2W)

class EURLibor1M(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EURLibor1M_swiginit(self, _ORE.new_EURLibor1M(*args))
    __swig_destroy__ = _ORE.delete_EURLibor1M

# Register EURLibor1M in _ORE:
_ORE.EURLibor1M_swigregister(EURLibor1M)

class EURLibor2M(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EURLibor2M_swiginit(self, _ORE.new_EURLibor2M(*args))
    __swig_destroy__ = _ORE.delete_EURLibor2M

# Register EURLibor2M in _ORE:
_ORE.EURLibor2M_swigregister(EURLibor2M)

class EURLibor3M(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EURLibor3M_swiginit(self, _ORE.new_EURLibor3M(*args))
    __swig_destroy__ = _ORE.delete_EURLibor3M

# Register EURLibor3M in _ORE:
_ORE.EURLibor3M_swigregister(EURLibor3M)

class EURLibor4M(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EURLibor4M_swiginit(self, _ORE.new_EURLibor4M(*args))
    __swig_destroy__ = _ORE.delete_EURLibor4M

# Register EURLibor4M in _ORE:
_ORE.EURLibor4M_swigregister(EURLibor4M)

class EURLibor5M(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EURLibor5M_swiginit(self, _ORE.new_EURLibor5M(*args))
    __swig_destroy__ = _ORE.delete_EURLibor5M

# Register EURLibor5M in _ORE:
_ORE.EURLibor5M_swigregister(EURLibor5M)

class EURLibor6M(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EURLibor6M_swiginit(self, _ORE.new_EURLibor6M(*args))
    __swig_destroy__ = _ORE.delete_EURLibor6M

# Register EURLibor6M in _ORE:
_ORE.EURLibor6M_swigregister(EURLibor6M)

class EURLibor7M(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EURLibor7M_swiginit(self, _ORE.new_EURLibor7M(*args))
    __swig_destroy__ = _ORE.delete_EURLibor7M

# Register EURLibor7M in _ORE:
_ORE.EURLibor7M_swigregister(EURLibor7M)

class EURLibor8M(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EURLibor8M_swiginit(self, _ORE.new_EURLibor8M(*args))
    __swig_destroy__ = _ORE.delete_EURLibor8M

# Register EURLibor8M in _ORE:
_ORE.EURLibor8M_swigregister(EURLibor8M)

class EURLibor9M(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EURLibor9M_swiginit(self, _ORE.new_EURLibor9M(*args))
    __swig_destroy__ = _ORE.delete_EURLibor9M

# Register EURLibor9M in _ORE:
_ORE.EURLibor9M_swigregister(EURLibor9M)

class EURLibor10M(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EURLibor10M_swiginit(self, _ORE.new_EURLibor10M(*args))
    __swig_destroy__ = _ORE.delete_EURLibor10M

# Register EURLibor10M in _ORE:
_ORE.EURLibor10M_swigregister(EURLibor10M)

class EURLibor11M(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EURLibor11M_swiginit(self, _ORE.new_EURLibor11M(*args))
    __swig_destroy__ = _ORE.delete_EURLibor11M

# Register EURLibor11M in _ORE:
_ORE.EURLibor11M_swigregister(EURLibor11M)

class EURLibor1Y(EURLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EURLibor1Y_swiginit(self, _ORE.new_EURLibor1Y(*args))
    __swig_destroy__ = _ORE.delete_EURLibor1Y

# Register EURLibor1Y in _ORE:
_ORE.EURLibor1Y_swigregister(EURLibor1Y)

class GBPLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.GBPLibor_swiginit(self, _ORE.new_GBPLibor(*args))
    __swig_destroy__ = _ORE.delete_GBPLibor

# Register GBPLibor in _ORE:
_ORE.GBPLibor_swigregister(GBPLibor)

class GBPLiborON(DailyTenorLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.GBPLiborON_swiginit(self, _ORE.new_GBPLiborON(*args))
    __swig_destroy__ = _ORE.delete_GBPLiborON

# Register GBPLiborON in _ORE:
_ORE.GBPLiborON_swigregister(GBPLiborON)

class Jibar(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Jibar_swiginit(self, _ORE.new_Jibar(*args))
    __swig_destroy__ = _ORE.delete_Jibar

# Register Jibar in _ORE:
_ORE.Jibar_swigregister(Jibar)

class JPYLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.JPYLibor_swiginit(self, _ORE.new_JPYLibor(*args))
    __swig_destroy__ = _ORE.delete_JPYLibor

# Register JPYLibor in _ORE:
_ORE.JPYLibor_swigregister(JPYLibor)

class Mosprime(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Mosprime_swiginit(self, _ORE.new_Mosprime(*args))
    __swig_destroy__ = _ORE.delete_Mosprime

# Register Mosprime in _ORE:
_ORE.Mosprime_swigregister(Mosprime)

class NZDLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.NZDLibor_swiginit(self, _ORE.new_NZDLibor(*args))
    __swig_destroy__ = _ORE.delete_NZDLibor

# Register NZDLibor in _ORE:
_ORE.NZDLibor_swigregister(NZDLibor)

class Pribor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Pribor_swiginit(self, _ORE.new_Pribor(*args))
    __swig_destroy__ = _ORE.delete_Pribor

# Register Pribor in _ORE:
_ORE.Pribor_swigregister(Pribor)

class Robor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Robor_swiginit(self, _ORE.new_Robor(*args))
    __swig_destroy__ = _ORE.delete_Robor

# Register Robor in _ORE:
_ORE.Robor_swigregister(Robor)

class SEKLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SEKLibor_swiginit(self, _ORE.new_SEKLibor(*args))
    __swig_destroy__ = _ORE.delete_SEKLibor

# Register SEKLibor in _ORE:
_ORE.SEKLibor_swigregister(SEKLibor)

class Shibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Shibor_swiginit(self, _ORE.new_Shibor(*args))
    __swig_destroy__ = _ORE.delete_Shibor

# Register Shibor in _ORE:
_ORE.Shibor_swigregister(Shibor)

class Tibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Tibor_swiginit(self, _ORE.new_Tibor(*args))
    __swig_destroy__ = _ORE.delete_Tibor

# Register Tibor in _ORE:
_ORE.Tibor_swigregister(Tibor)

class THBFIX(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.THBFIX_swiginit(self, _ORE.new_THBFIX(*args))
    __swig_destroy__ = _ORE.delete_THBFIX

# Register THBFIX in _ORE:
_ORE.THBFIX_swigregister(THBFIX)

class TRLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.TRLibor_swiginit(self, _ORE.new_TRLibor(*args))
    __swig_destroy__ = _ORE.delete_TRLibor

# Register TRLibor in _ORE:
_ORE.TRLibor_swigregister(TRLibor)

class USDLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.USDLibor_swiginit(self, _ORE.new_USDLibor(*args))
    __swig_destroy__ = _ORE.delete_USDLibor

# Register USDLibor in _ORE:
_ORE.USDLibor_swigregister(USDLibor)

class USDLiborON(DailyTenorLibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.USDLiborON_swiginit(self, _ORE.new_USDLiborON(*args))
    __swig_destroy__ = _ORE.delete_USDLiborON

# Register USDLiborON in _ORE:
_ORE.USDLiborON_swigregister(USDLiborON)

class Wibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Wibor_swiginit(self, _ORE.new_Wibor(*args))
    __swig_destroy__ = _ORE.delete_Wibor

# Register Wibor in _ORE:
_ORE.Wibor_swigregister(Wibor)

class Zibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Zibor_swiginit(self, _ORE.new_Zibor(*args))
    __swig_destroy__ = _ORE.delete_Zibor

# Register Zibor in _ORE:
_ORE.Zibor_swigregister(Zibor)

class Aonia(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Aonia_swiginit(self, _ORE.new_Aonia(*args))
    __swig_destroy__ = _ORE.delete_Aonia

# Register Aonia in _ORE:
_ORE.Aonia_swigregister(Aonia)

class Corra(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Corra_swiginit(self, _ORE.new_Corra(*args))
    __swig_destroy__ = _ORE.delete_Corra

# Register Corra in _ORE:
_ORE.Corra_swigregister(Corra)

class Destr(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Destr_swiginit(self, _ORE.new_Destr(*args))
    __swig_destroy__ = _ORE.delete_Destr

# Register Destr in _ORE:
_ORE.Destr_swigregister(Destr)

class Eonia(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Eonia_swiginit(self, _ORE.new_Eonia(*args))
    __swig_destroy__ = _ORE.delete_Eonia

# Register Eonia in _ORE:
_ORE.Eonia_swigregister(Eonia)

class Estr(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Estr_swiginit(self, _ORE.new_Estr(*args))
    __swig_destroy__ = _ORE.delete_Estr

# Register Estr in _ORE:
_ORE.Estr_swigregister(Estr)

class FedFunds(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FedFunds_swiginit(self, _ORE.new_FedFunds(*args))
    __swig_destroy__ = _ORE.delete_FedFunds

# Register FedFunds in _ORE:
_ORE.FedFunds_swigregister(FedFunds)

class Nzocr(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Nzocr_swiginit(self, _ORE.new_Nzocr(*args))
    __swig_destroy__ = _ORE.delete_Nzocr

# Register Nzocr in _ORE:
_ORE.Nzocr_swigregister(Nzocr)

class Sofr(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Sofr_swiginit(self, _ORE.new_Sofr(*args))
    __swig_destroy__ = _ORE.delete_Sofr

# Register Sofr in _ORE:
_ORE.Sofr_swigregister(Sofr)

class Sonia(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Sonia_swiginit(self, _ORE.new_Sonia(*args))
    __swig_destroy__ = _ORE.delete_Sonia

# Register Sonia in _ORE:
_ORE.Sonia_swigregister(Sonia)

class Swestr(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Swestr_swiginit(self, _ORE.new_Swestr(*args))
    __swig_destroy__ = _ORE.delete_Swestr

# Register Swestr in _ORE:
_ORE.Swestr_swigregister(Swestr)

class EuriborSwapIsdaFixA(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EuriborSwapIsdaFixA_swiginit(self, _ORE.new_EuriborSwapIsdaFixA(*args))
    __swig_destroy__ = _ORE.delete_EuriborSwapIsdaFixA

# Register EuriborSwapIsdaFixA in _ORE:
_ORE.EuriborSwapIsdaFixA_swigregister(EuriborSwapIsdaFixA)

class EuriborSwapIsdaFixB(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EuriborSwapIsdaFixB_swiginit(self, _ORE.new_EuriborSwapIsdaFixB(*args))
    __swig_destroy__ = _ORE.delete_EuriborSwapIsdaFixB

# Register EuriborSwapIsdaFixB in _ORE:
_ORE.EuriborSwapIsdaFixB_swigregister(EuriborSwapIsdaFixB)

class EuriborSwapIfrFix(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EuriborSwapIfrFix_swiginit(self, _ORE.new_EuriborSwapIfrFix(*args))
    __swig_destroy__ = _ORE.delete_EuriborSwapIfrFix

# Register EuriborSwapIfrFix in _ORE:
_ORE.EuriborSwapIfrFix_swigregister(EuriborSwapIfrFix)

class EurLiborSwapIsdaFixA(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EurLiborSwapIsdaFixA_swiginit(self, _ORE.new_EurLiborSwapIsdaFixA(*args))
    __swig_destroy__ = _ORE.delete_EurLiborSwapIsdaFixA

# Register EurLiborSwapIsdaFixA in _ORE:
_ORE.EurLiborSwapIsdaFixA_swigregister(EurLiborSwapIsdaFixA)

class EurLiborSwapIsdaFixB(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EurLiborSwapIsdaFixB_swiginit(self, _ORE.new_EurLiborSwapIsdaFixB(*args))
    __swig_destroy__ = _ORE.delete_EurLiborSwapIsdaFixB

# Register EurLiborSwapIsdaFixB in _ORE:
_ORE.EurLiborSwapIsdaFixB_swigregister(EurLiborSwapIsdaFixB)

class EurLiborSwapIfrFix(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EurLiborSwapIfrFix_swiginit(self, _ORE.new_EurLiborSwapIfrFix(*args))
    __swig_destroy__ = _ORE.delete_EurLiborSwapIfrFix

# Register EurLiborSwapIfrFix in _ORE:
_ORE.EurLiborSwapIfrFix_swigregister(EurLiborSwapIfrFix)

class ChfLiborSwapIsdaFix(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ChfLiborSwapIsdaFix_swiginit(self, _ORE.new_ChfLiborSwapIsdaFix(*args))
    __swig_destroy__ = _ORE.delete_ChfLiborSwapIsdaFix

# Register ChfLiborSwapIsdaFix in _ORE:
_ORE.ChfLiborSwapIsdaFix_swigregister(ChfLiborSwapIsdaFix)

class GbpLiborSwapIsdaFix(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.GbpLiborSwapIsdaFix_swiginit(self, _ORE.new_GbpLiborSwapIsdaFix(*args))
    __swig_destroy__ = _ORE.delete_GbpLiborSwapIsdaFix

# Register GbpLiborSwapIsdaFix in _ORE:
_ORE.GbpLiborSwapIsdaFix_swigregister(GbpLiborSwapIsdaFix)

class JpyLiborSwapIsdaFixAm(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.JpyLiborSwapIsdaFixAm_swiginit(self, _ORE.new_JpyLiborSwapIsdaFixAm(*args))
    __swig_destroy__ = _ORE.delete_JpyLiborSwapIsdaFixAm

# Register JpyLiborSwapIsdaFixAm in _ORE:
_ORE.JpyLiborSwapIsdaFixAm_swigregister(JpyLiborSwapIsdaFixAm)

class JpyLiborSwapIsdaFixPm(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.JpyLiborSwapIsdaFixPm_swiginit(self, _ORE.new_JpyLiborSwapIsdaFixPm(*args))
    __swig_destroy__ = _ORE.delete_JpyLiborSwapIsdaFixPm

# Register JpyLiborSwapIsdaFixPm in _ORE:
_ORE.JpyLiborSwapIsdaFixPm_swigregister(JpyLiborSwapIsdaFixPm)

class UsdLiborSwapIsdaFixAm(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.UsdLiborSwapIsdaFixAm_swiginit(self, _ORE.new_UsdLiborSwapIsdaFixAm(*args))
    __swig_destroy__ = _ORE.delete_UsdLiborSwapIsdaFixAm

# Register UsdLiborSwapIsdaFixAm in _ORE:
_ORE.UsdLiborSwapIsdaFixAm_swigregister(UsdLiborSwapIsdaFixAm)

class UsdLiborSwapIsdaFixPm(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.UsdLiborSwapIsdaFixPm_swiginit(self, _ORE.new_UsdLiborSwapIsdaFixPm(*args))
    __swig_destroy__ = _ORE.delete_UsdLiborSwapIsdaFixPm

# Register UsdLiborSwapIsdaFixPm in _ORE:
_ORE.UsdLiborSwapIsdaFixPm_swigregister(UsdLiborSwapIsdaFixPm)

class Bibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Bibor_swiginit(self, _ORE.new_Bibor(*args))
    __swig_destroy__ = _ORE.delete_Bibor

# Register Bibor in _ORE:
_ORE.Bibor_swigregister(Bibor)

class BiborSW(Bibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BiborSW_swiginit(self, _ORE.new_BiborSW(*args))
    __swig_destroy__ = _ORE.delete_BiborSW

# Register BiborSW in _ORE:
_ORE.BiborSW_swigregister(BiborSW)

class Bibor1M(Bibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Bibor1M_swiginit(self, _ORE.new_Bibor1M(*args))
    __swig_destroy__ = _ORE.delete_Bibor1M

# Register Bibor1M in _ORE:
_ORE.Bibor1M_swigregister(Bibor1M)

class Bibor2M(Bibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Bibor2M_swiginit(self, _ORE.new_Bibor2M(*args))
    __swig_destroy__ = _ORE.delete_Bibor2M

# Register Bibor2M in _ORE:
_ORE.Bibor2M_swigregister(Bibor2M)

class Bibor3M(Bibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Bibor3M_swiginit(self, _ORE.new_Bibor3M(*args))
    __swig_destroy__ = _ORE.delete_Bibor3M

# Register Bibor3M in _ORE:
_ORE.Bibor3M_swigregister(Bibor3M)

class Bibor6M(Bibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Bibor6M_swiginit(self, _ORE.new_Bibor6M(*args))
    __swig_destroy__ = _ORE.delete_Bibor6M

# Register Bibor6M in _ORE:
_ORE.Bibor6M_swigregister(Bibor6M)

class Bibor9M(Bibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Bibor9M_swiginit(self, _ORE.new_Bibor9M(*args))
    __swig_destroy__ = _ORE.delete_Bibor9M

# Register Bibor9M in _ORE:
_ORE.Bibor9M_swigregister(Bibor9M)

class Bibor1Y(Bibor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Bibor1Y_swiginit(self, _ORE.new_Bibor1Y(*args))
    __swig_destroy__ = _ORE.delete_Bibor1Y

# Register Bibor1Y in _ORE:
_ORE.Bibor1Y_swigregister(Bibor1Y)

class DateGeneration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Backward = _ORE.DateGeneration_Backward
    Forward = _ORE.DateGeneration_Forward
    Zero = _ORE.DateGeneration_Zero
    ThirdWednesday = _ORE.DateGeneration_ThirdWednesday
    ThirdWednesdayInclusive = _ORE.DateGeneration_ThirdWednesdayInclusive
    Twentieth = _ORE.DateGeneration_Twentieth
    TwentiethIMM = _ORE.DateGeneration_TwentiethIMM
    OldCDS = _ORE.DateGeneration_OldCDS
    CDS = _ORE.DateGeneration_CDS
    CDS2015 = _ORE.DateGeneration_CDS2015

    def __init__(self):
        _ORE.DateGeneration_swiginit(self, _ORE.new_DateGeneration())
    __swig_destroy__ = _ORE.delete_DateGeneration

# Register DateGeneration in _ORE:
_ORE.DateGeneration_swigregister(DateGeneration)

class Schedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Schedule_swiginit(self, _ORE.new_Schedule(*args))

    def __len__(self):
        return _ORE.Schedule___len__(self)

    def previousDate(self, refDate):
        return _ORE.Schedule_previousDate(self, refDate)

    def nextDate(self, refDate):
        return _ORE.Schedule_nextDate(self, refDate)

    def dates(self):
        return _ORE.Schedule_dates(self)

    def hasIsRegular(self):
        return _ORE.Schedule_hasIsRegular(self)

    def isRegular(self, *args):
        return _ORE.Schedule_isRegular(self, *args)

    def calendar(self):
        return _ORE.Schedule_calendar(self)

    def startDate(self):
        return _ORE.Schedule_startDate(self)

    def endDate(self):
        return _ORE.Schedule_endDate(self)

    def hasTenor(self):
        return _ORE.Schedule_hasTenor(self)

    def tenor(self):
        return _ORE.Schedule_tenor(self)

    def businessDayConvention(self):
        return _ORE.Schedule_businessDayConvention(self)

    def hasTerminationDateBusinessDayConvention(self):
        return _ORE.Schedule_hasTerminationDateBusinessDayConvention(self)

    def terminationDateBusinessDayConvention(self):
        return _ORE.Schedule_terminationDateBusinessDayConvention(self)

    def hasRule(self):
        return _ORE.Schedule_hasRule(self)

    def rule(self):
        return _ORE.Schedule_rule(self)

    def hasEndOfMonth(self):
        return _ORE.Schedule_hasEndOfMonth(self)

    def endOfMonth(self):
        return _ORE.Schedule_endOfMonth(self)

    def after(self, truncationDate):
        return _ORE.Schedule_after(self, truncationDate)

    def until(self, truncationDate):
        return _ORE.Schedule_until(self, truncationDate)

    def __getitem__(self, i):
        return _ORE.Schedule___getitem__(self, i)
    __swig_destroy__ = _ORE.delete_Schedule

# Register Schedule in _ORE:
_ORE.Schedule_swigregister(Schedule)

class _MakeSchedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE._MakeSchedule_swiginit(self, _ORE.new__MakeSchedule())

    def fromDate(self, effectiveDate):
        return _ORE._MakeSchedule_fromDate(self, effectiveDate)

    def to(self, terminationDate):
        return _ORE._MakeSchedule_to(self, terminationDate)

    def withTenor(self, arg2):
        return _ORE._MakeSchedule_withTenor(self, arg2)

    def withFrequency(self, arg2):
        return _ORE._MakeSchedule_withFrequency(self, arg2)

    def withCalendar(self, arg2):
        return _ORE._MakeSchedule_withCalendar(self, arg2)

    def withConvention(self, arg2):
        return _ORE._MakeSchedule_withConvention(self, arg2)

    def withTerminationDateConvention(self, arg2):
        return _ORE._MakeSchedule_withTerminationDateConvention(self, arg2)

    def withRule(self, arg2):
        return _ORE._MakeSchedule_withRule(self, arg2)

    def forwards(self):
        return _ORE._MakeSchedule_forwards(self)

    def backwards(self):
        return _ORE._MakeSchedule_backwards(self)

    def endOfMonth(self, flag=True):
        return _ORE._MakeSchedule_endOfMonth(self, flag)

    def withFirstDate(self, d):
        return _ORE._MakeSchedule_withFirstDate(self, d)

    def withNextToLastDate(self, d):
        return _ORE._MakeSchedule_withNextToLastDate(self, d)

    def schedule(self):
        return _ORE._MakeSchedule_schedule(self)
    __swig_destroy__ = _ORE.delete__MakeSchedule

# Register _MakeSchedule in _ORE:
_ORE._MakeSchedule_swigregister(_MakeSchedule)


def MakeSchedule(effectiveDate=None,terminationDate=None,tenor=None,
    frequency=None,calendar=None,convention=None,terminalDateConvention=None,
    rule=None,forwards=False,backwards=False,
    endOfMonth=None,firstDate=None,nextToLastDate=None):
    ms = _MakeSchedule()
    if effectiveDate is not None:
        ms.fromDate(effectiveDate)
    if terminationDate is not None:
        ms.to(terminationDate)
    if tenor is not None:
        ms.withTenor(tenor)
    if frequency is not None:
        ms.withFrequency(frequency)
    if calendar is not None:
        ms.withCalendar(calendar)
    if convention is not None:
        ms.withConvention(convention)
    if terminalDateConvention is not None:
        ms.withTerminationDateConvention(terminalDateConvention)
    if rule is not None:
        ms.withRule(rule)
    if forwards:
        ms.forwards()
    if backwards:
        ms.backwards()
    if endOfMonth is not None:
        ms.endOfMonth(endOfMonth)
    if firstDate is not None:
        ms.withFirstDate(firstDate)
    if nextToLastDate is not None:
        ms.withNextToLastDate(nextToLastDate)
    return ms.schedule()

ShiftedLognormal = _ORE.ShiftedLognormal
Normal = _ORE.Normal
class VolatilityTermStructure(TermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def minStrike(self):
        return _ORE.VolatilityTermStructure_minStrike(self)

    def maxStrike(self):
        return _ORE.VolatilityTermStructure_maxStrike(self)
    __swig_destroy__ = _ORE.delete_VolatilityTermStructure

# Register VolatilityTermStructure in _ORE:
_ORE.VolatilityTermStructure_swigregister(VolatilityTermStructure)

class BlackVolTermStructure(VolatilityTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def blackVol(self, *args):
        return _ORE.BlackVolTermStructure_blackVol(self, *args)

    def blackVariance(self, *args):
        return _ORE.BlackVolTermStructure_blackVariance(self, *args)

    def blackForwardVol(self, *args):
        return _ORE.BlackVolTermStructure_blackForwardVol(self, *args)

    def blackForwardVariance(self, *args):
        return _ORE.BlackVolTermStructure_blackForwardVariance(self, *args)
    __swig_destroy__ = _ORE.delete_BlackVolTermStructure

# Register BlackVolTermStructure in _ORE:
_ORE.BlackVolTermStructure_swigregister(BlackVolTermStructure)

class BlackVolTermStructureHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BlackVolTermStructureHandle_swiginit(self, _ORE.new_BlackVolTermStructureHandle(*args))

    def __deref__(self):
        return _ORE.BlackVolTermStructureHandle___deref__(self)

    def currentLink(self):
        return _ORE.BlackVolTermStructureHandle_currentLink(self)

    def __nonzero__(self):
        return _ORE.BlackVolTermStructureHandle___nonzero__(self)

    def __bool__(self):
        return _ORE.BlackVolTermStructureHandle___bool__(self)

    def asObservable(self):
        return _ORE.BlackVolTermStructureHandle_asObservable(self)
    __swig_destroy__ = _ORE.delete_BlackVolTermStructureHandle

    def blackVol(self, *args):
        return _ORE.BlackVolTermStructureHandle_blackVol(self, *args)

    def blackVariance(self, *args):
        return _ORE.BlackVolTermStructureHandle_blackVariance(self, *args)

    def blackForwardVol(self, *args):
        return _ORE.BlackVolTermStructureHandle_blackForwardVol(self, *args)

    def blackForwardVariance(self, *args):
        return _ORE.BlackVolTermStructureHandle_blackForwardVariance(self, *args)

    def minStrike(self):
        return _ORE.BlackVolTermStructureHandle_minStrike(self)

    def maxStrike(self):
        return _ORE.BlackVolTermStructureHandle_maxStrike(self)

    def dayCounter(self):
        return _ORE.BlackVolTermStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _ORE.BlackVolTermStructureHandle_timeFromReference(self, date)

    def calendar(self):
        return _ORE.BlackVolTermStructureHandle_calendar(self)

    def referenceDate(self):
        return _ORE.BlackVolTermStructureHandle_referenceDate(self)

    def maxDate(self):
        return _ORE.BlackVolTermStructureHandle_maxDate(self)

    def maxTime(self):
        return _ORE.BlackVolTermStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        return _ORE.BlackVolTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _ORE.BlackVolTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _ORE.BlackVolTermStructureHandle_allowsExtrapolation(self)

# Register BlackVolTermStructureHandle in _ORE:
_ORE.BlackVolTermStructureHandle_swigregister(BlackVolTermStructureHandle)

class RelinkableBlackVolTermStructureHandle(BlackVolTermStructureHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.RelinkableBlackVolTermStructureHandle_swiginit(self, _ORE.new_RelinkableBlackVolTermStructureHandle(*args))

    def linkTo(self, arg2):
        return _ORE.RelinkableBlackVolTermStructureHandle_linkTo(self, arg2)

    def reset(self):
        return _ORE.RelinkableBlackVolTermStructureHandle_reset(self)
    __swig_destroy__ = _ORE.delete_RelinkableBlackVolTermStructureHandle

# Register RelinkableBlackVolTermStructureHandle in _ORE:
_ORE.RelinkableBlackVolTermStructureHandle_swigregister(RelinkableBlackVolTermStructureHandle)

class LocalVolTermStructure(VolatilityTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def localVol(self, *args):
        return _ORE.LocalVolTermStructure_localVol(self, *args)
    __swig_destroy__ = _ORE.delete_LocalVolTermStructure

# Register LocalVolTermStructure in _ORE:
_ORE.LocalVolTermStructure_swigregister(LocalVolTermStructure)

class LocalVolTermStructureHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.LocalVolTermStructureHandle_swiginit(self, _ORE.new_LocalVolTermStructureHandle(*args))

    def __deref__(self):
        return _ORE.LocalVolTermStructureHandle___deref__(self)

    def currentLink(self):
        return _ORE.LocalVolTermStructureHandle_currentLink(self)

    def __nonzero__(self):
        return _ORE.LocalVolTermStructureHandle___nonzero__(self)

    def __bool__(self):
        return _ORE.LocalVolTermStructureHandle___bool__(self)

    def asObservable(self):
        return _ORE.LocalVolTermStructureHandle_asObservable(self)
    __swig_destroy__ = _ORE.delete_LocalVolTermStructureHandle

    def localVol(self, *args):
        return _ORE.LocalVolTermStructureHandle_localVol(self, *args)

    def minStrike(self):
        return _ORE.LocalVolTermStructureHandle_minStrike(self)

    def maxStrike(self):
        return _ORE.LocalVolTermStructureHandle_maxStrike(self)

    def dayCounter(self):
        return _ORE.LocalVolTermStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _ORE.LocalVolTermStructureHandle_timeFromReference(self, date)

    def calendar(self):
        return _ORE.LocalVolTermStructureHandle_calendar(self)

    def referenceDate(self):
        return _ORE.LocalVolTermStructureHandle_referenceDate(self)

    def maxDate(self):
        return _ORE.LocalVolTermStructureHandle_maxDate(self)

    def maxTime(self):
        return _ORE.LocalVolTermStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        return _ORE.LocalVolTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _ORE.LocalVolTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _ORE.LocalVolTermStructureHandle_allowsExtrapolation(self)

# Register LocalVolTermStructureHandle in _ORE:
_ORE.LocalVolTermStructureHandle_swigregister(LocalVolTermStructureHandle)

class RelinkableLocalVolTermStructureHandle(LocalVolTermStructureHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.RelinkableLocalVolTermStructureHandle_swiginit(self, _ORE.new_RelinkableLocalVolTermStructureHandle(*args))

    def linkTo(self, arg2):
        return _ORE.RelinkableLocalVolTermStructureHandle_linkTo(self, arg2)

    def reset(self):
        return _ORE.RelinkableLocalVolTermStructureHandle_reset(self)
    __swig_destroy__ = _ORE.delete_RelinkableLocalVolTermStructureHandle

# Register RelinkableLocalVolTermStructureHandle in _ORE:
_ORE.RelinkableLocalVolTermStructureHandle_swigregister(RelinkableLocalVolTermStructureHandle)

class OptionletVolatilityStructure(VolatilityTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def volatility(self, *args):
        return _ORE.OptionletVolatilityStructure_volatility(self, *args)

    def blackVariance(self, *args):
        return _ORE.OptionletVolatilityStructure_blackVariance(self, *args)
    __swig_destroy__ = _ORE.delete_OptionletVolatilityStructure

# Register OptionletVolatilityStructure in _ORE:
_ORE.OptionletVolatilityStructure_swigregister(OptionletVolatilityStructure)

class OptionletVolatilityStructureHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.OptionletVolatilityStructureHandle_swiginit(self, _ORE.new_OptionletVolatilityStructureHandle(*args))

    def __deref__(self):
        return _ORE.OptionletVolatilityStructureHandle___deref__(self)

    def currentLink(self):
        return _ORE.OptionletVolatilityStructureHandle_currentLink(self)

    def __nonzero__(self):
        return _ORE.OptionletVolatilityStructureHandle___nonzero__(self)

    def __bool__(self):
        return _ORE.OptionletVolatilityStructureHandle___bool__(self)

    def asObservable(self):
        return _ORE.OptionletVolatilityStructureHandle_asObservable(self)
    __swig_destroy__ = _ORE.delete_OptionletVolatilityStructureHandle

    def volatility(self, *args):
        return _ORE.OptionletVolatilityStructureHandle_volatility(self, *args)

    def blackVariance(self, *args):
        return _ORE.OptionletVolatilityStructureHandle_blackVariance(self, *args)

    def minStrike(self):
        return _ORE.OptionletVolatilityStructureHandle_minStrike(self)

    def maxStrike(self):
        return _ORE.OptionletVolatilityStructureHandle_maxStrike(self)

    def dayCounter(self):
        return _ORE.OptionletVolatilityStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _ORE.OptionletVolatilityStructureHandle_timeFromReference(self, date)

    def calendar(self):
        return _ORE.OptionletVolatilityStructureHandle_calendar(self)

    def referenceDate(self):
        return _ORE.OptionletVolatilityStructureHandle_referenceDate(self)

    def maxDate(self):
        return _ORE.OptionletVolatilityStructureHandle_maxDate(self)

    def maxTime(self):
        return _ORE.OptionletVolatilityStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        return _ORE.OptionletVolatilityStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _ORE.OptionletVolatilityStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _ORE.OptionletVolatilityStructureHandle_allowsExtrapolation(self)

# Register OptionletVolatilityStructureHandle in _ORE:
_ORE.OptionletVolatilityStructureHandle_swigregister(OptionletVolatilityStructureHandle)

class RelinkableOptionletVolatilityStructureHandle(OptionletVolatilityStructureHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.RelinkableOptionletVolatilityStructureHandle_swiginit(self, _ORE.new_RelinkableOptionletVolatilityStructureHandle(*args))

    def linkTo(self, arg2):
        return _ORE.RelinkableOptionletVolatilityStructureHandle_linkTo(self, arg2)

    def reset(self):
        return _ORE.RelinkableOptionletVolatilityStructureHandle_reset(self)
    __swig_destroy__ = _ORE.delete_RelinkableOptionletVolatilityStructureHandle

# Register RelinkableOptionletVolatilityStructureHandle in _ORE:
_ORE.RelinkableOptionletVolatilityStructureHandle_swigregister(RelinkableOptionletVolatilityStructureHandle)

class YoYOptionletVolatilitySurface(VolatilityTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def observationLag(self):
        return _ORE.YoYOptionletVolatilitySurface_observationLag(self)

    def frequency(self):
        return _ORE.YoYOptionletVolatilitySurface_frequency(self)

    def indexIsInterpolated(self):
        return _ORE.YoYOptionletVolatilitySurface_indexIsInterpolated(self)

    def baseDate(self):
        return _ORE.YoYOptionletVolatilitySurface_baseDate(self)

    def timeFromBase(self, *args):
        return _ORE.YoYOptionletVolatilitySurface_timeFromBase(self, *args)

    def minStrike(self):
        return _ORE.YoYOptionletVolatilitySurface_minStrike(self)

    def maxStrike(self):
        return _ORE.YoYOptionletVolatilitySurface_maxStrike(self)

    def baseLevel(self):
        return _ORE.YoYOptionletVolatilitySurface_baseLevel(self)

    def volatility(self, *args):
        return _ORE.YoYOptionletVolatilitySurface_volatility(self, *args)

    def totalVariance(self, *args):
        return _ORE.YoYOptionletVolatilitySurface_totalVariance(self, *args)
    __swig_destroy__ = _ORE.delete_YoYOptionletVolatilitySurface

# Register YoYOptionletVolatilitySurface in _ORE:
_ORE.YoYOptionletVolatilitySurface_swigregister(YoYOptionletVolatilitySurface)

class YoYOptionletVolatilitySurfaceHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.YoYOptionletVolatilitySurfaceHandle_swiginit(self, _ORE.new_YoYOptionletVolatilitySurfaceHandle(*args))

    def __deref__(self):
        return _ORE.YoYOptionletVolatilitySurfaceHandle___deref__(self)

    def currentLink(self):
        return _ORE.YoYOptionletVolatilitySurfaceHandle_currentLink(self)

    def __nonzero__(self):
        return _ORE.YoYOptionletVolatilitySurfaceHandle___nonzero__(self)

    def __bool__(self):
        return _ORE.YoYOptionletVolatilitySurfaceHandle___bool__(self)

    def asObservable(self):
        return _ORE.YoYOptionletVolatilitySurfaceHandle_asObservable(self)
    __swig_destroy__ = _ORE.delete_YoYOptionletVolatilitySurfaceHandle

    def observationLag(self):
        return _ORE.YoYOptionletVolatilitySurfaceHandle_observationLag(self)

    def frequency(self):
        return _ORE.YoYOptionletVolatilitySurfaceHandle_frequency(self)

    def indexIsInterpolated(self):
        return _ORE.YoYOptionletVolatilitySurfaceHandle_indexIsInterpolated(self)

    def baseDate(self):
        return _ORE.YoYOptionletVolatilitySurfaceHandle_baseDate(self)

    def timeFromBase(self, *args):
        return _ORE.YoYOptionletVolatilitySurfaceHandle_timeFromBase(self, *args)

    def minStrike(self):
        return _ORE.YoYOptionletVolatilitySurfaceHandle_minStrike(self)

    def maxStrike(self):
        return _ORE.YoYOptionletVolatilitySurfaceHandle_maxStrike(self)

    def baseLevel(self):
        return _ORE.YoYOptionletVolatilitySurfaceHandle_baseLevel(self)

    def volatility(self, *args):
        return _ORE.YoYOptionletVolatilitySurfaceHandle_volatility(self, *args)

    def totalVariance(self, *args):
        return _ORE.YoYOptionletVolatilitySurfaceHandle_totalVariance(self, *args)

    def dayCounter(self):
        return _ORE.YoYOptionletVolatilitySurfaceHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _ORE.YoYOptionletVolatilitySurfaceHandle_timeFromReference(self, date)

    def calendar(self):
        return _ORE.YoYOptionletVolatilitySurfaceHandle_calendar(self)

    def referenceDate(self):
        return _ORE.YoYOptionletVolatilitySurfaceHandle_referenceDate(self)

    def maxDate(self):
        return _ORE.YoYOptionletVolatilitySurfaceHandle_maxDate(self)

    def maxTime(self):
        return _ORE.YoYOptionletVolatilitySurfaceHandle_maxTime(self)

    def enableExtrapolation(self):
        return _ORE.YoYOptionletVolatilitySurfaceHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _ORE.YoYOptionletVolatilitySurfaceHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _ORE.YoYOptionletVolatilitySurfaceHandle_allowsExtrapolation(self)

# Register YoYOptionletVolatilitySurfaceHandle in _ORE:
_ORE.YoYOptionletVolatilitySurfaceHandle_swigregister(YoYOptionletVolatilitySurfaceHandle)

class RelinkableYoYOptionletVolatilitySurfaceHandle(YoYOptionletVolatilitySurfaceHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.RelinkableYoYOptionletVolatilitySurfaceHandle_swiginit(self, _ORE.new_RelinkableYoYOptionletVolatilitySurfaceHandle(*args))

    def linkTo(self, arg2):
        return _ORE.RelinkableYoYOptionletVolatilitySurfaceHandle_linkTo(self, arg2)

    def reset(self):
        return _ORE.RelinkableYoYOptionletVolatilitySurfaceHandle_reset(self)
    __swig_destroy__ = _ORE.delete_RelinkableYoYOptionletVolatilitySurfaceHandle

# Register RelinkableYoYOptionletVolatilitySurfaceHandle in _ORE:
_ORE.RelinkableYoYOptionletVolatilitySurfaceHandle_swigregister(RelinkableYoYOptionletVolatilitySurfaceHandle)


def RelinkableYoYOptionletVolatilitySurface(*args, **kwargs):
    from warnings import warn
    warn('%s is deprecated; use %s' % (RelinkableYoYOptionletVolatilitySurface.__name__, RelinkableYoYOptionletVolatilitySurfaceHandle.__name__))
    return RelinkableYoYOptionletVolatilitySurfaceHandle(*args, **kwargs)

class SmileSection(Observable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def minStrike(self):
        return _ORE.SmileSection_minStrike(self)

    def maxStrike(self):
        return _ORE.SmileSection_maxStrike(self)

    def atmLevel(self):
        return _ORE.SmileSection_atmLevel(self)

    def variance(self, strike):
        return _ORE.SmileSection_variance(self, strike)

    def exerciseDate(self):
        return _ORE.SmileSection_exerciseDate(self)

    def volatilityType(self):
        return _ORE.SmileSection_volatilityType(self)

    def shift(self):
        return _ORE.SmileSection_shift(self)

    def referenceDate(self):
        return _ORE.SmileSection_referenceDate(self)

    def exerciseTime(self):
        return _ORE.SmileSection_exerciseTime(self)

    def dayCounter(self):
        return _ORE.SmileSection_dayCounter(self)

    def optionPrice(self, *args):
        return _ORE.SmileSection_optionPrice(self, *args)

    def digitalOptionPrice(self, *args):
        return _ORE.SmileSection_digitalOptionPrice(self, *args)

    def vega(self, strike, discount=1.0):
        return _ORE.SmileSection_vega(self, strike, discount)

    def density(self, strike, discount=1.0, gap=1.0E-4):
        return _ORE.SmileSection_density(self, strike, discount, gap)

    def volatility(self, *args):
        return _ORE.SmileSection_volatility(self, *args)
    __swig_destroy__ = _ORE.delete_SmileSection

# Register SmileSection in _ORE:
_ORE.SmileSection_swigregister(SmileSection)

class SmileSectionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.SmileSectionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.SmileSectionVector___nonzero__(self)

    def __bool__(self):
        return _ORE.SmileSectionVector___bool__(self)

    def __len__(self):
        return _ORE.SmileSectionVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.SmileSectionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.SmileSectionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.SmileSectionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.SmileSectionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.SmileSectionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.SmileSectionVector___setitem__(self, *args)

    def pop(self):
        return _ORE.SmileSectionVector_pop(self)

    def append(self, x):
        return _ORE.SmileSectionVector_append(self, x)

    def empty(self):
        return _ORE.SmileSectionVector_empty(self)

    def size(self):
        return _ORE.SmileSectionVector_size(self)

    def swap(self, v):
        return _ORE.SmileSectionVector_swap(self, v)

    def begin(self):
        return _ORE.SmileSectionVector_begin(self)

    def end(self):
        return _ORE.SmileSectionVector_end(self)

    def rbegin(self):
        return _ORE.SmileSectionVector_rbegin(self)

    def rend(self):
        return _ORE.SmileSectionVector_rend(self)

    def clear(self):
        return _ORE.SmileSectionVector_clear(self)

    def get_allocator(self):
        return _ORE.SmileSectionVector_get_allocator(self)

    def pop_back(self):
        return _ORE.SmileSectionVector_pop_back(self)

    def erase(self, *args):
        return _ORE.SmileSectionVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.SmileSectionVector_swiginit(self, _ORE.new_SmileSectionVector(*args))

    def push_back(self, x):
        return _ORE.SmileSectionVector_push_back(self, x)

    def front(self):
        return _ORE.SmileSectionVector_front(self)

    def back(self):
        return _ORE.SmileSectionVector_back(self)

    def assign(self, n, x):
        return _ORE.SmileSectionVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.SmileSectionVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.SmileSectionVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.SmileSectionVector_reserve(self, n)

    def capacity(self):
        return _ORE.SmileSectionVector_capacity(self)
    __swig_destroy__ = _ORE.delete_SmileSectionVector

# Register SmileSectionVector in _ORE:
_ORE.SmileSectionVector_swigregister(SmileSectionVector)

class SwaptionVolatilityStructure(VolatilityTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def volatility(self, *args):
        return _ORE.SwaptionVolatilityStructure_volatility(self, *args)

    def blackVariance(self, *args):
        return _ORE.SwaptionVolatilityStructure_blackVariance(self, *args)

    def optionDateFromTenor(self, p):
        return _ORE.SwaptionVolatilityStructure_optionDateFromTenor(self, p)

    def shift(self, *args):
        return _ORE.SwaptionVolatilityStructure_shift(self, *args)

    def smileSection(self, *args):
        return _ORE.SwaptionVolatilityStructure_smileSection(self, *args)
    __swig_destroy__ = _ORE.delete_SwaptionVolatilityStructure

# Register SwaptionVolatilityStructure in _ORE:
_ORE.SwaptionVolatilityStructure_swigregister(SwaptionVolatilityStructure)

class SwaptionVolatilityStructureHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SwaptionVolatilityStructureHandle_swiginit(self, _ORE.new_SwaptionVolatilityStructureHandle(*args))

    def __deref__(self):
        return _ORE.SwaptionVolatilityStructureHandle___deref__(self)

    def currentLink(self):
        return _ORE.SwaptionVolatilityStructureHandle_currentLink(self)

    def __nonzero__(self):
        return _ORE.SwaptionVolatilityStructureHandle___nonzero__(self)

    def __bool__(self):
        return _ORE.SwaptionVolatilityStructureHandle___bool__(self)

    def asObservable(self):
        return _ORE.SwaptionVolatilityStructureHandle_asObservable(self)
    __swig_destroy__ = _ORE.delete_SwaptionVolatilityStructureHandle

    def volatility(self, *args):
        return _ORE.SwaptionVolatilityStructureHandle_volatility(self, *args)

    def blackVariance(self, *args):
        return _ORE.SwaptionVolatilityStructureHandle_blackVariance(self, *args)

    def optionDateFromTenor(self, p):
        return _ORE.SwaptionVolatilityStructureHandle_optionDateFromTenor(self, p)

    def shift(self, *args):
        return _ORE.SwaptionVolatilityStructureHandle_shift(self, *args)

    def smileSection(self, *args):
        return _ORE.SwaptionVolatilityStructureHandle_smileSection(self, *args)

    def minStrike(self):
        return _ORE.SwaptionVolatilityStructureHandle_minStrike(self)

    def maxStrike(self):
        return _ORE.SwaptionVolatilityStructureHandle_maxStrike(self)

    def dayCounter(self):
        return _ORE.SwaptionVolatilityStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _ORE.SwaptionVolatilityStructureHandle_timeFromReference(self, date)

    def calendar(self):
        return _ORE.SwaptionVolatilityStructureHandle_calendar(self)

    def referenceDate(self):
        return _ORE.SwaptionVolatilityStructureHandle_referenceDate(self)

    def maxDate(self):
        return _ORE.SwaptionVolatilityStructureHandle_maxDate(self)

    def maxTime(self):
        return _ORE.SwaptionVolatilityStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        return _ORE.SwaptionVolatilityStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _ORE.SwaptionVolatilityStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _ORE.SwaptionVolatilityStructureHandle_allowsExtrapolation(self)

# Register SwaptionVolatilityStructureHandle in _ORE:
_ORE.SwaptionVolatilityStructureHandle_swigregister(SwaptionVolatilityStructureHandle)

class RelinkableSwaptionVolatilityStructureHandle(SwaptionVolatilityStructureHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.RelinkableSwaptionVolatilityStructureHandle_swiginit(self, _ORE.new_RelinkableSwaptionVolatilityStructureHandle(*args))

    def linkTo(self, arg2):
        return _ORE.RelinkableSwaptionVolatilityStructureHandle_linkTo(self, arg2)

    def reset(self):
        return _ORE.RelinkableSwaptionVolatilityStructureHandle_reset(self)
    __swig_destroy__ = _ORE.delete_RelinkableSwaptionVolatilityStructureHandle

# Register RelinkableSwaptionVolatilityStructureHandle in _ORE:
_ORE.RelinkableSwaptionVolatilityStructureHandle_swigregister(RelinkableSwaptionVolatilityStructureHandle)

class BlackConstantVol(BlackVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BlackConstantVol_swiginit(self, _ORE.new_BlackConstantVol(*args))
    __swig_destroy__ = _ORE.delete_BlackConstantVol

# Register BlackConstantVol in _ORE:
_ORE.BlackConstantVol_swigregister(BlackConstantVol)

class BlackVarianceCurve(BlackVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, referenceDate, dates, volatilities, dayCounter, forceMonotoneVariance=True):
        _ORE.BlackVarianceCurve_swiginit(self, _ORE.new_BlackVarianceCurve(referenceDate, dates, volatilities, dayCounter, forceMonotoneVariance))
    __swig_destroy__ = _ORE.delete_BlackVarianceCurve

# Register BlackVarianceCurve in _ORE:
_ORE.BlackVarianceCurve_swigregister(BlackVarianceCurve)

class BlackVarianceSurface(BlackVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ConstantExtrapolation = _ORE.BlackVarianceSurface_ConstantExtrapolation
    InterpolatorDefaultExtrapolation = _ORE.BlackVarianceSurface_InterpolatorDefaultExtrapolation

    def __init__(self, *args, **kwargs):
        _ORE.BlackVarianceSurface_swiginit(self, _ORE.new_BlackVarianceSurface(*args, **kwargs))

    def setInterpolation(self, *args):
        return _ORE.BlackVarianceSurface_setInterpolation(self, *args)
    __swig_destroy__ = _ORE.delete_BlackVarianceSurface

# Register BlackVarianceSurface in _ORE:
_ORE.BlackVarianceSurface_swigregister(BlackVarianceSurface)

class ConstantOptionletVolatility(OptionletVolatilityStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ConstantOptionletVolatility_swiginit(self, _ORE.new_ConstantOptionletVolatility(*args))
    __swig_destroy__ = _ORE.delete_ConstantOptionletVolatility

# Register ConstantOptionletVolatility in _ORE:
_ORE.ConstantOptionletVolatility_swigregister(ConstantOptionletVolatility)

class ConstantSwaptionVolatility(SwaptionVolatilityStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ConstantSwaptionVolatility_swiginit(self, _ORE.new_ConstantSwaptionVolatility(*args))
    __swig_destroy__ = _ORE.delete_ConstantSwaptionVolatility

# Register ConstantSwaptionVolatility in _ORE:
_ORE.ConstantSwaptionVolatility_swigregister(ConstantSwaptionVolatility)

class SwaptionVolatilityDiscrete(SwaptionVolatilityStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def optionTenors(self):
        return _ORE.SwaptionVolatilityDiscrete_optionTenors(self)

    def optionDates(self):
        return _ORE.SwaptionVolatilityDiscrete_optionDates(self)

    def optionTimes(self):
        return _ORE.SwaptionVolatilityDiscrete_optionTimes(self)

    def swapTenors(self):
        return _ORE.SwaptionVolatilityDiscrete_swapTenors(self)

    def swapLengths(self):
        return _ORE.SwaptionVolatilityDiscrete_swapLengths(self)

    def optionDateFromTime(self, optionTime):
        return _ORE.SwaptionVolatilityDiscrete_optionDateFromTime(self, optionTime)
    __swig_destroy__ = _ORE.delete_SwaptionVolatilityDiscrete

# Register SwaptionVolatilityDiscrete in _ORE:
_ORE.SwaptionVolatilityDiscrete_swigregister(SwaptionVolatilityDiscrete)

class SwaptionVolatilityMatrix(SwaptionVolatilityDiscrete):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SwaptionVolatilityMatrix_swiginit(self, _ORE.new_SwaptionVolatilityMatrix(*args))

    def locate(self, *args):
        return _ORE.SwaptionVolatilityMatrix_locate(self, *args)

    def volatilityType(self):
        return _ORE.SwaptionVolatilityMatrix_volatilityType(self)
    __swig_destroy__ = _ORE.delete_SwaptionVolatilityMatrix

# Register SwaptionVolatilityMatrix in _ORE:
_ORE.SwaptionVolatilityMatrix_swigregister(SwaptionVolatilityMatrix)

class SabrSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SabrSmileSection_swiginit(self, _ORE.new_SabrSmileSection(*args))

    def alpha(self):
        return _ORE.SabrSmileSection_alpha(self)

    def beta(self):
        return _ORE.SabrSmileSection_beta(self)

    def nu(self):
        return _ORE.SabrSmileSection_nu(self)

    def rho(self):
        return _ORE.SabrSmileSection_rho(self)
    __swig_destroy__ = _ORE.delete_SabrSmileSection

# Register SabrSmileSection in _ORE:
_ORE.SabrSmileSection_swigregister(SabrSmileSection)

class SviSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SviSmileSection_swiginit(self, _ORE.new_SviSmileSection(*args))
    __swig_destroy__ = _ORE.delete_SviSmileSection

# Register SviSmileSection in _ORE:
_ORE.SviSmileSection_swigregister(SviSmileSection)

class SviInterpolatedSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SviInterpolatedSmileSection_swiginit(self, _ORE.new_SviInterpolatedSmileSection(*args))

    def a(self):
        return _ORE.SviInterpolatedSmileSection_a(self)

    def b(self):
        return _ORE.SviInterpolatedSmileSection_b(self)

    def sigma(self):
        return _ORE.SviInterpolatedSmileSection_sigma(self)

    def rho(self):
        return _ORE.SviInterpolatedSmileSection_rho(self)

    def m(self):
        return _ORE.SviInterpolatedSmileSection_m(self)

    def rmsError(self):
        return _ORE.SviInterpolatedSmileSection_rmsError(self)

    def maxError(self):
        return _ORE.SviInterpolatedSmileSection_maxError(self)

    def endCriteria(self):
        return _ORE.SviInterpolatedSmileSection_endCriteria(self)
    __swig_destroy__ = _ORE.delete_SviInterpolatedSmileSection

# Register SviInterpolatedSmileSection in _ORE:
_ORE.SviInterpolatedSmileSection_swigregister(SviInterpolatedSmileSection)

class SwaptionVolatilityCube(SwaptionVolatilityDiscrete):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def atmStrike(self, optionDate, swapTenor):
        return _ORE.SwaptionVolatilityCube_atmStrike(self, optionDate, swapTenor)
    __swig_destroy__ = _ORE.delete_SwaptionVolatilityCube

# Register SwaptionVolatilityCube in _ORE:
_ORE.SwaptionVolatilityCube_swigregister(SwaptionVolatilityCube)

class SabrSwaptionVolatilityCube(SwaptionVolatilityCube):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SabrSwaptionVolatilityCube_swiginit(self, _ORE.new_SabrSwaptionVolatilityCube(*args))

    def sparseSabrParameters(self):
        return _ORE.SabrSwaptionVolatilityCube_sparseSabrParameters(self)

    def denseSabrParameters(self):
        return _ORE.SabrSwaptionVolatilityCube_denseSabrParameters(self)

    def marketVolCube(self):
        return _ORE.SabrSwaptionVolatilityCube_marketVolCube(self)

    def volCubeAtmCalibrated(self):
        return _ORE.SabrSwaptionVolatilityCube_volCubeAtmCalibrated(self)

    def smileSection(self, *args):
        return _ORE.SabrSwaptionVolatilityCube_smileSection(self, *args)
    __swig_destroy__ = _ORE.delete_SabrSwaptionVolatilityCube

# Register SabrSwaptionVolatilityCube in _ORE:
_ORE.SabrSwaptionVolatilityCube_swigregister(SabrSwaptionVolatilityCube)


def SwaptionVolCube1(*args, **kwargs):
    from warnings import warn
    warn('%s is deprecated; use %s' % (SwaptionVolCube1.__name__, SabrSwaptionVolatilityCube.__name__))
    return SabrSwaptionVolatilityCube(*args, **kwargs)

class InterpolatedSwaptionVolatilityCube(SwaptionVolatilityCube):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, atmVolStructure, optionTenors, swapTenors, strikeSpreads, volSpreads, swapIndex, shortSwapIndex, vegaWeightedSmileFit):
        _ORE.InterpolatedSwaptionVolatilityCube_swiginit(self, _ORE.new_InterpolatedSwaptionVolatilityCube(atmVolStructure, optionTenors, swapTenors, strikeSpreads, volSpreads, swapIndex, shortSwapIndex, vegaWeightedSmileFit))
    __swig_destroy__ = _ORE.delete_InterpolatedSwaptionVolatilityCube

# Register InterpolatedSwaptionVolatilityCube in _ORE:
_ORE.InterpolatedSwaptionVolatilityCube_swigregister(InterpolatedSwaptionVolatilityCube)


def SwaptionVolCube2(*args, **kwargs):
    from warnings import warn
    warn('%s is deprecated; use %s' % (SwaptionVolCube2.__name__, InterpolatedSwaptionVolatilityCube.__name__))
    return InterpolatedSwaptionVolatilityCube(*args, **kwargs)

class ConstantYoYOptionletVolatility(YoYOptionletVolatilitySurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, volatility, settlementDays, cal, bdc, dc, observationLag, frequency, indexIsInterpolated, minStrike=-1.0, maxStrike=100.0):
        _ORE.ConstantYoYOptionletVolatility_swiginit(self, _ORE.new_ConstantYoYOptionletVolatility(volatility, settlementDays, cal, bdc, dc, observationLag, frequency, indexIsInterpolated, minStrike, maxStrike))
    __swig_destroy__ = _ORE.delete_ConstantYoYOptionletVolatility

# Register ConstantYoYOptionletVolatility in _ORE:
_ORE.ConstantYoYOptionletVolatility_swigregister(ConstantYoYOptionletVolatility)

class FlatSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FlatSmileSection_swiginit(self, _ORE.new_FlatSmileSection(*args))
    __swig_destroy__ = _ORE.delete_FlatSmileSection

# Register FlatSmileSection in _ORE:
_ORE.FlatSmileSection_swigregister(FlatSmileSection)

class LinearInterpolatedSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.LinearInterpolatedSmileSection_swiginit(self, _ORE.new_LinearInterpolatedSmileSection(*args))
    __swig_destroy__ = _ORE.delete_LinearInterpolatedSmileSection

# Register LinearInterpolatedSmileSection in _ORE:
_ORE.LinearInterpolatedSmileSection_swigregister(LinearInterpolatedSmileSection)

class CubicInterpolatedSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CubicInterpolatedSmileSection_swiginit(self, _ORE.new_CubicInterpolatedSmileSection(*args))
    __swig_destroy__ = _ORE.delete_CubicInterpolatedSmileSection

# Register CubicInterpolatedSmileSection in _ORE:
_ORE.CubicInterpolatedSmileSection_swigregister(CubicInterpolatedSmileSection)

class MonotonicCubicInterpolatedSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.MonotonicCubicInterpolatedSmileSection_swiginit(self, _ORE.new_MonotonicCubicInterpolatedSmileSection(*args))
    __swig_destroy__ = _ORE.delete_MonotonicCubicInterpolatedSmileSection

# Register MonotonicCubicInterpolatedSmileSection in _ORE:
_ORE.MonotonicCubicInterpolatedSmileSection_swigregister(MonotonicCubicInterpolatedSmileSection)

class SplineCubicInterpolatedSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SplineCubicInterpolatedSmileSection_swiginit(self, _ORE.new_SplineCubicInterpolatedSmileSection(*args))
    __swig_destroy__ = _ORE.delete_SplineCubicInterpolatedSmileSection

# Register SplineCubicInterpolatedSmileSection in _ORE:
_ORE.SplineCubicInterpolatedSmileSection_swigregister(SplineCubicInterpolatedSmileSection)

class KahaleSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.KahaleSmileSection_swiginit(self, _ORE.new_KahaleSmileSection(*args))
    __swig_destroy__ = _ORE.delete_KahaleSmileSection

# Register KahaleSmileSection in _ORE:
_ORE.KahaleSmileSection_swigregister(KahaleSmileSection)

class ZabrShortMaturityLognormal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.ZabrShortMaturityLognormal_swiginit(self, _ORE.new_ZabrShortMaturityLognormal())
    __swig_destroy__ = _ORE.delete_ZabrShortMaturityLognormal

# Register ZabrShortMaturityLognormal in _ORE:
_ORE.ZabrShortMaturityLognormal_swigregister(ZabrShortMaturityLognormal)

class ZabrShortMaturityNormal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.ZabrShortMaturityNormal_swiginit(self, _ORE.new_ZabrShortMaturityNormal())
    __swig_destroy__ = _ORE.delete_ZabrShortMaturityNormal

# Register ZabrShortMaturityNormal in _ORE:
_ORE.ZabrShortMaturityNormal_swigregister(ZabrShortMaturityNormal)

class ZabrLocalVolatility(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.ZabrLocalVolatility_swiginit(self, _ORE.new_ZabrLocalVolatility())
    __swig_destroy__ = _ORE.delete_ZabrLocalVolatility

# Register ZabrLocalVolatility in _ORE:
_ORE.ZabrLocalVolatility_swigregister(ZabrLocalVolatility)

class ZabrFullFd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.ZabrFullFd_swiginit(self, _ORE.new_ZabrFullFd())
    __swig_destroy__ = _ORE.delete_ZabrFullFd

# Register ZabrFullFd in _ORE:
_ORE.ZabrFullFd_swigregister(ZabrFullFd)

class ZabrShortMaturityLognormalSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ZabrShortMaturityLognormalSmileSection_swiginit(self, _ORE.new_ZabrShortMaturityLognormalSmileSection(*args))
    __swig_destroy__ = _ORE.delete_ZabrShortMaturityLognormalSmileSection

# Register ZabrShortMaturityLognormalSmileSection in _ORE:
_ORE.ZabrShortMaturityLognormalSmileSection_swigregister(ZabrShortMaturityLognormalSmileSection)

class ZabrShortMaturityNormalSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ZabrShortMaturityNormalSmileSection_swiginit(self, _ORE.new_ZabrShortMaturityNormalSmileSection(*args))
    __swig_destroy__ = _ORE.delete_ZabrShortMaturityNormalSmileSection

# Register ZabrShortMaturityNormalSmileSection in _ORE:
_ORE.ZabrShortMaturityNormalSmileSection_swigregister(ZabrShortMaturityNormalSmileSection)

class ZabrLocalVolatilitySmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ZabrLocalVolatilitySmileSection_swiginit(self, _ORE.new_ZabrLocalVolatilitySmileSection(*args))
    __swig_destroy__ = _ORE.delete_ZabrLocalVolatilitySmileSection

# Register ZabrLocalVolatilitySmileSection in _ORE:
_ORE.ZabrLocalVolatilitySmileSection_swigregister(ZabrLocalVolatilitySmileSection)

class ZabrFullFdSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ZabrFullFdSmileSection_swiginit(self, _ORE.new_ZabrFullFdSmileSection(*args))
    __swig_destroy__ = _ORE.delete_ZabrFullFdSmileSection

# Register ZabrFullFdSmileSection in _ORE:
_ORE.ZabrFullFdSmileSection_swigregister(ZabrFullFdSmileSection)

class ZabrShortMaturityLognormalInterpolatedSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ZabrShortMaturityLognormalInterpolatedSmileSection_swiginit(self, _ORE.new_ZabrShortMaturityLognormalInterpolatedSmileSection(*args))

    def alpha(self):
        return _ORE.ZabrShortMaturityLognormalInterpolatedSmileSection_alpha(self)

    def beta(self):
        return _ORE.ZabrShortMaturityLognormalInterpolatedSmileSection_beta(self)

    def nu(self):
        return _ORE.ZabrShortMaturityLognormalInterpolatedSmileSection_nu(self)

    def rho(self):
        return _ORE.ZabrShortMaturityLognormalInterpolatedSmileSection_rho(self)

    def rmsError(self):
        return _ORE.ZabrShortMaturityLognormalInterpolatedSmileSection_rmsError(self)

    def maxError(self):
        return _ORE.ZabrShortMaturityLognormalInterpolatedSmileSection_maxError(self)

    def endCriteria(self):
        return _ORE.ZabrShortMaturityLognormalInterpolatedSmileSection_endCriteria(self)
    __swig_destroy__ = _ORE.delete_ZabrShortMaturityLognormalInterpolatedSmileSection

# Register ZabrShortMaturityLognormalInterpolatedSmileSection in _ORE:
_ORE.ZabrShortMaturityLognormalInterpolatedSmileSection_swigregister(ZabrShortMaturityLognormalInterpolatedSmileSection)

class ZabrShortMaturityNormalInterpolatedSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ZabrShortMaturityNormalInterpolatedSmileSection_swiginit(self, _ORE.new_ZabrShortMaturityNormalInterpolatedSmileSection(*args))

    def alpha(self):
        return _ORE.ZabrShortMaturityNormalInterpolatedSmileSection_alpha(self)

    def beta(self):
        return _ORE.ZabrShortMaturityNormalInterpolatedSmileSection_beta(self)

    def nu(self):
        return _ORE.ZabrShortMaturityNormalInterpolatedSmileSection_nu(self)

    def rho(self):
        return _ORE.ZabrShortMaturityNormalInterpolatedSmileSection_rho(self)

    def rmsError(self):
        return _ORE.ZabrShortMaturityNormalInterpolatedSmileSection_rmsError(self)

    def maxError(self):
        return _ORE.ZabrShortMaturityNormalInterpolatedSmileSection_maxError(self)

    def endCriteria(self):
        return _ORE.ZabrShortMaturityNormalInterpolatedSmileSection_endCriteria(self)
    __swig_destroy__ = _ORE.delete_ZabrShortMaturityNormalInterpolatedSmileSection

# Register ZabrShortMaturityNormalInterpolatedSmileSection in _ORE:
_ORE.ZabrShortMaturityNormalInterpolatedSmileSection_swigregister(ZabrShortMaturityNormalInterpolatedSmileSection)

class ZabrLocalVolatilityInterpolatedSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ZabrLocalVolatilityInterpolatedSmileSection_swiginit(self, _ORE.new_ZabrLocalVolatilityInterpolatedSmileSection(*args))

    def alpha(self):
        return _ORE.ZabrLocalVolatilityInterpolatedSmileSection_alpha(self)

    def beta(self):
        return _ORE.ZabrLocalVolatilityInterpolatedSmileSection_beta(self)

    def nu(self):
        return _ORE.ZabrLocalVolatilityInterpolatedSmileSection_nu(self)

    def rho(self):
        return _ORE.ZabrLocalVolatilityInterpolatedSmileSection_rho(self)

    def rmsError(self):
        return _ORE.ZabrLocalVolatilityInterpolatedSmileSection_rmsError(self)

    def maxError(self):
        return _ORE.ZabrLocalVolatilityInterpolatedSmileSection_maxError(self)

    def endCriteria(self):
        return _ORE.ZabrLocalVolatilityInterpolatedSmileSection_endCriteria(self)
    __swig_destroy__ = _ORE.delete_ZabrLocalVolatilityInterpolatedSmileSection

# Register ZabrLocalVolatilityInterpolatedSmileSection in _ORE:
_ORE.ZabrLocalVolatilityInterpolatedSmileSection_swigregister(ZabrLocalVolatilityInterpolatedSmileSection)

class ZabrFullFdInterpolatedSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ZabrFullFdInterpolatedSmileSection_swiginit(self, _ORE.new_ZabrFullFdInterpolatedSmileSection(*args))

    def alpha(self):
        return _ORE.ZabrFullFdInterpolatedSmileSection_alpha(self)

    def beta(self):
        return _ORE.ZabrFullFdInterpolatedSmileSection_beta(self)

    def nu(self):
        return _ORE.ZabrFullFdInterpolatedSmileSection_nu(self)

    def rho(self):
        return _ORE.ZabrFullFdInterpolatedSmileSection_rho(self)

    def rmsError(self):
        return _ORE.ZabrFullFdInterpolatedSmileSection_rmsError(self)

    def maxError(self):
        return _ORE.ZabrFullFdInterpolatedSmileSection_maxError(self)

    def endCriteria(self):
        return _ORE.ZabrFullFdInterpolatedSmileSection_endCriteria(self)
    __swig_destroy__ = _ORE.delete_ZabrFullFdInterpolatedSmileSection

# Register ZabrFullFdInterpolatedSmileSection in _ORE:
_ORE.ZabrFullFdInterpolatedSmileSection_swigregister(ZabrFullFdInterpolatedSmileSection)

class NoArbSabrSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.NoArbSabrSmileSection_swiginit(self, _ORE.new_NoArbSabrSmileSection(*args))
    __swig_destroy__ = _ORE.delete_NoArbSabrSmileSection

# Register NoArbSabrSmileSection in _ORE:
_ORE.NoArbSabrSmileSection_swigregister(NoArbSabrSmileSection)

class NoArbSabrInterpolatedSmileSection(SmileSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.NoArbSabrInterpolatedSmileSection_swiginit(self, _ORE.new_NoArbSabrInterpolatedSmileSection(*args))

    def alpha(self):
        return _ORE.NoArbSabrInterpolatedSmileSection_alpha(self)

    def beta(self):
        return _ORE.NoArbSabrInterpolatedSmileSection_beta(self)

    def nu(self):
        return _ORE.NoArbSabrInterpolatedSmileSection_nu(self)

    def rho(self):
        return _ORE.NoArbSabrInterpolatedSmileSection_rho(self)

    def rmsError(self):
        return _ORE.NoArbSabrInterpolatedSmileSection_rmsError(self)

    def maxError(self):
        return _ORE.NoArbSabrInterpolatedSmileSection_maxError(self)

    def endCriteria(self):
        return _ORE.NoArbSabrInterpolatedSmileSection_endCriteria(self)
    __swig_destroy__ = _ORE.delete_NoArbSabrInterpolatedSmileSection

# Register NoArbSabrInterpolatedSmileSection in _ORE:
_ORE.NoArbSabrInterpolatedSmileSection_swigregister(NoArbSabrInterpolatedSmileSection)


def sabrVolatility(*args):
    return _ORE.sabrVolatility(*args)

def shiftedSabrVolatility(*args):
    return _ORE.shiftedSabrVolatility(*args)

def sabrFlochKennedyVolatility(strike, forward, expiryTime, alpha, beta, nu, rho):
    return _ORE.sabrFlochKennedyVolatility(strike, forward, expiryTime, alpha, beta, nu, rho)
class CalibrationErrorTuple(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, arg4):
        _ORE.CalibrationErrorTuple_swiginit(self, _ORE.new_CalibrationErrorTuple(arg2, arg3, arg4))

    def first(self):
        return _ORE.CalibrationErrorTuple_first(self)

    def second(self):
        return _ORE.CalibrationErrorTuple_second(self)

    def third(self):
        return _ORE.CalibrationErrorTuple_third(self)
    __swig_destroy__ = _ORE.delete_CalibrationErrorTuple

# Register CalibrationErrorTuple in _ORE:
_ORE.CalibrationErrorTuple_swigregister(CalibrationErrorTuple)

class AndreasenHugeVolatilityInterpl(Observable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PiecewiseConstant = _ORE.AndreasenHugeVolatilityInterpl_PiecewiseConstant
    Linear = _ORE.AndreasenHugeVolatilityInterpl_Linear
    CubicSpline = _ORE.AndreasenHugeVolatilityInterpl_CubicSpline
    Call = _ORE.AndreasenHugeVolatilityInterpl_Call
    Put = _ORE.AndreasenHugeVolatilityInterpl_Put
    CallPut = _ORE.AndreasenHugeVolatilityInterpl_CallPut

    def __init__(self, *args):
        _ORE.AndreasenHugeVolatilityInterpl_swiginit(self, _ORE.new_AndreasenHugeVolatilityInterpl(*args))

    def maxDate(self):
        return _ORE.AndreasenHugeVolatilityInterpl_maxDate(self)

    def minStrike(self):
        return _ORE.AndreasenHugeVolatilityInterpl_minStrike(self)

    def maxStrike(self):
        return _ORE.AndreasenHugeVolatilityInterpl_maxStrike(self)

    def fwd(self, t):
        return _ORE.AndreasenHugeVolatilityInterpl_fwd(self, t)

    def riskFreeRate(self):
        return _ORE.AndreasenHugeVolatilityInterpl_riskFreeRate(self)

    def calibrationError(self):
        return _ORE.AndreasenHugeVolatilityInterpl_calibrationError(self)

    def optionPrice(self, t, strike, optionType):
        return _ORE.AndreasenHugeVolatilityInterpl_optionPrice(self, t, strike, optionType)

    def localVol(self, t, strike):
        return _ORE.AndreasenHugeVolatilityInterpl_localVol(self, t, strike)
    __swig_destroy__ = _ORE.delete_AndreasenHugeVolatilityInterpl

# Register AndreasenHugeVolatilityInterpl in _ORE:
_ORE.AndreasenHugeVolatilityInterpl_swigregister(AndreasenHugeVolatilityInterpl)

class AndreasenHugeVolatilityAdapter(BlackVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, volInterpl, eps=1e-6):
        _ORE.AndreasenHugeVolatilityAdapter_swiginit(self, _ORE.new_AndreasenHugeVolatilityAdapter(volInterpl, eps))
    __swig_destroy__ = _ORE.delete_AndreasenHugeVolatilityAdapter

# Register AndreasenHugeVolatilityAdapter in _ORE:
_ORE.AndreasenHugeVolatilityAdapter_swigregister(AndreasenHugeVolatilityAdapter)

class AndreasenHugeLocalVolAdapter(LocalVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, localVol):
        _ORE.AndreasenHugeLocalVolAdapter_swiginit(self, _ORE.new_AndreasenHugeLocalVolAdapter(localVol))
    __swig_destroy__ = _ORE.delete_AndreasenHugeLocalVolAdapter

# Register AndreasenHugeLocalVolAdapter in _ORE:
_ORE.AndreasenHugeLocalVolAdapter_swigregister(AndreasenHugeLocalVolAdapter)

class HestonBlackVolSurface(BlackVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.HestonBlackVolSurface_swiginit(self, _ORE.new_HestonBlackVolSurface(*args))
    __swig_destroy__ = _ORE.delete_HestonBlackVolSurface

# Register HestonBlackVolSurface in _ORE:
_ORE.HestonBlackVolSurface_swigregister(HestonBlackVolSurface)

class CmsMarket(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, swapLengths, swapIndexes, iborIndex, bidAskSpreads, pricers, discountingTS):
        _ORE.CmsMarket_swiginit(self, _ORE.new_CmsMarket(swapLengths, swapIndexes, iborIndex, bidAskSpreads, pricers, discountingTS))

    def reprice(self, volStructure, meanReversion):
        return _ORE.CmsMarket_reprice(self, volStructure, meanReversion)

    def swapTenors(self):
        return _ORE.CmsMarket_swapTenors(self)

    def swapLengths(self):
        return _ORE.CmsMarket_swapLengths(self)

    def impliedCmsSpreads(self):
        return _ORE.CmsMarket_impliedCmsSpreads(self)

    def spreadErrors(self):
        return _ORE.CmsMarket_spreadErrors(self)

    def browse(self):
        return _ORE.CmsMarket_browse(self)

    def weightedSpreadError(self, weights):
        return _ORE.CmsMarket_weightedSpreadError(self, weights)

    def weightedSpotNpvError(self, weights):
        return _ORE.CmsMarket_weightedSpotNpvError(self, weights)

    def weightedFwdNpvError(self, weights):
        return _ORE.CmsMarket_weightedFwdNpvError(self, weights)

    def weightedSpreadErrors(self, weights):
        return _ORE.CmsMarket_weightedSpreadErrors(self, weights)

    def weightedSpotNpvErrors(self, weights):
        return _ORE.CmsMarket_weightedSpotNpvErrors(self, weights)

    def weightedFwdNpvErrors(self, weights):
        return _ORE.CmsMarket_weightedFwdNpvErrors(self, weights)
    __swig_destroy__ = _ORE.delete_CmsMarket

# Register CmsMarket in _ORE:
_ORE.CmsMarket_swigregister(CmsMarket)

class CmsMarketCalibration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    OnSpread = _ORE.CmsMarketCalibration_OnSpread
    OnPrice = _ORE.CmsMarketCalibration_OnPrice
    OnForwardCmsPrice = _ORE.CmsMarketCalibration_OnForwardCmsPrice

    def __init__(self, volCube, cmsMarket, weights, calibrationType):
        _ORE.CmsMarketCalibration_swiginit(self, _ORE.new_CmsMarketCalibration(volCube, cmsMarket, weights, calibrationType))

    def compute(self, *args):
        return _ORE.CmsMarketCalibration_compute(self, *args)

    def computeParametric(self, *args):
        return _ORE.CmsMarketCalibration_computeParametric(self, *args)

    def error(self):
        return _ORE.CmsMarketCalibration_error(self)

    def endCriteria(self):
        return _ORE.CmsMarketCalibration_endCriteria(self)
    __swig_destroy__ = _ORE.delete_CmsMarketCalibration

# Register CmsMarketCalibration in _ORE:
_ORE.CmsMarketCalibration_swigregister(CmsMarketCalibration)

class CashFlow(Observable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def amount(self):
        return _ORE.CashFlow_amount(self)

    def date(self):
        return _ORE.CashFlow_date(self)

    def hasOccurred(self, *args):
        return _ORE.CashFlow_hasOccurred(self, *args)
    __swig_destroy__ = _ORE.delete_CashFlow

# Register CashFlow in _ORE:
_ORE.CashFlow_swigregister(CashFlow)

class Leg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.Leg_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.Leg___nonzero__(self)

    def __bool__(self):
        return _ORE.Leg___bool__(self)

    def __len__(self):
        return _ORE.Leg___len__(self)

    def __getslice__(self, i, j):
        return _ORE.Leg___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.Leg___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.Leg___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.Leg___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.Leg___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.Leg___setitem__(self, *args)

    def pop(self):
        return _ORE.Leg_pop(self)

    def append(self, x):
        return _ORE.Leg_append(self, x)

    def empty(self):
        return _ORE.Leg_empty(self)

    def size(self):
        return _ORE.Leg_size(self)

    def swap(self, v):
        return _ORE.Leg_swap(self, v)

    def begin(self):
        return _ORE.Leg_begin(self)

    def end(self):
        return _ORE.Leg_end(self)

    def rbegin(self):
        return _ORE.Leg_rbegin(self)

    def rend(self):
        return _ORE.Leg_rend(self)

    def clear(self):
        return _ORE.Leg_clear(self)

    def get_allocator(self):
        return _ORE.Leg_get_allocator(self)

    def pop_back(self):
        return _ORE.Leg_pop_back(self)

    def erase(self, *args):
        return _ORE.Leg_erase(self, *args)

    def __init__(self, *args):
        _ORE.Leg_swiginit(self, _ORE.new_Leg(*args))

    def push_back(self, x):
        return _ORE.Leg_push_back(self, x)

    def front(self):
        return _ORE.Leg_front(self)

    def back(self):
        return _ORE.Leg_back(self)

    def assign(self, n, x):
        return _ORE.Leg_assign(self, n, x)

    def resize(self, *args):
        return _ORE.Leg_resize(self, *args)

    def insert(self, *args):
        return _ORE.Leg_insert(self, *args)

    def reserve(self, n):
        return _ORE.Leg_reserve(self, n)

    def capacity(self):
        return _ORE.Leg_capacity(self)
    __swig_destroy__ = _ORE.delete_Leg

# Register Leg in _ORE:
_ORE.Leg_swigregister(Leg)

class LegVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.LegVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.LegVector___nonzero__(self)

    def __bool__(self):
        return _ORE.LegVector___bool__(self)

    def __len__(self):
        return _ORE.LegVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.LegVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.LegVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.LegVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.LegVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.LegVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.LegVector___setitem__(self, *args)

    def pop(self):
        return _ORE.LegVector_pop(self)

    def append(self, x):
        return _ORE.LegVector_append(self, x)

    def empty(self):
        return _ORE.LegVector_empty(self)

    def size(self):
        return _ORE.LegVector_size(self)

    def swap(self, v):
        return _ORE.LegVector_swap(self, v)

    def begin(self):
        return _ORE.LegVector_begin(self)

    def end(self):
        return _ORE.LegVector_end(self)

    def rbegin(self):
        return _ORE.LegVector_rbegin(self)

    def rend(self):
        return _ORE.LegVector_rend(self)

    def clear(self):
        return _ORE.LegVector_clear(self)

    def get_allocator(self):
        return _ORE.LegVector_get_allocator(self)

    def pop_back(self):
        return _ORE.LegVector_pop_back(self)

    def erase(self, *args):
        return _ORE.LegVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.LegVector_swiginit(self, _ORE.new_LegVector(*args))

    def push_back(self, x):
        return _ORE.LegVector_push_back(self, x)

    def front(self):
        return _ORE.LegVector_front(self)

    def back(self):
        return _ORE.LegVector_back(self)

    def assign(self, n, x):
        return _ORE.LegVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.LegVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.LegVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.LegVector_reserve(self, n)

    def capacity(self):
        return _ORE.LegVector_capacity(self)
    __swig_destroy__ = _ORE.delete_LegVector

# Register LegVector in _ORE:
_ORE.LegVector_swigregister(LegVector)

class SimpleCashFlow(CashFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, amount, date):
        _ORE.SimpleCashFlow_swiginit(self, _ORE.new_SimpleCashFlow(amount, date))
    __swig_destroy__ = _ORE.delete_SimpleCashFlow

# Register SimpleCashFlow in _ORE:
_ORE.SimpleCashFlow_swigregister(SimpleCashFlow)

class Redemption(CashFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, amount, date):
        _ORE.Redemption_swiginit(self, _ORE.new_Redemption(amount, date))
    __swig_destroy__ = _ORE.delete_Redemption

# Register Redemption in _ORE:
_ORE.Redemption_swigregister(Redemption)

class AmortizingPayment(CashFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, amount, date):
        _ORE.AmortizingPayment_swiginit(self, _ORE.new_AmortizingPayment(amount, date))
    __swig_destroy__ = _ORE.delete_AmortizingPayment

# Register AmortizingPayment in _ORE:
_ORE.AmortizingPayment_swigregister(AmortizingPayment)

class IndexedCashFlow(CashFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, notional, index, baseDate, fixingDate, paymentDate, growthOnly=False):
        _ORE.IndexedCashFlow_swiginit(self, _ORE.new_IndexedCashFlow(notional, index, baseDate, fixingDate, paymentDate, growthOnly))

    def notional(self):
        return _ORE.IndexedCashFlow_notional(self)

    def baseDate(self):
        return _ORE.IndexedCashFlow_baseDate(self)

    def fixingDate(self):
        return _ORE.IndexedCashFlow_fixingDate(self)

    def baseFixing(self):
        return _ORE.IndexedCashFlow_baseFixing(self)

    def indexFixing(self):
        return _ORE.IndexedCashFlow_indexFixing(self)

    def index(self):
        return _ORE.IndexedCashFlow_index(self)

    def growthOnly(self):
        return _ORE.IndexedCashFlow_growthOnly(self)
    __swig_destroy__ = _ORE.delete_IndexedCashFlow

# Register IndexedCashFlow in _ORE:
_ORE.IndexedCashFlow_swigregister(IndexedCashFlow)


def as_indexed_cashflow(cf):
    return _ORE.as_indexed_cashflow(cf)
class Coupon(CashFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def nominal(self):
        return _ORE.Coupon_nominal(self)

    def accrualStartDate(self):
        return _ORE.Coupon_accrualStartDate(self)

    def accrualEndDate(self):
        return _ORE.Coupon_accrualEndDate(self)

    def referencePeriodStart(self):
        return _ORE.Coupon_referencePeriodStart(self)

    def referencePeriodEnd(self):
        return _ORE.Coupon_referencePeriodEnd(self)

    def exCouponDate(self):
        return _ORE.Coupon_exCouponDate(self)

    def rate(self):
        return _ORE.Coupon_rate(self)

    def accrualPeriod(self):
        return _ORE.Coupon_accrualPeriod(self)

    def accrualDays(self):
        return _ORE.Coupon_accrualDays(self)

    def dayCounter(self):
        return _ORE.Coupon_dayCounter(self)

    def accruedAmount(self, date):
        return _ORE.Coupon_accruedAmount(self, date)
    __swig_destroy__ = _ORE.delete_Coupon

# Register Coupon in _ORE:
_ORE.Coupon_swigregister(Coupon)


def as_coupon(cf):
    return _ORE.as_coupon(cf)
class FixedRateCoupon(Coupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.FixedRateCoupon_swiginit(self, _ORE.new_FixedRateCoupon(*args, **kwargs))

    def interestRate(self):
        return _ORE.FixedRateCoupon_interestRate(self)
    __swig_destroy__ = _ORE.delete_FixedRateCoupon

# Register FixedRateCoupon in _ORE:
_ORE.FixedRateCoupon_swigregister(FixedRateCoupon)


def as_fixed_rate_coupon(cf):
    return _ORE.as_fixed_rate_coupon(cf)
class FloatingRateCouponPricer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def swapletPrice(self):
        return _ORE.FloatingRateCouponPricer_swapletPrice(self)

    def swapletRate(self):
        return _ORE.FloatingRateCouponPricer_swapletRate(self)

    def capletPrice(self, effectiveCap):
        return _ORE.FloatingRateCouponPricer_capletPrice(self, effectiveCap)

    def capletRate(self, effectiveCap):
        return _ORE.FloatingRateCouponPricer_capletRate(self, effectiveCap)

    def floorletPrice(self, effectiveFloor):
        return _ORE.FloatingRateCouponPricer_floorletPrice(self, effectiveFloor)

    def floorletRate(self, effectiveFloor):
        return _ORE.FloatingRateCouponPricer_floorletRate(self, effectiveFloor)
    __swig_destroy__ = _ORE.delete_FloatingRateCouponPricer

# Register FloatingRateCouponPricer in _ORE:
_ORE.FloatingRateCouponPricer_swigregister(FloatingRateCouponPricer)

class FloatingRateCoupon(Coupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def fixingDate(self):
        return _ORE.FloatingRateCoupon_fixingDate(self)

    def fixingDays(self):
        return _ORE.FloatingRateCoupon_fixingDays(self)

    def isInArrears(self):
        return _ORE.FloatingRateCoupon_isInArrears(self)

    def gearing(self):
        return _ORE.FloatingRateCoupon_gearing(self)

    def spread(self):
        return _ORE.FloatingRateCoupon_spread(self)

    def indexFixing(self):
        return _ORE.FloatingRateCoupon_indexFixing(self)

    def adjustedFixing(self):
        return _ORE.FloatingRateCoupon_adjustedFixing(self)

    def convexityAdjustment(self):
        return _ORE.FloatingRateCoupon_convexityAdjustment(self)

    def price(self, discountCurve):
        return _ORE.FloatingRateCoupon_price(self, discountCurve)

    def index(self):
        return _ORE.FloatingRateCoupon_index(self)

    def setPricer(self, p):
        return _ORE.FloatingRateCoupon_setPricer(self, p)
    __swig_destroy__ = _ORE.delete_FloatingRateCoupon

# Register FloatingRateCoupon in _ORE:
_ORE.FloatingRateCoupon_swigregister(FloatingRateCoupon)


def as_floating_rate_coupon(cf):
    return _ORE.as_floating_rate_coupon(cf)
class RateAveraging(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Simple = _ORE.RateAveraging_Simple
    Compound = _ORE.RateAveraging_Compound

    def __init__(self):
        _ORE.RateAveraging_swiginit(self, _ORE.new_RateAveraging())
    __swig_destroy__ = _ORE.delete_RateAveraging

# Register RateAveraging in _ORE:
_ORE.RateAveraging_swigregister(RateAveraging)

class OvernightIndexedCoupon(FloatingRateCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.OvernightIndexedCoupon_swiginit(self, _ORE.new_OvernightIndexedCoupon(*args))

    def fixingDates(self):
        return _ORE.OvernightIndexedCoupon_fixingDates(self)

    def dt(self):
        return _ORE.OvernightIndexedCoupon_dt(self)

    def indexFixings(self):
        return _ORE.OvernightIndexedCoupon_indexFixings(self)

    def valueDates(self):
        return _ORE.OvernightIndexedCoupon_valueDates(self)
    __swig_destroy__ = _ORE.delete_OvernightIndexedCoupon

# Register OvernightIndexedCoupon in _ORE:
_ORE.OvernightIndexedCoupon_swigregister(OvernightIndexedCoupon)


def as_overnight_indexed_coupon(cf):
    return _ORE.as_overnight_indexed_coupon(cf)
class CappedFlooredCoupon(FloatingRateCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.CappedFlooredCoupon_swiginit(self, _ORE.new_CappedFlooredCoupon(*args, **kwargs))

    def cap(self):
        return _ORE.CappedFlooredCoupon_cap(self)

    def floor(self):
        return _ORE.CappedFlooredCoupon_floor(self)

    def effectiveCap(self):
        return _ORE.CappedFlooredCoupon_effectiveCap(self)

    def effectiveFloor(self):
        return _ORE.CappedFlooredCoupon_effectiveFloor(self)

    def isCapped(self):
        return _ORE.CappedFlooredCoupon_isCapped(self)

    def isFloored(self):
        return _ORE.CappedFlooredCoupon_isFloored(self)

    def setPricer(self, p):
        return _ORE.CappedFlooredCoupon_setPricer(self, p)
    __swig_destroy__ = _ORE.delete_CappedFlooredCoupon

# Register CappedFlooredCoupon in _ORE:
_ORE.CappedFlooredCoupon_swigregister(CappedFlooredCoupon)

class IborCoupon(FloatingRateCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.IborCoupon_swiginit(self, _ORE.new_IborCoupon(*args, **kwargs))

    @staticmethod
    def createAtParCoupons():
        return _ORE.IborCoupon_createAtParCoupons()

    @staticmethod
    def createIndexedCoupons():
        return _ORE.IborCoupon_createIndexedCoupons()

    @staticmethod
    def usingAtParCoupons():
        return _ORE.IborCoupon_usingAtParCoupons()
    __swig_destroy__ = _ORE.delete_IborCoupon

# Register IborCoupon in _ORE:
_ORE.IborCoupon_swigregister(IborCoupon)

def IborCoupon_createAtParCoupons():
    return _ORE.IborCoupon_createAtParCoupons()

def IborCoupon_createIndexedCoupons():
    return _ORE.IborCoupon_createIndexedCoupons()

def IborCoupon_usingAtParCoupons():
    return _ORE.IborCoupon_usingAtParCoupons()

class CappedFlooredIborCoupon(CappedFlooredCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.CappedFlooredIborCoupon_swiginit(self, _ORE.new_CappedFlooredIborCoupon(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_CappedFlooredIborCoupon

# Register CappedFlooredIborCoupon in _ORE:
_ORE.CappedFlooredIborCoupon_swigregister(CappedFlooredIborCoupon)

class SubPeriodsCoupon(FloatingRateCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.SubPeriodsCoupon_swiginit(self, _ORE.new_SubPeriodsCoupon(*args, **kwargs))

    def fixingDates(self):
        return _ORE.SubPeriodsCoupon_fixingDates(self)

    def dt(self):
        return _ORE.SubPeriodsCoupon_dt(self)

    def valueDates(self):
        return _ORE.SubPeriodsCoupon_valueDates(self)

    def rateSpread(self):
        return _ORE.SubPeriodsCoupon_rateSpread(self)
    __swig_destroy__ = _ORE.delete_SubPeriodsCoupon

# Register SubPeriodsCoupon in _ORE:
_ORE.SubPeriodsCoupon_swigregister(SubPeriodsCoupon)


def as_sub_periods_coupon(cf):
    return _ORE.as_sub_periods_coupon(cf)
class IborCouponPricer(FloatingRateCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def capletVolatility(self):
        return _ORE.IborCouponPricer_capletVolatility(self)

    def setCapletVolatility(self, *args):
        return _ORE.IborCouponPricer_setCapletVolatility(self, *args)
    __swig_destroy__ = _ORE.delete_IborCouponPricer

# Register IborCouponPricer in _ORE:
_ORE.IborCouponPricer_swigregister(IborCouponPricer)

class BlackIborCouponPricer(IborCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Black76 = _ORE.BlackIborCouponPricer_Black76
    BivariateLognormal = _ORE.BlackIborCouponPricer_BivariateLognormal

    def __init__(self, *args, **kwargs):
        _ORE.BlackIborCouponPricer_swiginit(self, _ORE.new_BlackIborCouponPricer(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_BlackIborCouponPricer

# Register BlackIborCouponPricer in _ORE:
_ORE.BlackIborCouponPricer_swigregister(BlackIborCouponPricer)

class SubPeriodsPricer(FloatingRateCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ORE.delete_SubPeriodsPricer

# Register SubPeriodsPricer in _ORE:
_ORE.SubPeriodsPricer_swigregister(SubPeriodsPricer)

class CompoundingRatePricer(SubPeriodsPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.CompoundingRatePricer_swiginit(self, _ORE.new_CompoundingRatePricer())
    __swig_destroy__ = _ORE.delete_CompoundingRatePricer

# Register CompoundingRatePricer in _ORE:
_ORE.CompoundingRatePricer_swigregister(CompoundingRatePricer)

class AveragingRatePricer(SubPeriodsPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.AveragingRatePricer_swiginit(self, _ORE.new_AveragingRatePricer())
    __swig_destroy__ = _ORE.delete_AveragingRatePricer

# Register AveragingRatePricer in _ORE:
_ORE.AveragingRatePricer_swigregister(AveragingRatePricer)

class CmsCoupon(FloatingRateCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.CmsCoupon_swiginit(self, _ORE.new_CmsCoupon(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_CmsCoupon

# Register CmsCoupon in _ORE:
_ORE.CmsCoupon_swigregister(CmsCoupon)

class CmsSpreadCoupon(FloatingRateCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.CmsSpreadCoupon_swiginit(self, _ORE.new_CmsSpreadCoupon(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_CmsSpreadCoupon

# Register CmsSpreadCoupon in _ORE:
_ORE.CmsSpreadCoupon_swigregister(CmsSpreadCoupon)

class CmsCouponPricer(FloatingRateCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def swaptionVolatility(self):
        return _ORE.CmsCouponPricer_swaptionVolatility(self)

    def setSwaptionVolatility(self, *args):
        return _ORE.CmsCouponPricer_setSwaptionVolatility(self, *args)
    __swig_destroy__ = _ORE.delete_CmsCouponPricer

# Register CmsCouponPricer in _ORE:
_ORE.CmsCouponPricer_swigregister(CmsCouponPricer)

class CmsCouponPricerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.CmsCouponPricerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.CmsCouponPricerVector___nonzero__(self)

    def __bool__(self):
        return _ORE.CmsCouponPricerVector___bool__(self)

    def __len__(self):
        return _ORE.CmsCouponPricerVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.CmsCouponPricerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.CmsCouponPricerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.CmsCouponPricerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.CmsCouponPricerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.CmsCouponPricerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.CmsCouponPricerVector___setitem__(self, *args)

    def pop(self):
        return _ORE.CmsCouponPricerVector_pop(self)

    def append(self, x):
        return _ORE.CmsCouponPricerVector_append(self, x)

    def empty(self):
        return _ORE.CmsCouponPricerVector_empty(self)

    def size(self):
        return _ORE.CmsCouponPricerVector_size(self)

    def swap(self, v):
        return _ORE.CmsCouponPricerVector_swap(self, v)

    def begin(self):
        return _ORE.CmsCouponPricerVector_begin(self)

    def end(self):
        return _ORE.CmsCouponPricerVector_end(self)

    def rbegin(self):
        return _ORE.CmsCouponPricerVector_rbegin(self)

    def rend(self):
        return _ORE.CmsCouponPricerVector_rend(self)

    def clear(self):
        return _ORE.CmsCouponPricerVector_clear(self)

    def get_allocator(self):
        return _ORE.CmsCouponPricerVector_get_allocator(self)

    def pop_back(self):
        return _ORE.CmsCouponPricerVector_pop_back(self)

    def erase(self, *args):
        return _ORE.CmsCouponPricerVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.CmsCouponPricerVector_swiginit(self, _ORE.new_CmsCouponPricerVector(*args))

    def push_back(self, x):
        return _ORE.CmsCouponPricerVector_push_back(self, x)

    def front(self):
        return _ORE.CmsCouponPricerVector_front(self)

    def back(self):
        return _ORE.CmsCouponPricerVector_back(self)

    def assign(self, n, x):
        return _ORE.CmsCouponPricerVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.CmsCouponPricerVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.CmsCouponPricerVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.CmsCouponPricerVector_reserve(self, n)

    def capacity(self):
        return _ORE.CmsCouponPricerVector_capacity(self)
    __swig_destroy__ = _ORE.delete_CmsCouponPricerVector

# Register CmsCouponPricerVector in _ORE:
_ORE.CmsCouponPricerVector_swigregister(CmsCouponPricerVector)

class GFunctionFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Standard = _ORE.GFunctionFactory_Standard
    ExactYield = _ORE.GFunctionFactory_ExactYield
    ParallelShifts = _ORE.GFunctionFactory_ParallelShifts
    NonParallelShifts = _ORE.GFunctionFactory_NonParallelShifts
    __swig_destroy__ = _ORE.delete_GFunctionFactory

# Register GFunctionFactory in _ORE:
_ORE.GFunctionFactory_swigregister(GFunctionFactory)

class AnalyticHaganPricer(CmsCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, v, model, meanReversion):
        _ORE.AnalyticHaganPricer_swiginit(self, _ORE.new_AnalyticHaganPricer(v, model, meanReversion))
    __swig_destroy__ = _ORE.delete_AnalyticHaganPricer

# Register AnalyticHaganPricer in _ORE:
_ORE.AnalyticHaganPricer_swigregister(AnalyticHaganPricer)

class NumericHaganPricer(CmsCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, v, model, meanReversion, lowerLimit=0.0, upperLimit=1.0, precision=1.0e-6):
        _ORE.NumericHaganPricer_swiginit(self, _ORE.new_NumericHaganPricer(v, model, meanReversion, lowerLimit, upperLimit, precision))
    __swig_destroy__ = _ORE.delete_NumericHaganPricer

# Register NumericHaganPricer in _ORE:
_ORE.NumericHaganPricer_swigregister(NumericHaganPricer)

class CappedFlooredCmsCoupon(CappedFlooredCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CappedFlooredCmsCoupon_swiginit(self, _ORE.new_CappedFlooredCmsCoupon(*args))
    __swig_destroy__ = _ORE.delete_CappedFlooredCmsCoupon

# Register CappedFlooredCmsCoupon in _ORE:
_ORE.CappedFlooredCmsCoupon_swigregister(CappedFlooredCmsCoupon)

class CappedFlooredCmsSpreadCoupon(CappedFlooredCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CappedFlooredCmsSpreadCoupon_swiginit(self, _ORE.new_CappedFlooredCmsSpreadCoupon(*args))
    __swig_destroy__ = _ORE.delete_CappedFlooredCmsSpreadCoupon

# Register CappedFlooredCmsSpreadCoupon in _ORE:
_ORE.CappedFlooredCmsSpreadCoupon_swigregister(CappedFlooredCmsSpreadCoupon)

class LinearTsrPricer(CmsCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.LinearTsrPricer_swiginit(self, _ORE.new_LinearTsrPricer(*args))
    __swig_destroy__ = _ORE.delete_LinearTsrPricer

# Register LinearTsrPricer in _ORE:
_ORE.LinearTsrPricer_swigregister(LinearTsrPricer)

class LinearTsrPricerSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.LinearTsrPricerSettings_swiginit(self, _ORE.new_LinearTsrPricerSettings())

    def withRateBound(self, lowerRateBound=0.0001, upperRateBound=2.0000):
        return _ORE.LinearTsrPricerSettings_withRateBound(self, lowerRateBound, upperRateBound)

    def withVegaRatio(self, *args):
        return _ORE.LinearTsrPricerSettings_withVegaRatio(self, *args)

    def withPriceThreshold(self, *args):
        return _ORE.LinearTsrPricerSettings_withPriceThreshold(self, *args)

    def withBSStdDevs(self, *args):
        return _ORE.LinearTsrPricerSettings_withBSStdDevs(self, *args)
    RateBound = _ORE.LinearTsrPricerSettings_RateBound
    VegaRatio = _ORE.LinearTsrPricerSettings_VegaRatio
    PriceThreshold = _ORE.LinearTsrPricerSettings_PriceThreshold
    BSStdDevs = _ORE.LinearTsrPricerSettings_BSStdDevs
    __swig_destroy__ = _ORE.delete_LinearTsrPricerSettings

# Register LinearTsrPricerSettings in _ORE:
_ORE.LinearTsrPricerSettings_swigregister(LinearTsrPricerSettings)

class CmsSpreadCouponPricer(FloatingRateCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def correlation(self):
        return _ORE.CmsSpreadCouponPricer_correlation(self)

    def setCorrelation(self, *args):
        return _ORE.CmsSpreadCouponPricer_setCorrelation(self, *args)
    __swig_destroy__ = _ORE.delete_CmsSpreadCouponPricer

# Register CmsSpreadCouponPricer in _ORE:
_ORE.CmsSpreadCouponPricer_swigregister(CmsSpreadCouponPricer)

class LognormalCmsSpreadPricer(CmsSpreadCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.LognormalCmsSpreadPricer_swiginit(self, _ORE.new_LognormalCmsSpreadPricer(*args))

    def swapletPrice(self):
        return _ORE.LognormalCmsSpreadPricer_swapletPrice(self)

    def swapletRate(self):
        return _ORE.LognormalCmsSpreadPricer_swapletRate(self)

    def capletPrice(self, effectiveCap):
        return _ORE.LognormalCmsSpreadPricer_capletPrice(self, effectiveCap)

    def capletRate(self, effectiveCap):
        return _ORE.LognormalCmsSpreadPricer_capletRate(self, effectiveCap)

    def floorletPrice(self, effectiveFloor):
        return _ORE.LognormalCmsSpreadPricer_floorletPrice(self, effectiveFloor)

    def floorletRate(self, effectiveFloor):
        return _ORE.LognormalCmsSpreadPricer_floorletRate(self, effectiveFloor)
    __swig_destroy__ = _ORE.delete_LognormalCmsSpreadPricer

# Register LognormalCmsSpreadPricer in _ORE:
_ORE.LognormalCmsSpreadPricer_swigregister(LognormalCmsSpreadPricer)

class EquityCashFlowPricer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ORE.delete_EquityCashFlowPricer

# Register EquityCashFlowPricer in _ORE:
_ORE.EquityCashFlowPricer_swigregister(EquityCashFlowPricer)

class EquityCashFlow(IndexedCashFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, notional, index, baseDate, fixingDate, paymentDate, growthOnly=True):
        _ORE.EquityCashFlow_swiginit(self, _ORE.new_EquityCashFlow(notional, index, baseDate, fixingDate, paymentDate, growthOnly))

    def setPricer(self, arg2):
        return _ORE.EquityCashFlow_setPricer(self, arg2)
    __swig_destroy__ = _ORE.delete_EquityCashFlow

# Register EquityCashFlow in _ORE:
_ORE.EquityCashFlow_swigregister(EquityCashFlow)

class EquityQuantoCashFlowPricer(EquityCashFlowPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, quantoCurrencyTermStructure, equityVolatility, fxVolatility, correlation):
        _ORE.EquityQuantoCashFlowPricer_swiginit(self, _ORE.new_EquityQuantoCashFlowPricer(quantoCurrencyTermStructure, equityVolatility, fxVolatility, correlation))
    __swig_destroy__ = _ORE.delete_EquityQuantoCashFlowPricer

# Register EquityQuantoCashFlowPricer in _ORE:
_ORE.EquityQuantoCashFlowPricer_swigregister(EquityQuantoCashFlowPricer)


def FixedRateLeg(*args, **kwargs):
    return _ORE.FixedRateLeg(*args, **kwargs)

def IborLeg(*args, **kwargs):
    return _ORE.IborLeg(*args, **kwargs)

def OvernightLeg(*args, **kwargs):
    return _ORE.OvernightLeg(*args, **kwargs)

def CmsLeg(*args, **kwargs):
    return _ORE.CmsLeg(*args, **kwargs)

def CmsZeroLeg(*args, **kwargs):
    return _ORE.CmsZeroLeg(*args, **kwargs)

def CmsSpreadLeg(*args, **kwargs):
    return _ORE.CmsSpreadLeg(*args, **kwargs)

def SubPeriodsLeg(*args, **kwargs):
    return _ORE.SubPeriodsLeg(*args, **kwargs)
class Duration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Simple = _ORE.Duration_Simple
    Macaulay = _ORE.Duration_Macaulay
    Modified = _ORE.Duration_Modified

    def __init__(self):
        _ORE.Duration_swiginit(self, _ORE.new_Duration())
    __swig_destroy__ = _ORE.delete_Duration

# Register Duration in _ORE:
_ORE.Duration_swigregister(Duration)

class CashFlows(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def startDate(arg1):
        return _ORE.CashFlows_startDate(arg1)

    @staticmethod
    def maturityDate(arg1):
        return _ORE.CashFlows_maturityDate(arg1)

    @staticmethod
    def previousCashFlowDate(*args):
        return _ORE.CashFlows_previousCashFlowDate(*args)

    @staticmethod
    def nextCashFlowDate(*args):
        return _ORE.CashFlows_nextCashFlowDate(*args)

    @staticmethod
    def previousCashFlowAmount(*args):
        return _ORE.CashFlows_previousCashFlowAmount(*args)

    @staticmethod
    def nextCashFlowAmount(*args):
        return _ORE.CashFlows_nextCashFlowAmount(*args)

    @staticmethod
    def previousCashFlow(*args):
        return _ORE.CashFlows_previousCashFlow(*args)

    @staticmethod
    def nextCashFlow(*args):
        return _ORE.CashFlows_nextCashFlow(*args)

    @staticmethod
    def npv(*args):
        return _ORE.CashFlows_npv(*args)

    @staticmethod
    def bps(*args):
        return _ORE.CashFlows_bps(*args)

    @staticmethod
    def npvbps(*args):
        return _ORE.CashFlows_npvbps(*args)

    @staticmethod
    def atmRate(*args):
        return _ORE.CashFlows_atmRate(*args)

    @staticmethod
    def yieldRate(*args):
        return _ORE.CashFlows_yieldRate(*args)

    @staticmethod
    def duration(*args):
        return _ORE.CashFlows_duration(*args)

    @staticmethod
    def convexity(*args):
        return _ORE.CashFlows_convexity(*args)

    @staticmethod
    def basisPointValue(*args):
        return _ORE.CashFlows_basisPointValue(*args)

    @staticmethod
    def zSpread(*args):
        return _ORE.CashFlows_zSpread(*args)
    __swig_destroy__ = _ORE.delete_CashFlows

# Register CashFlows in _ORE:
_ORE.CashFlows_swigregister(CashFlows)

def CashFlows_startDate(arg1):
    return _ORE.CashFlows_startDate(arg1)

def CashFlows_maturityDate(arg1):
    return _ORE.CashFlows_maturityDate(arg1)

def CashFlows_previousCashFlowDate(*args):
    return _ORE.CashFlows_previousCashFlowDate(*args)

def CashFlows_nextCashFlowDate(*args):
    return _ORE.CashFlows_nextCashFlowDate(*args)

def CashFlows_previousCashFlowAmount(*args):
    return _ORE.CashFlows_previousCashFlowAmount(*args)

def CashFlows_nextCashFlowAmount(*args):
    return _ORE.CashFlows_nextCashFlowAmount(*args)

def CashFlows_previousCashFlow(*args):
    return _ORE.CashFlows_previousCashFlow(*args)

def CashFlows_nextCashFlow(*args):
    return _ORE.CashFlows_nextCashFlow(*args)

def CashFlows_npv(*args):
    return _ORE.CashFlows_npv(*args)

def CashFlows_bps(*args):
    return _ORE.CashFlows_bps(*args)

def CashFlows_npvbps(*args):
    return _ORE.CashFlows_npvbps(*args)

def CashFlows_atmRate(*args):
    return _ORE.CashFlows_atmRate(*args)

def CashFlows_yieldRate(*args):
    return _ORE.CashFlows_yieldRate(*args)

def CashFlows_duration(*args):
    return _ORE.CashFlows_duration(*args)

def CashFlows_convexity(*args):
    return _ORE.CashFlows_convexity(*args)

def CashFlows_basisPointValue(*args):
    return _ORE.CashFlows_basisPointValue(*args)

def CashFlows_zSpread(*args):
    return _ORE.CashFlows_zSpread(*args)

class Dividend(CashFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ORE.delete_Dividend

# Register Dividend in _ORE:
_ORE.Dividend_swigregister(Dividend)

class FixedDividend(Dividend):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, amount, date):
        _ORE.FixedDividend_swiginit(self, _ORE.new_FixedDividend(amount, date))
    __swig_destroy__ = _ORE.delete_FixedDividend

# Register FixedDividend in _ORE:
_ORE.FixedDividend_swigregister(FixedDividend)

class FractionalDividend(Dividend):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rate, date):
        _ORE.FractionalDividend_swiginit(self, _ORE.new_FractionalDividend(rate, date))
    __swig_destroy__ = _ORE.delete_FractionalDividend

# Register FractionalDividend in _ORE:
_ORE.FractionalDividend_swigregister(FractionalDividend)

class DividendSchedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.DividendSchedule_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.DividendSchedule___nonzero__(self)

    def __bool__(self):
        return _ORE.DividendSchedule___bool__(self)

    def __len__(self):
        return _ORE.DividendSchedule___len__(self)

    def __getslice__(self, i, j):
        return _ORE.DividendSchedule___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.DividendSchedule___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.DividendSchedule___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.DividendSchedule___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.DividendSchedule___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.DividendSchedule___setitem__(self, *args)

    def pop(self):
        return _ORE.DividendSchedule_pop(self)

    def append(self, x):
        return _ORE.DividendSchedule_append(self, x)

    def empty(self):
        return _ORE.DividendSchedule_empty(self)

    def size(self):
        return _ORE.DividendSchedule_size(self)

    def swap(self, v):
        return _ORE.DividendSchedule_swap(self, v)

    def begin(self):
        return _ORE.DividendSchedule_begin(self)

    def end(self):
        return _ORE.DividendSchedule_end(self)

    def rbegin(self):
        return _ORE.DividendSchedule_rbegin(self)

    def rend(self):
        return _ORE.DividendSchedule_rend(self)

    def clear(self):
        return _ORE.DividendSchedule_clear(self)

    def get_allocator(self):
        return _ORE.DividendSchedule_get_allocator(self)

    def pop_back(self):
        return _ORE.DividendSchedule_pop_back(self)

    def erase(self, *args):
        return _ORE.DividendSchedule_erase(self, *args)

    def __init__(self, *args):
        _ORE.DividendSchedule_swiginit(self, _ORE.new_DividendSchedule(*args))

    def push_back(self, x):
        return _ORE.DividendSchedule_push_back(self, x)

    def front(self):
        return _ORE.DividendSchedule_front(self)

    def back(self):
        return _ORE.DividendSchedule_back(self)

    def assign(self, n, x):
        return _ORE.DividendSchedule_assign(self, n, x)

    def resize(self, *args):
        return _ORE.DividendSchedule_resize(self, *args)

    def insert(self, *args):
        return _ORE.DividendSchedule_insert(self, *args)

    def reserve(self, n):
        return _ORE.DividendSchedule_reserve(self, n)

    def capacity(self):
        return _ORE.DividendSchedule_capacity(self)
    __swig_destroy__ = _ORE.delete_DividendSchedule

# Register DividendSchedule in _ORE:
_ORE.DividendSchedule_swigregister(DividendSchedule)

class Exercise(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    American = _ORE.Exercise_American
    Bermudan = _ORE.Exercise_Bermudan
    European = _ORE.Exercise_European

    def __init__(self, type):
        _ORE.Exercise_swiginit(self, _ORE.new_Exercise(type))

    def type(self):
        return _ORE.Exercise_type(self)

    def date(self, index):
        return _ORE.Exercise_date(self, index)

    def dateAt(self, index):
        return _ORE.Exercise_dateAt(self, index)

    def dates(self):
        return _ORE.Exercise_dates(self)

    def lastDate(self):
        return _ORE.Exercise_lastDate(self)
    __swig_destroy__ = _ORE.delete_Exercise

# Register Exercise in _ORE:
_ORE.Exercise_swigregister(Exercise)

class EuropeanExercise(Exercise):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, date):
        _ORE.EuropeanExercise_swiginit(self, _ORE.new_EuropeanExercise(date))
    __swig_destroy__ = _ORE.delete_EuropeanExercise

# Register EuropeanExercise in _ORE:
_ORE.EuropeanExercise_swigregister(EuropeanExercise)

class AmericanExercise(Exercise):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, earliestDate, latestDate, payoffAtExpiry=False):
        _ORE.AmericanExercise_swiginit(self, _ORE.new_AmericanExercise(earliestDate, latestDate, payoffAtExpiry))
    __swig_destroy__ = _ORE.delete_AmericanExercise

# Register AmericanExercise in _ORE:
_ORE.AmericanExercise_swigregister(AmericanExercise)

class BermudanExercise(Exercise):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dates, payoffAtExpiry=False):
        _ORE.BermudanExercise_swiginit(self, _ORE.new_BermudanExercise(dates, payoffAtExpiry))
    __swig_destroy__ = _ORE.delete_BermudanExercise

# Register BermudanExercise in _ORE:
_ORE.BermudanExercise_swigregister(BermudanExercise)

class RebatedExercise(Exercise):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.RebatedExercise_swiginit(self, _ORE.new_RebatedExercise(*args))
    __swig_destroy__ = _ORE.delete_RebatedExercise

# Register RebatedExercise in _ORE:
_ORE.RebatedExercise_swigregister(RebatedExercise)

class SwingExercise(Exercise):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dates):
        _ORE.SwingExercise_swiginit(self, _ORE.new_SwingExercise(dates))
    __swig_destroy__ = _ORE.delete_SwingExercise

# Register SwingExercise in _ORE:
_ORE.SwingExercise_swigregister(SwingExercise)

class StochasticProcess(Observable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def size(self):
        return _ORE.StochasticProcess_size(self)

    def factors(self):
        return _ORE.StochasticProcess_factors(self)

    def initialValues(self):
        return _ORE.StochasticProcess_initialValues(self)

    def drift(self, t, x):
        return _ORE.StochasticProcess_drift(self, t, x)

    def diffusion(self, t, x):
        return _ORE.StochasticProcess_diffusion(self, t, x)

    def expectation(self, t0, x0, dt):
        return _ORE.StochasticProcess_expectation(self, t0, x0, dt)

    def stdDeviation(self, t0, x0, dt):
        return _ORE.StochasticProcess_stdDeviation(self, t0, x0, dt)

    def covariance(self, t0, x0, dt):
        return _ORE.StochasticProcess_covariance(self, t0, x0, dt)

    def evolve(self, t0, x0, dt, dw):
        return _ORE.StochasticProcess_evolve(self, t0, x0, dt, dw)
    __swig_destroy__ = _ORE.delete_StochasticProcess

# Register StochasticProcess in _ORE:
_ORE.StochasticProcess_swigregister(StochasticProcess)

class StochasticProcessVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.StochasticProcessVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.StochasticProcessVector___nonzero__(self)

    def __bool__(self):
        return _ORE.StochasticProcessVector___bool__(self)

    def __len__(self):
        return _ORE.StochasticProcessVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.StochasticProcessVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.StochasticProcessVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.StochasticProcessVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.StochasticProcessVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.StochasticProcessVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.StochasticProcessVector___setitem__(self, *args)

    def pop(self):
        return _ORE.StochasticProcessVector_pop(self)

    def append(self, x):
        return _ORE.StochasticProcessVector_append(self, x)

    def empty(self):
        return _ORE.StochasticProcessVector_empty(self)

    def size(self):
        return _ORE.StochasticProcessVector_size(self)

    def swap(self, v):
        return _ORE.StochasticProcessVector_swap(self, v)

    def begin(self):
        return _ORE.StochasticProcessVector_begin(self)

    def end(self):
        return _ORE.StochasticProcessVector_end(self)

    def rbegin(self):
        return _ORE.StochasticProcessVector_rbegin(self)

    def rend(self):
        return _ORE.StochasticProcessVector_rend(self)

    def clear(self):
        return _ORE.StochasticProcessVector_clear(self)

    def get_allocator(self):
        return _ORE.StochasticProcessVector_get_allocator(self)

    def pop_back(self):
        return _ORE.StochasticProcessVector_pop_back(self)

    def erase(self, *args):
        return _ORE.StochasticProcessVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.StochasticProcessVector_swiginit(self, _ORE.new_StochasticProcessVector(*args))

    def push_back(self, x):
        return _ORE.StochasticProcessVector_push_back(self, x)

    def front(self):
        return _ORE.StochasticProcessVector_front(self)

    def back(self):
        return _ORE.StochasticProcessVector_back(self)

    def assign(self, n, x):
        return _ORE.StochasticProcessVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.StochasticProcessVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.StochasticProcessVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.StochasticProcessVector_reserve(self, n)

    def capacity(self):
        return _ORE.StochasticProcessVector_capacity(self)
    __swig_destroy__ = _ORE.delete_StochasticProcessVector

# Register StochasticProcessVector in _ORE:
_ORE.StochasticProcessVector_swigregister(StochasticProcessVector)

class StochasticProcess1D(StochasticProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def x0(self):
        return _ORE.StochasticProcess1D_x0(self)

    def drift(self, t, x):
        return _ORE.StochasticProcess1D_drift(self, t, x)

    def diffusion(self, t, x):
        return _ORE.StochasticProcess1D_diffusion(self, t, x)

    def expectation(self, t0, x0, dt):
        return _ORE.StochasticProcess1D_expectation(self, t0, x0, dt)

    def stdDeviation(self, t0, x0, dt):
        return _ORE.StochasticProcess1D_stdDeviation(self, t0, x0, dt)

    def variance(self, t0, x0, dt):
        return _ORE.StochasticProcess1D_variance(self, t0, x0, dt)

    def evolve(self, t0, x0, dt, dw):
        return _ORE.StochasticProcess1D_evolve(self, t0, x0, dt, dw)

    def apply(self, x0, dx):
        return _ORE.StochasticProcess1D_apply(self, x0, dx)
    __swig_destroy__ = _ORE.delete_StochasticProcess1D

# Register StochasticProcess1D in _ORE:
_ORE.StochasticProcess1D_swigregister(StochasticProcess1D)

class StochasticProcess1DVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.StochasticProcess1DVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.StochasticProcess1DVector___nonzero__(self)

    def __bool__(self):
        return _ORE.StochasticProcess1DVector___bool__(self)

    def __len__(self):
        return _ORE.StochasticProcess1DVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.StochasticProcess1DVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.StochasticProcess1DVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.StochasticProcess1DVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.StochasticProcess1DVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.StochasticProcess1DVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.StochasticProcess1DVector___setitem__(self, *args)

    def pop(self):
        return _ORE.StochasticProcess1DVector_pop(self)

    def append(self, x):
        return _ORE.StochasticProcess1DVector_append(self, x)

    def empty(self):
        return _ORE.StochasticProcess1DVector_empty(self)

    def size(self):
        return _ORE.StochasticProcess1DVector_size(self)

    def swap(self, v):
        return _ORE.StochasticProcess1DVector_swap(self, v)

    def begin(self):
        return _ORE.StochasticProcess1DVector_begin(self)

    def end(self):
        return _ORE.StochasticProcess1DVector_end(self)

    def rbegin(self):
        return _ORE.StochasticProcess1DVector_rbegin(self)

    def rend(self):
        return _ORE.StochasticProcess1DVector_rend(self)

    def clear(self):
        return _ORE.StochasticProcess1DVector_clear(self)

    def get_allocator(self):
        return _ORE.StochasticProcess1DVector_get_allocator(self)

    def pop_back(self):
        return _ORE.StochasticProcess1DVector_pop_back(self)

    def erase(self, *args):
        return _ORE.StochasticProcess1DVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.StochasticProcess1DVector_swiginit(self, _ORE.new_StochasticProcess1DVector(*args))

    def push_back(self, x):
        return _ORE.StochasticProcess1DVector_push_back(self, x)

    def front(self):
        return _ORE.StochasticProcess1DVector_front(self)

    def back(self):
        return _ORE.StochasticProcess1DVector_back(self)

    def assign(self, n, x):
        return _ORE.StochasticProcess1DVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.StochasticProcess1DVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.StochasticProcess1DVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.StochasticProcess1DVector_reserve(self, n)

    def capacity(self):
        return _ORE.StochasticProcess1DVector_capacity(self)
    __swig_destroy__ = _ORE.delete_StochasticProcess1DVector

# Register StochasticProcess1DVector in _ORE:
_ORE.StochasticProcess1DVector_swigregister(StochasticProcess1DVector)

class GeneralizedBlackScholesProcess(StochasticProcess1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.GeneralizedBlackScholesProcess_swiginit(self, _ORE.new_GeneralizedBlackScholesProcess(*args))

    def stateVariable(self):
        return _ORE.GeneralizedBlackScholesProcess_stateVariable(self)

    def dividendYield(self):
        return _ORE.GeneralizedBlackScholesProcess_dividendYield(self)

    def riskFreeRate(self):
        return _ORE.GeneralizedBlackScholesProcess_riskFreeRate(self)

    def blackVolatility(self):
        return _ORE.GeneralizedBlackScholesProcess_blackVolatility(self)

    def localVolatility(self):
        return _ORE.GeneralizedBlackScholesProcess_localVolatility(self)
    __swig_destroy__ = _ORE.delete_GeneralizedBlackScholesProcess

# Register GeneralizedBlackScholesProcess in _ORE:
_ORE.GeneralizedBlackScholesProcess_swigregister(GeneralizedBlackScholesProcess)

class BlackScholesProcess(GeneralizedBlackScholesProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s0, riskFreeTS, volTS):
        _ORE.BlackScholesProcess_swiginit(self, _ORE.new_BlackScholesProcess(s0, riskFreeTS, volTS))
    __swig_destroy__ = _ORE.delete_BlackScholesProcess

# Register BlackScholesProcess in _ORE:
_ORE.BlackScholesProcess_swigregister(BlackScholesProcess)

class BlackScholesMertonProcess(GeneralizedBlackScholesProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s0, dividendTS, riskFreeTS, volTS):
        _ORE.BlackScholesMertonProcess_swiginit(self, _ORE.new_BlackScholesMertonProcess(s0, dividendTS, riskFreeTS, volTS))
    __swig_destroy__ = _ORE.delete_BlackScholesMertonProcess

# Register BlackScholesMertonProcess in _ORE:
_ORE.BlackScholesMertonProcess_swigregister(BlackScholesMertonProcess)

class BlackProcess(GeneralizedBlackScholesProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s0, riskFreeTS, volTS):
        _ORE.BlackProcess_swiginit(self, _ORE.new_BlackProcess(s0, riskFreeTS, volTS))
    __swig_destroy__ = _ORE.delete_BlackProcess

# Register BlackProcess in _ORE:
_ORE.BlackProcess_swigregister(BlackProcess)

class GarmanKohlagenProcess(GeneralizedBlackScholesProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s0, foreignRiskFreeTS, domesticRiskFreeTS, volTS):
        _ORE.GarmanKohlagenProcess_swiginit(self, _ORE.new_GarmanKohlagenProcess(s0, foreignRiskFreeTS, domesticRiskFreeTS, volTS))
    __swig_destroy__ = _ORE.delete_GarmanKohlagenProcess

# Register GarmanKohlagenProcess in _ORE:
_ORE.GarmanKohlagenProcess_swigregister(GarmanKohlagenProcess)

class Merton76Process(StochasticProcess1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, stateVariable, dividendTS, riskFreeTS, volTS, jumpIntensity, meanLogJump, jumpVolatility):
        _ORE.Merton76Process_swiginit(self, _ORE.new_Merton76Process(stateVariable, dividendTS, riskFreeTS, volTS, jumpIntensity, meanLogJump, jumpVolatility))
    __swig_destroy__ = _ORE.delete_Merton76Process

# Register Merton76Process in _ORE:
_ORE.Merton76Process_swigregister(Merton76Process)

class StochasticProcessArray(StochasticProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, array, correlation):
        _ORE.StochasticProcessArray_swiginit(self, _ORE.new_StochasticProcessArray(array, correlation))
    __swig_destroy__ = _ORE.delete_StochasticProcessArray

# Register StochasticProcessArray in _ORE:
_ORE.StochasticProcessArray_swigregister(StochasticProcessArray)

class GeometricBrownianMotionProcess(StochasticProcess1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, initialValue, mu, sigma):
        _ORE.GeometricBrownianMotionProcess_swiginit(self, _ORE.new_GeometricBrownianMotionProcess(initialValue, mu, sigma))
    __swig_destroy__ = _ORE.delete_GeometricBrownianMotionProcess

# Register GeometricBrownianMotionProcess in _ORE:
_ORE.GeometricBrownianMotionProcess_swigregister(GeometricBrownianMotionProcess)

class VarianceGammaProcess(StochasticProcess1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s0, dividendYield, riskFreeRate, sigma, nu, theta):
        _ORE.VarianceGammaProcess_swiginit(self, _ORE.new_VarianceGammaProcess(s0, dividendYield, riskFreeRate, sigma, nu, theta))
    __swig_destroy__ = _ORE.delete_VarianceGammaProcess

# Register VarianceGammaProcess in _ORE:
_ORE.VarianceGammaProcess_swigregister(VarianceGammaProcess)

class HestonProcess(StochasticProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PartialTruncation = _ORE.HestonProcess_PartialTruncation
    FullTruncation = _ORE.HestonProcess_FullTruncation
    Reflection = _ORE.HestonProcess_Reflection
    NonCentralChiSquareVariance = _ORE.HestonProcess_NonCentralChiSquareVariance
    QuadraticExponential = _ORE.HestonProcess_QuadraticExponential
    QuadraticExponentialMartingale = _ORE.HestonProcess_QuadraticExponentialMartingale
    BroadieKayaExactSchemeLobatto = _ORE.HestonProcess_BroadieKayaExactSchemeLobatto
    BroadieKayaExactSchemeLaguerre = _ORE.HestonProcess_BroadieKayaExactSchemeLaguerre
    BroadieKayaExactSchemeTrapezoidal = _ORE.HestonProcess_BroadieKayaExactSchemeTrapezoidal

    def __init__(self, *args):
        _ORE.HestonProcess_swiginit(self, _ORE.new_HestonProcess(*args))

    def s0(self):
        return _ORE.HestonProcess_s0(self)

    def dividendYield(self):
        return _ORE.HestonProcess_dividendYield(self)

    def riskFreeRate(self):
        return _ORE.HestonProcess_riskFreeRate(self)

    def pdf(self, x, v, t, eps=1e-3):
        return _ORE.HestonProcess_pdf(self, x, v, t, eps)
    __swig_destroy__ = _ORE.delete_HestonProcess

# Register HestonProcess in _ORE:
_ORE.HestonProcess_swigregister(HestonProcess)

class BatesProcess(HestonProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, riskFreeRate, dividendYield, s0, v0, kappa, theta, sigma, rho, lambda_parameter, nu, delta):
        _ORE.BatesProcess_swiginit(self, _ORE.new_BatesProcess(riskFreeRate, dividendYield, s0, v0, kappa, theta, sigma, rho, lambda_parameter, nu, delta))
    __swig_destroy__ = _ORE.delete_BatesProcess

# Register BatesProcess in _ORE:
_ORE.BatesProcess_swigregister(BatesProcess)

class HullWhiteProcess(StochasticProcess1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, riskFreeTS, a, sigma):
        _ORE.HullWhiteProcess_swiginit(self, _ORE.new_HullWhiteProcess(riskFreeTS, a, sigma))
    __swig_destroy__ = _ORE.delete_HullWhiteProcess

# Register HullWhiteProcess in _ORE:
_ORE.HullWhiteProcess_swigregister(HullWhiteProcess)

class HullWhiteForwardProcess(StochasticProcess1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, riskFreeTS, a, sigma):
        _ORE.HullWhiteForwardProcess_swiginit(self, _ORE.new_HullWhiteForwardProcess(riskFreeTS, a, sigma))

    def alpha(self, t):
        return _ORE.HullWhiteForwardProcess_alpha(self, t)

    def M_T(self, s, t, T):
        return _ORE.HullWhiteForwardProcess_M_T(self, s, t, T)

    def B(self, t, T):
        return _ORE.HullWhiteForwardProcess_B(self, t, T)

    def setForwardMeasureTime(self, t):
        return _ORE.HullWhiteForwardProcess_setForwardMeasureTime(self, t)
    __swig_destroy__ = _ORE.delete_HullWhiteForwardProcess

# Register HullWhiteForwardProcess in _ORE:
_ORE.HullWhiteForwardProcess_swigregister(HullWhiteForwardProcess)

class G2Process(StochasticProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a, sigma, b, eta, rho):
        _ORE.G2Process_swiginit(self, _ORE.new_G2Process(a, sigma, b, eta, rho))
    __swig_destroy__ = _ORE.delete_G2Process

# Register G2Process in _ORE:
_ORE.G2Process_swigregister(G2Process)

class G2ForwardProcess(StochasticProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a, sigma, b, eta, rho):
        _ORE.G2ForwardProcess_swiginit(self, _ORE.new_G2ForwardProcess(a, sigma, b, eta, rho))

    def setForwardMeasureTime(self, t):
        return _ORE.G2ForwardProcess_setForwardMeasureTime(self, t)
    __swig_destroy__ = _ORE.delete_G2ForwardProcess

# Register G2ForwardProcess in _ORE:
_ORE.G2ForwardProcess_swigregister(G2ForwardProcess)

class GsrProcess(StochasticProcess1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, times, vols, reversions, T=60.0):
        _ORE.GsrProcess_swiginit(self, _ORE.new_GsrProcess(times, vols, reversions, T))

    def sigma(self, t):
        return _ORE.GsrProcess_sigma(self, t)

    def reversion(self, t):
        return _ORE.GsrProcess_reversion(self, t)

    def y(self, t):
        return _ORE.GsrProcess_y(self, t)

    def G(self, t, T, x):
        return _ORE.GsrProcess_G(self, t, T, x)

    def setForwardMeasureTime(self, t):
        return _ORE.GsrProcess_setForwardMeasureTime(self, t)
    __swig_destroy__ = _ORE.delete_GsrProcess

# Register GsrProcess in _ORE:
_ORE.GsrProcess_swigregister(GsrProcess)


def as_gsr_process(proc):
    return _ORE.as_gsr_process(proc)
class OrnsteinUhlenbeckProcess(StochasticProcess1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, speed, vol, x0=0.0, level=0.0):
        _ORE.OrnsteinUhlenbeckProcess_swiginit(self, _ORE.new_OrnsteinUhlenbeckProcess(speed, vol, x0, level))

    def speed(self):
        return _ORE.OrnsteinUhlenbeckProcess_speed(self)

    def volatility(self):
        return _ORE.OrnsteinUhlenbeckProcess_volatility(self)

    def level(self):
        return _ORE.OrnsteinUhlenbeckProcess_level(self)
    __swig_destroy__ = _ORE.delete_OrnsteinUhlenbeckProcess

# Register OrnsteinUhlenbeckProcess in _ORE:
_ORE.OrnsteinUhlenbeckProcess_swigregister(OrnsteinUhlenbeckProcess)

class ExtendedOrnsteinUhlenbeckProcess(StochasticProcess1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MidPoint = _ORE.ExtendedOrnsteinUhlenbeckProcess_MidPoint
    Trapezodial = _ORE.ExtendedOrnsteinUhlenbeckProcess_Trapezodial
    GaussLobatto = _ORE.ExtendedOrnsteinUhlenbeckProcess_GaussLobatto

    def __init__(self, *args):
        _ORE.ExtendedOrnsteinUhlenbeckProcess_swiginit(self, _ORE.new_ExtendedOrnsteinUhlenbeckProcess(*args))
    __swig_destroy__ = _ORE.delete_ExtendedOrnsteinUhlenbeckProcess

# Register ExtendedOrnsteinUhlenbeckProcess in _ORE:
_ORE.ExtendedOrnsteinUhlenbeckProcess_swigregister(ExtendedOrnsteinUhlenbeckProcess)

class ExtOUWithJumpsProcess(StochasticProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process, Y0, beta, jumpIntensity, eta):
        _ORE.ExtOUWithJumpsProcess_swiginit(self, _ORE.new_ExtOUWithJumpsProcess(process, Y0, beta, jumpIntensity, eta))
    __swig_destroy__ = _ORE.delete_ExtOUWithJumpsProcess

# Register ExtOUWithJumpsProcess in _ORE:
_ORE.ExtOUWithJumpsProcess_swigregister(ExtOUWithJumpsProcess)

class KlugeExtOUProcess(StochasticProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rho, kluge, extOU):
        _ORE.KlugeExtOUProcess_swiginit(self, _ORE.new_KlugeExtOUProcess(rho, kluge, extOU))
    __swig_destroy__ = _ORE.delete_KlugeExtOUProcess

# Register KlugeExtOUProcess in _ORE:
_ORE.KlugeExtOUProcess_swigregister(KlugeExtOUProcess)

class GJRGARCHProcess(StochasticProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PartialTruncation = _ORE.GJRGARCHProcess_PartialTruncation
    FullTruncation = _ORE.GJRGARCHProcess_FullTruncation
    Reflection = _ORE.GJRGARCHProcess_Reflection

    def __init__(self, *args):
        _ORE.GJRGARCHProcess_swiginit(self, _ORE.new_GJRGARCHProcess(*args))

    def s0(self):
        return _ORE.GJRGARCHProcess_s0(self)

    def dividendYield(self):
        return _ORE.GJRGARCHProcess_dividendYield(self)

    def riskFreeRate(self):
        return _ORE.GJRGARCHProcess_riskFreeRate(self)
    __swig_destroy__ = _ORE.delete_GJRGARCHProcess

# Register GJRGARCHProcess in _ORE:
_ORE.GJRGARCHProcess_swigregister(GJRGARCHProcess)

class LazyObject(Observable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def recalculate(self):
        return _ORE.LazyObject_recalculate(self)

    def freeze(self):
        return _ORE.LazyObject_freeze(self)

    def unfreeze(self):
        return _ORE.LazyObject_unfreeze(self)

    @staticmethod
    def forwardFirstNotificationOnly():
        return _ORE.LazyObject_forwardFirstNotificationOnly()

    @staticmethod
    def alwaysForwardNotifications():
        return _ORE.LazyObject_alwaysForwardNotifications()

    @staticmethod
    def forwardsAllNotifications():
        return _ORE.LazyObject_forwardsAllNotifications()
    __swig_destroy__ = _ORE.delete_LazyObject

# Register LazyObject in _ORE:
_ORE.LazyObject_swigregister(LazyObject)

def LazyObject_forwardFirstNotificationOnly():
    return _ORE.LazyObject_forwardFirstNotificationOnly()

def LazyObject_alwaysForwardNotifications():
    return _ORE.LazyObject_alwaysForwardNotifications()

def LazyObject_forwardsAllNotifications():
    return _ORE.LazyObject_forwardsAllNotifications()

class PricingEngine(Observable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ORE.delete_PricingEngine

# Register PricingEngine in _ORE:
_ORE.PricingEngine_swigregister(PricingEngine)

class Instrument(LazyObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def NPV(self):
        return _ORE.Instrument_NPV(self)

    def errorEstimate(self):
        return _ORE.Instrument_errorEstimate(self)

    def isExpired(self):
        return _ORE.Instrument_isExpired(self)

    def setPricingEngine(self, arg2):
        return _ORE.Instrument_setPricingEngine(self, arg2)
    __swig_destroy__ = _ORE.delete_Instrument

# Register Instrument in _ORE:
_ORE.Instrument_swigregister(Instrument)

class InstrumentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.InstrumentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.InstrumentVector___nonzero__(self)

    def __bool__(self):
        return _ORE.InstrumentVector___bool__(self)

    def __len__(self):
        return _ORE.InstrumentVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.InstrumentVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.InstrumentVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.InstrumentVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.InstrumentVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.InstrumentVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.InstrumentVector___setitem__(self, *args)

    def pop(self):
        return _ORE.InstrumentVector_pop(self)

    def append(self, x):
        return _ORE.InstrumentVector_append(self, x)

    def empty(self):
        return _ORE.InstrumentVector_empty(self)

    def size(self):
        return _ORE.InstrumentVector_size(self)

    def swap(self, v):
        return _ORE.InstrumentVector_swap(self, v)

    def begin(self):
        return _ORE.InstrumentVector_begin(self)

    def end(self):
        return _ORE.InstrumentVector_end(self)

    def rbegin(self):
        return _ORE.InstrumentVector_rbegin(self)

    def rend(self):
        return _ORE.InstrumentVector_rend(self)

    def clear(self):
        return _ORE.InstrumentVector_clear(self)

    def get_allocator(self):
        return _ORE.InstrumentVector_get_allocator(self)

    def pop_back(self):
        return _ORE.InstrumentVector_pop_back(self)

    def erase(self, *args):
        return _ORE.InstrumentVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.InstrumentVector_swiginit(self, _ORE.new_InstrumentVector(*args))

    def push_back(self, x):
        return _ORE.InstrumentVector_push_back(self, x)

    def front(self):
        return _ORE.InstrumentVector_front(self)

    def back(self):
        return _ORE.InstrumentVector_back(self)

    def assign(self, n, x):
        return _ORE.InstrumentVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.InstrumentVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.InstrumentVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.InstrumentVector_reserve(self, n)

    def capacity(self):
        return _ORE.InstrumentVector_capacity(self)
    __swig_destroy__ = _ORE.delete_InstrumentVector

# Register InstrumentVector in _ORE:
_ORE.InstrumentVector_swigregister(InstrumentVector)

class Stock(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, quote):
        _ORE.Stock_swiginit(self, _ORE.new_Stock(quote))
    __swig_destroy__ = _ORE.delete_Stock

# Register Stock in _ORE:
_ORE.Stock_swigregister(Stock)

class CompositeInstrument(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.CompositeInstrument_swiginit(self, _ORE.new_CompositeInstrument())

    def add(self, instrument, multiplier=1.0):
        return _ORE.CompositeInstrument_add(self, instrument, multiplier)

    def subtract(self, instrument, multiplier=1.0):
        return _ORE.CompositeInstrument_subtract(self, instrument, multiplier)
    __swig_destroy__ = _ORE.delete_CompositeInstrument

# Register CompositeInstrument in _ORE:
_ORE.CompositeInstrument_swigregister(CompositeInstrument)

class CalibrationHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def calibrationError(self):
        return _ORE.CalibrationHelper_calibrationError(self)
    __swig_destroy__ = _ORE.delete_CalibrationHelper

# Register CalibrationHelper in _ORE:
_ORE.CalibrationHelper_swigregister(CalibrationHelper)

class CalibrationHelperVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.CalibrationHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.CalibrationHelperVector___nonzero__(self)

    def __bool__(self):
        return _ORE.CalibrationHelperVector___bool__(self)

    def __len__(self):
        return _ORE.CalibrationHelperVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.CalibrationHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.CalibrationHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.CalibrationHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.CalibrationHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.CalibrationHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.CalibrationHelperVector___setitem__(self, *args)

    def pop(self):
        return _ORE.CalibrationHelperVector_pop(self)

    def append(self, x):
        return _ORE.CalibrationHelperVector_append(self, x)

    def empty(self):
        return _ORE.CalibrationHelperVector_empty(self)

    def size(self):
        return _ORE.CalibrationHelperVector_size(self)

    def swap(self, v):
        return _ORE.CalibrationHelperVector_swap(self, v)

    def begin(self):
        return _ORE.CalibrationHelperVector_begin(self)

    def end(self):
        return _ORE.CalibrationHelperVector_end(self)

    def rbegin(self):
        return _ORE.CalibrationHelperVector_rbegin(self)

    def rend(self):
        return _ORE.CalibrationHelperVector_rend(self)

    def clear(self):
        return _ORE.CalibrationHelperVector_clear(self)

    def get_allocator(self):
        return _ORE.CalibrationHelperVector_get_allocator(self)

    def pop_back(self):
        return _ORE.CalibrationHelperVector_pop_back(self)

    def erase(self, *args):
        return _ORE.CalibrationHelperVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.CalibrationHelperVector_swiginit(self, _ORE.new_CalibrationHelperVector(*args))

    def push_back(self, x):
        return _ORE.CalibrationHelperVector_push_back(self, x)

    def front(self):
        return _ORE.CalibrationHelperVector_front(self)

    def back(self):
        return _ORE.CalibrationHelperVector_back(self)

    def assign(self, n, x):
        return _ORE.CalibrationHelperVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.CalibrationHelperVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.CalibrationHelperVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.CalibrationHelperVector_reserve(self, n)

    def capacity(self):
        return _ORE.CalibrationHelperVector_capacity(self)
    __swig_destroy__ = _ORE.delete_CalibrationHelperVector

# Register CalibrationHelperVector in _ORE:
_ORE.CalibrationHelperVector_swigregister(CalibrationHelperVector)

class CalibratedModel(Observable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def params(self):
        return _ORE.CalibratedModel_params(self)

    def calibrate(self, *args):
        return _ORE.CalibratedModel_calibrate(self, *args)

    def setParams(self, params):
        return _ORE.CalibratedModel_setParams(self, params)

    def value(self, params, arg3):
        return _ORE.CalibratedModel_value(self, params, arg3)

    def constraint(self):
        return _ORE.CalibratedModel_constraint(self)

    def endCriteria(self):
        return _ORE.CalibratedModel_endCriteria(self)

    def problemValues(self):
        return _ORE.CalibratedModel_problemValues(self)

    def functionEvaluation(self):
        return _ORE.CalibratedModel_functionEvaluation(self)
    __swig_destroy__ = _ORE.delete_CalibratedModel

# Register CalibratedModel in _ORE:
_ORE.CalibratedModel_swigregister(CalibratedModel)

class TermStructureConsistentModel(Observable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def termStructure(self):
        return _ORE.TermStructureConsistentModel_termStructure(self)
    __swig_destroy__ = _ORE.delete_TermStructureConsistentModel

# Register TermStructureConsistentModel in _ORE:
_ORE.TermStructureConsistentModel_swigregister(TermStructureConsistentModel)

class CalibratedModelHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CalibratedModelHandle_swiginit(self, _ORE.new_CalibratedModelHandle(*args))

    def __deref__(self):
        return _ORE.CalibratedModelHandle___deref__(self)

    def currentLink(self):
        return _ORE.CalibratedModelHandle_currentLink(self)

    def __nonzero__(self):
        return _ORE.CalibratedModelHandle___nonzero__(self)

    def __bool__(self):
        return _ORE.CalibratedModelHandle___bool__(self)

    def asObservable(self):
        return _ORE.CalibratedModelHandle_asObservable(self)
    __swig_destroy__ = _ORE.delete_CalibratedModelHandle

    def params(self):
        return _ORE.CalibratedModelHandle_params(self)

    def calibrate(self, *args):
        return _ORE.CalibratedModelHandle_calibrate(self, *args)

    def setParams(self, params):
        return _ORE.CalibratedModelHandle_setParams(self, params)

    def value(self, params, arg3):
        return _ORE.CalibratedModelHandle_value(self, params, arg3)

    def constraint(self):
        return _ORE.CalibratedModelHandle_constraint(self)

    def endCriteria(self):
        return _ORE.CalibratedModelHandle_endCriteria(self)

    def problemValues(self):
        return _ORE.CalibratedModelHandle_problemValues(self)

    def functionEvaluation(self):
        return _ORE.CalibratedModelHandle_functionEvaluation(self)

# Register CalibratedModelHandle in _ORE:
_ORE.CalibratedModelHandle_swigregister(CalibratedModelHandle)

class RelinkableCalibratedModelHandle(CalibratedModelHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.RelinkableCalibratedModelHandle_swiginit(self, _ORE.new_RelinkableCalibratedModelHandle(*args))

    def linkTo(self, arg2):
        return _ORE.RelinkableCalibratedModelHandle_linkTo(self, arg2)

    def reset(self):
        return _ORE.RelinkableCalibratedModelHandle_reset(self)
    __swig_destroy__ = _ORE.delete_RelinkableCalibratedModelHandle

# Register RelinkableCalibratedModelHandle in _ORE:
_ORE.RelinkableCalibratedModelHandle_swigregister(RelinkableCalibratedModelHandle)

class TimeGrid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.TimeGrid_swiginit(self, _ORE.new_TimeGrid(*args))

    def __len__(self):
        return _ORE.TimeGrid___len__(self)

    def __getitem__(self, i):
        return _ORE.TimeGrid___getitem__(self, i)

    def dt(self, i):
        return _ORE.TimeGrid_dt(self, i)
    __swig_destroy__ = _ORE.delete_TimeGrid

# Register TimeGrid in _ORE:
_ORE.TimeGrid_swigregister(TimeGrid)

class Parameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Parameter_swiginit(self, _ORE.new_Parameter())

    def params(self):
        return _ORE.Parameter_params(self)

    def setParam(self, i, x):
        return _ORE.Parameter_setParam(self, i, x)

    def testParams(self, params):
        return _ORE.Parameter_testParams(self, params)

    def size(self):
        return _ORE.Parameter_size(self)

    def __call__(self, t):
        return _ORE.Parameter___call__(self, t)

    def constraint(self):
        return _ORE.Parameter_constraint(self)
    __swig_destroy__ = _ORE.delete_Parameter

# Register Parameter in _ORE:
_ORE.Parameter_swigregister(Parameter)

class ConstantParameter(Parameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ConstantParameter_swiginit(self, _ORE.new_ConstantParameter(*args))
    __swig_destroy__ = _ORE.delete_ConstantParameter

# Register ConstantParameter in _ORE:
_ORE.ConstantParameter_swigregister(ConstantParameter)

class NullParameter(Parameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.NullParameter_swiginit(self, _ORE.new_NullParameter())
    __swig_destroy__ = _ORE.delete_NullParameter

# Register NullParameter in _ORE:
_ORE.NullParameter_swigregister(NullParameter)

class PiecewiseConstantParameter(Parameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.PiecewiseConstantParameter_swiginit(self, _ORE.new_PiecewiseConstantParameter(*args))
    __swig_destroy__ = _ORE.delete_PiecewiseConstantParameter

# Register PiecewiseConstantParameter in _ORE:
_ORE.PiecewiseConstantParameter_swigregister(PiecewiseConstantParameter)

class Payoff(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __call__(self, price):
        return _ORE.Payoff___call__(self, price)
    __swig_destroy__ = _ORE.delete_Payoff

# Register Payoff in _ORE:
_ORE.Payoff_swigregister(Payoff)

class Option(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Put = _ORE.Option_Put
    Call = _ORE.Option_Call

    def payoff(self):
        return _ORE.Option_payoff(self)

    def exercise(self):
        return _ORE.Option_exercise(self)
    __swig_destroy__ = _ORE.delete_Option

# Register Option in _ORE:
_ORE.Option_swigregister(Option)

class TypePayoff(Payoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def optionType(self):
        return _ORE.TypePayoff_optionType(self)
    __swig_destroy__ = _ORE.delete_TypePayoff

# Register TypePayoff in _ORE:
_ORE.TypePayoff_swigregister(TypePayoff)

class FloatingTypePayoff(TypePayoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type):
        _ORE.FloatingTypePayoff_swiginit(self, _ORE.new_FloatingTypePayoff(type))

    def __call__(self, *args):
        return _ORE.FloatingTypePayoff___call__(self, *args)
    __swig_destroy__ = _ORE.delete_FloatingTypePayoff

# Register FloatingTypePayoff in _ORE:
_ORE.FloatingTypePayoff_swigregister(FloatingTypePayoff)

class StrikedTypePayoff(TypePayoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def strike(self):
        return _ORE.StrikedTypePayoff_strike(self)
    __swig_destroy__ = _ORE.delete_StrikedTypePayoff

# Register StrikedTypePayoff in _ORE:
_ORE.StrikedTypePayoff_swigregister(StrikedTypePayoff)

class DeltaVolQuote(Quote):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Spot = _ORE.DeltaVolQuote_Spot
    Fwd = _ORE.DeltaVolQuote_Fwd
    PaSpot = _ORE.DeltaVolQuote_PaSpot
    PaFwd = _ORE.DeltaVolQuote_PaFwd
    AtmNull = _ORE.DeltaVolQuote_AtmNull
    AtmSpot = _ORE.DeltaVolQuote_AtmSpot
    AtmFwd = _ORE.DeltaVolQuote_AtmFwd
    AtmDeltaNeutral = _ORE.DeltaVolQuote_AtmDeltaNeutral
    AtmVegaMax = _ORE.DeltaVolQuote_AtmVegaMax
    AtmGammaMax = _ORE.DeltaVolQuote_AtmGammaMax
    AtmPutCall50 = _ORE.DeltaVolQuote_AtmPutCall50

    def __init__(self, *args):
        _ORE.DeltaVolQuote_swiginit(self, _ORE.new_DeltaVolQuote(*args))

    def delta(self):
        return _ORE.DeltaVolQuote_delta(self)

    def maturity(self):
        return _ORE.DeltaVolQuote_maturity(self)

    def atmType(self):
        return _ORE.DeltaVolQuote_atmType(self)

    def deltaType(self):
        return _ORE.DeltaVolQuote_deltaType(self)
    __swig_destroy__ = _ORE.delete_DeltaVolQuote

# Register DeltaVolQuote in _ORE:
_ORE.DeltaVolQuote_swigregister(DeltaVolQuote)

class DeltaVolQuoteHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.DeltaVolQuoteHandle_swiginit(self, _ORE.new_DeltaVolQuoteHandle(*args))

    def __deref__(self):
        return _ORE.DeltaVolQuoteHandle___deref__(self)

    def currentLink(self):
        return _ORE.DeltaVolQuoteHandle_currentLink(self)

    def __nonzero__(self):
        return _ORE.DeltaVolQuoteHandle___nonzero__(self)

    def __bool__(self):
        return _ORE.DeltaVolQuoteHandle___bool__(self)

    def asObservable(self):
        return _ORE.DeltaVolQuoteHandle_asObservable(self)
    __swig_destroy__ = _ORE.delete_DeltaVolQuoteHandle

    def delta(self):
        return _ORE.DeltaVolQuoteHandle_delta(self)

    def maturity(self):
        return _ORE.DeltaVolQuoteHandle_maturity(self)

    def atmType(self):
        return _ORE.DeltaVolQuoteHandle_atmType(self)

    def deltaType(self):
        return _ORE.DeltaVolQuoteHandle_deltaType(self)

    def value(self):
        return _ORE.DeltaVolQuoteHandle_value(self)

    def isValid(self):
        return _ORE.DeltaVolQuoteHandle_isValid(self)

# Register DeltaVolQuoteHandle in _ORE:
_ORE.DeltaVolQuoteHandle_swigregister(DeltaVolQuoteHandle)

class RelinkableDeltaVolQuoteHandle(DeltaVolQuoteHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.RelinkableDeltaVolQuoteHandle_swiginit(self, _ORE.new_RelinkableDeltaVolQuoteHandle(*args))

    def linkTo(self, arg2):
        return _ORE.RelinkableDeltaVolQuoteHandle_linkTo(self, arg2)

    def reset(self):
        return _ORE.RelinkableDeltaVolQuoteHandle_reset(self)
    __swig_destroy__ = _ORE.delete_RelinkableDeltaVolQuoteHandle

# Register RelinkableDeltaVolQuoteHandle in _ORE:
_ORE.RelinkableDeltaVolQuoteHandle_swigregister(RelinkableDeltaVolQuoteHandle)

class OneAssetOption(Option):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def delta(self):
        return _ORE.OneAssetOption_delta(self)

    def deltaForward(self):
        return _ORE.OneAssetOption_deltaForward(self)

    def elasticity(self):
        return _ORE.OneAssetOption_elasticity(self)

    def gamma(self):
        return _ORE.OneAssetOption_gamma(self)

    def theta(self):
        return _ORE.OneAssetOption_theta(self)

    def thetaPerDay(self):
        return _ORE.OneAssetOption_thetaPerDay(self)

    def vega(self):
        return _ORE.OneAssetOption_vega(self)

    def rho(self):
        return _ORE.OneAssetOption_rho(self)

    def dividendRho(self):
        return _ORE.OneAssetOption_dividendRho(self)

    def strikeSensitivity(self):
        return _ORE.OneAssetOption_strikeSensitivity(self)

    def itmCashProbability(self):
        return _ORE.OneAssetOption_itmCashProbability(self)
    __swig_destroy__ = _ORE.delete_OneAssetOption

# Register OneAssetOption in _ORE:
_ORE.OneAssetOption_swigregister(OneAssetOption)

class VanillaOption(OneAssetOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff, exercise):
        _ORE.VanillaOption_swiginit(self, _ORE.new_VanillaOption(payoff, exercise))

    def impliedVolatility(self, *args):
        return _ORE.VanillaOption_impliedVolatility(self, *args)

    def priceCurve(self):
        return _ORE.VanillaOption_priceCurve(self)
    __swig_destroy__ = _ORE.delete_VanillaOption

# Register VanillaOption in _ORE:
_ORE.VanillaOption_swigregister(VanillaOption)

class CalibrationPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CalibrationPair_swiginit(self, _ORE.new_CalibrationPair(*args))
    first = property(_ORE.CalibrationPair_first_get, _ORE.CalibrationPair_first_set)
    second = property(_ORE.CalibrationPair_second_get, _ORE.CalibrationPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _ORE.delete_CalibrationPair

# Register CalibrationPair in _ORE:
_ORE.CalibrationPair_swigregister(CalibrationPair)

class CalibrationSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.CalibrationSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.CalibrationSet___nonzero__(self)

    def __bool__(self):
        return _ORE.CalibrationSet___bool__(self)

    def __len__(self):
        return _ORE.CalibrationSet___len__(self)

    def __getslice__(self, i, j):
        return _ORE.CalibrationSet___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.CalibrationSet___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.CalibrationSet___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.CalibrationSet___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.CalibrationSet___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.CalibrationSet___setitem__(self, *args)

    def pop(self):
        return _ORE.CalibrationSet_pop(self)

    def append(self, x):
        return _ORE.CalibrationSet_append(self, x)

    def empty(self):
        return _ORE.CalibrationSet_empty(self)

    def size(self):
        return _ORE.CalibrationSet_size(self)

    def swap(self, v):
        return _ORE.CalibrationSet_swap(self, v)

    def begin(self):
        return _ORE.CalibrationSet_begin(self)

    def end(self):
        return _ORE.CalibrationSet_end(self)

    def rbegin(self):
        return _ORE.CalibrationSet_rbegin(self)

    def rend(self):
        return _ORE.CalibrationSet_rend(self)

    def clear(self):
        return _ORE.CalibrationSet_clear(self)

    def get_allocator(self):
        return _ORE.CalibrationSet_get_allocator(self)

    def pop_back(self):
        return _ORE.CalibrationSet_pop_back(self)

    def erase(self, *args):
        return _ORE.CalibrationSet_erase(self, *args)

    def __init__(self, *args):
        _ORE.CalibrationSet_swiginit(self, _ORE.new_CalibrationSet(*args))

    def push_back(self, x):
        return _ORE.CalibrationSet_push_back(self, x)

    def front(self):
        return _ORE.CalibrationSet_front(self)

    def back(self):
        return _ORE.CalibrationSet_back(self)

    def assign(self, n, x):
        return _ORE.CalibrationSet_assign(self, n, x)

    def resize(self, *args):
        return _ORE.CalibrationSet_resize(self, *args)

    def insert(self, *args):
        return _ORE.CalibrationSet_insert(self, *args)

    def reserve(self, n):
        return _ORE.CalibrationSet_reserve(self, n)

    def capacity(self):
        return _ORE.CalibrationSet_capacity(self)
    __swig_destroy__ = _ORE.delete_CalibrationSet

# Register CalibrationSet in _ORE:
_ORE.CalibrationSet_swigregister(CalibrationSet)

class EuropeanOption(VanillaOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff, exercise):
        _ORE.EuropeanOption_swiginit(self, _ORE.new_EuropeanOption(payoff, exercise))
    __swig_destroy__ = _ORE.delete_EuropeanOption

# Register EuropeanOption in _ORE:
_ORE.EuropeanOption_swigregister(EuropeanOption)

class ForwardVanillaOption(OneAssetOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, moneyness, resetDate, payoff, exercise):
        _ORE.ForwardVanillaOption_swiginit(self, _ORE.new_ForwardVanillaOption(moneyness, resetDate, payoff, exercise))
    __swig_destroy__ = _ORE.delete_ForwardVanillaOption

# Register ForwardVanillaOption in _ORE:
_ORE.ForwardVanillaOption_swigregister(ForwardVanillaOption)

class QuantoVanillaOption(OneAssetOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff, exercise):
        _ORE.QuantoVanillaOption_swiginit(self, _ORE.new_QuantoVanillaOption(payoff, exercise))

    def qvega(self):
        return _ORE.QuantoVanillaOption_qvega(self)

    def qrho(self):
        return _ORE.QuantoVanillaOption_qrho(self)

    def qlambda(self):
        return _ORE.QuantoVanillaOption_qlambda(self)
    __swig_destroy__ = _ORE.delete_QuantoVanillaOption

# Register QuantoVanillaOption in _ORE:
_ORE.QuantoVanillaOption_swigregister(QuantoVanillaOption)

class QuantoForwardVanillaOption(ForwardVanillaOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, moneyness, resetDate, payoff, exercise):
        _ORE.QuantoForwardVanillaOption_swiginit(self, _ORE.new_QuantoForwardVanillaOption(moneyness, resetDate, payoff, exercise))
    __swig_destroy__ = _ORE.delete_QuantoForwardVanillaOption

# Register QuantoForwardVanillaOption in _ORE:
_ORE.QuantoForwardVanillaOption_swigregister(QuantoForwardVanillaOption)

class MultiAssetOption(Option):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def delta(self):
        return _ORE.MultiAssetOption_delta(self)

    def gamma(self):
        return _ORE.MultiAssetOption_gamma(self)

    def theta(self):
        return _ORE.MultiAssetOption_theta(self)

    def vega(self):
        return _ORE.MultiAssetOption_vega(self)

    def rho(self):
        return _ORE.MultiAssetOption_rho(self)

    def dividendRho(self):
        return _ORE.MultiAssetOption_dividendRho(self)
    __swig_destroy__ = _ORE.delete_MultiAssetOption

# Register MultiAssetOption in _ORE:
_ORE.MultiAssetOption_swigregister(MultiAssetOption)

class AnalyticEuropeanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.AnalyticEuropeanEngine_swiginit(self, _ORE.new_AnalyticEuropeanEngine(*args))
    __swig_destroy__ = _ORE.delete_AnalyticEuropeanEngine

# Register AnalyticEuropeanEngine in _ORE:
_ORE.AnalyticEuropeanEngine_swigregister(AnalyticEuropeanEngine)

class HestonModel(CalibratedModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.HestonModel_swiginit(self, _ORE.new_HestonModel(process))

    def theta(self):
        return _ORE.HestonModel_theta(self)

    def kappa(self):
        return _ORE.HestonModel_kappa(self)

    def sigma(self):
        return _ORE.HestonModel_sigma(self)

    def rho(self):
        return _ORE.HestonModel_rho(self)

    def v0(self):
        return _ORE.HestonModel_v0(self)
    __swig_destroy__ = _ORE.delete_HestonModel

# Register HestonModel in _ORE:
_ORE.HestonModel_swigregister(HestonModel)

class HestonModelHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.HestonModelHandle_swiginit(self, _ORE.new_HestonModelHandle(*args))

    def __deref__(self):
        return _ORE.HestonModelHandle___deref__(self)

    def currentLink(self):
        return _ORE.HestonModelHandle_currentLink(self)

    def __nonzero__(self):
        return _ORE.HestonModelHandle___nonzero__(self)

    def __bool__(self):
        return _ORE.HestonModelHandle___bool__(self)

    def asObservable(self):
        return _ORE.HestonModelHandle_asObservable(self)
    __swig_destroy__ = _ORE.delete_HestonModelHandle

    def theta(self):
        return _ORE.HestonModelHandle_theta(self)

    def kappa(self):
        return _ORE.HestonModelHandle_kappa(self)

    def sigma(self):
        return _ORE.HestonModelHandle_sigma(self)

    def rho(self):
        return _ORE.HestonModelHandle_rho(self)

    def v0(self):
        return _ORE.HestonModelHandle_v0(self)

    def params(self):
        return _ORE.HestonModelHandle_params(self)

    def calibrate(self, *args):
        return _ORE.HestonModelHandle_calibrate(self, *args)

    def setParams(self, params):
        return _ORE.HestonModelHandle_setParams(self, params)

    def value(self, params, arg3):
        return _ORE.HestonModelHandle_value(self, params, arg3)

    def constraint(self):
        return _ORE.HestonModelHandle_constraint(self)

    def endCriteria(self):
        return _ORE.HestonModelHandle_endCriteria(self)

    def problemValues(self):
        return _ORE.HestonModelHandle_problemValues(self)

    def functionEvaluation(self):
        return _ORE.HestonModelHandle_functionEvaluation(self)

# Register HestonModelHandle in _ORE:
_ORE.HestonModelHandle_swigregister(HestonModelHandle)

class PiecewiseTimeDependentHestonModel(CalibratedModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, riskFreeRate, dividendYield, s0, v0, theta, kappa, sigma, rho, timeGrid):
        _ORE.PiecewiseTimeDependentHestonModel_swiginit(self, _ORE.new_PiecewiseTimeDependentHestonModel(riskFreeRate, dividendYield, s0, v0, theta, kappa, sigma, rho, timeGrid))

    def theta(self, t):
        return _ORE.PiecewiseTimeDependentHestonModel_theta(self, t)

    def kappa(self, t):
        return _ORE.PiecewiseTimeDependentHestonModel_kappa(self, t)

    def sigma(self, t):
        return _ORE.PiecewiseTimeDependentHestonModel_sigma(self, t)

    def rho(self, t):
        return _ORE.PiecewiseTimeDependentHestonModel_rho(self, t)

    def v0(self):
        return _ORE.PiecewiseTimeDependentHestonModel_v0(self)

    def s0(self):
        return _ORE.PiecewiseTimeDependentHestonModel_s0(self)

    def timeGrid(self):
        return _ORE.PiecewiseTimeDependentHestonModel_timeGrid(self)

    def dividendYield(self):
        return _ORE.PiecewiseTimeDependentHestonModel_dividendYield(self)

    def riskFreeRate(self):
        return _ORE.PiecewiseTimeDependentHestonModel_riskFreeRate(self)
    __swig_destroy__ = _ORE.delete_PiecewiseTimeDependentHestonModel

# Register PiecewiseTimeDependentHestonModel in _ORE:
_ORE.PiecewiseTimeDependentHestonModel_swigregister(PiecewiseTimeDependentHestonModel)

class AnalyticHestonEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Gatheral = _ORE.AnalyticHestonEngine_Gatheral
    BranchCorrection = _ORE.AnalyticHestonEngine_BranchCorrection
    AndersenPiterbarg = _ORE.AnalyticHestonEngine_AndersenPiterbarg
    AndersenPiterbargOptCV = _ORE.AnalyticHestonEngine_AndersenPiterbargOptCV
    AsymptoticChF = _ORE.AnalyticHestonEngine_AsymptoticChF
    OptimalCV = _ORE.AnalyticHestonEngine_OptimalCV

    def __init__(self, *args):
        _ORE.AnalyticHestonEngine_swiginit(self, _ORE.new_AnalyticHestonEngine(*args))

    def chF(self, real, imag, t):
        return _ORE.AnalyticHestonEngine_chF(self, real, imag, t)
    __swig_destroy__ = _ORE.delete_AnalyticHestonEngine

# Register AnalyticHestonEngine in _ORE:
_ORE.AnalyticHestonEngine_swigregister(AnalyticHestonEngine)

class AnalyticHestonEngine_Integration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def gaussLaguerre(integrationOrder=128):
        return _ORE.AnalyticHestonEngine_Integration_gaussLaguerre(integrationOrder)

    @staticmethod
    def gaussLegendre(integrationOrder=128):
        return _ORE.AnalyticHestonEngine_Integration_gaussLegendre(integrationOrder)

    @staticmethod
    def gaussChebyshev(integrationOrder=128):
        return _ORE.AnalyticHestonEngine_Integration_gaussChebyshev(integrationOrder)

    @staticmethod
    def gaussChebyshev2nd(integrationOrder=128):
        return _ORE.AnalyticHestonEngine_Integration_gaussChebyshev2nd(integrationOrder)

    @staticmethod
    def gaussLobatto(relTolerance, absTolerance, maxEvaluations=1000):
        return _ORE.AnalyticHestonEngine_Integration_gaussLobatto(relTolerance, absTolerance, maxEvaluations)

    @staticmethod
    def gaussKronrod(absTolerance, maxEvaluations=1000):
        return _ORE.AnalyticHestonEngine_Integration_gaussKronrod(absTolerance, maxEvaluations)

    @staticmethod
    def simpson(absTolerance, maxEvaluations=1000):
        return _ORE.AnalyticHestonEngine_Integration_simpson(absTolerance, maxEvaluations)

    @staticmethod
    def trapezoid(absTolerance, maxEvaluations=1000):
        return _ORE.AnalyticHestonEngine_Integration_trapezoid(absTolerance, maxEvaluations)

    @staticmethod
    def discreteSimpson(evaluation=1000):
        return _ORE.AnalyticHestonEngine_Integration_discreteSimpson(evaluation)

    @staticmethod
    def discreteTrapezoid(evaluation=1000):
        return _ORE.AnalyticHestonEngine_Integration_discreteTrapezoid(evaluation)

    @staticmethod
    def andersenPiterbargIntegrationLimit(c_inf, epsilon, v0, t):
        return _ORE.AnalyticHestonEngine_Integration_andersenPiterbargIntegrationLimit(c_inf, epsilon, v0, t)

    def calculate(self, *args):
        return _ORE.AnalyticHestonEngine_Integration_calculate(self, *args)

    def numberOfEvaluations(self):
        return _ORE.AnalyticHestonEngine_Integration_numberOfEvaluations(self)

    def isAdaptiveIntegration(self):
        return _ORE.AnalyticHestonEngine_Integration_isAdaptiveIntegration(self)
    __swig_destroy__ = _ORE.delete_AnalyticHestonEngine_Integration

# Register AnalyticHestonEngine_Integration in _ORE:
_ORE.AnalyticHestonEngine_Integration_swigregister(AnalyticHestonEngine_Integration)

def AnalyticHestonEngine_Integration_gaussLaguerre(integrationOrder=128):
    return _ORE.AnalyticHestonEngine_Integration_gaussLaguerre(integrationOrder)

def AnalyticHestonEngine_Integration_gaussLegendre(integrationOrder=128):
    return _ORE.AnalyticHestonEngine_Integration_gaussLegendre(integrationOrder)

def AnalyticHestonEngine_Integration_gaussChebyshev(integrationOrder=128):
    return _ORE.AnalyticHestonEngine_Integration_gaussChebyshev(integrationOrder)

def AnalyticHestonEngine_Integration_gaussChebyshev2nd(integrationOrder=128):
    return _ORE.AnalyticHestonEngine_Integration_gaussChebyshev2nd(integrationOrder)

def AnalyticHestonEngine_Integration_gaussLobatto(relTolerance, absTolerance, maxEvaluations=1000):
    return _ORE.AnalyticHestonEngine_Integration_gaussLobatto(relTolerance, absTolerance, maxEvaluations)

def AnalyticHestonEngine_Integration_gaussKronrod(absTolerance, maxEvaluations=1000):
    return _ORE.AnalyticHestonEngine_Integration_gaussKronrod(absTolerance, maxEvaluations)

def AnalyticHestonEngine_Integration_simpson(absTolerance, maxEvaluations=1000):
    return _ORE.AnalyticHestonEngine_Integration_simpson(absTolerance, maxEvaluations)

def AnalyticHestonEngine_Integration_trapezoid(absTolerance, maxEvaluations=1000):
    return _ORE.AnalyticHestonEngine_Integration_trapezoid(absTolerance, maxEvaluations)

def AnalyticHestonEngine_Integration_discreteSimpson(evaluation=1000):
    return _ORE.AnalyticHestonEngine_Integration_discreteSimpson(evaluation)

def AnalyticHestonEngine_Integration_discreteTrapezoid(evaluation=1000):
    return _ORE.AnalyticHestonEngine_Integration_discreteTrapezoid(evaluation)

def AnalyticHestonEngine_Integration_andersenPiterbargIntegrationLimit(c_inf, epsilon, v0, t):
    return _ORE.AnalyticHestonEngine_Integration_andersenPiterbargIntegrationLimit(c_inf, epsilon, v0, t)

class COSHestonEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model, L=16, N=200):
        _ORE.COSHestonEngine_swiginit(self, _ORE.new_COSHestonEngine(model, L, N))
    __swig_destroy__ = _ORE.delete_COSHestonEngine

# Register COSHestonEngine in _ORE:
_ORE.COSHestonEngine_swigregister(COSHestonEngine)

class ExponentialFittingHestonEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AndersenPiterbarg = _ORE.ExponentialFittingHestonEngine_AndersenPiterbarg
    AndersenPiterbargOptCV = _ORE.ExponentialFittingHestonEngine_AndersenPiterbargOptCV
    AsymptoticChF = _ORE.ExponentialFittingHestonEngine_AsymptoticChF
    OptimalCV = _ORE.ExponentialFittingHestonEngine_OptimalCV

    def __init__(self, *args):
        _ORE.ExponentialFittingHestonEngine_swiginit(self, _ORE.new_ExponentialFittingHestonEngine(*args))
    __swig_destroy__ = _ORE.delete_ExponentialFittingHestonEngine

# Register ExponentialFittingHestonEngine in _ORE:
_ORE.ExponentialFittingHestonEngine_swigregister(ExponentialFittingHestonEngine)

class AnalyticPTDHestonEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Gatheral = _ORE.AnalyticPTDHestonEngine_Gatheral
    AndersenPiterbarg = _ORE.AnalyticPTDHestonEngine_AndersenPiterbarg

    def __init__(self, *args):
        _ORE.AnalyticPTDHestonEngine_swiginit(self, _ORE.new_AnalyticPTDHestonEngine(*args))
    __swig_destroy__ = _ORE.delete_AnalyticPTDHestonEngine

# Register AnalyticPTDHestonEngine in _ORE:
_ORE.AnalyticPTDHestonEngine_swigregister(AnalyticPTDHestonEngine)

class BatesModel(HestonModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.BatesModel_swiginit(self, _ORE.new_BatesModel(process))

    def nu(self):
        return _ORE.BatesModel_nu(self)

    def delta(self):
        return _ORE.BatesModel_delta(self)

    def lambda_parameter(self):
        return _ORE.BatesModel_lambda_parameter(self)
    __swig_destroy__ = _ORE.delete_BatesModel

# Register BatesModel in _ORE:
_ORE.BatesModel_swigregister(BatesModel)

class BatesEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BatesEngine_swiginit(self, _ORE.new_BatesEngine(*args))
    __swig_destroy__ = _ORE.delete_BatesEngine

# Register BatesEngine in _ORE:
_ORE.BatesEngine_swigregister(BatesEngine)

class IntegralEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2):
        _ORE.IntegralEngine_swiginit(self, _ORE.new_IntegralEngine(arg2))
    __swig_destroy__ = _ORE.delete_IntegralEngine

# Register IntegralEngine in _ORE:
_ORE.IntegralEngine_swigregister(IntegralEngine)

class BinomialCRRVanillaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        _ORE.BinomialCRRVanillaEngine_swiginit(self, _ORE.new_BinomialCRRVanillaEngine(arg2, steps))
    __swig_destroy__ = _ORE.delete_BinomialCRRVanillaEngine

# Register BinomialCRRVanillaEngine in _ORE:
_ORE.BinomialCRRVanillaEngine_swigregister(BinomialCRRVanillaEngine)

class BinomialJRVanillaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        _ORE.BinomialJRVanillaEngine_swiginit(self, _ORE.new_BinomialJRVanillaEngine(arg2, steps))
    __swig_destroy__ = _ORE.delete_BinomialJRVanillaEngine

# Register BinomialJRVanillaEngine in _ORE:
_ORE.BinomialJRVanillaEngine_swigregister(BinomialJRVanillaEngine)

class BinomialEQPVanillaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        _ORE.BinomialEQPVanillaEngine_swiginit(self, _ORE.new_BinomialEQPVanillaEngine(arg2, steps))
    __swig_destroy__ = _ORE.delete_BinomialEQPVanillaEngine

# Register BinomialEQPVanillaEngine in _ORE:
_ORE.BinomialEQPVanillaEngine_swigregister(BinomialEQPVanillaEngine)

class BinomialTrigeorgisVanillaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        _ORE.BinomialTrigeorgisVanillaEngine_swiginit(self, _ORE.new_BinomialTrigeorgisVanillaEngine(arg2, steps))
    __swig_destroy__ = _ORE.delete_BinomialTrigeorgisVanillaEngine

# Register BinomialTrigeorgisVanillaEngine in _ORE:
_ORE.BinomialTrigeorgisVanillaEngine_swigregister(BinomialTrigeorgisVanillaEngine)

class BinomialTianVanillaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        _ORE.BinomialTianVanillaEngine_swiginit(self, _ORE.new_BinomialTianVanillaEngine(arg2, steps))
    __swig_destroy__ = _ORE.delete_BinomialTianVanillaEngine

# Register BinomialTianVanillaEngine in _ORE:
_ORE.BinomialTianVanillaEngine_swigregister(BinomialTianVanillaEngine)

class BinomialLRVanillaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        _ORE.BinomialLRVanillaEngine_swiginit(self, _ORE.new_BinomialLRVanillaEngine(arg2, steps))
    __swig_destroy__ = _ORE.delete_BinomialLRVanillaEngine

# Register BinomialLRVanillaEngine in _ORE:
_ORE.BinomialLRVanillaEngine_swigregister(BinomialLRVanillaEngine)

class BinomialJ4VanillaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        _ORE.BinomialJ4VanillaEngine_swiginit(self, _ORE.new_BinomialJ4VanillaEngine(arg2, steps))
    __swig_destroy__ = _ORE.delete_BinomialJ4VanillaEngine

# Register BinomialJ4VanillaEngine in _ORE:
_ORE.BinomialJ4VanillaEngine_swigregister(BinomialJ4VanillaEngine)


def BinomialVanillaEngine(process, type, steps):
    type = type.lower()
    if type == "crr" or type == "coxrossrubinstein":
        cls = BinomialCRRVanillaEngine
    elif type == "jr" or type == "jarrowrudd":
        cls = BinomialJRVanillaEngine
    elif type == "eqp":
        cls = BinomialEQPVanillaEngine
    elif type == "trigeorgis":
        cls = BinomialTrigeorgisVanillaEngine
    elif type == "tian":
        cls = BinomialTianVanillaEngine
    elif type == "lr" or type == "leisenreimer":
        cls = BinomialLRVanillaEngine
    elif type == "j4" or type == "joshi4":
        cls = BinomialJ4VanillaEngine
    else:
        raise RuntimeError("unknown binomial engine type: %s" % type);
    return cls(process, steps)

class LsmBasisSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Monomial = _ORE.LsmBasisSystem_Monomial
    Laguerre = _ORE.LsmBasisSystem_Laguerre
    Hermite = _ORE.LsmBasisSystem_Hermite
    Hyperbolic = _ORE.LsmBasisSystem_Hyperbolic
    Legendre = _ORE.LsmBasisSystem_Legendre
    Chebyshev = _ORE.LsmBasisSystem_Chebyshev
    Chebyshev2nd = _ORE.LsmBasisSystem_Chebyshev2nd

    def __init__(self):
        _ORE.LsmBasisSystem_swiginit(self, _ORE.new_LsmBasisSystem())
    __swig_destroy__ = _ORE.delete_LsmBasisSystem

# Register LsmBasisSystem in _ORE:
_ORE.LsmBasisSystem_swigregister(LsmBasisSystem)

class MCPREuropeanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCPREuropeanEngine_swiginit(self, _ORE.new_MCPREuropeanEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCPREuropeanEngine

# Register MCPREuropeanEngine in _ORE:
_ORE.MCPREuropeanEngine_swigregister(MCPREuropeanEngine)

class MCLDEuropeanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCLDEuropeanEngine_swiginit(self, _ORE.new_MCLDEuropeanEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCLDEuropeanEngine

# Register MCLDEuropeanEngine in _ORE:
_ORE.MCLDEuropeanEngine_swigregister(MCLDEuropeanEngine)


def MCEuropeanEngine(process,
                     traits,
                     timeSteps=None,
                     timeStepsPerYear=None,
                     brownianBridge=False,
                     antitheticVariate=False,
                     requiredSamples=None,
                     requiredTolerance=None,
                     maxSamples=None,
                     seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPREuropeanEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDEuropeanEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               brownianBridge,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)

class MCPRAmericanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCPRAmericanEngine_swiginit(self, _ORE.new_MCPRAmericanEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCPRAmericanEngine

# Register MCPRAmericanEngine in _ORE:
_ORE.MCPRAmericanEngine_swigregister(MCPRAmericanEngine)

class MCLDAmericanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCLDAmericanEngine_swiginit(self, _ORE.new_MCLDAmericanEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCLDAmericanEngine

# Register MCLDAmericanEngine in _ORE:
_ORE.MCLDAmericanEngine_swigregister(MCLDAmericanEngine)


def MCAmericanEngine(process,
                     traits,
                     timeSteps=None,
                     timeStepsPerYear=None,
                     antitheticVariate=False,
                     controlVariate=False,
                     requiredSamples=None,
                     requiredTolerance=None,
                     maxSamples=None,
                     seed=0,
                     polynomOrder=2,
                     polynomType=LsmBasisSystem.Monomial,
                     nCalibrationSamples=2048,
                     antitheticVariateCalibration=None,
                     seedCalibration=None):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRAmericanEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDAmericanEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               antitheticVariate,
               controlVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed,
               polynomOrder,
               polynomType,
               nCalibrationSamples,
               antitheticVariateCalibration,
               seedCalibration if seedCalibration is not None else nullInt())

class MCPREuropeanHestonEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCPREuropeanHestonEngine_swiginit(self, _ORE.new_MCPREuropeanHestonEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCPREuropeanHestonEngine

# Register MCPREuropeanHestonEngine in _ORE:
_ORE.MCPREuropeanHestonEngine_swigregister(MCPREuropeanHestonEngine)

class MCLDEuropeanHestonEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCLDEuropeanHestonEngine_swiginit(self, _ORE.new_MCLDEuropeanHestonEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCLDEuropeanHestonEngine

# Register MCLDEuropeanHestonEngine in _ORE:
_ORE.MCLDEuropeanHestonEngine_swigregister(MCLDEuropeanHestonEngine)


def MCEuropeanHestonEngine(process,
                           traits,
                           timeSteps=None,
                           timeStepsPerYear=None,
                           antitheticVariate=False,
                           requiredSamples=None,
                           requiredTolerance=None,
                           maxSamples=None,
                           seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPREuropeanHestonEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDEuropeanHestonEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)

class MCPRDigitalEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCPRDigitalEngine_swiginit(self, _ORE.new_MCPRDigitalEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCPRDigitalEngine

# Register MCPRDigitalEngine in _ORE:
_ORE.MCPRDigitalEngine_swigregister(MCPRDigitalEngine)

class MCLDDigitalEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCLDDigitalEngine_swiginit(self, _ORE.new_MCLDDigitalEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCLDDigitalEngine

# Register MCLDDigitalEngine in _ORE:
_ORE.MCLDDigitalEngine_swigregister(MCLDDigitalEngine)


def MCDigitalEngine(process,
                    traits,
                    timeSteps=None,
                    timeStepsPerYear=None,
                    brownianBridge=False,
                    antitheticVariate=False,
                    requiredSamples=None,
                    requiredTolerance=None,
                    maxSamples=None,
                    seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRDigitalEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDDigitalEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               brownianBridge,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)

class BaroneAdesiWhaleyApproximationEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.BaroneAdesiWhaleyApproximationEngine_swiginit(self, _ORE.new_BaroneAdesiWhaleyApproximationEngine(process))
    __swig_destroy__ = _ORE.delete_BaroneAdesiWhaleyApproximationEngine

# Register BaroneAdesiWhaleyApproximationEngine in _ORE:
_ORE.BaroneAdesiWhaleyApproximationEngine_swigregister(BaroneAdesiWhaleyApproximationEngine)

class BjerksundStenslandApproximationEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.BjerksundStenslandApproximationEngine_swiginit(self, _ORE.new_BjerksundStenslandApproximationEngine(process))
    __swig_destroy__ = _ORE.delete_BjerksundStenslandApproximationEngine

# Register BjerksundStenslandApproximationEngine in _ORE:
_ORE.BjerksundStenslandApproximationEngine_swigregister(BjerksundStenslandApproximationEngine)

class JuQuadraticApproximationEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.JuQuadraticApproximationEngine_swiginit(self, _ORE.new_JuQuadraticApproximationEngine(process))
    __swig_destroy__ = _ORE.delete_JuQuadraticApproximationEngine

# Register JuQuadraticApproximationEngine in _ORE:
_ORE.JuQuadraticApproximationEngine_swigregister(JuQuadraticApproximationEngine)

class AnalyticDigitalAmericanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.AnalyticDigitalAmericanEngine_swiginit(self, _ORE.new_AnalyticDigitalAmericanEngine(process))
    __swig_destroy__ = _ORE.delete_AnalyticDigitalAmericanEngine

# Register AnalyticDigitalAmericanEngine in _ORE:
_ORE.AnalyticDigitalAmericanEngine_swigregister(AnalyticDigitalAmericanEngine)

class AnalyticDigitalAmericanKOEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.AnalyticDigitalAmericanKOEngine_swiginit(self, _ORE.new_AnalyticDigitalAmericanKOEngine(process))
    __swig_destroy__ = _ORE.delete_AnalyticDigitalAmericanKOEngine

# Register AnalyticDigitalAmericanKOEngine in _ORE:
_ORE.AnalyticDigitalAmericanKOEngine_swigregister(AnalyticDigitalAmericanKOEngine)

class DividendVanillaOption(OneAssetOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff, exercise, dividendDates, dividends):
        _ORE.DividendVanillaOption_swiginit(self, _ORE.new_DividendVanillaOption(payoff, exercise, dividendDates, dividends))

    def impliedVolatility(self, targetValue, process, accuracy=1.0e-4, maxEvaluations=100, minVol=1.0e-4, maxVol=4.0):
        return _ORE.DividendVanillaOption_impliedVolatility(self, targetValue, process, accuracy, maxEvaluations, minVol, maxVol)
    __swig_destroy__ = _ORE.delete_DividendVanillaOption

# Register DividendVanillaOption in _ORE:
_ORE.DividendVanillaOption_swigregister(DividendVanillaOption)

class AnalyticDividendEuropeanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.AnalyticDividendEuropeanEngine_swiginit(self, _ORE.new_AnalyticDividendEuropeanEngine(*args))
    __swig_destroy__ = _ORE.delete_AnalyticDividendEuropeanEngine

# Register AnalyticDividendEuropeanEngine in _ORE:
_ORE.AnalyticDividendEuropeanEngine_swigregister(AnalyticDividendEuropeanEngine)

class QdPlusAmericanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Brent = _ORE.QdPlusAmericanEngine_Brent
    Newton = _ORE.QdPlusAmericanEngine_Newton
    Ridder = _ORE.QdPlusAmericanEngine_Ridder
    Halley = _ORE.QdPlusAmericanEngine_Halley
    SuperHalley = _ORE.QdPlusAmericanEngine_SuperHalley

    def __init__(self, *args, **kwargs):
        _ORE.QdPlusAmericanEngine_swiginit(self, _ORE.new_QdPlusAmericanEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_QdPlusAmericanEngine

# Register QdPlusAmericanEngine in _ORE:
_ORE.QdPlusAmericanEngine_swigregister(QdPlusAmericanEngine)

class QdFpIterationScheme(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ORE.delete_QdFpIterationScheme

# Register QdFpIterationScheme in _ORE:
_ORE.QdFpIterationScheme_swigregister(QdFpIterationScheme)

class QdFpLegendreScheme(QdFpIterationScheme):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, l, m, n, p):
        _ORE.QdFpLegendreScheme_swiginit(self, _ORE.new_QdFpLegendreScheme(l, m, n, p))
    __swig_destroy__ = _ORE.delete_QdFpLegendreScheme

# Register QdFpLegendreScheme in _ORE:
_ORE.QdFpLegendreScheme_swigregister(QdFpLegendreScheme)

class QdFpLegendreTanhSinhScheme(QdFpLegendreScheme):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, l, m, n, eps):
        _ORE.QdFpLegendreTanhSinhScheme_swiginit(self, _ORE.new_QdFpLegendreTanhSinhScheme(l, m, n, eps))
    __swig_destroy__ = _ORE.delete_QdFpLegendreTanhSinhScheme

# Register QdFpLegendreTanhSinhScheme in _ORE:
_ORE.QdFpLegendreTanhSinhScheme_swigregister(QdFpLegendreTanhSinhScheme)

class QdFpTanhSinhIterationScheme(QdFpIterationScheme):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, m, n, eps):
        _ORE.QdFpTanhSinhIterationScheme_swiginit(self, _ORE.new_QdFpTanhSinhIterationScheme(m, n, eps))
    __swig_destroy__ = _ORE.delete_QdFpTanhSinhIterationScheme

# Register QdFpTanhSinhIterationScheme in _ORE:
_ORE.QdFpTanhSinhIterationScheme_swigregister(QdFpTanhSinhIterationScheme)

class QdFpAmericanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FP_A = _ORE.QdFpAmericanEngine_FP_A
    FP_B = _ORE.QdFpAmericanEngine_FP_B
    Auto = _ORE.QdFpAmericanEngine_Auto

    def __init__(self, *args):
        _ORE.QdFpAmericanEngine_swiginit(self, _ORE.new_QdFpAmericanEngine(*args))

    @staticmethod
    def fastScheme():
        return _ORE.QdFpAmericanEngine_fastScheme()

    @staticmethod
    def accurateScheme():
        return _ORE.QdFpAmericanEngine_accurateScheme()

    @staticmethod
    def highPrecisionScheme():
        return _ORE.QdFpAmericanEngine_highPrecisionScheme()
    __swig_destroy__ = _ORE.delete_QdFpAmericanEngine

# Register QdFpAmericanEngine in _ORE:
_ORE.QdFpAmericanEngine_swigregister(QdFpAmericanEngine)

def QdFpAmericanEngine_fastScheme():
    return _ORE.QdFpAmericanEngine_fastScheme()

def QdFpAmericanEngine_accurateScheme():
    return _ORE.QdFpAmericanEngine_accurateScheme()

def QdFpAmericanEngine_highPrecisionScheme():
    return _ORE.QdFpAmericanEngine_highPrecisionScheme()

class FdmSchemeDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HundsdorferType = _ORE.FdmSchemeDesc_HundsdorferType
    DouglasType = _ORE.FdmSchemeDesc_DouglasType
    CraigSneydType = _ORE.FdmSchemeDesc_CraigSneydType
    ModifiedCraigSneydType = _ORE.FdmSchemeDesc_ModifiedCraigSneydType
    ImplicitEulerType = _ORE.FdmSchemeDesc_ImplicitEulerType
    ExplicitEulerType = _ORE.FdmSchemeDesc_ExplicitEulerType
    MethodOfLinesType = _ORE.FdmSchemeDesc_MethodOfLinesType
    TrBDF2Type = _ORE.FdmSchemeDesc_TrBDF2Type
    CrankNicolsonType = _ORE.FdmSchemeDesc_CrankNicolsonType

    def __init__(self, type, theta, mu):
        _ORE.FdmSchemeDesc_swiginit(self, _ORE.new_FdmSchemeDesc(type, theta, mu))
    type = property(_ORE.FdmSchemeDesc_type_get)
    theta = property(_ORE.FdmSchemeDesc_theta_get)
    mu = property(_ORE.FdmSchemeDesc_mu_get)

    @staticmethod
    def Douglas():
        return _ORE.FdmSchemeDesc_Douglas()

    @staticmethod
    def CrankNicolson():
        return _ORE.FdmSchemeDesc_CrankNicolson()

    @staticmethod
    def ImplicitEuler():
        return _ORE.FdmSchemeDesc_ImplicitEuler()

    @staticmethod
    def ExplicitEuler():
        return _ORE.FdmSchemeDesc_ExplicitEuler()

    @staticmethod
    def CraigSneyd():
        return _ORE.FdmSchemeDesc_CraigSneyd()

    @staticmethod
    def ModifiedCraigSneyd():
        return _ORE.FdmSchemeDesc_ModifiedCraigSneyd()

    @staticmethod
    def Hundsdorfer():
        return _ORE.FdmSchemeDesc_Hundsdorfer()

    @staticmethod
    def ModifiedHundsdorfer():
        return _ORE.FdmSchemeDesc_ModifiedHundsdorfer()

    @staticmethod
    def MethodOfLines(eps=0.001, relInitStepSize=0.01):
        return _ORE.FdmSchemeDesc_MethodOfLines(eps, relInitStepSize)

    @staticmethod
    def TrBDF2():
        return _ORE.FdmSchemeDesc_TrBDF2()
    __swig_destroy__ = _ORE.delete_FdmSchemeDesc

# Register FdmSchemeDesc in _ORE:
_ORE.FdmSchemeDesc_swigregister(FdmSchemeDesc)

def FdmSchemeDesc_Douglas():
    return _ORE.FdmSchemeDesc_Douglas()

def FdmSchemeDesc_CrankNicolson():
    return _ORE.FdmSchemeDesc_CrankNicolson()

def FdmSchemeDesc_ImplicitEuler():
    return _ORE.FdmSchemeDesc_ImplicitEuler()

def FdmSchemeDesc_ExplicitEuler():
    return _ORE.FdmSchemeDesc_ExplicitEuler()

def FdmSchemeDesc_CraigSneyd():
    return _ORE.FdmSchemeDesc_CraigSneyd()

def FdmSchemeDesc_ModifiedCraigSneyd():
    return _ORE.FdmSchemeDesc_ModifiedCraigSneyd()

def FdmSchemeDesc_Hundsdorfer():
    return _ORE.FdmSchemeDesc_Hundsdorfer()

def FdmSchemeDesc_ModifiedHundsdorfer():
    return _ORE.FdmSchemeDesc_ModifiedHundsdorfer()

def FdmSchemeDesc_MethodOfLines(eps=0.001, relInitStepSize=0.01):
    return _ORE.FdmSchemeDesc_MethodOfLines(eps, relInitStepSize)

def FdmSchemeDesc_TrBDF2():
    return _ORE.FdmSchemeDesc_TrBDF2()

class FdmQuantoHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rTS, fTS, fxVolTS, equityFxCorrelation, exchRateATMlevel):
        _ORE.FdmQuantoHelper_swiginit(self, _ORE.new_FdmQuantoHelper(rTS, fTS, fxVolTS, equityFxCorrelation, exchRateATMlevel))
    __swig_destroy__ = _ORE.delete_FdmQuantoHelper

# Register FdmQuantoHelper in _ORE:
_ORE.FdmQuantoHelper_swigregister(FdmQuantoHelper)

class FdBlackScholesVanillaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Spot = _ORE.FdBlackScholesVanillaEngine_Spot
    Escrowed = _ORE.FdBlackScholesVanillaEngine_Escrowed

    def __init__(self, *args):
        _ORE.FdBlackScholesVanillaEngine_swiginit(self, _ORE.new_FdBlackScholesVanillaEngine(*args))

    @staticmethod
    def make(*args, **kwargs):
        return _ORE.FdBlackScholesVanillaEngine_make(*args, **kwargs)
    __swig_destroy__ = _ORE.delete_FdBlackScholesVanillaEngine

# Register FdBlackScholesVanillaEngine in _ORE:
_ORE.FdBlackScholesVanillaEngine_swigregister(FdBlackScholesVanillaEngine)

def FdBlackScholesVanillaEngine_make(*args, **kwargs):
    return _ORE.FdBlackScholesVanillaEngine_make(*args, **kwargs)

class FdBlackScholesShoutEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdBlackScholesShoutEngine_swiginit(self, _ORE.new_FdBlackScholesShoutEngine(*args))
    __swig_destroy__ = _ORE.delete_FdBlackScholesShoutEngine

# Register FdBlackScholesShoutEngine in _ORE:
_ORE.FdBlackScholesShoutEngine_swigregister(FdBlackScholesShoutEngine)

class FdOrnsteinUhlenbeckVanillaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdOrnsteinUhlenbeckVanillaEngine_swiginit(self, _ORE.new_FdOrnsteinUhlenbeckVanillaEngine(*args))
    __swig_destroy__ = _ORE.delete_FdOrnsteinUhlenbeckVanillaEngine

# Register FdOrnsteinUhlenbeckVanillaEngine in _ORE:
_ORE.FdOrnsteinUhlenbeckVanillaEngine_swigregister(FdOrnsteinUhlenbeckVanillaEngine)

class FdBatesVanillaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdBatesVanillaEngine_swiginit(self, _ORE.new_FdBatesVanillaEngine(*args))
    __swig_destroy__ = _ORE.delete_FdBatesVanillaEngine

# Register FdBatesVanillaEngine in _ORE:
_ORE.FdBatesVanillaEngine_swigregister(FdBatesVanillaEngine)

class FdHestonVanillaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdHestonVanillaEngine_swiginit(self, _ORE.new_FdHestonVanillaEngine(*args))

    @staticmethod
    def make(*args, **kwargs):
        return _ORE.FdHestonVanillaEngine_make(*args, **kwargs)
    __swig_destroy__ = _ORE.delete_FdHestonVanillaEngine

# Register FdHestonVanillaEngine in _ORE:
_ORE.FdHestonVanillaEngine_swigregister(FdHestonVanillaEngine)

def FdHestonVanillaEngine_make(*args, **kwargs):
    return _ORE.FdHestonVanillaEngine_make(*args, **kwargs)

class AnalyticCEVEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, f0, alpha, beta, rTS):
        _ORE.AnalyticCEVEngine_swiginit(self, _ORE.new_AnalyticCEVEngine(f0, alpha, beta, rTS))
    __swig_destroy__ = _ORE.delete_AnalyticCEVEngine

# Register AnalyticCEVEngine in _ORE:
_ORE.AnalyticCEVEngine_swigregister(AnalyticCEVEngine)

class FdCEVVanillaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdCEVVanillaEngine_swiginit(self, _ORE.new_FdCEVVanillaEngine(*args))
    __swig_destroy__ = _ORE.delete_FdCEVVanillaEngine

# Register FdCEVVanillaEngine in _ORE:
_ORE.FdCEVVanillaEngine_swigregister(FdCEVVanillaEngine)

class FdSabrVanillaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdSabrVanillaEngine_swiginit(self, _ORE.new_FdSabrVanillaEngine(*args))
    __swig_destroy__ = _ORE.delete_FdSabrVanillaEngine

# Register FdSabrVanillaEngine in _ORE:
_ORE.FdSabrVanillaEngine_swigregister(FdSabrVanillaEngine)

class FdHestonHullWhiteVanillaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdHestonHullWhiteVanillaEngine_swiginit(self, _ORE.new_FdHestonHullWhiteVanillaEngine(*args))
    __swig_destroy__ = _ORE.delete_FdHestonHullWhiteVanillaEngine

# Register FdHestonHullWhiteVanillaEngine in _ORE:
_ORE.FdHestonHullWhiteVanillaEngine_swigregister(FdHestonHullWhiteVanillaEngine)

class AnalyticHestonHullWhiteEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.AnalyticHestonHullWhiteEngine_swiginit(self, _ORE.new_AnalyticHestonHullWhiteEngine(*args))
    __swig_destroy__ = _ORE.delete_AnalyticHestonHullWhiteEngine

# Register AnalyticHestonHullWhiteEngine in _ORE:
_ORE.AnalyticHestonHullWhiteEngine_swigregister(AnalyticHestonHullWhiteEngine)

class AnalyticH1HWEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.AnalyticH1HWEngine_swiginit(self, _ORE.new_AnalyticH1HWEngine(*args))
    __swig_destroy__ = _ORE.delete_AnalyticH1HWEngine

# Register AnalyticH1HWEngine in _ORE:
_ORE.AnalyticH1HWEngine_swigregister(AnalyticH1HWEngine)

class ForwardEuropeanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2):
        _ORE.ForwardEuropeanEngine_swiginit(self, _ORE.new_ForwardEuropeanEngine(arg2))
    __swig_destroy__ = _ORE.delete_ForwardEuropeanEngine

# Register ForwardEuropeanEngine in _ORE:
_ORE.ForwardEuropeanEngine_swigregister(ForwardEuropeanEngine)

class QuantoEuropeanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process, foreignRiskFreeRate, exchangeRateVolatility, correlation):
        _ORE.QuantoEuropeanEngine_swiginit(self, _ORE.new_QuantoEuropeanEngine(process, foreignRiskFreeRate, exchangeRateVolatility, correlation))
    __swig_destroy__ = _ORE.delete_QuantoEuropeanEngine

# Register QuantoEuropeanEngine in _ORE:
_ORE.QuantoEuropeanEngine_swigregister(QuantoEuropeanEngine)

class QuantoForwardEuropeanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process, foreignRiskFreeRate, exchangeRateVolatility, correlation):
        _ORE.QuantoForwardEuropeanEngine_swiginit(self, _ORE.new_QuantoForwardEuropeanEngine(process, foreignRiskFreeRate, exchangeRateVolatility, correlation))
    __swig_destroy__ = _ORE.delete_QuantoForwardEuropeanEngine

# Register QuantoForwardEuropeanEngine in _ORE:
_ORE.QuantoForwardEuropeanEngine_swigregister(QuantoForwardEuropeanEngine)

class AnalyticHestonForwardEuropeanEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process, integrationOrder=144):
        _ORE.AnalyticHestonForwardEuropeanEngine_swiginit(self, _ORE.new_AnalyticHestonForwardEuropeanEngine(process, integrationOrder))
    __swig_destroy__ = _ORE.delete_AnalyticHestonForwardEuropeanEngine

# Register AnalyticHestonForwardEuropeanEngine in _ORE:
_ORE.AnalyticHestonForwardEuropeanEngine_swigregister(AnalyticHestonForwardEuropeanEngine)

class MCPRForwardEuropeanBSEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCPRForwardEuropeanBSEngine_swiginit(self, _ORE.new_MCPRForwardEuropeanBSEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCPRForwardEuropeanBSEngine

# Register MCPRForwardEuropeanBSEngine in _ORE:
_ORE.MCPRForwardEuropeanBSEngine_swigregister(MCPRForwardEuropeanBSEngine)

class MCLDForwardEuropeanBSEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCLDForwardEuropeanBSEngine_swiginit(self, _ORE.new_MCLDForwardEuropeanBSEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCLDForwardEuropeanBSEngine

# Register MCLDForwardEuropeanBSEngine in _ORE:
_ORE.MCLDForwardEuropeanBSEngine_swigregister(MCLDForwardEuropeanBSEngine)


def MCForwardEuropeanBSEngine(process,
                              traits,
                              timeSteps=None,
                              timeStepsPerYear=None,
                              brownianBridge=False,
                              antitheticVariate=False,
                              requiredSamples=None,
                              requiredTolerance=None,
                              maxSamples=None,
                              seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRForwardEuropeanBSEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDForwardEuropeanBSEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               brownianBridge,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)

class MCPRForwardEuropeanHestonEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCPRForwardEuropeanHestonEngine_swiginit(self, _ORE.new_MCPRForwardEuropeanHestonEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCPRForwardEuropeanHestonEngine

# Register MCPRForwardEuropeanHestonEngine in _ORE:
_ORE.MCPRForwardEuropeanHestonEngine_swigregister(MCPRForwardEuropeanHestonEngine)

class MCLDForwardEuropeanHestonEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCLDForwardEuropeanHestonEngine_swiginit(self, _ORE.new_MCLDForwardEuropeanHestonEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCLDForwardEuropeanHestonEngine

# Register MCLDForwardEuropeanHestonEngine in _ORE:
_ORE.MCLDForwardEuropeanHestonEngine_swigregister(MCLDForwardEuropeanHestonEngine)


def MCForwardEuropeanHestonEngine(process,
                                  traits,
                                  timeSteps=None,
                                  timeStepsPerYear=None,
                                  antitheticVariate=False,
                                  requiredSamples=None,
                                  requiredTolerance=None,
                                  maxSamples=None,
                                  seed=0,
                                  controlVariate=False):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRForwardEuropeanHestonEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDForwardEuropeanHestonEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed,
               controlVariate)

class BlackCalculator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff, forward, stdDev, discount=1.0):
        _ORE.BlackCalculator_swiginit(self, _ORE.new_BlackCalculator(payoff, forward, stdDev, discount))

    def value(self):
        return _ORE.BlackCalculator_value(self)

    def deltaForward(self):
        return _ORE.BlackCalculator_deltaForward(self)

    def delta(self, spot):
        return _ORE.BlackCalculator_delta(self, spot)

    def elasticityForward(self):
        return _ORE.BlackCalculator_elasticityForward(self)

    def elasticity(self, spot):
        return _ORE.BlackCalculator_elasticity(self, spot)

    def gammaForward(self):
        return _ORE.BlackCalculator_gammaForward(self)

    def gamma(self, spot):
        return _ORE.BlackCalculator_gamma(self, spot)

    def theta(self, spot, maturity):
        return _ORE.BlackCalculator_theta(self, spot, maturity)

    def thetaPerDay(self, spot, maturity):
        return _ORE.BlackCalculator_thetaPerDay(self, spot, maturity)

    def vega(self, maturity):
        return _ORE.BlackCalculator_vega(self, maturity)

    def rho(self, maturity):
        return _ORE.BlackCalculator_rho(self, maturity)

    def dividendRho(self, maturity):
        return _ORE.BlackCalculator_dividendRho(self, maturity)

    def itmCashProbability(self):
        return _ORE.BlackCalculator_itmCashProbability(self)

    def itmAssetProbability(self):
        return _ORE.BlackCalculator_itmAssetProbability(self)

    def strikeSensitivity(self):
        return _ORE.BlackCalculator_strikeSensitivity(self)

    def strikeGamma(self):
        return _ORE.BlackCalculator_strikeGamma(self)

    def alpha(self):
        return _ORE.BlackCalculator_alpha(self)

    def beta(self):
        return _ORE.BlackCalculator_beta(self)
    __swig_destroy__ = _ORE.delete_BlackCalculator

# Register BlackCalculator in _ORE:
_ORE.BlackCalculator_swigregister(BlackCalculator)

class VarianceGammaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.VarianceGammaEngine_swiginit(self, _ORE.new_VarianceGammaEngine(process))
    __swig_destroy__ = _ORE.delete_VarianceGammaEngine

# Register VarianceGammaEngine in _ORE:
_ORE.VarianceGammaEngine_swigregister(VarianceGammaEngine)

class FFTVarianceGammaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process, logStrikeSpacing=0.001):
        _ORE.FFTVarianceGammaEngine_swiginit(self, _ORE.new_FFTVarianceGammaEngine(process, logStrikeSpacing))

    def precalculate(self, optionList):
        return _ORE.FFTVarianceGammaEngine_precalculate(self, optionList)
    __swig_destroy__ = _ORE.delete_FFTVarianceGammaEngine

# Register FFTVarianceGammaEngine in _ORE:
_ORE.FFTVarianceGammaEngine_swigregister(FFTVarianceGammaEngine)

class GJRGARCHModel(CalibratedModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.GJRGARCHModel_swiginit(self, _ORE.new_GJRGARCHModel(process))

    def omega(self):
        return _ORE.GJRGARCHModel_omega(self)

    def alpha(self):
        return _ORE.GJRGARCHModel_alpha(self)

    def beta(self):
        return _ORE.GJRGARCHModel_beta(self)

    def gamma(self):
        return _ORE.GJRGARCHModel_gamma(self)

    def lambda_parameter(self):
        return _ORE.GJRGARCHModel_lambda_parameter(self)

    def v0(self):
        return _ORE.GJRGARCHModel_v0(self)
    __swig_destroy__ = _ORE.delete_GJRGARCHModel

# Register GJRGARCHModel in _ORE:
_ORE.GJRGARCHModel_swigregister(GJRGARCHModel)

class AnalyticGJRGARCHEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.AnalyticGJRGARCHEngine_swiginit(self, _ORE.new_AnalyticGJRGARCHEngine(process))
    __swig_destroy__ = _ORE.delete_AnalyticGJRGARCHEngine

# Register AnalyticGJRGARCHEngine in _ORE:
_ORE.AnalyticGJRGARCHEngine_swigregister(AnalyticGJRGARCHEngine)

class MCPREuropeanGJRGARCHEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCPREuropeanGJRGARCHEngine_swiginit(self, _ORE.new_MCPREuropeanGJRGARCHEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCPREuropeanGJRGARCHEngine

# Register MCPREuropeanGJRGARCHEngine in _ORE:
_ORE.MCPREuropeanGJRGARCHEngine_swigregister(MCPREuropeanGJRGARCHEngine)

class MCLDEuropeanGJRGARCHEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCLDEuropeanGJRGARCHEngine_swiginit(self, _ORE.new_MCLDEuropeanGJRGARCHEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCLDEuropeanGJRGARCHEngine

# Register MCLDEuropeanGJRGARCHEngine in _ORE:
_ORE.MCLDEuropeanGJRGARCHEngine_swigregister(MCLDEuropeanGJRGARCHEngine)


def MCEuropeanGJRGARCHEngine(process,
                             traits,
                             timeSteps=None,
                             timeStepsPerYear=None,
                             antitheticVariate=False,
                             requiredSamples=None,
                             requiredTolerance=None,
                             maxSamples=None,
                             seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPREuropeanGJRGARCHEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDEuropeanGJRGARCHEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)

class Average(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Arithmetic = _ORE.Average_Arithmetic
    Geometric = _ORE.Average_Geometric

    def __init__(self):
        _ORE.Average_swiginit(self, _ORE.new_Average())
    __swig_destroy__ = _ORE.delete_Average

# Register Average in _ORE:
_ORE.Average_swigregister(Average)

class ContinuousAveragingAsianOption(OneAssetOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, averageType, payoff, exercise):
        _ORE.ContinuousAveragingAsianOption_swiginit(self, _ORE.new_ContinuousAveragingAsianOption(averageType, payoff, exercise))
    __swig_destroy__ = _ORE.delete_ContinuousAveragingAsianOption

# Register ContinuousAveragingAsianOption in _ORE:
_ORE.ContinuousAveragingAsianOption_swigregister(ContinuousAveragingAsianOption)

class DiscreteAveragingAsianOption(OneAssetOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.DiscreteAveragingAsianOption_swiginit(self, _ORE.new_DiscreteAveragingAsianOption(*args))

    def timeGrid(self):
        return _ORE.DiscreteAveragingAsianOption_timeGrid(self)
    __swig_destroy__ = _ORE.delete_DiscreteAveragingAsianOption

# Register DiscreteAveragingAsianOption in _ORE:
_ORE.DiscreteAveragingAsianOption_swigregister(DiscreteAveragingAsianOption)

class AnalyticContinuousGeometricAveragePriceAsianEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.AnalyticContinuousGeometricAveragePriceAsianEngine_swiginit(self, _ORE.new_AnalyticContinuousGeometricAveragePriceAsianEngine(process))
    __swig_destroy__ = _ORE.delete_AnalyticContinuousGeometricAveragePriceAsianEngine

# Register AnalyticContinuousGeometricAveragePriceAsianEngine in _ORE:
_ORE.AnalyticContinuousGeometricAveragePriceAsianEngine_swigregister(AnalyticContinuousGeometricAveragePriceAsianEngine)

class AnalyticContinuousGeometricAveragePriceAsianHestonEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process, summationCutoff=50, xiRightLimit=100.0):
        _ORE.AnalyticContinuousGeometricAveragePriceAsianHestonEngine_swiginit(self, _ORE.new_AnalyticContinuousGeometricAveragePriceAsianHestonEngine(process, summationCutoff, xiRightLimit))
    __swig_destroy__ = _ORE.delete_AnalyticContinuousGeometricAveragePriceAsianHestonEngine

# Register AnalyticContinuousGeometricAveragePriceAsianHestonEngine in _ORE:
_ORE.AnalyticContinuousGeometricAveragePriceAsianHestonEngine_swigregister(AnalyticContinuousGeometricAveragePriceAsianHestonEngine)

class AnalyticDiscreteGeometricAveragePriceAsianEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.AnalyticDiscreteGeometricAveragePriceAsianEngine_swiginit(self, _ORE.new_AnalyticDiscreteGeometricAveragePriceAsianEngine(process))
    __swig_destroy__ = _ORE.delete_AnalyticDiscreteGeometricAveragePriceAsianEngine

# Register AnalyticDiscreteGeometricAveragePriceAsianEngine in _ORE:
_ORE.AnalyticDiscreteGeometricAveragePriceAsianEngine_swigregister(AnalyticDiscreteGeometricAveragePriceAsianEngine)

class AnalyticDiscreteGeometricAveragePriceAsianHestonEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process, xiRightLimit=100.0):
        _ORE.AnalyticDiscreteGeometricAveragePriceAsianHestonEngine_swiginit(self, _ORE.new_AnalyticDiscreteGeometricAveragePriceAsianHestonEngine(process, xiRightLimit))
    __swig_destroy__ = _ORE.delete_AnalyticDiscreteGeometricAveragePriceAsianHestonEngine

# Register AnalyticDiscreteGeometricAveragePriceAsianHestonEngine in _ORE:
_ORE.AnalyticDiscreteGeometricAveragePriceAsianHestonEngine_swigregister(AnalyticDiscreteGeometricAveragePriceAsianHestonEngine)

class AnalyticDiscreteGeometricAverageStrikeAsianEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.AnalyticDiscreteGeometricAverageStrikeAsianEngine_swiginit(self, _ORE.new_AnalyticDiscreteGeometricAverageStrikeAsianEngine(process))
    __swig_destroy__ = _ORE.delete_AnalyticDiscreteGeometricAverageStrikeAsianEngine

# Register AnalyticDiscreteGeometricAverageStrikeAsianEngine in _ORE:
_ORE.AnalyticDiscreteGeometricAverageStrikeAsianEngine_swigregister(AnalyticDiscreteGeometricAverageStrikeAsianEngine)

class MCPRDiscreteArithmeticAPEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCPRDiscreteArithmeticAPEngine_swiginit(self, _ORE.new_MCPRDiscreteArithmeticAPEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCPRDiscreteArithmeticAPEngine

# Register MCPRDiscreteArithmeticAPEngine in _ORE:
_ORE.MCPRDiscreteArithmeticAPEngine_swigregister(MCPRDiscreteArithmeticAPEngine)

class MCLDDiscreteArithmeticAPEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCLDDiscreteArithmeticAPEngine_swiginit(self, _ORE.new_MCLDDiscreteArithmeticAPEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCLDDiscreteArithmeticAPEngine

# Register MCLDDiscreteArithmeticAPEngine in _ORE:
_ORE.MCLDDiscreteArithmeticAPEngine_swigregister(MCLDDiscreteArithmeticAPEngine)


def MCDiscreteArithmeticAPEngine(process,
                                 traits,
                                 brownianBridge=False,
                                 antitheticVariate=False,
                                 controlVariate=False,
                                 requiredSamples=None,
                                 requiredTolerance=None,
                                 maxSamples=None,
                                 seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRDiscreteArithmeticAPEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDDiscreteArithmeticAPEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               brownianBridge,
               antitheticVariate,
               controlVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)

class MCPRDiscreteArithmeticAPHestonEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCPRDiscreteArithmeticAPHestonEngine_swiginit(self, _ORE.new_MCPRDiscreteArithmeticAPHestonEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCPRDiscreteArithmeticAPHestonEngine

# Register MCPRDiscreteArithmeticAPHestonEngine in _ORE:
_ORE.MCPRDiscreteArithmeticAPHestonEngine_swigregister(MCPRDiscreteArithmeticAPHestonEngine)

class MCLDDiscreteArithmeticAPHestonEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCLDDiscreteArithmeticAPHestonEngine_swiginit(self, _ORE.new_MCLDDiscreteArithmeticAPHestonEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCLDDiscreteArithmeticAPHestonEngine

# Register MCLDDiscreteArithmeticAPHestonEngine in _ORE:
_ORE.MCLDDiscreteArithmeticAPHestonEngine_swigregister(MCLDDiscreteArithmeticAPHestonEngine)


def MCDiscreteArithmeticAPHestonEngine(process,
                                       traits,
                                       antitheticVariate=False,
                                       requiredSamples=None,
                                       requiredTolerance=None,
                                       maxSamples=None,
                                       seed=0,
                                       timeSteps=None,
                                       timeStepsPerYear=None,
                                       controlVariate=False):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRDiscreteArithmeticAPHestonEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDDiscreteArithmeticAPHestonEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed,
               timeSteps,
               timeStepsPerYear,
               controlVariate)

class MCPRDiscreteArithmeticASEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCPRDiscreteArithmeticASEngine_swiginit(self, _ORE.new_MCPRDiscreteArithmeticASEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCPRDiscreteArithmeticASEngine

# Register MCPRDiscreteArithmeticASEngine in _ORE:
_ORE.MCPRDiscreteArithmeticASEngine_swigregister(MCPRDiscreteArithmeticASEngine)

class MCLDDiscreteArithmeticASEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCLDDiscreteArithmeticASEngine_swiginit(self, _ORE.new_MCLDDiscreteArithmeticASEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCLDDiscreteArithmeticASEngine

# Register MCLDDiscreteArithmeticASEngine in _ORE:
_ORE.MCLDDiscreteArithmeticASEngine_swigregister(MCLDDiscreteArithmeticASEngine)


def MCDiscreteArithmeticASEngine(process,
                                 traits,
                                 brownianBridge=False,
                                 antitheticVariate=False,
                                 requiredSamples=None,
                                 requiredTolerance=None,
                                 maxSamples=None,
                                 seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRDiscreteArithmeticASEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDDiscreteArithmeticASEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               brownianBridge,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)

class MCPRDiscreteGeometricAPEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCPRDiscreteGeometricAPEngine_swiginit(self, _ORE.new_MCPRDiscreteGeometricAPEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCPRDiscreteGeometricAPEngine

# Register MCPRDiscreteGeometricAPEngine in _ORE:
_ORE.MCPRDiscreteGeometricAPEngine_swigregister(MCPRDiscreteGeometricAPEngine)

class MCLDDiscreteGeometricAPEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCLDDiscreteGeometricAPEngine_swiginit(self, _ORE.new_MCLDDiscreteGeometricAPEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCLDDiscreteGeometricAPEngine

# Register MCLDDiscreteGeometricAPEngine in _ORE:
_ORE.MCLDDiscreteGeometricAPEngine_swigregister(MCLDDiscreteGeometricAPEngine)


def MCDiscreteGeometricAPEngine(process,
                                 traits,
                                 brownianBridge=False,
                                 antitheticVariate=False,
                                 requiredSamples=None,
                                 requiredTolerance=None,
                                 maxSamples=None,
                                 seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRDiscreteGeometricAPEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDDiscreteGeometricAPEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               brownianBridge,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)

class MCPRDiscreteGeometricAPHestonEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCPRDiscreteGeometricAPHestonEngine_swiginit(self, _ORE.new_MCPRDiscreteGeometricAPHestonEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCPRDiscreteGeometricAPHestonEngine

# Register MCPRDiscreteGeometricAPHestonEngine in _ORE:
_ORE.MCPRDiscreteGeometricAPHestonEngine_swigregister(MCPRDiscreteGeometricAPHestonEngine)

class MCLDDiscreteGeometricAPHestonEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCLDDiscreteGeometricAPHestonEngine_swiginit(self, _ORE.new_MCLDDiscreteGeometricAPHestonEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCLDDiscreteGeometricAPHestonEngine

# Register MCLDDiscreteGeometricAPHestonEngine in _ORE:
_ORE.MCLDDiscreteGeometricAPHestonEngine_swigregister(MCLDDiscreteGeometricAPHestonEngine)


def MCDiscreteGeometricAPHestonEngine(process,
                                      traits,
                                      antitheticVariate=False,
                                      requiredSamples=None,
                                      requiredTolerance=None,
                                      maxSamples=None,
                                      seed=0,
                                      timeSteps=None,
                                      timeStepsPerYear=None):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRDiscreteGeometricAPHestonEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDDiscreteGeometricAPHestonEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed,
               timeSteps,
               timeStepsPerYear)

class ContinuousArithmeticAsianLevyEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process, runningAverage, startDate):
        _ORE.ContinuousArithmeticAsianLevyEngine_swiginit(self, _ORE.new_ContinuousArithmeticAsianLevyEngine(process, runningAverage, startDate))
    __swig_destroy__ = _ORE.delete_ContinuousArithmeticAsianLevyEngine

# Register ContinuousArithmeticAsianLevyEngine in _ORE:
_ORE.ContinuousArithmeticAsianLevyEngine_swigregister(ContinuousArithmeticAsianLevyEngine)

class FdBlackScholesAsianEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process, tGrid, xGrid, aGrid):
        _ORE.FdBlackScholesAsianEngine_swiginit(self, _ORE.new_FdBlackScholesAsianEngine(process, tGrid, xGrid, aGrid))
    __swig_destroy__ = _ORE.delete_FdBlackScholesAsianEngine

# Register FdBlackScholesAsianEngine in _ORE:
_ORE.FdBlackScholesAsianEngine_swigregister(FdBlackScholesAsianEngine)

class TurnbullWakemanAsianEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.TurnbullWakemanAsianEngine_swiginit(self, _ORE.new_TurnbullWakemanAsianEngine(process))
    __swig_destroy__ = _ORE.delete_TurnbullWakemanAsianEngine

# Register TurnbullWakemanAsianEngine in _ORE:
_ORE.TurnbullWakemanAsianEngine_swigregister(TurnbullWakemanAsianEngine)

class Barrier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DownIn = _ORE.Barrier_DownIn
    UpIn = _ORE.Barrier_UpIn
    DownOut = _ORE.Barrier_DownOut
    UpOut = _ORE.Barrier_UpOut

    def __init__(self):
        _ORE.Barrier_swiginit(self, _ORE.new_Barrier())
    __swig_destroy__ = _ORE.delete_Barrier

# Register Barrier in _ORE:
_ORE.Barrier_swigregister(Barrier)

class BarrierOption(OneAssetOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, barrierType, barrier, rebate, payoff, exercise):
        _ORE.BarrierOption_swiginit(self, _ORE.new_BarrierOption(barrierType, barrier, rebate, payoff, exercise))

    def impliedVolatility(self, *args):
        return _ORE.BarrierOption_impliedVolatility(self, *args)
    __swig_destroy__ = _ORE.delete_BarrierOption

# Register BarrierOption in _ORE:
_ORE.BarrierOption_swigregister(BarrierOption)

class QuantoBarrierOption(BarrierOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, barrierType, barrier, rebate, payoff, exercise):
        _ORE.QuantoBarrierOption_swiginit(self, _ORE.new_QuantoBarrierOption(barrierType, barrier, rebate, payoff, exercise))
    __swig_destroy__ = _ORE.delete_QuantoBarrierOption

# Register QuantoBarrierOption in _ORE:
_ORE.QuantoBarrierOption_swigregister(QuantoBarrierOption)

class PartialBarrier(Barrier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Start = _ORE.PartialBarrier_Start
    End = _ORE.PartialBarrier_End
    EndB1 = _ORE.PartialBarrier_EndB1
    EndB2 = _ORE.PartialBarrier_EndB2

    def __init__(self):
        _ORE.PartialBarrier_swiginit(self, _ORE.new_PartialBarrier())
    __swig_destroy__ = _ORE.delete_PartialBarrier

# Register PartialBarrier in _ORE:
_ORE.PartialBarrier_swigregister(PartialBarrier)

class PartialTimeBarrierOption(OneAssetOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, barrierType, barrierRange, barrier, rebate, coverEventDate, payoff, exercise):
        _ORE.PartialTimeBarrierOption_swiginit(self, _ORE.new_PartialTimeBarrierOption(barrierType, barrierRange, barrier, rebate, coverEventDate, payoff, exercise))
    __swig_destroy__ = _ORE.delete_PartialTimeBarrierOption

# Register PartialTimeBarrierOption in _ORE:
_ORE.PartialTimeBarrierOption_swigregister(PartialTimeBarrierOption)

class AnalyticPartialTimeBarrierOptionEngine(PricingEngine):
    r"""Partial Time Barrier Option Engine"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""Partial Time Barrier Option Engine"""
        _ORE.AnalyticPartialTimeBarrierOptionEngine_swiginit(self, _ORE.new_AnalyticPartialTimeBarrierOptionEngine(process))
    __swig_destroy__ = _ORE.delete_AnalyticPartialTimeBarrierOptionEngine

# Register AnalyticPartialTimeBarrierOptionEngine in _ORE:
_ORE.AnalyticPartialTimeBarrierOptionEngine_swigregister(AnalyticPartialTimeBarrierOptionEngine)

class DividendBarrierOption(BarrierOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, barrierType, barrier, rebate, payoff, exercise, dividendDates, dividends):
        _ORE.DividendBarrierOption_swiginit(self, _ORE.new_DividendBarrierOption(barrierType, barrier, rebate, payoff, exercise, dividendDates, dividends))
    __swig_destroy__ = _ORE.delete_DividendBarrierOption

# Register DividendBarrierOption in _ORE:
_ORE.DividendBarrierOption_swigregister(DividendBarrierOption)

class AnalyticBarrierEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2):
        _ORE.AnalyticBarrierEngine_swiginit(self, _ORE.new_AnalyticBarrierEngine(arg2))
    __swig_destroy__ = _ORE.delete_AnalyticBarrierEngine

# Register AnalyticBarrierEngine in _ORE:
_ORE.AnalyticBarrierEngine_swigregister(AnalyticBarrierEngine)

class MCPRBarrierEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCPRBarrierEngine_swiginit(self, _ORE.new_MCPRBarrierEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCPRBarrierEngine

# Register MCPRBarrierEngine in _ORE:
_ORE.MCPRBarrierEngine_swigregister(MCPRBarrierEngine)

class MCLDBarrierEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCLDBarrierEngine_swiginit(self, _ORE.new_MCLDBarrierEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCLDBarrierEngine

# Register MCLDBarrierEngine in _ORE:
_ORE.MCLDBarrierEngine_swigregister(MCLDBarrierEngine)


def MCBarrierEngine(process,
                    traits,
                    timeSteps=None,
                    timeStepsPerYear=None,
                    brownianBridge=False,
                    antitheticVariate=False,
                    requiredSamples=None,
                    requiredTolerance=None,
                    maxSamples=None,
                    isBiased=False,
                    seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRBarrierEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDBarrierEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               brownianBridge,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               isBiased,
               seed)

class QuantoBarrierEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, foreignRiskFreeRate, exchangeRateVolatility, correlation):
        _ORE.QuantoBarrierEngine_swiginit(self, _ORE.new_QuantoBarrierEngine(arg2, foreignRiskFreeRate, exchangeRateVolatility, correlation))
    __swig_destroy__ = _ORE.delete_QuantoBarrierEngine

# Register QuantoBarrierEngine in _ORE:
_ORE.QuantoBarrierEngine_swigregister(QuantoBarrierEngine)

class FdBlackScholesBarrierEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdBlackScholesBarrierEngine_swiginit(self, _ORE.new_FdBlackScholesBarrierEngine(*args))
    __swig_destroy__ = _ORE.delete_FdBlackScholesBarrierEngine

# Register FdBlackScholesBarrierEngine in _ORE:
_ORE.FdBlackScholesBarrierEngine_swigregister(FdBlackScholesBarrierEngine)

class FdBlackScholesRebateEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdBlackScholesRebateEngine_swiginit(self, _ORE.new_FdBlackScholesRebateEngine(*args))
    __swig_destroy__ = _ORE.delete_FdBlackScholesRebateEngine

# Register FdBlackScholesRebateEngine in _ORE:
_ORE.FdBlackScholesRebateEngine_swigregister(FdBlackScholesRebateEngine)

class FdHestonBarrierEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdHestonBarrierEngine_swiginit(self, _ORE.new_FdHestonBarrierEngine(*args))
    __swig_destroy__ = _ORE.delete_FdHestonBarrierEngine

# Register FdHestonBarrierEngine in _ORE:
_ORE.FdHestonBarrierEngine_swigregister(FdHestonBarrierEngine)

class FdHestonRebateEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdHestonRebateEngine_swiginit(self, _ORE.new_FdHestonRebateEngine(*args))
    __swig_destroy__ = _ORE.delete_FdHestonRebateEngine

# Register FdHestonRebateEngine in _ORE:
_ORE.FdHestonRebateEngine_swigregister(FdHestonRebateEngine)

class AnalyticBinaryBarrierEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.AnalyticBinaryBarrierEngine_swiginit(self, _ORE.new_AnalyticBinaryBarrierEngine(process))
    __swig_destroy__ = _ORE.delete_AnalyticBinaryBarrierEngine

# Register AnalyticBinaryBarrierEngine in _ORE:
_ORE.AnalyticBinaryBarrierEngine_swigregister(AnalyticBinaryBarrierEngine)

class BinomialCRRBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
    up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    Boyle-Lau adjustment is controlled by parameter max_steps.
    If max_steps is equal to steps Boyle-Lau is disabled.
    Il max_steps is 0 (default value), max_steps is calculated by capping it to
    5*steps when Boyle-Lau would need more than 1000 steps.
    If max_steps is specified, it would limit binomial steps to this value.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps, max_steps=0):
        r"""
        Binomial Engine for barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
        up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        Boyle-Lau adjustment is controlled by parameter max_steps.
        If max_steps is equal to steps Boyle-Lau is disabled.
        Il max_steps is 0 (default value), max_steps is calculated by capping it to
        5*steps when Boyle-Lau would need more than 1000 steps.
        If max_steps is specified, it would limit binomial steps to this value.

        """
        _ORE.BinomialCRRBarrierEngine_swiginit(self, _ORE.new_BinomialCRRBarrierEngine(arg2, steps, max_steps))
    __swig_destroy__ = _ORE.delete_BinomialCRRBarrierEngine

# Register BinomialCRRBarrierEngine in _ORE:
_ORE.BinomialCRRBarrierEngine_swigregister(BinomialCRRBarrierEngine)

class BinomialJRBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
    up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    Boyle-Lau adjustment is controlled by parameter max_steps.
    If max_steps is equal to steps Boyle-Lau is disabled.
    Il max_steps is 0 (default value), max_steps is calculated by capping it to
    5*steps when Boyle-Lau would need more than 1000 steps.
    If max_steps is specified, it would limit binomial steps to this value.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps, max_steps=0):
        r"""
        Binomial Engine for barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
        up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        Boyle-Lau adjustment is controlled by parameter max_steps.
        If max_steps is equal to steps Boyle-Lau is disabled.
        Il max_steps is 0 (default value), max_steps is calculated by capping it to
        5*steps when Boyle-Lau would need more than 1000 steps.
        If max_steps is specified, it would limit binomial steps to this value.

        """
        _ORE.BinomialJRBarrierEngine_swiginit(self, _ORE.new_BinomialJRBarrierEngine(arg2, steps, max_steps))
    __swig_destroy__ = _ORE.delete_BinomialJRBarrierEngine

# Register BinomialJRBarrierEngine in _ORE:
_ORE.BinomialJRBarrierEngine_swigregister(BinomialJRBarrierEngine)

class BinomialEQPBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
    up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    Boyle-Lau adjustment is controlled by parameter max_steps.
    If max_steps is equal to steps Boyle-Lau is disabled.
    Il max_steps is 0 (default value), max_steps is calculated by capping it to
    5*steps when Boyle-Lau would need more than 1000 steps.
    If max_steps is specified, it would limit binomial steps to this value.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps, max_steps=0):
        r"""
        Binomial Engine for barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
        up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        Boyle-Lau adjustment is controlled by parameter max_steps.
        If max_steps is equal to steps Boyle-Lau is disabled.
        Il max_steps is 0 (default value), max_steps is calculated by capping it to
        5*steps when Boyle-Lau would need more than 1000 steps.
        If max_steps is specified, it would limit binomial steps to this value.

        """
        _ORE.BinomialEQPBarrierEngine_swiginit(self, _ORE.new_BinomialEQPBarrierEngine(arg2, steps, max_steps))
    __swig_destroy__ = _ORE.delete_BinomialEQPBarrierEngine

# Register BinomialEQPBarrierEngine in _ORE:
_ORE.BinomialEQPBarrierEngine_swigregister(BinomialEQPBarrierEngine)

class BinomialTrigeorgisBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
    up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    Boyle-Lau adjustment is controlled by parameter max_steps.
    If max_steps is equal to steps Boyle-Lau is disabled.
    Il max_steps is 0 (default value), max_steps is calculated by capping it to
    5*steps when Boyle-Lau would need more than 1000 steps.
    If max_steps is specified, it would limit binomial steps to this value.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps, max_steps=0):
        r"""
        Binomial Engine for barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
        up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        Boyle-Lau adjustment is controlled by parameter max_steps.
        If max_steps is equal to steps Boyle-Lau is disabled.
        Il max_steps is 0 (default value), max_steps is calculated by capping it to
        5*steps when Boyle-Lau would need more than 1000 steps.
        If max_steps is specified, it would limit binomial steps to this value.

        """
        _ORE.BinomialTrigeorgisBarrierEngine_swiginit(self, _ORE.new_BinomialTrigeorgisBarrierEngine(arg2, steps, max_steps))
    __swig_destroy__ = _ORE.delete_BinomialTrigeorgisBarrierEngine

# Register BinomialTrigeorgisBarrierEngine in _ORE:
_ORE.BinomialTrigeorgisBarrierEngine_swigregister(BinomialTrigeorgisBarrierEngine)

class BinomialTianBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
    up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    Boyle-Lau adjustment is controlled by parameter max_steps.
    If max_steps is equal to steps Boyle-Lau is disabled.
    Il max_steps is 0 (default value), max_steps is calculated by capping it to
    5*steps when Boyle-Lau would need more than 1000 steps.
    If max_steps is specified, it would limit binomial steps to this value.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps, max_steps=0):
        r"""
        Binomial Engine for barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
        up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        Boyle-Lau adjustment is controlled by parameter max_steps.
        If max_steps is equal to steps Boyle-Lau is disabled.
        Il max_steps is 0 (default value), max_steps is calculated by capping it to
        5*steps when Boyle-Lau would need more than 1000 steps.
        If max_steps is specified, it would limit binomial steps to this value.

        """
        _ORE.BinomialTianBarrierEngine_swiginit(self, _ORE.new_BinomialTianBarrierEngine(arg2, steps, max_steps))
    __swig_destroy__ = _ORE.delete_BinomialTianBarrierEngine

# Register BinomialTianBarrierEngine in _ORE:
_ORE.BinomialTianBarrierEngine_swigregister(BinomialTianBarrierEngine)

class BinomialLRBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
    up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    Boyle-Lau adjustment is controlled by parameter max_steps.
    If max_steps is equal to steps Boyle-Lau is disabled.
    Il max_steps is 0 (default value), max_steps is calculated by capping it to
    5*steps when Boyle-Lau would need more than 1000 steps.
    If max_steps is specified, it would limit binomial steps to this value.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps, max_steps=0):
        r"""
        Binomial Engine for barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
        up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        Boyle-Lau adjustment is controlled by parameter max_steps.
        If max_steps is equal to steps Boyle-Lau is disabled.
        Il max_steps is 0 (default value), max_steps is calculated by capping it to
        5*steps when Boyle-Lau would need more than 1000 steps.
        If max_steps is specified, it would limit binomial steps to this value.

        """
        _ORE.BinomialLRBarrierEngine_swiginit(self, _ORE.new_BinomialLRBarrierEngine(arg2, steps, max_steps))
    __swig_destroy__ = _ORE.delete_BinomialLRBarrierEngine

# Register BinomialLRBarrierEngine in _ORE:
_ORE.BinomialLRBarrierEngine_swigregister(BinomialLRBarrierEngine)

class BinomialJ4BarrierEngine(PricingEngine):
    r"""
    Binomial Engine for barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
    up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    Boyle-Lau adjustment is controlled by parameter max_steps.
    If max_steps is equal to steps Boyle-Lau is disabled.
    Il max_steps is 0 (default value), max_steps is calculated by capping it to
    5*steps when Boyle-Lau would need more than 1000 steps.
    If max_steps is specified, it would limit binomial steps to this value.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps, max_steps=0):
        r"""
        Binomial Engine for barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
        up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        Boyle-Lau adjustment is controlled by parameter max_steps.
        If max_steps is equal to steps Boyle-Lau is disabled.
        Il max_steps is 0 (default value), max_steps is calculated by capping it to
        5*steps when Boyle-Lau would need more than 1000 steps.
        If max_steps is specified, it would limit binomial steps to this value.

        """
        _ORE.BinomialJ4BarrierEngine_swiginit(self, _ORE.new_BinomialJ4BarrierEngine(arg2, steps, max_steps))
    __swig_destroy__ = _ORE.delete_BinomialJ4BarrierEngine

# Register BinomialJ4BarrierEngine in _ORE:
_ORE.BinomialJ4BarrierEngine_swigregister(BinomialJ4BarrierEngine)


def BinomialBarrierEngine(process, type, steps):
    type = type.lower()
    if type == "crr" or type == "coxrossrubinstein":
        cls = BinomialCRRBarrierEngine
    elif type == "jr" or type == "jarrowrudd":
        cls = BinomialJRBarrierEngine
    elif type == "eqp":
        cls = BinomialEQPBarrierEngine
    elif type == "trigeorgis":
        cls = BinomialTrigeorgisBarrierEngine
    elif type == "tian":
        cls = BinomialTianBarrierEngine
    elif type == "lr" or type == "leisenreimer":
        cls = BinomialLRBarrierEngine
    elif type == "j4" or type == "joshi4":
        cls = BinomialJ4BarrierEngine
    else:
        raise RuntimeError("unknown binomial engine type: %s" % type);
    return cls(process, steps)

class VannaVolgaBarrierEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, atmVol, vol25Put, vol25Call, spotFX, domesticTS, foreignTS, adaptVanDelta=False, bsPriceWithSmile=0.0):
        _ORE.VannaVolgaBarrierEngine_swiginit(self, _ORE.new_VannaVolgaBarrierEngine(atmVol, vol25Put, vol25Call, spotFX, domesticTS, foreignTS, adaptVanDelta, bsPriceWithSmile))
    __swig_destroy__ = _ORE.delete_VannaVolgaBarrierEngine

# Register VannaVolgaBarrierEngine in _ORE:
_ORE.VannaVolgaBarrierEngine_swigregister(VannaVolgaBarrierEngine)

class DoubleBarrier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    KnockIn = _ORE.DoubleBarrier_KnockIn
    KnockOut = _ORE.DoubleBarrier_KnockOut
    KIKO = _ORE.DoubleBarrier_KIKO
    KOKI = _ORE.DoubleBarrier_KOKI

    def __init__(self):
        _ORE.DoubleBarrier_swiginit(self, _ORE.new_DoubleBarrier())
    __swig_destroy__ = _ORE.delete_DoubleBarrier

# Register DoubleBarrier in _ORE:
_ORE.DoubleBarrier_swigregister(DoubleBarrier)

class DoubleBarrierOption(OneAssetOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, barrierType, barrier_lo, barrier_hi, rebate, payoff, exercise):
        _ORE.DoubleBarrierOption_swiginit(self, _ORE.new_DoubleBarrierOption(barrierType, barrier_lo, barrier_hi, rebate, payoff, exercise))
    __swig_destroy__ = _ORE.delete_DoubleBarrierOption

# Register DoubleBarrierOption in _ORE:
_ORE.DoubleBarrierOption_swigregister(DoubleBarrierOption)

class QuantoDoubleBarrierOption(DoubleBarrierOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, barrierType, barrier_lo, barrier_hi, rebate, payoff, exercise):
        _ORE.QuantoDoubleBarrierOption_swiginit(self, _ORE.new_QuantoDoubleBarrierOption(barrierType, barrier_lo, barrier_hi, rebate, payoff, exercise))

    def qvega(self):
        return _ORE.QuantoDoubleBarrierOption_qvega(self)

    def qrho(self):
        return _ORE.QuantoDoubleBarrierOption_qrho(self)

    def qlambda(self):
        return _ORE.QuantoDoubleBarrierOption_qlambda(self)
    __swig_destroy__ = _ORE.delete_QuantoDoubleBarrierOption

# Register QuantoDoubleBarrierOption in _ORE:
_ORE.QuantoDoubleBarrierOption_swigregister(QuantoDoubleBarrierOption)

class AnalyticDoubleBarrierEngine(PricingEngine):
    r"""Double barrier engine implementing Ikeda-Kunitomo series."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process, series=5):
        r"""Double barrier engine implementing Ikeda-Kunitomo series."""
        _ORE.AnalyticDoubleBarrierEngine_swiginit(self, _ORE.new_AnalyticDoubleBarrierEngine(process, series))
    __swig_destroy__ = _ORE.delete_AnalyticDoubleBarrierEngine

# Register AnalyticDoubleBarrierEngine in _ORE:
_ORE.AnalyticDoubleBarrierEngine_swigregister(AnalyticDoubleBarrierEngine)

class FdHestonDoubleBarrierEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdHestonDoubleBarrierEngine_swiginit(self, _ORE.new_FdHestonDoubleBarrierEngine(*args))
    __swig_destroy__ = _ORE.delete_FdHestonDoubleBarrierEngine

# Register FdHestonDoubleBarrierEngine in _ORE:
_ORE.FdHestonDoubleBarrierEngine_swigregister(FdHestonDoubleBarrierEngine)

class SuoWangDoubleBarrierEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process, series=5):
        _ORE.SuoWangDoubleBarrierEngine_swiginit(self, _ORE.new_SuoWangDoubleBarrierEngine(process, series))
    __swig_destroy__ = _ORE.delete_SuoWangDoubleBarrierEngine

# Register SuoWangDoubleBarrierEngine in _ORE:
_ORE.SuoWangDoubleBarrierEngine_swigregister(SuoWangDoubleBarrierEngine)

class VannaVolgaIKDoubleBarrierEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, atmVol, vol25Put, vol25Call, spotFX, domesticTS, foreignTS, adaptVanDelta=False, bsPriceWithSmile=0.0, series=5):
        _ORE.VannaVolgaIKDoubleBarrierEngine_swiginit(self, _ORE.new_VannaVolgaIKDoubleBarrierEngine(atmVol, vol25Put, vol25Call, spotFX, domesticTS, foreignTS, adaptVanDelta, bsPriceWithSmile, series))
    __swig_destroy__ = _ORE.delete_VannaVolgaIKDoubleBarrierEngine

# Register VannaVolgaIKDoubleBarrierEngine in _ORE:
_ORE.VannaVolgaIKDoubleBarrierEngine_swigregister(VannaVolgaIKDoubleBarrierEngine)

class VannaVolgaWODoubleBarrierEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, atmVol, vol25Put, vol25Call, spotFX, domesticTS, foreignTS, adaptVanDelta=False, bsPriceWithSmile=0.0, series=5):
        _ORE.VannaVolgaWODoubleBarrierEngine_swiginit(self, _ORE.new_VannaVolgaWODoubleBarrierEngine(atmVol, vol25Put, vol25Call, spotFX, domesticTS, foreignTS, adaptVanDelta, bsPriceWithSmile, series))
    __swig_destroy__ = _ORE.delete_VannaVolgaWODoubleBarrierEngine

# Register VannaVolgaWODoubleBarrierEngine in _ORE:
_ORE.VannaVolgaWODoubleBarrierEngine_swigregister(VannaVolgaWODoubleBarrierEngine)

class AnalyticDoubleBarrierBinaryEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.AnalyticDoubleBarrierBinaryEngine_swiginit(self, _ORE.new_AnalyticDoubleBarrierBinaryEngine(process))
    __swig_destroy__ = _ORE.delete_AnalyticDoubleBarrierBinaryEngine

# Register AnalyticDoubleBarrierBinaryEngine in _ORE:
_ORE.AnalyticDoubleBarrierBinaryEngine_swigregister(AnalyticDoubleBarrierBinaryEngine)

class BinomialCRRDoubleBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for double barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Derman-Kani optimization to speed up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        r"""
        Binomial Engine for double barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Derman-Kani optimization to speed up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        """
        _ORE.BinomialCRRDoubleBarrierEngine_swiginit(self, _ORE.new_BinomialCRRDoubleBarrierEngine(arg2, steps))
    __swig_destroy__ = _ORE.delete_BinomialCRRDoubleBarrierEngine

# Register BinomialCRRDoubleBarrierEngine in _ORE:
_ORE.BinomialCRRDoubleBarrierEngine_swigregister(BinomialCRRDoubleBarrierEngine)

class BinomialJRDoubleBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for double barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Derman-Kani optimization to speed up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        r"""
        Binomial Engine for double barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Derman-Kani optimization to speed up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        """
        _ORE.BinomialJRDoubleBarrierEngine_swiginit(self, _ORE.new_BinomialJRDoubleBarrierEngine(arg2, steps))
    __swig_destroy__ = _ORE.delete_BinomialJRDoubleBarrierEngine

# Register BinomialJRDoubleBarrierEngine in _ORE:
_ORE.BinomialJRDoubleBarrierEngine_swigregister(BinomialJRDoubleBarrierEngine)

class BinomialEQPDoubleBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for double barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Derman-Kani optimization to speed up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        r"""
        Binomial Engine for double barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Derman-Kani optimization to speed up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        """
        _ORE.BinomialEQPDoubleBarrierEngine_swiginit(self, _ORE.new_BinomialEQPDoubleBarrierEngine(arg2, steps))
    __swig_destroy__ = _ORE.delete_BinomialEQPDoubleBarrierEngine

# Register BinomialEQPDoubleBarrierEngine in _ORE:
_ORE.BinomialEQPDoubleBarrierEngine_swigregister(BinomialEQPDoubleBarrierEngine)

class BinomialTrigeorgisDoubleBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for double barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Derman-Kani optimization to speed up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        r"""
        Binomial Engine for double barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Derman-Kani optimization to speed up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        """
        _ORE.BinomialTrigeorgisDoubleBarrierEngine_swiginit(self, _ORE.new_BinomialTrigeorgisDoubleBarrierEngine(arg2, steps))
    __swig_destroy__ = _ORE.delete_BinomialTrigeorgisDoubleBarrierEngine

# Register BinomialTrigeorgisDoubleBarrierEngine in _ORE:
_ORE.BinomialTrigeorgisDoubleBarrierEngine_swigregister(BinomialTrigeorgisDoubleBarrierEngine)

class BinomialTianDoubleBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for double barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Derman-Kani optimization to speed up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        r"""
        Binomial Engine for double barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Derman-Kani optimization to speed up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        """
        _ORE.BinomialTianDoubleBarrierEngine_swiginit(self, _ORE.new_BinomialTianDoubleBarrierEngine(arg2, steps))
    __swig_destroy__ = _ORE.delete_BinomialTianDoubleBarrierEngine

# Register BinomialTianDoubleBarrierEngine in _ORE:
_ORE.BinomialTianDoubleBarrierEngine_swigregister(BinomialTianDoubleBarrierEngine)

class BinomialLRDoubleBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for double barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Derman-Kani optimization to speed up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        r"""
        Binomial Engine for double barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Derman-Kani optimization to speed up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        """
        _ORE.BinomialLRDoubleBarrierEngine_swiginit(self, _ORE.new_BinomialLRDoubleBarrierEngine(arg2, steps))
    __swig_destroy__ = _ORE.delete_BinomialLRDoubleBarrierEngine

# Register BinomialLRDoubleBarrierEngine in _ORE:
_ORE.BinomialLRDoubleBarrierEngine_swigregister(BinomialLRDoubleBarrierEngine)

class BinomialJ4DoubleBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for double barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Derman-Kani optimization to speed up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        r"""
        Binomial Engine for double barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Derman-Kani optimization to speed up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        """
        _ORE.BinomialJ4DoubleBarrierEngine_swiginit(self, _ORE.new_BinomialJ4DoubleBarrierEngine(arg2, steps))
    __swig_destroy__ = _ORE.delete_BinomialJ4DoubleBarrierEngine

# Register BinomialJ4DoubleBarrierEngine in _ORE:
_ORE.BinomialJ4DoubleBarrierEngine_swigregister(BinomialJ4DoubleBarrierEngine)


def BinomialDoubleBarrierEngine(process, type, steps):
    type = type.lower()
    if type == "crr" or type == "coxrossrubinstein":
        cls = BinomialCRRDoubleBarrierEngine
    elif type == "jr" or type == "jarrowrudd":
        cls = BinomialJRDoubleBarrierEngine
    elif type == "eqp":
        cls = BinomialEQPDoubleBarrierEngine
    elif type == "trigeorgis":
        cls = BinomialTrigeorgisDoubleBarrierEngine
    elif type == "tian":
        cls = BinomialTianDoubleBarrierEngine
    elif type == "lr" or type == "leisenreimer":
        cls = BinomialLRDoubleBarrierEngine
    elif type == "j4" or type == "joshi4":
        cls = BinomialJ4DoubleBarrierEngine
    else:
        raise RuntimeError("unknown binomial engine type: %s" % type);
    return cls(process, steps)

class PlainVanillaPayoff(StrikedTypePayoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, strike):
        _ORE.PlainVanillaPayoff_swiginit(self, _ORE.new_PlainVanillaPayoff(type, strike))
    __swig_destroy__ = _ORE.delete_PlainVanillaPayoff

# Register PlainVanillaPayoff in _ORE:
_ORE.PlainVanillaPayoff_swigregister(PlainVanillaPayoff)


def as_plain_vanilla_payoff(payoff):
    return _ORE.as_plain_vanilla_payoff(payoff)
class PercentageStrikePayoff(StrikedTypePayoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, moneyness):
        _ORE.PercentageStrikePayoff_swiginit(self, _ORE.new_PercentageStrikePayoff(type, moneyness))
    __swig_destroy__ = _ORE.delete_PercentageStrikePayoff

# Register PercentageStrikePayoff in _ORE:
_ORE.PercentageStrikePayoff_swigregister(PercentageStrikePayoff)

class CashOrNothingPayoff(StrikedTypePayoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, strike, payoff):
        _ORE.CashOrNothingPayoff_swiginit(self, _ORE.new_CashOrNothingPayoff(type, strike, payoff))
    __swig_destroy__ = _ORE.delete_CashOrNothingPayoff

# Register CashOrNothingPayoff in _ORE:
_ORE.CashOrNothingPayoff_swigregister(CashOrNothingPayoff)

class AssetOrNothingPayoff(StrikedTypePayoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, strike):
        _ORE.AssetOrNothingPayoff_swiginit(self, _ORE.new_AssetOrNothingPayoff(type, strike))
    __swig_destroy__ = _ORE.delete_AssetOrNothingPayoff

# Register AssetOrNothingPayoff in _ORE:
_ORE.AssetOrNothingPayoff_swigregister(AssetOrNothingPayoff)

class SuperSharePayoff(StrikedTypePayoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, strike, increment):
        _ORE.SuperSharePayoff_swiginit(self, _ORE.new_SuperSharePayoff(type, strike, increment))
    __swig_destroy__ = _ORE.delete_SuperSharePayoff

# Register SuperSharePayoff in _ORE:
_ORE.SuperSharePayoff_swigregister(SuperSharePayoff)

class GapPayoff(StrikedTypePayoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, strike, strikePayoff):
        _ORE.GapPayoff_swiginit(self, _ORE.new_GapPayoff(type, strike, strikePayoff))
    __swig_destroy__ = _ORE.delete_GapPayoff

# Register GapPayoff in _ORE:
_ORE.GapPayoff_swigregister(GapPayoff)

class VanillaForwardPayoff(StrikedTypePayoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, strike):
        _ORE.VanillaForwardPayoff_swiginit(self, _ORE.new_VanillaForwardPayoff(type, strike))
    __swig_destroy__ = _ORE.delete_VanillaForwardPayoff

# Register VanillaForwardPayoff in _ORE:
_ORE.VanillaForwardPayoff_swigregister(VanillaForwardPayoff)

class BasketPayoff(Payoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ORE.delete_BasketPayoff

# Register BasketPayoff in _ORE:
_ORE.BasketPayoff_swigregister(BasketPayoff)

class MinBasketPayoff(BasketPayoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p):
        _ORE.MinBasketPayoff_swiginit(self, _ORE.new_MinBasketPayoff(p))
    __swig_destroy__ = _ORE.delete_MinBasketPayoff

# Register MinBasketPayoff in _ORE:
_ORE.MinBasketPayoff_swigregister(MinBasketPayoff)

class MaxBasketPayoff(BasketPayoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p):
        _ORE.MaxBasketPayoff_swiginit(self, _ORE.new_MaxBasketPayoff(p))
    __swig_destroy__ = _ORE.delete_MaxBasketPayoff

# Register MaxBasketPayoff in _ORE:
_ORE.MaxBasketPayoff_swigregister(MaxBasketPayoff)

class AverageBasketPayoff(BasketPayoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.AverageBasketPayoff_swiginit(self, _ORE.new_AverageBasketPayoff(*args))
    __swig_destroy__ = _ORE.delete_AverageBasketPayoff

# Register AverageBasketPayoff in _ORE:
_ORE.AverageBasketPayoff_swigregister(AverageBasketPayoff)

class SpreadBasketPayoff(BasketPayoff):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p):
        _ORE.SpreadBasketPayoff_swiginit(self, _ORE.new_SpreadBasketPayoff(p))
    __swig_destroy__ = _ORE.delete_SpreadBasketPayoff

# Register SpreadBasketPayoff in _ORE:
_ORE.SpreadBasketPayoff_swigregister(SpreadBasketPayoff)

class BasketOption(MultiAssetOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff, exercise):
        _ORE.BasketOption_swiginit(self, _ORE.new_BasketOption(payoff, exercise))
    __swig_destroy__ = _ORE.delete_BasketOption

# Register BasketOption in _ORE:
_ORE.BasketOption_swigregister(BasketOption)

class MCPREuropeanBasketEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCPREuropeanBasketEngine_swiginit(self, _ORE.new_MCPREuropeanBasketEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCPREuropeanBasketEngine

# Register MCPREuropeanBasketEngine in _ORE:
_ORE.MCPREuropeanBasketEngine_swigregister(MCPREuropeanBasketEngine)

class MCLDEuropeanBasketEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCLDEuropeanBasketEngine_swiginit(self, _ORE.new_MCLDEuropeanBasketEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCLDEuropeanBasketEngine

# Register MCLDEuropeanBasketEngine in _ORE:
_ORE.MCLDEuropeanBasketEngine_swigregister(MCLDEuropeanBasketEngine)


def MCEuropeanBasketEngine(process,
                           traits,
                           timeSteps=None,
                           timeStepsPerYear=None,
                           brownianBridge=False,
                           antitheticVariate=False,
                           requiredSamples=None,
                           requiredTolerance=None,
                           maxSamples=None,
                           seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPREuropeanBasketEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDEuropeanBasketEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               brownianBridge,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)

class MCPRAmericanBasketEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCPRAmericanBasketEngine_swiginit(self, _ORE.new_MCPRAmericanBasketEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCPRAmericanBasketEngine

# Register MCPRAmericanBasketEngine in _ORE:
_ORE.MCPRAmericanBasketEngine_swigregister(MCPRAmericanBasketEngine)

class MCLDAmericanBasketEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCLDAmericanBasketEngine_swiginit(self, _ORE.new_MCLDAmericanBasketEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCLDAmericanBasketEngine

# Register MCLDAmericanBasketEngine in _ORE:
_ORE.MCLDAmericanBasketEngine_swigregister(MCLDAmericanBasketEngine)


def MCAmericanBasketEngine(process,
                           traits,
                           timeSteps=None,
                           timeStepsPerYear=None,
                           brownianBridge=False,
                           antitheticVariate=False,
                           requiredSamples=None,
                           requiredTolerance=None,
                           maxSamples=None,
                           seed=0,
                           nCalibrationSamples=2048,
                           polynomOrder=2,
                           polynomType=LsmBasisSystem.Monomial):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRAmericanBasketEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDAmericanBasketEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               brownianBridge,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed,
               nCalibrationSamples,
               polynomOrder,
               polynomType)

class StulzEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process1, process2, correlation):
        _ORE.StulzEngine_swiginit(self, _ORE.new_StulzEngine(process1, process2, correlation))
    __swig_destroy__ = _ORE.delete_StulzEngine

# Register StulzEngine in _ORE:
_ORE.StulzEngine_swigregister(StulzEngine)

class KirkEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process1, process2, correlation):
        _ORE.KirkEngine_swiginit(self, _ORE.new_KirkEngine(process1, process2, correlation))
    __swig_destroy__ = _ORE.delete_KirkEngine

# Register KirkEngine in _ORE:
_ORE.KirkEngine_swigregister(KirkEngine)

class Fd2dBlackScholesVanillaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Fd2dBlackScholesVanillaEngine_swiginit(self, _ORE.new_Fd2dBlackScholesVanillaEngine(*args))
    __swig_destroy__ = _ORE.delete_Fd2dBlackScholesVanillaEngine

# Register Fd2dBlackScholesVanillaEngine in _ORE:
_ORE.Fd2dBlackScholesVanillaEngine_swigregister(Fd2dBlackScholesVanillaEngine)

class EverestOption(MultiAssetOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, notional, guarantee, exercise):
        _ORE.EverestOption_swiginit(self, _ORE.new_EverestOption(notional, guarantee, exercise))
    __swig_destroy__ = _ORE.delete_EverestOption

# Register EverestOption in _ORE:
_ORE.EverestOption_swigregister(EverestOption)

class MCPREverestEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCPREverestEngine_swiginit(self, _ORE.new_MCPREverestEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCPREverestEngine

# Register MCPREverestEngine in _ORE:
_ORE.MCPREverestEngine_swigregister(MCPREverestEngine)

class MCLDEverestEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCLDEverestEngine_swiginit(self, _ORE.new_MCLDEverestEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCLDEverestEngine

# Register MCLDEverestEngine in _ORE:
_ORE.MCLDEverestEngine_swigregister(MCLDEverestEngine)


def MCEverestEngine(process,
                    traits,
                    timeSteps=None,
                    timeStepsPerYear=None,
                    brownianBridge=False,
                    antitheticVariate=False,
                    requiredSamples=None,
                    requiredTolerance=None,
                    maxSamples=None,
                    seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPREverestEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDEverestEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               brownianBridge,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)

class HimalayaOption(MultiAssetOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fixingDates, strike):
        _ORE.HimalayaOption_swiginit(self, _ORE.new_HimalayaOption(fixingDates, strike))
    __swig_destroy__ = _ORE.delete_HimalayaOption

# Register HimalayaOption in _ORE:
_ORE.HimalayaOption_swigregister(HimalayaOption)

class MCPRHimalayaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCPRHimalayaEngine_swiginit(self, _ORE.new_MCPRHimalayaEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCPRHimalayaEngine

# Register MCPRHimalayaEngine in _ORE:
_ORE.MCPRHimalayaEngine_swigregister(MCPRHimalayaEngine)

class MCLDHimalayaEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCLDHimalayaEngine_swiginit(self, _ORE.new_MCLDHimalayaEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCLDHimalayaEngine

# Register MCLDHimalayaEngine in _ORE:
_ORE.MCLDHimalayaEngine_swigregister(MCLDHimalayaEngine)


def MCHimalayaEngine(process,
                     traits,
                     brownianBridge=False,
                     antitheticVariate=False,
                     requiredSamples=None,
                     requiredTolerance=None,
                     maxSamples=None,
                     seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRHimalayaEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDHimalayaEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               brownianBridge,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)


def blackFormula(optionType, strike, forward, stdDev, discount=1.0, displacement=0.0):
    return _ORE.blackFormula(optionType, strike, forward, stdDev, discount, displacement)

def blackFormulaImpliedStdDev(*args):
    return _ORE.blackFormulaImpliedStdDev(*args)

def blackFormulaImpliedStdDevLiRS(*args):
    return _ORE.blackFormulaImpliedStdDevLiRS(*args)

def blackFormulaCashItmProbability(*args):
    return _ORE.blackFormulaCashItmProbability(*args)

def blackFormulaAssetItmProbability(*args):
    return _ORE.blackFormulaAssetItmProbability(*args)

def bachelierBlackFormula(optionType, strike, forward, stdDev, discount=1.0):
    return _ORE.bachelierBlackFormula(optionType, strike, forward, stdDev, discount)

def bachelierBlackFormulaImpliedVol(optionType, strike, forward, tte, bachelierPrice, discount=1.0):
    return _ORE.bachelierBlackFormulaImpliedVol(optionType, strike, forward, tte, bachelierPrice, discount)

def bachelierBlackFormulaAssetItmProbability(*args):
    return _ORE.bachelierBlackFormulaAssetItmProbability(*args)
class BlackDeltaCalculator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ot, dt, spot, dDiscount, fDiscount, stDev):
        _ORE.BlackDeltaCalculator_swiginit(self, _ORE.new_BlackDeltaCalculator(ot, dt, spot, dDiscount, fDiscount, stDev))

    def deltaFromStrike(self, strike):
        return _ORE.BlackDeltaCalculator_deltaFromStrike(self, strike)

    def strikeFromDelta(self, delta):
        return _ORE.BlackDeltaCalculator_strikeFromDelta(self, delta)

    def atmStrike(self, atmT):
        return _ORE.BlackDeltaCalculator_atmStrike(self, atmT)
    __swig_destroy__ = _ORE.delete_BlackDeltaCalculator

# Register BlackDeltaCalculator in _ORE:
_ORE.BlackDeltaCalculator_swigregister(BlackDeltaCalculator)

class TimeBasket(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.TimeBasket_swiginit(self, _ORE.new_TimeBasket(*args))

    def __len__(self):
        return _ORE.TimeBasket___len__(self)

    def rebin(self, arg2):
        return _ORE.TimeBasket_rebin(self, arg2)

    def __getitem__(self, d):
        return _ORE.TimeBasket___getitem__(self, d)

    def __setitem__(self, d, value):
        return _ORE.TimeBasket___setitem__(self, d, value)

    def items(self):
        return _ORE.TimeBasket_items(self)

    def __contains__(self, d):
        return _ORE.TimeBasket___contains__(self, d)

    def __iter__(self):
        return _ORE.TimeBasket___iter__(self)
    __swig_destroy__ = _ORE.delete_TimeBasket

# Register TimeBasket in _ORE:
_ORE.TimeBasket_swigregister(TimeBasket)

class Swap(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Receiver = _ORE.Swap_Receiver
    Payer = _ORE.Swap_Payer

    def __init__(self, *args):
        _ORE.Swap_swiginit(self, _ORE.new_Swap(*args))

    def numberOfLegs(self):
        return _ORE.Swap_numberOfLegs(self)

    def startDate(self):
        return _ORE.Swap_startDate(self)

    def maturityDate(self):
        return _ORE.Swap_maturityDate(self)

    def leg(self, i):
        return _ORE.Swap_leg(self, i)

    def legNPV(self, j):
        return _ORE.Swap_legNPV(self, j)

    def legBPS(self, k):
        return _ORE.Swap_legBPS(self, k)

    def startDiscounts(self, j):
        return _ORE.Swap_startDiscounts(self, j)

    def endDiscounts(self, j):
        return _ORE.Swap_endDiscounts(self, j)

    def npvDateDiscount(self):
        return _ORE.Swap_npvDateDiscount(self)

    def payer(self, j):
        return _ORE.Swap_payer(self, j)
    __swig_destroy__ = _ORE.delete_Swap

# Register Swap in _ORE:
_ORE.Swap_swigregister(Swap)

class VanillaSwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.VanillaSwap_swiginit(self, _ORE.new_VanillaSwap(*args))

    def type(self):
        return _ORE.VanillaSwap_type(self)

    def fairRate(self):
        return _ORE.VanillaSwap_fairRate(self)

    def fairSpread(self):
        return _ORE.VanillaSwap_fairSpread(self)

    def fixedLegBPS(self):
        return _ORE.VanillaSwap_fixedLegBPS(self)

    def floatingLegBPS(self):
        return _ORE.VanillaSwap_floatingLegBPS(self)

    def fixedLegNPV(self):
        return _ORE.VanillaSwap_fixedLegNPV(self)

    def floatingLegNPV(self):
        return _ORE.VanillaSwap_floatingLegNPV(self)

    def fixedLeg(self):
        return _ORE.VanillaSwap_fixedLeg(self)

    def floatingLeg(self):
        return _ORE.VanillaSwap_floatingLeg(self)

    def nominal(self):
        return _ORE.VanillaSwap_nominal(self)

    def fixedSchedule(self):
        return _ORE.VanillaSwap_fixedSchedule(self)

    def floatingSchedule(self):
        return _ORE.VanillaSwap_floatingSchedule(self)

    def fixedRate(self):
        return _ORE.VanillaSwap_fixedRate(self)

    def spread(self):
        return _ORE.VanillaSwap_spread(self)

    def floatingDayCount(self):
        return _ORE.VanillaSwap_floatingDayCount(self)

    def fixedDayCount(self):
        return _ORE.VanillaSwap_fixedDayCount(self)
    __swig_destroy__ = _ORE.delete_VanillaSwap

# Register VanillaSwap in _ORE:
_ORE.VanillaSwap_swigregister(VanillaSwap)

class _MakeVanillaSwap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def receiveFixed(self, flag=True):
        return _ORE._MakeVanillaSwap_receiveFixed(self, flag)

    def withType(self, type):
        return _ORE._MakeVanillaSwap_withType(self, type)

    def withNominal(self, n):
        return _ORE._MakeVanillaSwap_withNominal(self, n)

    def withSettlementDays(self, settlementDays):
        return _ORE._MakeVanillaSwap_withSettlementDays(self, settlementDays)

    def withEffectiveDate(self, arg2):
        return _ORE._MakeVanillaSwap_withEffectiveDate(self, arg2)

    def withTerminationDate(self, arg2):
        return _ORE._MakeVanillaSwap_withTerminationDate(self, arg2)

    def withRule(self, r):
        return _ORE._MakeVanillaSwap_withRule(self, r)

    def withFixedLegTenor(self, t):
        return _ORE._MakeVanillaSwap_withFixedLegTenor(self, t)

    def withFixedLegCalendar(self, cal):
        return _ORE._MakeVanillaSwap_withFixedLegCalendar(self, cal)

    def withFixedLegConvention(self, bdc):
        return _ORE._MakeVanillaSwap_withFixedLegConvention(self, bdc)

    def withFixedLegTerminationDateConvention(self, bdc):
        return _ORE._MakeVanillaSwap_withFixedLegTerminationDateConvention(self, bdc)

    def withFixedLegRule(self, r):
        return _ORE._MakeVanillaSwap_withFixedLegRule(self, r)

    def withFixedLegEndOfMonth(self, flag=True):
        return _ORE._MakeVanillaSwap_withFixedLegEndOfMonth(self, flag)

    def withFixedLegFirstDate(self, d):
        return _ORE._MakeVanillaSwap_withFixedLegFirstDate(self, d)

    def withFixedLegNextToLastDate(self, d):
        return _ORE._MakeVanillaSwap_withFixedLegNextToLastDate(self, d)

    def withFixedLegDayCount(self, dc):
        return _ORE._MakeVanillaSwap_withFixedLegDayCount(self, dc)

    def withFloatingLegTenor(self, t):
        return _ORE._MakeVanillaSwap_withFloatingLegTenor(self, t)

    def withFloatingLegCalendar(self, cal):
        return _ORE._MakeVanillaSwap_withFloatingLegCalendar(self, cal)

    def withFloatingLegConvention(self, bdc):
        return _ORE._MakeVanillaSwap_withFloatingLegConvention(self, bdc)

    def withFloatingLegTerminationDateConvention(self, bdc):
        return _ORE._MakeVanillaSwap_withFloatingLegTerminationDateConvention(self, bdc)

    def withFloatingLegRule(self, r):
        return _ORE._MakeVanillaSwap_withFloatingLegRule(self, r)

    def withFloatingLegEndOfMonth(self, flag=True):
        return _ORE._MakeVanillaSwap_withFloatingLegEndOfMonth(self, flag)

    def withFloatingLegFirstDate(self, d):
        return _ORE._MakeVanillaSwap_withFloatingLegFirstDate(self, d)

    def withFloatingLegNextToLastDate(self, d):
        return _ORE._MakeVanillaSwap_withFloatingLegNextToLastDate(self, d)

    def withFloatingLegDayCount(self, dc):
        return _ORE._MakeVanillaSwap_withFloatingLegDayCount(self, dc)

    def withFloatingLegSpread(self, sp):
        return _ORE._MakeVanillaSwap_withFloatingLegSpread(self, sp)

    def withDiscountingTermStructure(self, discountCurve):
        return _ORE._MakeVanillaSwap_withDiscountingTermStructure(self, discountCurve)

    def withPricingEngine(self, engine):
        return _ORE._MakeVanillaSwap_withPricingEngine(self, engine)

    def withIndexedCoupons(self, flag=True):
        return _ORE._MakeVanillaSwap_withIndexedCoupons(self, flag)

    def withAtParCoupons(self, flag=True):
        return _ORE._MakeVanillaSwap_withAtParCoupons(self, flag)

    def __init__(self, swapTenor, index, fixedRate, forwardStart):
        _ORE._MakeVanillaSwap_swiginit(self, _ORE.new__MakeVanillaSwap(swapTenor, index, fixedRate, forwardStart))

    def makeVanillaSwap(self):
        return _ORE._MakeVanillaSwap_makeVanillaSwap(self)
    __swig_destroy__ = _ORE.delete__MakeVanillaSwap

# Register _MakeVanillaSwap in _ORE:
_ORE._MakeVanillaSwap_swigregister(_MakeVanillaSwap)


def MakeVanillaSwap(swapTenor, iborIndex, fixedRate, forwardStart,
    receiveFixed=None, swapType=None, Nominal=None, settlementDays=None,
    effectiveDate=None, terminationDate=None, dateGenerationRule=None,
    fixedLegTenor=None, fixedLegCalendar=None, fixedLegConvention=None,
    fixedLegDayCount=None, floatingLegTenor=None, floatingLegCalendar=None,
    floatingLegConvention=None, floatingLegDayCount=None, floatingLegSpread=None,
    discountingTermStructure=None, pricingEngine=None,
    fixedLegTerminationDateConvention=None,  fixedLegDateGenRule=None,
    fixedLegEndOfMonth=None, fixedLegFirstDate=None, fixedLegNextToLastDate=None,
    floatingLegTerminationDateConvention=None, floatingLegDateGenRule=None,
    floatingLegEndOfMonth=None, floatingLegFirstDate=None, floatingLegNextToLastDate=None,
    withIndexedCoupons=None):
    mv = _MakeVanillaSwap(swapTenor, iborIndex, fixedRate, forwardStart)
    if receiveFixed is not None:
        mv.receiveFixed(receiveFixed)
    if swapType is not None:
        mv.withType(swapType)
    if Nominal is not None:
        mv.withNominal(Nominal)
    if settlementDays is not None:
        mv.withSettlementDays(settlementDays)
    if effectiveDate is not None:
        mv.withEffectiveDate(effectiveDate)
    if terminationDate is not None:
        mv.withTerminationDate(terminationDate)
    if dateGenerationRule is not None:
        mv.withRule(dateGenerationRule)
    if fixedLegTenor is not None:
        mv.withFixedLegTenor(fixedLegTenor)
    if fixedLegCalendar is not None:
        mv.withFixedLegCalendar(fixedLegCalendar)
    if fixedLegConvention is not None:
        mv.withFixedLegConvention(fixedLegConvention)
    if fixedLegDayCount is not None:
        mv.withFixedLegDayCount(fixedLegDayCount)
    if floatingLegTenor is not None:
        mv.withFloatingLegTenor(floatingLegTenor)
    if floatingLegCalendar is not None:
        mv.withFloatingLegCalendar(floatingLegCalendar)
    if floatingLegConvention is not None:
        mv.withFloatingLegConvention(floatingLegConvention)
    if floatingLegDayCount is not None:
        mv.withFloatingLegDayCount(floatingLegDayCount)
    if floatingLegSpread is not None:
        mv.withFloatingLegSpread(floatingLegSpread)
    if discountingTermStructure is not None:
        mv.withDiscountingTermStructure(discountingTermStructure)
    if pricingEngine is not None:
        mv.withPricingEngine(pricingEngine)
    if fixedLegTerminationDateConvention is not None:
        mv.withFixedLegTerminationDateConvention(fixedLegTerminationDateConvention)
    if fixedLegDateGenRule is not None:
        mv.withFixedLegRule(fixedLegDateGenRule)
    if fixedLegEndOfMonth is not None:
        mv.withFixedLegEndOfMonth(fixedLegEndOfMonth)
    if fixedLegFirstDate is not None:
        mv.withFixedLegFirstDate(fixedLegFirstDate)
    if fixedLegNextToLastDate is not None:
        mv.withFixedLegNextToLastDate(fixedLegNextToLastDate)
    if floatingLegTerminationDateConvention is not None:
        mv.withFloatingLegTerminationDateConvention(floatingLegTerminationDateConvention)
    if floatingLegDateGenRule is not None:
        mv.withFloatingLegRule(floatingLegDateGenRule)
    if floatingLegEndOfMonth is not None:
        mv.withFloatingLegEndOfMonth(floatingLegEndOfMonth)
    if floatingLegFirstDate is not None:
        mv.withFloatingLegFirstDate(floatingLegFirstDate)
    if floatingLegNextToLastDate is not None:
        mv.withFloatingLegNextToLastDate(floatingLegNextToLastDate)
    if withIndexedCoupons is not None:
        mv.withIndexedCoupons(withIndexedCoupons)
    return mv.makeVanillaSwap()

class NonstandardSwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, fixedNominal, floatingNominal, fixedSchedule, fixedRate, fixedDayCount, floatSchedule, index, gearing, spread, floatDayCount, intermediateCapitalExchange=False, finalCapitalExchange=False, paymentConvention=Following):
        _ORE.NonstandardSwap_swiginit(self, _ORE.new_NonstandardSwap(type, fixedNominal, floatingNominal, fixedSchedule, fixedRate, fixedDayCount, floatSchedule, index, gearing, spread, floatDayCount, intermediateCapitalExchange, finalCapitalExchange, paymentConvention))

    def type(self):
        return _ORE.NonstandardSwap_type(self)

    def fixedNominal(self):
        return _ORE.NonstandardSwap_fixedNominal(self)

    def floatingNominal(self):
        return _ORE.NonstandardSwap_floatingNominal(self)

    def fixedSchedule(self):
        return _ORE.NonstandardSwap_fixedSchedule(self)

    def fixedRate(self):
        return _ORE.NonstandardSwap_fixedRate(self)

    def fixedDayCount(self):
        return _ORE.NonstandardSwap_fixedDayCount(self)

    def floatingSchedule(self):
        return _ORE.NonstandardSwap_floatingSchedule(self)

    def iborIndex(self):
        return _ORE.NonstandardSwap_iborIndex(self)

    def spread(self):
        return _ORE.NonstandardSwap_spread(self)

    def gearing(self):
        return _ORE.NonstandardSwap_gearing(self)

    def spreads(self):
        return _ORE.NonstandardSwap_spreads(self)

    def gearings(self):
        return _ORE.NonstandardSwap_gearings(self)

    def floatingDayCount(self):
        return _ORE.NonstandardSwap_floatingDayCount(self)

    def paymentConvention(self):
        return _ORE.NonstandardSwap_paymentConvention(self)

    def fixedLeg(self):
        return _ORE.NonstandardSwap_fixedLeg(self)

    def floatingLeg(self):
        return _ORE.NonstandardSwap_floatingLeg(self)
    __swig_destroy__ = _ORE.delete_NonstandardSwap

# Register NonstandardSwap in _ORE:
_ORE.NonstandardSwap_swigregister(NonstandardSwap)

class DiscountingSwapEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.DiscountingSwapEngine_swiginit(self, _ORE.new_DiscountingSwapEngine(*args))
    __swig_destroy__ = _ORE.delete_DiscountingSwapEngine

# Register DiscountingSwapEngine in _ORE:
_ORE.DiscountingSwapEngine_swigregister(DiscountingSwapEngine)

class AssetSwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.AssetSwap_swiginit(self, _ORE.new_AssetSwap(*args, **kwargs))

    def fairCleanPrice(self):
        return _ORE.AssetSwap_fairCleanPrice(self)

    def fairSpread(self):
        return _ORE.AssetSwap_fairSpread(self)
    __swig_destroy__ = _ORE.delete_AssetSwap

# Register AssetSwap in _ORE:
_ORE.AssetSwap_swigregister(AssetSwap)

class FloatFloatSwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FloatFloatSwap_swiginit(self, _ORE.new_FloatFloatSwap(*args))
    __swig_destroy__ = _ORE.delete_FloatFloatSwap

# Register FloatFloatSwap in _ORE:
_ORE.FloatFloatSwap_swigregister(FloatFloatSwap)

class OvernightIndexedSwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.OvernightIndexedSwap_swiginit(self, _ORE.new_OvernightIndexedSwap(*args))

    def fixedLegBPS(self):
        return _ORE.OvernightIndexedSwap_fixedLegBPS(self)

    def fixedLegNPV(self):
        return _ORE.OvernightIndexedSwap_fixedLegNPV(self)

    def fairRate(self):
        return _ORE.OvernightIndexedSwap_fairRate(self)

    def overnightLegBPS(self):
        return _ORE.OvernightIndexedSwap_overnightLegBPS(self)

    def overnightLegNPV(self):
        return _ORE.OvernightIndexedSwap_overnightLegNPV(self)

    def fairSpread(self):
        return _ORE.OvernightIndexedSwap_fairSpread(self)

    def type(self):
        return _ORE.OvernightIndexedSwap_type(self)

    def nominal(self):
        return _ORE.OvernightIndexedSwap_nominal(self)

    def nominals(self):
        return _ORE.OvernightIndexedSwap_nominals(self)

    def paymentFrequency(self):
        return _ORE.OvernightIndexedSwap_paymentFrequency(self)

    def fixedRate(self):
        return _ORE.OvernightIndexedSwap_fixedRate(self)

    def fixedDayCount(self):
        return _ORE.OvernightIndexedSwap_fixedDayCount(self)

    def overnightIndex(self):
        return _ORE.OvernightIndexedSwap_overnightIndex(self)

    def spread(self):
        return _ORE.OvernightIndexedSwap_spread(self)

    def fixedLeg(self):
        return _ORE.OvernightIndexedSwap_fixedLeg(self)

    def overnightLeg(self):
        return _ORE.OvernightIndexedSwap_overnightLeg(self)

    def averagingMethod(self):
        return _ORE.OvernightIndexedSwap_averagingMethod(self)
    __swig_destroy__ = _ORE.delete_OvernightIndexedSwap

# Register OvernightIndexedSwap in _ORE:
_ORE.OvernightIndexedSwap_swigregister(OvernightIndexedSwap)

class _MakeOIS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE._MakeOIS_swiginit(self, _ORE.new__MakeOIS(*args))

    def makeOIS(self):
        return _ORE._MakeOIS_makeOIS(self)

    def receiveFixed(self, flag=True):
        return _ORE._MakeOIS_receiveFixed(self, flag)

    def withType(self, type):
        return _ORE._MakeOIS_withType(self, type)

    def withNominal(self, n):
        return _ORE._MakeOIS_withNominal(self, n)

    def withSettlementDays(self, settlementDays):
        return _ORE._MakeOIS_withSettlementDays(self, settlementDays)

    def withEffectiveDate(self, arg2):
        return _ORE._MakeOIS_withEffectiveDate(self, arg2)

    def withTerminationDate(self, arg2):
        return _ORE._MakeOIS_withTerminationDate(self, arg2)

    def withRule(self, r):
        return _ORE._MakeOIS_withRule(self, r)

    def withPaymentFrequency(self, f):
        return _ORE._MakeOIS_withPaymentFrequency(self, f)

    def withPaymentAdjustment(self, convention):
        return _ORE._MakeOIS_withPaymentAdjustment(self, convention)

    def withPaymentLag(self, lag):
        return _ORE._MakeOIS_withPaymentLag(self, lag)

    def withPaymentCalendar(self, cal):
        return _ORE._MakeOIS_withPaymentCalendar(self, cal)

    def withEndOfMonth(self, flag=True):
        return _ORE._MakeOIS_withEndOfMonth(self, flag)

    def withFixedLegDayCount(self, dc):
        return _ORE._MakeOIS_withFixedLegDayCount(self, dc)

    def withOvernightLegSpread(self, sp):
        return _ORE._MakeOIS_withOvernightLegSpread(self, sp)

    def withDiscountingTermStructure(self, discountingTermStructure):
        return _ORE._MakeOIS_withDiscountingTermStructure(self, discountingTermStructure)

    def withTelescopicValueDates(self, telescopicValueDates):
        return _ORE._MakeOIS_withTelescopicValueDates(self, telescopicValueDates)

    def withAveragingMethod(self, averagingMethod):
        return _ORE._MakeOIS_withAveragingMethod(self, averagingMethod)

    def withPricingEngine(self, engine):
        return _ORE._MakeOIS_withPricingEngine(self, engine)
    __swig_destroy__ = _ORE.delete__MakeOIS

# Register _MakeOIS in _ORE:
_ORE._MakeOIS_swigregister(_MakeOIS)


def MakeOIS(swapTenor, overnightIndex, fixedRate, fwdStart=Period(0, Days),
            receiveFixed=True,
            swapType=Swap.Payer,
            nominal=1.0,
            settlementDays=2,
            effectiveDate=None,
            terminationDate=None,
            dateGenerationRule=DateGeneration.Backward,
            paymentFrequency=Annual,
            paymentAdjustmentConvention=Following,
            paymentLag=0,
            paymentCalendar=None,
            endOfMonth=True,    
            fixedLegDayCount=None,
            overnightLegSpread=0.0,
            discountingTermStructure=None,
            telescopicValueDates=False,
            pricingEngine=None,
            averagingMethod=None):

    mv = _MakeOIS(swapTenor, overnightIndex, fixedRate, fwdStart)

    if not receiveFixed:
        mv.receiveFixed(receiveFixed)
    if swapType != Swap.Payer:
        mv.withType(swapType)
    if nominal != 1.0:
        mv.withNominal(nominal)
    if settlementDays != 2:
        mv.withSettlementDays(settlementDays)
    if effectiveDate is not None:
        mv.withEffectiveDate(effectiveDate)
    if terminationDate is not None:
        mv.withTerminationDate(terminationDate)
    if dateGenerationRule != DateGeneration.Backward:
        mv.withRule(dateGenerationRule)  
    if paymentFrequency != Annual:
        mv.withPaymentFrequency(paymentFrequency)
    if paymentAdjustmentConvention != Following:
        mv.withPaymentAdjustment(paymentAdjustmentConvention)
    if paymentLag != 0:
        mv.withPaymentLag(paymentLag)
    if paymentCalendar is not None:
        mv.withPaymentCalendar(paymentCalendar)
    if not endOfMonth:
        mv.withEndOfMonth(endOfMonth)
    if fixedLegDayCount is not None:
        mv.withFixedLegDayCount(fixedLegDayCount)
    else:
        mv.withFixedLegDayCount(overnightIndex.dayCounter())
    if overnightLegSpread != 0.0:
        mv.withOvernightLegSpread(overnightLegSpread)
    if discountingTermStructure is not None:
        mv.withDiscountingTermStructure(discountingTermStructure)        
    if telescopicValueDates:
        mv.withTelescopicValueDates(telescopicValueDates)
    if averagingMethod is not None:
        mv.withAveragingMethod(averagingMethod)
    if pricingEngine is not None:
        mv.withPricingEngine(pricingEngine)

    return mv.makeOIS()

class OvernightIndexedSwapIndex(SwapIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.OvernightIndexedSwapIndex_swiginit(self, _ORE.new_OvernightIndexedSwapIndex(*args))

    def overnightIndex(self):
        return _ORE.OvernightIndexedSwapIndex_overnightIndex(self)

    def underlyingSwap(self, fixingDate):
        return _ORE.OvernightIndexedSwapIndex_underlyingSwap(self, fixingDate)
    __swig_destroy__ = _ORE.delete_OvernightIndexedSwapIndex

# Register OvernightIndexedSwapIndex in _ORE:
_ORE.OvernightIndexedSwapIndex_swigregister(OvernightIndexedSwapIndex)


def as_overnight_swap_index(index):
    return _ORE.as_overnight_swap_index(index)
class ZeroCouponSwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ZeroCouponSwap_swiginit(self, _ORE.new_ZeroCouponSwap(*args))

    def type(self):
        return _ORE.ZeroCouponSwap_type(self)

    def baseNominal(self):
        return _ORE.ZeroCouponSwap_baseNominal(self)

    def iborIndex(self):
        return _ORE.ZeroCouponSwap_iborIndex(self)

    def fixedLeg(self):
        return _ORE.ZeroCouponSwap_fixedLeg(self)

    def floatingLeg(self):
        return _ORE.ZeroCouponSwap_floatingLeg(self)

    def fixedPayment(self):
        return _ORE.ZeroCouponSwap_fixedPayment(self)

    def fixedLegNPV(self):
        return _ORE.ZeroCouponSwap_fixedLegNPV(self)

    def floatingLegNPV(self):
        return _ORE.ZeroCouponSwap_floatingLegNPV(self)

    def fairFixedPayment(self):
        return _ORE.ZeroCouponSwap_fairFixedPayment(self)

    def fairFixedRate(self, dayCounter):
        return _ORE.ZeroCouponSwap_fairFixedRate(self, dayCounter)
    __swig_destroy__ = _ORE.delete_ZeroCouponSwap

# Register ZeroCouponSwap in _ORE:
_ORE.ZeroCouponSwap_swigregister(ZeroCouponSwap)

class EquityTotalReturnSwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EquityTotalReturnSwap_swiginit(self, _ORE.new_EquityTotalReturnSwap(*args))

    def type(self):
        return _ORE.EquityTotalReturnSwap_type(self)

    def nominal(self):
        return _ORE.EquityTotalReturnSwap_nominal(self)

    def equityIndex(self):
        return _ORE.EquityTotalReturnSwap_equityIndex(self)

    def interestRateIndex(self):
        return _ORE.EquityTotalReturnSwap_interestRateIndex(self)

    def schedule(self):
        return _ORE.EquityTotalReturnSwap_schedule(self)

    def dayCounter(self):
        return _ORE.EquityTotalReturnSwap_dayCounter(self)

    def margin(self):
        return _ORE.EquityTotalReturnSwap_margin(self)

    def gearing(self):
        return _ORE.EquityTotalReturnSwap_gearing(self)

    def paymentCalendar(self):
        return _ORE.EquityTotalReturnSwap_paymentCalendar(self)

    def paymentConvention(self):
        return _ORE.EquityTotalReturnSwap_paymentConvention(self)

    def paymentDelay(self):
        return _ORE.EquityTotalReturnSwap_paymentDelay(self)

    def equityLeg(self):
        return _ORE.EquityTotalReturnSwap_equityLeg(self)

    def interestRateLeg(self):
        return _ORE.EquityTotalReturnSwap_interestRateLeg(self)

    def equityLegNPV(self):
        return _ORE.EquityTotalReturnSwap_equityLegNPV(self)

    def interestRateLegNPV(self):
        return _ORE.EquityTotalReturnSwap_interestRateLegNPV(self)

    def fairMargin(self):
        return _ORE.EquityTotalReturnSwap_fairMargin(self)
    __swig_destroy__ = _ORE.delete_EquityTotalReturnSwap

# Register EquityTotalReturnSwap in _ORE:
_ORE.EquityTotalReturnSwap_swigregister(EquityTotalReturnSwap)

class ArithmeticAverageOIS(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ArithmeticAverageOIS_swiginit(self, _ORE.new_ArithmeticAverageOIS(*args))

    def type(self):
        return _ORE.ArithmeticAverageOIS_type(self)

    def nominal(self):
        return _ORE.ArithmeticAverageOIS_nominal(self)

    def nominals(self):
        return _ORE.ArithmeticAverageOIS_nominals(self)

    def fixedLegPaymentFrequency(self):
        return _ORE.ArithmeticAverageOIS_fixedLegPaymentFrequency(self)

    def overnightLegPaymentFrequency(self):
        return _ORE.ArithmeticAverageOIS_overnightLegPaymentFrequency(self)

    def fixedRate(self):
        return _ORE.ArithmeticAverageOIS_fixedRate(self)

    def fixedDayCount(self):
        return _ORE.ArithmeticAverageOIS_fixedDayCount(self)

    def overnightIndex(self):
        return _ORE.ArithmeticAverageOIS_overnightIndex(self)

    def spread(self):
        return _ORE.ArithmeticAverageOIS_spread(self)

    def fixedLeg(self):
        return _ORE.ArithmeticAverageOIS_fixedLeg(self)

    def overnightLeg(self):
        return _ORE.ArithmeticAverageOIS_overnightLeg(self)

    def fixedLegBPS(self):
        return _ORE.ArithmeticAverageOIS_fixedLegBPS(self)

    def fixedLegNPV(self):
        return _ORE.ArithmeticAverageOIS_fixedLegNPV(self)

    def fairRate(self):
        return _ORE.ArithmeticAverageOIS_fairRate(self)

    def overnightLegBPS(self):
        return _ORE.ArithmeticAverageOIS_overnightLegBPS(self)

    def overnightLegNPV(self):
        return _ORE.ArithmeticAverageOIS_overnightLegNPV(self)

    def fairSpread(self):
        return _ORE.ArithmeticAverageOIS_fairSpread(self)
    __swig_destroy__ = _ORE.delete_ArithmeticAverageOIS

# Register ArithmeticAverageOIS in _ORE:
_ORE.ArithmeticAverageOIS_swigregister(ArithmeticAverageOIS)

class Seasonality(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def correctZeroRate(self, d, r, iTS):
        return _ORE.Seasonality_correctZeroRate(self, d, r, iTS)

    def correctYoYRate(self, d, r, iTS):
        return _ORE.Seasonality_correctYoYRate(self, d, r, iTS)

    def isConsistent(self, iTS):
        return _ORE.Seasonality_isConsistent(self, iTS)
    __swig_destroy__ = _ORE.delete_Seasonality

# Register Seasonality in _ORE:
_ORE.Seasonality_swigregister(Seasonality)

class MultiplicativePriceSeasonality(Seasonality):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seasonalityBaseDate, frequency, seasonalityFactors):
        _ORE.MultiplicativePriceSeasonality_swiginit(self, _ORE.new_MultiplicativePriceSeasonality(seasonalityBaseDate, frequency, seasonalityFactors))
    __swig_destroy__ = _ORE.delete_MultiplicativePriceSeasonality

# Register MultiplicativePriceSeasonality in _ORE:
_ORE.MultiplicativePriceSeasonality_swigregister(MultiplicativePriceSeasonality)

class KerkhofSeasonality(Seasonality):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seasonalityBaseDate, seasonalityFactors):
        _ORE.KerkhofSeasonality_swiginit(self, _ORE.new_KerkhofSeasonality(seasonalityBaseDate, seasonalityFactors))
    __swig_destroy__ = _ORE.delete_KerkhofSeasonality

# Register KerkhofSeasonality in _ORE:
_ORE.KerkhofSeasonality_swigregister(KerkhofSeasonality)

class InflationTermStructure(TermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def observationLag(self):
        return _ORE.InflationTermStructure_observationLag(self)

    def frequency(self):
        return _ORE.InflationTermStructure_frequency(self)

    def baseRate(self):
        return _ORE.InflationTermStructure_baseRate(self)

    def baseDate(self):
        return _ORE.InflationTermStructure_baseDate(self)

    def setSeasonality(self, *args):
        return _ORE.InflationTermStructure_setSeasonality(self, *args)

    def seasonality(self):
        return _ORE.InflationTermStructure_seasonality(self)

    def hasSeasonality(self):
        return _ORE.InflationTermStructure_hasSeasonality(self)
    __swig_destroy__ = _ORE.delete_InflationTermStructure

# Register InflationTermStructure in _ORE:
_ORE.InflationTermStructure_swigregister(InflationTermStructure)

class YoYInflationTermStructure(InflationTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def yoyRate(self, *args):
        return _ORE.YoYInflationTermStructure_yoyRate(self, *args)

    def indexIsInterpolated(self):
        return _ORE.YoYInflationTermStructure_indexIsInterpolated(self)
    __swig_destroy__ = _ORE.delete_YoYInflationTermStructure

# Register YoYInflationTermStructure in _ORE:
_ORE.YoYInflationTermStructure_swigregister(YoYInflationTermStructure)

class YoYInflationTermStructureHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.YoYInflationTermStructureHandle_swiginit(self, _ORE.new_YoYInflationTermStructureHandle(*args))

    def __deref__(self):
        return _ORE.YoYInflationTermStructureHandle___deref__(self)

    def currentLink(self):
        return _ORE.YoYInflationTermStructureHandle_currentLink(self)

    def __nonzero__(self):
        return _ORE.YoYInflationTermStructureHandle___nonzero__(self)

    def __bool__(self):
        return _ORE.YoYInflationTermStructureHandle___bool__(self)

    def asObservable(self):
        return _ORE.YoYInflationTermStructureHandle_asObservable(self)
    __swig_destroy__ = _ORE.delete_YoYInflationTermStructureHandle

    def yoyRate(self, *args):
        return _ORE.YoYInflationTermStructureHandle_yoyRate(self, *args)

    def indexIsInterpolated(self):
        return _ORE.YoYInflationTermStructureHandle_indexIsInterpolated(self)

    def observationLag(self):
        return _ORE.YoYInflationTermStructureHandle_observationLag(self)

    def frequency(self):
        return _ORE.YoYInflationTermStructureHandle_frequency(self)

    def baseRate(self):
        return _ORE.YoYInflationTermStructureHandle_baseRate(self)

    def baseDate(self):
        return _ORE.YoYInflationTermStructureHandle_baseDate(self)

    def setSeasonality(self, *args):
        return _ORE.YoYInflationTermStructureHandle_setSeasonality(self, *args)

    def seasonality(self):
        return _ORE.YoYInflationTermStructureHandle_seasonality(self)

    def hasSeasonality(self):
        return _ORE.YoYInflationTermStructureHandle_hasSeasonality(self)

    def dayCounter(self):
        return _ORE.YoYInflationTermStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _ORE.YoYInflationTermStructureHandle_timeFromReference(self, date)

    def calendar(self):
        return _ORE.YoYInflationTermStructureHandle_calendar(self)

    def referenceDate(self):
        return _ORE.YoYInflationTermStructureHandle_referenceDate(self)

    def maxDate(self):
        return _ORE.YoYInflationTermStructureHandle_maxDate(self)

    def maxTime(self):
        return _ORE.YoYInflationTermStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        return _ORE.YoYInflationTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _ORE.YoYInflationTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _ORE.YoYInflationTermStructureHandle_allowsExtrapolation(self)

# Register YoYInflationTermStructureHandle in _ORE:
_ORE.YoYInflationTermStructureHandle_swigregister(YoYInflationTermStructureHandle)

class RelinkableYoYInflationTermStructureHandle(YoYInflationTermStructureHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.RelinkableYoYInflationTermStructureHandle_swiginit(self, _ORE.new_RelinkableYoYInflationTermStructureHandle(*args))

    def linkTo(self, arg2):
        return _ORE.RelinkableYoYInflationTermStructureHandle_linkTo(self, arg2)

    def reset(self):
        return _ORE.RelinkableYoYInflationTermStructureHandle_reset(self)
    __swig_destroy__ = _ORE.delete_RelinkableYoYInflationTermStructureHandle

# Register RelinkableYoYInflationTermStructureHandle in _ORE:
_ORE.RelinkableYoYInflationTermStructureHandle_swigregister(RelinkableYoYInflationTermStructureHandle)

class ZeroInflationTermStructure(InflationTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def zeroRate(self, *args):
        return _ORE.ZeroInflationTermStructure_zeroRate(self, *args)
    __swig_destroy__ = _ORE.delete_ZeroInflationTermStructure

# Register ZeroInflationTermStructure in _ORE:
_ORE.ZeroInflationTermStructure_swigregister(ZeroInflationTermStructure)

class ZeroInflationTermStructureHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ZeroInflationTermStructureHandle_swiginit(self, _ORE.new_ZeroInflationTermStructureHandle(*args))

    def __deref__(self):
        return _ORE.ZeroInflationTermStructureHandle___deref__(self)

    def currentLink(self):
        return _ORE.ZeroInflationTermStructureHandle_currentLink(self)

    def __nonzero__(self):
        return _ORE.ZeroInflationTermStructureHandle___nonzero__(self)

    def __bool__(self):
        return _ORE.ZeroInflationTermStructureHandle___bool__(self)

    def asObservable(self):
        return _ORE.ZeroInflationTermStructureHandle_asObservable(self)
    __swig_destroy__ = _ORE.delete_ZeroInflationTermStructureHandle

    def zeroRate(self, *args):
        return _ORE.ZeroInflationTermStructureHandle_zeroRate(self, *args)

    def observationLag(self):
        return _ORE.ZeroInflationTermStructureHandle_observationLag(self)

    def frequency(self):
        return _ORE.ZeroInflationTermStructureHandle_frequency(self)

    def baseRate(self):
        return _ORE.ZeroInflationTermStructureHandle_baseRate(self)

    def baseDate(self):
        return _ORE.ZeroInflationTermStructureHandle_baseDate(self)

    def setSeasonality(self, *args):
        return _ORE.ZeroInflationTermStructureHandle_setSeasonality(self, *args)

    def seasonality(self):
        return _ORE.ZeroInflationTermStructureHandle_seasonality(self)

    def hasSeasonality(self):
        return _ORE.ZeroInflationTermStructureHandle_hasSeasonality(self)

    def dayCounter(self):
        return _ORE.ZeroInflationTermStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _ORE.ZeroInflationTermStructureHandle_timeFromReference(self, date)

    def calendar(self):
        return _ORE.ZeroInflationTermStructureHandle_calendar(self)

    def referenceDate(self):
        return _ORE.ZeroInflationTermStructureHandle_referenceDate(self)

    def maxDate(self):
        return _ORE.ZeroInflationTermStructureHandle_maxDate(self)

    def maxTime(self):
        return _ORE.ZeroInflationTermStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        return _ORE.ZeroInflationTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _ORE.ZeroInflationTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _ORE.ZeroInflationTermStructureHandle_allowsExtrapolation(self)

# Register ZeroInflationTermStructureHandle in _ORE:
_ORE.ZeroInflationTermStructureHandle_swigregister(ZeroInflationTermStructureHandle)

class RelinkableZeroInflationTermStructureHandle(ZeroInflationTermStructureHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.RelinkableZeroInflationTermStructureHandle_swiginit(self, _ORE.new_RelinkableZeroInflationTermStructureHandle(*args))

    def linkTo(self, arg2):
        return _ORE.RelinkableZeroInflationTermStructureHandle_linkTo(self, arg2)

    def reset(self):
        return _ORE.RelinkableZeroInflationTermStructureHandle_reset(self)
    __swig_destroy__ = _ORE.delete_RelinkableZeroInflationTermStructureHandle

# Register RelinkableZeroInflationTermStructureHandle in _ORE:
_ORE.RelinkableZeroInflationTermStructureHandle_swigregister(RelinkableZeroInflationTermStructureHandle)

class Region(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def name(self):
        return _ORE.Region_name(self)

    def code(self):
        return _ORE.Region_code(self)
    __swig_destroy__ = _ORE.delete_Region

# Register Region in _ORE:
_ORE.Region_swigregister(Region)

class CustomRegion(Region):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, code):
        _ORE.CustomRegion_swiginit(self, _ORE.new_CustomRegion(name, code))
    __swig_destroy__ = _ORE.delete_CustomRegion

# Register CustomRegion in _ORE:
_ORE.CustomRegion_swigregister(CustomRegion)

class InflationIndex(Index):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def familyName(self):
        return _ORE.InflationIndex_familyName(self)

    def region(self):
        return _ORE.InflationIndex_region(self)

    def revised(self):
        return _ORE.InflationIndex_revised(self)

    def interpolated(self):
        return _ORE.InflationIndex_interpolated(self)

    def frequency(self):
        return _ORE.InflationIndex_frequency(self)

    def availabilityLag(self):
        return _ORE.InflationIndex_availabilityLag(self)

    def currency(self):
        return _ORE.InflationIndex_currency(self)
    __swig_destroy__ = _ORE.delete_InflationIndex

# Register InflationIndex in _ORE:
_ORE.InflationIndex_swigregister(InflationIndex)

class ZeroInflationIndex(InflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ZeroInflationIndex_swiginit(self, _ORE.new_ZeroInflationIndex(*args))

    def zeroInflationTermStructure(self):
        return _ORE.ZeroInflationIndex_zeroInflationTermStructure(self)

    def clone(self, h):
        return _ORE.ZeroInflationIndex_clone(self, h)
    __swig_destroy__ = _ORE.delete_ZeroInflationIndex

# Register ZeroInflationIndex in _ORE:
_ORE.ZeroInflationIndex_swigregister(ZeroInflationIndex)


def as_zero_inflation_index(i):
    return _ORE.as_zero_inflation_index(i)
class YoYInflationIndex(InflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.YoYInflationIndex_swiginit(self, _ORE.new_YoYInflationIndex(*args))

    def ratio(self):
        return _ORE.YoYInflationIndex_ratio(self)

    def underlyingIndex(self):
        return _ORE.YoYInflationIndex_underlyingIndex(self)

    def yoyInflationTermStructure(self):
        return _ORE.YoYInflationIndex_yoyInflationTermStructure(self)

    def clone(self, h):
        return _ORE.YoYInflationIndex_clone(self, h)
    __swig_destroy__ = _ORE.delete_YoYInflationIndex

# Register YoYInflationIndex in _ORE:
_ORE.YoYInflationIndex_swigregister(YoYInflationIndex)

class EUHICP(ZeroInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EUHICP_swiginit(self, _ORE.new_EUHICP(*args))
    __swig_destroy__ = _ORE.delete_EUHICP

# Register EUHICP in _ORE:
_ORE.EUHICP_swigregister(EUHICP)

class EUHICPXT(ZeroInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EUHICPXT_swiginit(self, _ORE.new_EUHICPXT(*args))
    __swig_destroy__ = _ORE.delete_EUHICPXT

# Register EUHICPXT in _ORE:
_ORE.EUHICPXT_swigregister(EUHICPXT)

class FRHICP(ZeroInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FRHICP_swiginit(self, _ORE.new_FRHICP(*args))
    __swig_destroy__ = _ORE.delete_FRHICP

# Register FRHICP in _ORE:
_ORE.FRHICP_swigregister(FRHICP)

class UKRPI(ZeroInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.UKRPI_swiginit(self, _ORE.new_UKRPI(*args))
    __swig_destroy__ = _ORE.delete_UKRPI

# Register UKRPI in _ORE:
_ORE.UKRPI_swigregister(UKRPI)

class USCPI(ZeroInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.USCPI_swiginit(self, _ORE.new_USCPI(*args))
    __swig_destroy__ = _ORE.delete_USCPI

# Register USCPI in _ORE:
_ORE.USCPI_swigregister(USCPI)

class ZACPI(ZeroInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ZACPI_swiginit(self, _ORE.new_ZACPI(*args))
    __swig_destroy__ = _ORE.delete_ZACPI

# Register ZACPI in _ORE:
_ORE.ZACPI_swigregister(ZACPI)

class UKHICP(ZeroInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.UKHICP_swiginit(self, _ORE.new_UKHICP(*args))
    __swig_destroy__ = _ORE.delete_UKHICP

# Register UKHICP in _ORE:
_ORE.UKHICP_swigregister(UKHICP)

class YYEUHICP(YoYInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.YYEUHICP_swiginit(self, _ORE.new_YYEUHICP(*args))
    __swig_destroy__ = _ORE.delete_YYEUHICP

# Register YYEUHICP in _ORE:
_ORE.YYEUHICP_swigregister(YYEUHICP)

class YYEUHICPXT(YoYInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.YYEUHICPXT_swiginit(self, _ORE.new_YYEUHICPXT(*args))
    __swig_destroy__ = _ORE.delete_YYEUHICPXT

# Register YYEUHICPXT in _ORE:
_ORE.YYEUHICPXT_swigregister(YYEUHICPXT)

class YYEUHICPr(YoYInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.YYEUHICPr_swiginit(self, _ORE.new_YYEUHICPr(*args))
    __swig_destroy__ = _ORE.delete_YYEUHICPr

# Register YYEUHICPr in _ORE:
_ORE.YYEUHICPr_swigregister(YYEUHICPr)

class YYFRHICP(YoYInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.YYFRHICP_swiginit(self, _ORE.new_YYFRHICP(*args))
    __swig_destroy__ = _ORE.delete_YYFRHICP

# Register YYFRHICP in _ORE:
_ORE.YYFRHICP_swigregister(YYFRHICP)

class YYFRHICPr(YoYInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.YYFRHICPr_swiginit(self, _ORE.new_YYFRHICPr(*args))
    __swig_destroy__ = _ORE.delete_YYFRHICPr

# Register YYFRHICPr in _ORE:
_ORE.YYFRHICPr_swigregister(YYFRHICPr)

class YYUKRPI(YoYInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.YYUKRPI_swiginit(self, _ORE.new_YYUKRPI(*args))
    __swig_destroy__ = _ORE.delete_YYUKRPI

# Register YYUKRPI in _ORE:
_ORE.YYUKRPI_swigregister(YYUKRPI)

class YYUKRPIr(YoYInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.YYUKRPIr_swiginit(self, _ORE.new_YYUKRPIr(*args))
    __swig_destroy__ = _ORE.delete_YYUKRPIr

# Register YYUKRPIr in _ORE:
_ORE.YYUKRPIr_swigregister(YYUKRPIr)

class YYUSCPI(YoYInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.YYUSCPI_swiginit(self, _ORE.new_YYUSCPI(*args))
    __swig_destroy__ = _ORE.delete_YYUSCPI

# Register YYUSCPI in _ORE:
_ORE.YYUSCPI_swigregister(YYUSCPI)

class YYUSCPIr(YoYInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.YYUSCPIr_swiginit(self, _ORE.new_YYUSCPIr(*args))
    __swig_destroy__ = _ORE.delete_YYUSCPIr

# Register YYUSCPIr in _ORE:
_ORE.YYUSCPIr_swigregister(YYUSCPIr)

class YYZACPI(YoYInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.YYZACPI_swiginit(self, _ORE.new_YYZACPI(*args))
    __swig_destroy__ = _ORE.delete_YYZACPI

# Register YYZACPI in _ORE:
_ORE.YYZACPI_swigregister(YYZACPI)

class YYZACPIr(YoYInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.YYZACPIr_swiginit(self, _ORE.new_YYZACPIr(*args))
    __swig_destroy__ = _ORE.delete_YYZACPIr

# Register YYZACPIr in _ORE:
_ORE.YYZACPIr_swigregister(YYZACPIr)

class AUCPI(ZeroInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.AUCPI_swiginit(self, _ORE.new_AUCPI(*args))
    __swig_destroy__ = _ORE.delete_AUCPI

# Register AUCPI in _ORE:
_ORE.AUCPI_swigregister(AUCPI)

class CPI(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AsIndex = _ORE.CPI_AsIndex
    Flat = _ORE.CPI_Flat
    Linear = _ORE.CPI_Linear

    @staticmethod
    def laggedFixing(index, date, observationLag, interpolationType):
        return _ORE.CPI_laggedFixing(index, date, observationLag, interpolationType)

    def __init__(self):
        _ORE.CPI_swiginit(self, _ORE.new_CPI())
    __swig_destroy__ = _ORE.delete_CPI

# Register CPI in _ORE:
_ORE.CPI_swigregister(CPI)

def CPI_laggedFixing(index, date, observationLag, interpolationType):
    return _ORE.CPI_laggedFixing(index, date, observationLag, interpolationType)

class InflationCoupon(Coupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def fixingDate(self):
        return _ORE.InflationCoupon_fixingDate(self)

    def fixingDays(self):
        return _ORE.InflationCoupon_fixingDays(self)

    def observationLag(self):
        return _ORE.InflationCoupon_observationLag(self)

    def indexFixing(self):
        return _ORE.InflationCoupon_indexFixing(self)

    def index(self):
        return _ORE.InflationCoupon_index(self)
    __swig_destroy__ = _ORE.delete_InflationCoupon

# Register InflationCoupon in _ORE:
_ORE.InflationCoupon_swigregister(InflationCoupon)


def as_inflation_coupon(cf):
    return _ORE.as_inflation_coupon(cf)
class CPICouponPricer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.CPICouponPricer_swiginit(self, _ORE.new_CPICouponPricer())
    __swig_destroy__ = _ORE.delete_CPICouponPricer

# Register CPICouponPricer in _ORE:
_ORE.CPICouponPricer_swigregister(CPICouponPricer)

class CPICoupon(InflationCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CPICoupon_swiginit(self, _ORE.new_CPICoupon(*args))

    def fixedRate(self):
        return _ORE.CPICoupon_fixedRate(self)

    def spread(self):
        return _ORE.CPICoupon_spread(self)

    def adjustedIndexGrowth(self):
        return _ORE.CPICoupon_adjustedIndexGrowth(self)

    def indexFixing(self):
        return _ORE.CPICoupon_indexFixing(self)

    def indexRatio(self, d):
        return _ORE.CPICoupon_indexRatio(self, d)

    def baseCPI(self):
        return _ORE.CPICoupon_baseCPI(self)

    def baseDate(self):
        return _ORE.CPICoupon_baseDate(self)

    def observationInterpolation(self):
        return _ORE.CPICoupon_observationInterpolation(self)

    def cpiIndex(self):
        return _ORE.CPICoupon_cpiIndex(self)

    def setPricer(self, arg2):
        return _ORE.CPICoupon_setPricer(self, arg2)
    __swig_destroy__ = _ORE.delete_CPICoupon

# Register CPICoupon in _ORE:
_ORE.CPICoupon_swigregister(CPICoupon)


def as_cpi_coupon(cf):
    return _ORE.as_cpi_coupon(cf)
class CPICashFlow(IndexedCashFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, notional, index, baseDate, baseFixing, observationDate, observationLag, interpolation, paymentDate, growthOnly=False):
        _ORE.CPICashFlow_swiginit(self, _ORE.new_CPICashFlow(notional, index, baseDate, baseFixing, observationDate, observationLag, interpolation, paymentDate, growthOnly))

    def interpolation(self):
        return _ORE.CPICashFlow_interpolation(self)

    def frequency(self):
        return _ORE.CPICashFlow_frequency(self)
    __swig_destroy__ = _ORE.delete_CPICashFlow

# Register CPICashFlow in _ORE:
_ORE.CPICashFlow_swigregister(CPICashFlow)


def as_cpi_cashflow(cf):
    return _ORE.as_cpi_cashflow(cf)

def CPILeg(*args, **kwargs):
    return _ORE.CPILeg(*args, **kwargs)
class ZeroInflationCashFlow(CashFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, notional, index, observationInterpolation, startDate, endDate, observationLag, paymentDate, growthOnly=False):
        _ORE.ZeroInflationCashFlow_swiginit(self, _ORE.new_ZeroInflationCashFlow(notional, index, observationInterpolation, startDate, endDate, observationLag, paymentDate, growthOnly))

    def notional(self):
        return _ORE.ZeroInflationCashFlow_notional(self)

    def baseDate(self):
        return _ORE.ZeroInflationCashFlow_baseDate(self)

    def fixingDate(self):
        return _ORE.ZeroInflationCashFlow_fixingDate(self)

    def growthOnly(self):
        return _ORE.ZeroInflationCashFlow_growthOnly(self)

    def observationInterpolation(self):
        return _ORE.ZeroInflationCashFlow_observationInterpolation(self)

    def zeroInflationIndex(self):
        return _ORE.ZeroInflationCashFlow_zeroInflationIndex(self)
    __swig_destroy__ = _ORE.delete_ZeroInflationCashFlow

# Register ZeroInflationCashFlow in _ORE:
_ORE.ZeroInflationCashFlow_swigregister(ZeroInflationCashFlow)


def as_zero_inflation_cash_flow(cf):
    return _ORE.as_zero_inflation_cash_flow(cf)
class ZeroHelper(Observable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def quote(self):
        return _ORE.ZeroHelper_quote(self)

    def latestDate(self):
        return _ORE.ZeroHelper_latestDate(self)

    def earliestDate(self):
        return _ORE.ZeroHelper_earliestDate(self)

    def maturityDate(self):
        return _ORE.ZeroHelper_maturityDate(self)

    def latestRelevantDate(self):
        return _ORE.ZeroHelper_latestRelevantDate(self)

    def pillarDate(self):
        return _ORE.ZeroHelper_pillarDate(self)

    def impliedQuote(self):
        return _ORE.ZeroHelper_impliedQuote(self)

    def quoteError(self):
        return _ORE.ZeroHelper_quoteError(self)
    __swig_destroy__ = _ORE.delete_ZeroHelper

# Register ZeroHelper in _ORE:
_ORE.ZeroHelper_swigregister(ZeroHelper)

class YoYHelper(Observable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def quote(self):
        return _ORE.YoYHelper_quote(self)

    def latestDate(self):
        return _ORE.YoYHelper_latestDate(self)

    def earliestDate(self):
        return _ORE.YoYHelper_earliestDate(self)

    def maturityDate(self):
        return _ORE.YoYHelper_maturityDate(self)

    def latestRelevantDate(self):
        return _ORE.YoYHelper_latestRelevantDate(self)

    def pillarDate(self):
        return _ORE.YoYHelper_pillarDate(self)

    def impliedQuote(self):
        return _ORE.YoYHelper_impliedQuote(self)

    def quoteError(self):
        return _ORE.YoYHelper_quoteError(self)
    __swig_destroy__ = _ORE.delete_YoYHelper

# Register YoYHelper in _ORE:
_ORE.YoYHelper_swigregister(YoYHelper)

class YoYOptionHelper(Observable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def quote(self):
        return _ORE.YoYOptionHelper_quote(self)

    def latestDate(self):
        return _ORE.YoYOptionHelper_latestDate(self)

    def earliestDate(self):
        return _ORE.YoYOptionHelper_earliestDate(self)

    def maturityDate(self):
        return _ORE.YoYOptionHelper_maturityDate(self)

    def latestRelevantDate(self):
        return _ORE.YoYOptionHelper_latestRelevantDate(self)

    def pillarDate(self):
        return _ORE.YoYOptionHelper_pillarDate(self)

    def impliedQuote(self):
        return _ORE.YoYOptionHelper_impliedQuote(self)

    def quoteError(self):
        return _ORE.YoYOptionHelper_quoteError(self)
    __swig_destroy__ = _ORE.delete_YoYOptionHelper

# Register YoYOptionHelper in _ORE:
_ORE.YoYOptionHelper_swigregister(YoYOptionHelper)

class ZeroHelperVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.ZeroHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.ZeroHelperVector___nonzero__(self)

    def __bool__(self):
        return _ORE.ZeroHelperVector___bool__(self)

    def __len__(self):
        return _ORE.ZeroHelperVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.ZeroHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.ZeroHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.ZeroHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.ZeroHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.ZeroHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.ZeroHelperVector___setitem__(self, *args)

    def pop(self):
        return _ORE.ZeroHelperVector_pop(self)

    def append(self, x):
        return _ORE.ZeroHelperVector_append(self, x)

    def empty(self):
        return _ORE.ZeroHelperVector_empty(self)

    def size(self):
        return _ORE.ZeroHelperVector_size(self)

    def swap(self, v):
        return _ORE.ZeroHelperVector_swap(self, v)

    def begin(self):
        return _ORE.ZeroHelperVector_begin(self)

    def end(self):
        return _ORE.ZeroHelperVector_end(self)

    def rbegin(self):
        return _ORE.ZeroHelperVector_rbegin(self)

    def rend(self):
        return _ORE.ZeroHelperVector_rend(self)

    def clear(self):
        return _ORE.ZeroHelperVector_clear(self)

    def get_allocator(self):
        return _ORE.ZeroHelperVector_get_allocator(self)

    def pop_back(self):
        return _ORE.ZeroHelperVector_pop_back(self)

    def erase(self, *args):
        return _ORE.ZeroHelperVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.ZeroHelperVector_swiginit(self, _ORE.new_ZeroHelperVector(*args))

    def push_back(self, x):
        return _ORE.ZeroHelperVector_push_back(self, x)

    def front(self):
        return _ORE.ZeroHelperVector_front(self)

    def back(self):
        return _ORE.ZeroHelperVector_back(self)

    def assign(self, n, x):
        return _ORE.ZeroHelperVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.ZeroHelperVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.ZeroHelperVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.ZeroHelperVector_reserve(self, n)

    def capacity(self):
        return _ORE.ZeroHelperVector_capacity(self)
    __swig_destroy__ = _ORE.delete_ZeroHelperVector

# Register ZeroHelperVector in _ORE:
_ORE.ZeroHelperVector_swigregister(ZeroHelperVector)

class YoYHelperVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.YoYHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.YoYHelperVector___nonzero__(self)

    def __bool__(self):
        return _ORE.YoYHelperVector___bool__(self)

    def __len__(self):
        return _ORE.YoYHelperVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.YoYHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.YoYHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.YoYHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.YoYHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.YoYHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.YoYHelperVector___setitem__(self, *args)

    def pop(self):
        return _ORE.YoYHelperVector_pop(self)

    def append(self, x):
        return _ORE.YoYHelperVector_append(self, x)

    def empty(self):
        return _ORE.YoYHelperVector_empty(self)

    def size(self):
        return _ORE.YoYHelperVector_size(self)

    def swap(self, v):
        return _ORE.YoYHelperVector_swap(self, v)

    def begin(self):
        return _ORE.YoYHelperVector_begin(self)

    def end(self):
        return _ORE.YoYHelperVector_end(self)

    def rbegin(self):
        return _ORE.YoYHelperVector_rbegin(self)

    def rend(self):
        return _ORE.YoYHelperVector_rend(self)

    def clear(self):
        return _ORE.YoYHelperVector_clear(self)

    def get_allocator(self):
        return _ORE.YoYHelperVector_get_allocator(self)

    def pop_back(self):
        return _ORE.YoYHelperVector_pop_back(self)

    def erase(self, *args):
        return _ORE.YoYHelperVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.YoYHelperVector_swiginit(self, _ORE.new_YoYHelperVector(*args))

    def push_back(self, x):
        return _ORE.YoYHelperVector_push_back(self, x)

    def front(self):
        return _ORE.YoYHelperVector_front(self)

    def back(self):
        return _ORE.YoYHelperVector_back(self)

    def assign(self, n, x):
        return _ORE.YoYHelperVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.YoYHelperVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.YoYHelperVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.YoYHelperVector_reserve(self, n)

    def capacity(self):
        return _ORE.YoYHelperVector_capacity(self)
    __swig_destroy__ = _ORE.delete_YoYHelperVector

# Register YoYHelperVector in _ORE:
_ORE.YoYHelperVector_swigregister(YoYHelperVector)

class YoYOptionHelperVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.YoYOptionHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.YoYOptionHelperVector___nonzero__(self)

    def __bool__(self):
        return _ORE.YoYOptionHelperVector___bool__(self)

    def __len__(self):
        return _ORE.YoYOptionHelperVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.YoYOptionHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.YoYOptionHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.YoYOptionHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.YoYOptionHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.YoYOptionHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.YoYOptionHelperVector___setitem__(self, *args)

    def pop(self):
        return _ORE.YoYOptionHelperVector_pop(self)

    def append(self, x):
        return _ORE.YoYOptionHelperVector_append(self, x)

    def empty(self):
        return _ORE.YoYOptionHelperVector_empty(self)

    def size(self):
        return _ORE.YoYOptionHelperVector_size(self)

    def swap(self, v):
        return _ORE.YoYOptionHelperVector_swap(self, v)

    def begin(self):
        return _ORE.YoYOptionHelperVector_begin(self)

    def end(self):
        return _ORE.YoYOptionHelperVector_end(self)

    def rbegin(self):
        return _ORE.YoYOptionHelperVector_rbegin(self)

    def rend(self):
        return _ORE.YoYOptionHelperVector_rend(self)

    def clear(self):
        return _ORE.YoYOptionHelperVector_clear(self)

    def get_allocator(self):
        return _ORE.YoYOptionHelperVector_get_allocator(self)

    def pop_back(self):
        return _ORE.YoYOptionHelperVector_pop_back(self)

    def erase(self, *args):
        return _ORE.YoYOptionHelperVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.YoYOptionHelperVector_swiginit(self, _ORE.new_YoYOptionHelperVector(*args))

    def push_back(self, x):
        return _ORE.YoYOptionHelperVector_push_back(self, x)

    def front(self):
        return _ORE.YoYOptionHelperVector_front(self)

    def back(self):
        return _ORE.YoYOptionHelperVector_back(self)

    def assign(self, n, x):
        return _ORE.YoYOptionHelperVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.YoYOptionHelperVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.YoYOptionHelperVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.YoYOptionHelperVector_reserve(self, n)

    def capacity(self):
        return _ORE.YoYOptionHelperVector_capacity(self)
    __swig_destroy__ = _ORE.delete_YoYOptionHelperVector

# Register YoYOptionHelperVector in _ORE:
_ORE.YoYOptionHelperVector_swigregister(YoYOptionHelperVector)

class ZeroCouponInflationSwapHelper(ZeroHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, quote, lag, maturity, calendar, bcd, dayCounter, index, observationInterpolation, nominalTS):
        _ORE.ZeroCouponInflationSwapHelper_swiginit(self, _ORE.new_ZeroCouponInflationSwapHelper(quote, lag, maturity, calendar, bcd, dayCounter, index, observationInterpolation, nominalTS))
    __swig_destroy__ = _ORE.delete_ZeroCouponInflationSwapHelper

# Register ZeroCouponInflationSwapHelper in _ORE:
_ORE.ZeroCouponInflationSwapHelper_swigregister(ZeroCouponInflationSwapHelper)

class YearOnYearInflationSwapHelper(YoYHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, quote, lag, maturity, calendar, bdc, dayCounter, index, nominalTS):
        _ORE.YearOnYearInflationSwapHelper_swiginit(self, _ORE.new_YearOnYearInflationSwapHelper(quote, lag, maturity, calendar, bdc, dayCounter, index, nominalTS))
    __swig_destroy__ = _ORE.delete_YearOnYearInflationSwapHelper

# Register YearOnYearInflationSwapHelper in _ORE:
_ORE.YearOnYearInflationSwapHelper_swigregister(YearOnYearInflationSwapHelper)

class PiecewiseZeroInflation(ZeroInflationTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.PiecewiseZeroInflation_swiginit(self, _ORE.new_PiecewiseZeroInflation(*args))

    def dates(self):
        return _ORE.PiecewiseZeroInflation_dates(self)

    def times(self):
        return _ORE.PiecewiseZeroInflation_times(self)

    def nodes(self):
        return _ORE.PiecewiseZeroInflation_nodes(self)
    __swig_destroy__ = _ORE.delete_PiecewiseZeroInflation

# Register PiecewiseZeroInflation in _ORE:
_ORE.PiecewiseZeroInflation_swigregister(PiecewiseZeroInflation)

class PiecewiseYoYInflation(YoYInflationTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.PiecewiseYoYInflation_swiginit(self, _ORE.new_PiecewiseYoYInflation(*args, **kwargs))

    def dates(self):
        return _ORE.PiecewiseYoYInflation_dates(self)

    def times(self):
        return _ORE.PiecewiseYoYInflation_times(self)

    def nodes(self):
        return _ORE.PiecewiseYoYInflation_nodes(self)
    __swig_destroy__ = _ORE.delete_PiecewiseYoYInflation

# Register PiecewiseYoYInflation in _ORE:
_ORE.PiecewiseYoYInflation_swigregister(PiecewiseYoYInflation)

class DatePair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.DatePair_swiginit(self, _ORE.new_DatePair(*args))
    first = property(_ORE.DatePair_first_get, _ORE.DatePair_first_set)
    second = property(_ORE.DatePair_second_get, _ORE.DatePair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _ORE.delete_DatePair

# Register DatePair in _ORE:
_ORE.DatePair_swigregister(DatePair)


def inflationPeriod(d, f):
    return _ORE.inflationPeriod(d, f)

def inflationYearFraction(f, indexIsInterpolated, dayCount, d1, d2):
    return _ORE.inflationYearFraction(f, indexIsInterpolated, dayCount, d1, d2)

def inflationBaseDate(referenceDate, observationLag, frequency, indexIsInterpolated):
    return _ORE.inflationBaseDate(referenceDate, observationLag, frequency, indexIsInterpolated)
class YoYInflationCouponPricer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ORE.delete_YoYInflationCouponPricer

# Register YoYInflationCouponPricer in _ORE:
_ORE.YoYInflationCouponPricer_swigregister(YoYInflationCouponPricer)


def setCouponPricer(*args):
    return _ORE.setCouponPricer(*args)
class YoYInflationCoupon(InflationCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.YoYInflationCoupon_swiginit(self, _ORE.new_YoYInflationCoupon(*args))

    def gearing(self):
        return _ORE.YoYInflationCoupon_gearing(self)

    def spread(self):
        return _ORE.YoYInflationCoupon_spread(self)

    def adjustedFixing(self):
        return _ORE.YoYInflationCoupon_adjustedFixing(self)

    def yoyIndex(self):
        return _ORE.YoYInflationCoupon_yoyIndex(self)
    __swig_destroy__ = _ORE.delete_YoYInflationCoupon

# Register YoYInflationCoupon in _ORE:
_ORE.YoYInflationCoupon_swigregister(YoYInflationCoupon)


def as_yoy_inflation_coupon(cf):
    return _ORE.as_yoy_inflation_coupon(cf)
class CappedFlooredYoYInflationCoupon(YoYInflationCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CappedFlooredYoYInflationCoupon_swiginit(self, _ORE.new_CappedFlooredYoYInflationCoupon(*args))

    def rate(self):
        return _ORE.CappedFlooredYoYInflationCoupon_rate(self)

    def cap(self):
        return _ORE.CappedFlooredYoYInflationCoupon_cap(self)

    def floor(self):
        return _ORE.CappedFlooredYoYInflationCoupon_floor(self)

    def effectiveCap(self):
        return _ORE.CappedFlooredYoYInflationCoupon_effectiveCap(self)

    def effectiveFloor(self):
        return _ORE.CappedFlooredYoYInflationCoupon_effectiveFloor(self)

    def underlyingRate(self):
        return _ORE.CappedFlooredYoYInflationCoupon_underlyingRate(self)

    def isCapped(self):
        return _ORE.CappedFlooredYoYInflationCoupon_isCapped(self)

    def isFloored(self):
        return _ORE.CappedFlooredYoYInflationCoupon_isFloored(self)
    __swig_destroy__ = _ORE.delete_CappedFlooredYoYInflationCoupon

# Register CappedFlooredYoYInflationCoupon in _ORE:
_ORE.CappedFlooredYoYInflationCoupon_swigregister(CappedFlooredYoYInflationCoupon)


def as_capped_floored_yoy_inflation_coupon(cf):
    return _ORE.as_capped_floored_yoy_inflation_coupon(cf)

def yoyInflationLeg(*args, **kwargs):
    return _ORE.yoyInflationLeg(*args, **kwargs)
class BlackYoYInflationCouponPricer(YoYInflationCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, capletVol, nominalTermStructure):
        _ORE.BlackYoYInflationCouponPricer_swiginit(self, _ORE.new_BlackYoYInflationCouponPricer(capletVol, nominalTermStructure))
    __swig_destroy__ = _ORE.delete_BlackYoYInflationCouponPricer

# Register BlackYoYInflationCouponPricer in _ORE:
_ORE.BlackYoYInflationCouponPricer_swigregister(BlackYoYInflationCouponPricer)

class UnitDisplacedBlackYoYInflationCouponPricer(YoYInflationCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, capletVol, nominalTermStructure):
        _ORE.UnitDisplacedBlackYoYInflationCouponPricer_swiginit(self, _ORE.new_UnitDisplacedBlackYoYInflationCouponPricer(capletVol, nominalTermStructure))
    __swig_destroy__ = _ORE.delete_UnitDisplacedBlackYoYInflationCouponPricer

# Register UnitDisplacedBlackYoYInflationCouponPricer in _ORE:
_ORE.UnitDisplacedBlackYoYInflationCouponPricer_swigregister(UnitDisplacedBlackYoYInflationCouponPricer)

class BachelierYoYInflationCouponPricer(YoYInflationCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, capletVol, nominalTermStructure):
        _ORE.BachelierYoYInflationCouponPricer_swiginit(self, _ORE.new_BachelierYoYInflationCouponPricer(capletVol, nominalTermStructure))
    __swig_destroy__ = _ORE.delete_BachelierYoYInflationCouponPricer

# Register BachelierYoYInflationCouponPricer in _ORE:
_ORE.BachelierYoYInflationCouponPricer_swigregister(BachelierYoYInflationCouponPricer)

class ZeroCouponInflationSwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ZeroCouponInflationSwap_swiginit(self, _ORE.new_ZeroCouponInflationSwap(*args))

    def fairRate(self):
        return _ORE.ZeroCouponInflationSwap_fairRate(self)

    def fixedLegNPV(self):
        return _ORE.ZeroCouponInflationSwap_fixedLegNPV(self)

    def inflationLegNPV(self):
        return _ORE.ZeroCouponInflationSwap_inflationLegNPV(self)

    def fixedLeg(self):
        return _ORE.ZeroCouponInflationSwap_fixedLeg(self)

    def inflationLeg(self):
        return _ORE.ZeroCouponInflationSwap_inflationLeg(self)

    def type(self):
        return _ORE.ZeroCouponInflationSwap_type(self)
    __swig_destroy__ = _ORE.delete_ZeroCouponInflationSwap

# Register ZeroCouponInflationSwap in _ORE:
_ORE.ZeroCouponInflationSwap_swigregister(ZeroCouponInflationSwap)

class YearOnYearInflationSwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, nominal, fixedSchedule, fixedRate, fixedDayCounter, yoySchedule, index, lag, spread, yoyDayCounter, paymentCalendar, paymentConvention=Following):
        _ORE.YearOnYearInflationSwap_swiginit(self, _ORE.new_YearOnYearInflationSwap(type, nominal, fixedSchedule, fixedRate, fixedDayCounter, yoySchedule, index, lag, spread, yoyDayCounter, paymentCalendar, paymentConvention))

    def fairRate(self):
        return _ORE.YearOnYearInflationSwap_fairRate(self)

    def fixedLegNPV(self):
        return _ORE.YearOnYearInflationSwap_fixedLegNPV(self)

    def yoyLegNPV(self):
        return _ORE.YearOnYearInflationSwap_yoyLegNPV(self)

    def fairSpread(self):
        return _ORE.YearOnYearInflationSwap_fairSpread(self)

    def fixedLeg(self):
        return _ORE.YearOnYearInflationSwap_fixedLeg(self)

    def yoyLeg(self):
        return _ORE.YearOnYearInflationSwap_yoyLeg(self)
    __swig_destroy__ = _ORE.delete_YearOnYearInflationSwap

# Register YearOnYearInflationSwap in _ORE:
_ORE.YearOnYearInflationSwap_swigregister(YearOnYearInflationSwap)

class CPISwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CPISwap_swiginit(self, _ORE.new_CPISwap(*args))

    def fairRate(self):
        return _ORE.CPISwap_fairRate(self)

    def floatLegNPV(self):
        return _ORE.CPISwap_floatLegNPV(self)

    def fairSpread(self):
        return _ORE.CPISwap_fairSpread(self)

    def fixedLegNPV(self):
        return _ORE.CPISwap_fixedLegNPV(self)

    def cpiLeg(self):
        return _ORE.CPISwap_cpiLeg(self)

    def floatLeg(self):
        return _ORE.CPISwap_floatLeg(self)
    __swig_destroy__ = _ORE.delete_CPISwap

# Register CPISwap in _ORE:
_ORE.CPISwap_swigregister(CPISwap)

class YoYInflationCapFloor(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Cap = _ORE.YoYInflationCapFloor_Cap
    Floor = _ORE.YoYInflationCapFloor_Floor
    Collar = _ORE.YoYInflationCapFloor_Collar

    def __init__(self, type, yoyLeg, strikes):
        _ORE.YoYInflationCapFloor_swiginit(self, _ORE.new_YoYInflationCapFloor(type, yoyLeg, strikes))

    def impliedVolatility(self, price, curve, guess, accuracy=1.0e-4, maxEvaluations=100, minVol=1.0e-7, maxVol=4.0):
        return _ORE.YoYInflationCapFloor_impliedVolatility(self, price, curve, guess, accuracy, maxEvaluations, minVol, maxVol)

    def optionletPrices(self):
        return _ORE.YoYInflationCapFloor_optionletPrices(self)
    __swig_destroy__ = _ORE.delete_YoYInflationCapFloor

# Register YoYInflationCapFloor in _ORE:
_ORE.YoYInflationCapFloor_swigregister(YoYInflationCapFloor)

class YoYInflationCap(YoYInflationCapFloor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, leg, capRates):
        _ORE.YoYInflationCap_swiginit(self, _ORE.new_YoYInflationCap(leg, capRates))
    __swig_destroy__ = _ORE.delete_YoYInflationCap

# Register YoYInflationCap in _ORE:
_ORE.YoYInflationCap_swigregister(YoYInflationCap)

class YoYInflationFloor(YoYInflationCapFloor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, leg, floorRates):
        _ORE.YoYInflationFloor_swiginit(self, _ORE.new_YoYInflationFloor(leg, floorRates))
    __swig_destroy__ = _ORE.delete_YoYInflationFloor

# Register YoYInflationFloor in _ORE:
_ORE.YoYInflationFloor_swigregister(YoYInflationFloor)

class YoYInflationCollar(YoYInflationCapFloor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, leg, capRates, floorRates):
        _ORE.YoYInflationCollar_swiginit(self, _ORE.new_YoYInflationCollar(leg, capRates, floorRates))
    __swig_destroy__ = _ORE.delete_YoYInflationCollar

# Register YoYInflationCollar in _ORE:
_ORE.YoYInflationCollar_swigregister(YoYInflationCollar)

class ZeroInflationCurve(ZeroInflationTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ZeroInflationCurve_swiginit(self, _ORE.new_ZeroInflationCurve(*args))

    def dates(self):
        return _ORE.ZeroInflationCurve_dates(self)

    def times(self):
        return _ORE.ZeroInflationCurve_times(self)

    def data(self):
        return _ORE.ZeroInflationCurve_data(self)

    def rates(self):
        return _ORE.ZeroInflationCurve_rates(self)

    def nodes(self):
        return _ORE.ZeroInflationCurve_nodes(self)
    __swig_destroy__ = _ORE.delete_ZeroInflationCurve

# Register ZeroInflationCurve in _ORE:
_ORE.ZeroInflationCurve_swigregister(ZeroInflationCurve)

class YoYInflationCurve(YoYInflationTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.YoYInflationCurve_swiginit(self, _ORE.new_YoYInflationCurve(*args, **kwargs))

    def dates(self):
        return _ORE.YoYInflationCurve_dates(self)

    def times(self):
        return _ORE.YoYInflationCurve_times(self)

    def data(self):
        return _ORE.YoYInflationCurve_data(self)

    def rates(self):
        return _ORE.YoYInflationCurve_rates(self)

    def nodes(self):
        return _ORE.YoYInflationCurve_nodes(self)
    __swig_destroy__ = _ORE.delete_YoYInflationCurve

# Register YoYInflationCurve in _ORE:
_ORE.YoYInflationCurve_swigregister(YoYInflationCurve)

class YoYCapFloorTermPriceSurface(InflationTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def atmYoYSwapTimeRates(self):
        return _ORE.YoYCapFloorTermPriceSurface_atmYoYSwapTimeRates(self)

    def atmYoYSwapDateRates(self):
        return _ORE.YoYCapFloorTermPriceSurface_atmYoYSwapDateRates(self)

    def YoYTS(self):
        return _ORE.YoYCapFloorTermPriceSurface_YoYTS(self)

    def yoyIndex(self):
        return _ORE.YoYCapFloorTermPriceSurface_yoyIndex(self)

    def businessDayConvention(self):
        return _ORE.YoYCapFloorTermPriceSurface_businessDayConvention(self)

    def fixingDays(self):
        return _ORE.YoYCapFloorTermPriceSurface_fixingDays(self)

    def price(self, *args):
        return _ORE.YoYCapFloorTermPriceSurface_price(self, *args)

    def capPrice(self, *args):
        return _ORE.YoYCapFloorTermPriceSurface_capPrice(self, *args)

    def floorPrice(self, *args):
        return _ORE.YoYCapFloorTermPriceSurface_floorPrice(self, *args)

    def atmYoYSwapRate(self, *args):
        return _ORE.YoYCapFloorTermPriceSurface_atmYoYSwapRate(self, *args)

    def atmYoYRate(self, *args):
        return _ORE.YoYCapFloorTermPriceSurface_atmYoYRate(self, *args)

    def strikes(self):
        return _ORE.YoYCapFloorTermPriceSurface_strikes(self)

    def capStrikes(self):
        return _ORE.YoYCapFloorTermPriceSurface_capStrikes(self)

    def floorStrikes(self):
        return _ORE.YoYCapFloorTermPriceSurface_floorStrikes(self)

    def maturities(self):
        return _ORE.YoYCapFloorTermPriceSurface_maturities(self)

    def minStrike(self):
        return _ORE.YoYCapFloorTermPriceSurface_minStrike(self)

    def maxStrike(self):
        return _ORE.YoYCapFloorTermPriceSurface_maxStrike(self)

    def minMaturity(self):
        return _ORE.YoYCapFloorTermPriceSurface_minMaturity(self)

    def maxMaturity(self):
        return _ORE.YoYCapFloorTermPriceSurface_maxMaturity(self)

    def yoyOptionDateFromTenor(self, p):
        return _ORE.YoYCapFloorTermPriceSurface_yoyOptionDateFromTenor(self, p)
    __swig_destroy__ = _ORE.delete_YoYCapFloorTermPriceSurface

# Register YoYCapFloorTermPriceSurface in _ORE:
_ORE.YoYCapFloorTermPriceSurface_swigregister(YoYCapFloorTermPriceSurface)

class YoYInflationCapFloorTermPriceSurface(YoYCapFloorTermPriceSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.YoYInflationCapFloorTermPriceSurface_swiginit(self, _ORE.new_YoYInflationCapFloorTermPriceSurface(*args))
    __swig_destroy__ = _ORE.delete_YoYInflationCapFloorTermPriceSurface

# Register YoYInflationCapFloorTermPriceSurface in _ORE:
_ORE.YoYInflationCapFloorTermPriceSurface_swigregister(YoYInflationCapFloorTermPriceSurface)

class YoYInflationBlackCapFloorEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, vol, nominalTermStructure):
        _ORE.YoYInflationBlackCapFloorEngine_swiginit(self, _ORE.new_YoYInflationBlackCapFloorEngine(arg2, vol, nominalTermStructure))
    __swig_destroy__ = _ORE.delete_YoYInflationBlackCapFloorEngine

# Register YoYInflationBlackCapFloorEngine in _ORE:
_ORE.YoYInflationBlackCapFloorEngine_swigregister(YoYInflationBlackCapFloorEngine)

class YoYInflationUnitDisplacedBlackCapFloorEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, vol, nominalTermStructure):
        _ORE.YoYInflationUnitDisplacedBlackCapFloorEngine_swiginit(self, _ORE.new_YoYInflationUnitDisplacedBlackCapFloorEngine(arg2, vol, nominalTermStructure))
    __swig_destroy__ = _ORE.delete_YoYInflationUnitDisplacedBlackCapFloorEngine

# Register YoYInflationUnitDisplacedBlackCapFloorEngine in _ORE:
_ORE.YoYInflationUnitDisplacedBlackCapFloorEngine_swigregister(YoYInflationUnitDisplacedBlackCapFloorEngine)

class YoYInflationBachelierCapFloorEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, vol, nominalTermStructure):
        _ORE.YoYInflationBachelierCapFloorEngine_swiginit(self, _ORE.new_YoYInflationBachelierCapFloorEngine(arg2, vol, nominalTermStructure))
    __swig_destroy__ = _ORE.delete_YoYInflationBachelierCapFloorEngine

# Register YoYInflationBachelierCapFloorEngine in _ORE:
_ORE.YoYInflationBachelierCapFloorEngine_swigregister(YoYInflationBachelierCapFloorEngine)

class YoYOptionletHelper(YoYOptionHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, price, notional, capFloorType, lag, yoyDayCounter, paymentCalendar, fixingDays, index, strike, n, pricer):
        _ORE.YoYOptionletHelper_swiginit(self, _ORE.new_YoYOptionletHelper(price, notional, capFloorType, lag, yoyDayCounter, paymentCalendar, fixingDays, index, strike, n, pricer))
    __swig_destroy__ = _ORE.delete_YoYOptionletHelper

# Register YoYOptionletHelper in _ORE:
_ORE.YoYOptionletHelper_swigregister(YoYOptionletHelper)

class YoYOptionletStripper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def initialize(self, surf, pricer, slope):
        return _ORE.YoYOptionletStripper_initialize(self, surf, pricer, slope)

    def maxStrike(self):
        return _ORE.YoYOptionletStripper_maxStrike(self)

    def strikes(self):
        return _ORE.YoYOptionletStripper_strikes(self)

    def slice(self, d):
        return _ORE.YoYOptionletStripper_slice(self, d)
    __swig_destroy__ = _ORE.delete_YoYOptionletStripper

# Register YoYOptionletStripper in _ORE:
_ORE.YoYOptionletStripper_swigregister(YoYOptionletStripper)

class InterpolatedYoYInflationOptionletStripper(YoYOptionletStripper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.InterpolatedYoYInflationOptionletStripper_swiginit(self, _ORE.new_InterpolatedYoYInflationOptionletStripper())
    __swig_destroy__ = _ORE.delete_InterpolatedYoYInflationOptionletStripper

# Register InterpolatedYoYInflationOptionletStripper in _ORE:
_ORE.InterpolatedYoYInflationOptionletStripper_swigregister(InterpolatedYoYInflationOptionletStripper)

class InterpolatedYoYInflationOptionletVolatilityCurve(YoYOptionletVolatilitySurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.InterpolatedYoYInflationOptionletVolatilityCurve_swiginit(self, _ORE.new_InterpolatedYoYInflationOptionletVolatilityCurve(*args))
    __swig_destroy__ = _ORE.delete_InterpolatedYoYInflationOptionletVolatilityCurve

# Register InterpolatedYoYInflationOptionletVolatilityCurve in _ORE:
_ORE.InterpolatedYoYInflationOptionletVolatilityCurve_swigregister(InterpolatedYoYInflationOptionletVolatilityCurve)

class KInterpolatedYoYInflationOptionletVolatilitySurface(YoYOptionletVolatilitySurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.KInterpolatedYoYInflationOptionletVolatilitySurface_swiginit(self, _ORE.new_KInterpolatedYoYInflationOptionletVolatilitySurface(*args))

    def Dslice(self, d):
        return _ORE.KInterpolatedYoYInflationOptionletVolatilitySurface_Dslice(self, d)
    __swig_destroy__ = _ORE.delete_KInterpolatedYoYInflationOptionletVolatilitySurface

# Register KInterpolatedYoYInflationOptionletVolatilitySurface in _ORE:
_ORE.KInterpolatedYoYInflationOptionletVolatilitySurface_swigregister(KInterpolatedYoYInflationOptionletVolatilitySurface)

class ShortRateModel(CalibratedModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ORE.delete_ShortRateModel

# Register ShortRateModel in _ORE:
_ORE.ShortRateModel_swigregister(ShortRateModel)

class ShortRateModelHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ShortRateModelHandle_swiginit(self, _ORE.new_ShortRateModelHandle(*args))

    def __deref__(self):
        return _ORE.ShortRateModelHandle___deref__(self)

    def currentLink(self):
        return _ORE.ShortRateModelHandle_currentLink(self)

    def __nonzero__(self):
        return _ORE.ShortRateModelHandle___nonzero__(self)

    def __bool__(self):
        return _ORE.ShortRateModelHandle___bool__(self)

    def asObservable(self):
        return _ORE.ShortRateModelHandle_asObservable(self)
    __swig_destroy__ = _ORE.delete_ShortRateModelHandle

    def params(self):
        return _ORE.ShortRateModelHandle_params(self)

    def calibrate(self, *args):
        return _ORE.ShortRateModelHandle_calibrate(self, *args)

    def setParams(self, params):
        return _ORE.ShortRateModelHandle_setParams(self, params)

    def value(self, params, arg3):
        return _ORE.ShortRateModelHandle_value(self, params, arg3)

    def constraint(self):
        return _ORE.ShortRateModelHandle_constraint(self)

    def endCriteria(self):
        return _ORE.ShortRateModelHandle_endCriteria(self)

    def problemValues(self):
        return _ORE.ShortRateModelHandle_problemValues(self)

    def functionEvaluation(self):
        return _ORE.ShortRateModelHandle_functionEvaluation(self)

# Register ShortRateModelHandle in _ORE:
_ORE.ShortRateModelHandle_swigregister(ShortRateModelHandle)

class RelinkableShortRateModelHandle(ShortRateModelHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.RelinkableShortRateModelHandle_swiginit(self, _ORE.new_RelinkableShortRateModelHandle(*args))

    def linkTo(self, arg2):
        return _ORE.RelinkableShortRateModelHandle_linkTo(self, arg2)

    def reset(self):
        return _ORE.RelinkableShortRateModelHandle_reset(self)
    __swig_destroy__ = _ORE.delete_RelinkableShortRateModelHandle

# Register RelinkableShortRateModelHandle in _ORE:
_ORE.RelinkableShortRateModelHandle_swigregister(RelinkableShortRateModelHandle)

class OneFactorAffineModel(ShortRateModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def discountBond(self, *args):
        return _ORE.OneFactorAffineModel_discountBond(self, *args)

    def discount(self, t):
        return _ORE.OneFactorAffineModel_discount(self, t)
    __swig_destroy__ = _ORE.delete_OneFactorAffineModel

# Register OneFactorAffineModel in _ORE:
_ORE.OneFactorAffineModel_swigregister(OneFactorAffineModel)

class Vasicek(OneFactorAffineModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r0=0.05, a=0.1, b=0.05, sigma=0.01, lambda_parameter=0.0):
        _ORE.Vasicek_swiginit(self, _ORE.new_Vasicek(r0, a, b, sigma, lambda_parameter))
    __swig_destroy__ = _ORE.delete_Vasicek

# Register Vasicek in _ORE:
_ORE.Vasicek_swigregister(Vasicek)

class HullWhite(Vasicek):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, termStructure, a=0.1, sigma=0.01):
        _ORE.HullWhite_swiginit(self, _ORE.new_HullWhite(termStructure, a, sigma))

    @staticmethod
    def convexityBias(futurePrice, t, T, sigma, a):
        return _ORE.HullWhite_convexityBias(futurePrice, t, T, sigma, a)

    def termStructure(self):
        return _ORE.HullWhite_termStructure(self)
    __swig_destroy__ = _ORE.delete_HullWhite

# Register HullWhite in _ORE:
_ORE.HullWhite_swigregister(HullWhite)

def HullWhite_convexityBias(futurePrice, t, T, sigma, a):
    return _ORE.HullWhite_convexityBias(futurePrice, t, T, sigma, a)

class BlackKarasinski(ShortRateModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, termStructure, a=0.1, sigma=0.1):
        _ORE.BlackKarasinski_swiginit(self, _ORE.new_BlackKarasinski(termStructure, a, sigma))

    def termStructure(self):
        return _ORE.BlackKarasinski_termStructure(self)
    __swig_destroy__ = _ORE.delete_BlackKarasinski

# Register BlackKarasinski in _ORE:
_ORE.BlackKarasinski_swigregister(BlackKarasinski)

class CoxIngersollRoss(ShortRateModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r0=0.01, theta=0.1, k=0.1, sigma=0.1):
        _ORE.CoxIngersollRoss_swiginit(self, _ORE.new_CoxIngersollRoss(r0, theta, k, sigma))

    def discount(self, t):
        return _ORE.CoxIngersollRoss_discount(self, t)
    __swig_destroy__ = _ORE.delete_CoxIngersollRoss

# Register CoxIngersollRoss in _ORE:
_ORE.CoxIngersollRoss_swigregister(CoxIngersollRoss)

class ExtendedCoxIngersollRoss(ShortRateModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, termStructure, theta=0.1, k=0.1, sigma=0.1, x0=0.05):
        _ORE.ExtendedCoxIngersollRoss_swiginit(self, _ORE.new_ExtendedCoxIngersollRoss(termStructure, theta, k, sigma, x0))

    def discount(self, t):
        return _ORE.ExtendedCoxIngersollRoss_discount(self, t)
    __swig_destroy__ = _ORE.delete_ExtendedCoxIngersollRoss

# Register ExtendedCoxIngersollRoss in _ORE:
_ORE.ExtendedCoxIngersollRoss_swigregister(ExtendedCoxIngersollRoss)

class G2(ShortRateModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, termStructure, a=0.1, sigma=0.01, b=0.1, eta=0.01, rho=-0.75):
        _ORE.G2_swiginit(self, _ORE.new_G2(termStructure, a, sigma, b, eta, rho))

    def termStructure(self):
        return _ORE.G2_termStructure(self)
    __swig_destroy__ = _ORE.delete_G2

# Register G2 in _ORE:
_ORE.G2_swigregister(G2)

class JamshidianSwaptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.JamshidianSwaptionEngine_swiginit(self, _ORE.new_JamshidianSwaptionEngine(*args))
    __swig_destroy__ = _ORE.delete_JamshidianSwaptionEngine

# Register JamshidianSwaptionEngine in _ORE:
_ORE.JamshidianSwaptionEngine_swigregister(JamshidianSwaptionEngine)

class TreeSwaptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.TreeSwaptionEngine_swiginit(self, _ORE.new_TreeSwaptionEngine(*args))
    __swig_destroy__ = _ORE.delete_TreeSwaptionEngine

# Register TreeSwaptionEngine in _ORE:
_ORE.TreeSwaptionEngine_swigregister(TreeSwaptionEngine)

class AnalyticCapFloorEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.AnalyticCapFloorEngine_swiginit(self, _ORE.new_AnalyticCapFloorEngine(*args))
    __swig_destroy__ = _ORE.delete_AnalyticCapFloorEngine

# Register AnalyticCapFloorEngine in _ORE:
_ORE.AnalyticCapFloorEngine_swigregister(AnalyticCapFloorEngine)

class TreeCapFloorEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.TreeCapFloorEngine_swiginit(self, _ORE.new_TreeCapFloorEngine(*args))
    __swig_destroy__ = _ORE.delete_TreeCapFloorEngine

# Register TreeCapFloorEngine in _ORE:
_ORE.TreeCapFloorEngine_swigregister(TreeCapFloorEngine)

class G2SwaptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model, range, intervals):
        _ORE.G2SwaptionEngine_swiginit(self, _ORE.new_G2SwaptionEngine(model, range, intervals))
    __swig_destroy__ = _ORE.delete_G2SwaptionEngine

# Register G2SwaptionEngine in _ORE:
_ORE.G2SwaptionEngine_swigregister(G2SwaptionEngine)

class FdG2SwaptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdG2SwaptionEngine_swiginit(self, _ORE.new_FdG2SwaptionEngine(*args))
    __swig_destroy__ = _ORE.delete_FdG2SwaptionEngine

# Register FdG2SwaptionEngine in _ORE:
_ORE.FdG2SwaptionEngine_swigregister(FdG2SwaptionEngine)

class FdHullWhiteSwaptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdHullWhiteSwaptionEngine_swiginit(self, _ORE.new_FdHullWhiteSwaptionEngine(*args))
    __swig_destroy__ = _ORE.delete_FdHullWhiteSwaptionEngine

# Register FdHullWhiteSwaptionEngine in _ORE:
_ORE.FdHullWhiteSwaptionEngine_swigregister(FdHullWhiteSwaptionEngine)

class AnalyticBSMHullWhiteEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, equityShortRateCorrelation, arg3, arg4):
        _ORE.AnalyticBSMHullWhiteEngine_swiginit(self, _ORE.new_AnalyticBSMHullWhiteEngine(equityShortRateCorrelation, arg3, arg4))
    __swig_destroy__ = _ORE.delete_AnalyticBSMHullWhiteEngine

# Register AnalyticBSMHullWhiteEngine in _ORE:
_ORE.AnalyticBSMHullWhiteEngine_swigregister(AnalyticBSMHullWhiteEngine)

class BondPrice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Dirty = _ORE.BondPrice_Dirty
    Clean = _ORE.BondPrice_Clean

    def __init__(self, amount, type):
        _ORE.BondPrice_swiginit(self, _ORE.new_BondPrice(amount, type))

    def amount(self):
        return _ORE.BondPrice_amount(self)

    def type(self):
        return _ORE.BondPrice_type(self)
    __swig_destroy__ = _ORE.delete_BondPrice

# Register BondPrice in _ORE:
_ORE.BondPrice_swigregister(BondPrice)

class Bond(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Bond_swiginit(self, _ORE.new_Bond(*args))

    def nextCouponRate(self, *args):
        return _ORE.Bond_nextCouponRate(self, *args)

    def previousCouponRate(self, *args):
        return _ORE.Bond_previousCouponRate(self, *args)

    def settlementDays(self):
        return _ORE.Bond_settlementDays(self)

    def settlementDate(self, *args):
        return _ORE.Bond_settlementDate(self, *args)

    def startDate(self):
        return _ORE.Bond_startDate(self)

    def maturityDate(self):
        return _ORE.Bond_maturityDate(self)

    def issueDate(self):
        return _ORE.Bond_issueDate(self)

    def cashflows(self):
        return _ORE.Bond_cashflows(self)

    def redemptions(self):
        return _ORE.Bond_redemptions(self)

    def redemption(self):
        return _ORE.Bond_redemption(self)

    def calendar(self):
        return _ORE.Bond_calendar(self)

    def notionals(self):
        return _ORE.Bond_notionals(self)

    def notional(self, *args):
        return _ORE.Bond_notional(self, *args)

    def cleanPrice(self, *args):
        return _ORE.Bond_cleanPrice(self, *args)

    def dirtyPrice(self, *args):
        return _ORE.Bond_dirtyPrice(self, *args)

    def bondYield(self, *args):
        return _ORE.Bond_bondYield(self, *args)

    def accruedAmount(self, *args):
        return _ORE.Bond_accruedAmount(self, *args)

    def settlementValue(self, *args):
        return _ORE.Bond_settlementValue(self, *args)
    __swig_destroy__ = _ORE.delete_Bond

# Register Bond in _ORE:
_ORE.Bond_swigregister(Bond)


def cleanPriceFromZSpread(*args):
    return _ORE.cleanPriceFromZSpread(*args)

def sinkingSchedule(startDate, bondLength, frequency, paymentCalendar):
    return _ORE.sinkingSchedule(startDate, bondLength, frequency, paymentCalendar)

def sinkingNotionals(bondLength, frequency, couponRate, initialNotional):
    return _ORE.sinkingNotionals(bondLength, frequency, couponRate, initialNotional)
class ZeroCouponBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.ZeroCouponBond_swiginit(self, _ORE.new_ZeroCouponBond(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_ZeroCouponBond

# Register ZeroCouponBond in _ORE:
_ORE.ZeroCouponBond_swigregister(ZeroCouponBond)

class FixedRateBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FixedRateBond_swiginit(self, _ORE.new_FixedRateBond(*args))

    @staticmethod
    def from_rates(*args, **kwargs):
        return _ORE.FixedRateBond_from_rates(*args, **kwargs)

    @staticmethod
    def from_interest_rates(*args, **kwargs):
        return _ORE.FixedRateBond_from_interest_rates(*args, **kwargs)

    @staticmethod
    def from_date_info(*args, **kwargs):
        return _ORE.FixedRateBond_from_date_info(*args, **kwargs)

    def frequency(self):
        return _ORE.FixedRateBond_frequency(self)

    def dayCounter(self):
        return _ORE.FixedRateBond_dayCounter(self)
    __swig_destroy__ = _ORE.delete_FixedRateBond

# Register FixedRateBond in _ORE:
_ORE.FixedRateBond_swigregister(FixedRateBond)

def FixedRateBond_from_rates(*args, **kwargs):
    return _ORE.FixedRateBond_from_rates(*args, **kwargs)

def FixedRateBond_from_interest_rates(*args, **kwargs):
    return _ORE.FixedRateBond_from_interest_rates(*args, **kwargs)

def FixedRateBond_from_date_info(*args, **kwargs):
    return _ORE.FixedRateBond_from_date_info(*args, **kwargs)

class AmortizingFixedRateBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.AmortizingFixedRateBond_swiginit(self, _ORE.new_AmortizingFixedRateBond(*args))

    def frequency(self):
        return _ORE.AmortizingFixedRateBond_frequency(self)

    def dayCounter(self):
        return _ORE.AmortizingFixedRateBond_dayCounter(self)
    __swig_destroy__ = _ORE.delete_AmortizingFixedRateBond

# Register AmortizingFixedRateBond in _ORE:
_ORE.AmortizingFixedRateBond_swigregister(AmortizingFixedRateBond)

class AmortizingFloatingRateBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.AmortizingFloatingRateBond_swiginit(self, _ORE.new_AmortizingFloatingRateBond(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_AmortizingFloatingRateBond

# Register AmortizingFloatingRateBond in _ORE:
_ORE.AmortizingFloatingRateBond_swigregister(AmortizingFloatingRateBond)

class FloatingRateBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.FloatingRateBond_swiginit(self, _ORE.new_FloatingRateBond(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_FloatingRateBond

# Register FloatingRateBond in _ORE:
_ORE.FloatingRateBond_swigregister(FloatingRateBond)

class CmsRateBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.CmsRateBond_swiginit(self, _ORE.new_CmsRateBond(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_CmsRateBond

# Register CmsRateBond in _ORE:
_ORE.CmsRateBond_swigregister(CmsRateBond)

class AmortizingCmsRateBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.AmortizingCmsRateBond_swiginit(self, _ORE.new_AmortizingCmsRateBond(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_AmortizingCmsRateBond

# Register AmortizingCmsRateBond in _ORE:
_ORE.AmortizingCmsRateBond_swigregister(AmortizingCmsRateBond)

class DiscountingBondEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, discountCurve):
        _ORE.DiscountingBondEngine_swiginit(self, _ORE.new_DiscountingBondEngine(discountCurve))
    __swig_destroy__ = _ORE.delete_DiscountingBondEngine

# Register DiscountingBondEngine in _ORE:
_ORE.DiscountingBondEngine_swigregister(DiscountingBondEngine)

class Callability(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Call = _ORE.Callability_Call
    Put = _ORE.Callability_Put

    def __init__(self, price, type, date):
        _ORE.Callability_swiginit(self, _ORE.new_Callability(price, type, date))

    def price(self):
        return _ORE.Callability_price(self)

    def type(self):
        return _ORE.Callability_type(self)

    def date(self):
        return _ORE.Callability_date(self)
    __swig_destroy__ = _ORE.delete_Callability

# Register Callability in _ORE:
_ORE.Callability_swigregister(Callability)

class SoftCallability(Callability):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, price, date, trigger):
        _ORE.SoftCallability_swiginit(self, _ORE.new_SoftCallability(price, date, trigger))
    __swig_destroy__ = _ORE.delete_SoftCallability

# Register SoftCallability in _ORE:
_ORE.SoftCallability_swigregister(SoftCallability)

class CallabilitySchedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.CallabilitySchedule_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.CallabilitySchedule___nonzero__(self)

    def __bool__(self):
        return _ORE.CallabilitySchedule___bool__(self)

    def __len__(self):
        return _ORE.CallabilitySchedule___len__(self)

    def __getslice__(self, i, j):
        return _ORE.CallabilitySchedule___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.CallabilitySchedule___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.CallabilitySchedule___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.CallabilitySchedule___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.CallabilitySchedule___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.CallabilitySchedule___setitem__(self, *args)

    def pop(self):
        return _ORE.CallabilitySchedule_pop(self)

    def append(self, x):
        return _ORE.CallabilitySchedule_append(self, x)

    def empty(self):
        return _ORE.CallabilitySchedule_empty(self)

    def size(self):
        return _ORE.CallabilitySchedule_size(self)

    def swap(self, v):
        return _ORE.CallabilitySchedule_swap(self, v)

    def begin(self):
        return _ORE.CallabilitySchedule_begin(self)

    def end(self):
        return _ORE.CallabilitySchedule_end(self)

    def rbegin(self):
        return _ORE.CallabilitySchedule_rbegin(self)

    def rend(self):
        return _ORE.CallabilitySchedule_rend(self)

    def clear(self):
        return _ORE.CallabilitySchedule_clear(self)

    def get_allocator(self):
        return _ORE.CallabilitySchedule_get_allocator(self)

    def pop_back(self):
        return _ORE.CallabilitySchedule_pop_back(self)

    def erase(self, *args):
        return _ORE.CallabilitySchedule_erase(self, *args)

    def __init__(self, *args):
        _ORE.CallabilitySchedule_swiginit(self, _ORE.new_CallabilitySchedule(*args))

    def push_back(self, x):
        return _ORE.CallabilitySchedule_push_back(self, x)

    def front(self):
        return _ORE.CallabilitySchedule_front(self)

    def back(self):
        return _ORE.CallabilitySchedule_back(self)

    def assign(self, n, x):
        return _ORE.CallabilitySchedule_assign(self, n, x)

    def resize(self, *args):
        return _ORE.CallabilitySchedule_resize(self, *args)

    def insert(self, *args):
        return _ORE.CallabilitySchedule_insert(self, *args)

    def reserve(self, n):
        return _ORE.CallabilitySchedule_reserve(self, n)

    def capacity(self):
        return _ORE.CallabilitySchedule_capacity(self)
    __swig_destroy__ = _ORE.delete_CallabilitySchedule

# Register CallabilitySchedule in _ORE:
_ORE.CallabilitySchedule_swigregister(CallabilitySchedule)

class CallableBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def callability(self):
        return _ORE.CallableBond_callability(self)

    def impliedVolatility(self, *args):
        return _ORE.CallableBond_impliedVolatility(self, *args)

    def OAS(self, *args):
        return _ORE.CallableBond_OAS(self, *args)

    def cleanPriceOAS(self, *args):
        return _ORE.CallableBond_cleanPriceOAS(self, *args)

    def effectiveDuration(self, oas, engineTS, dayCounter, compounding, frequency, bump=2e-4):
        return _ORE.CallableBond_effectiveDuration(self, oas, engineTS, dayCounter, compounding, frequency, bump)

    def effectiveConvexity(self, oas, engineTS, dayCounter, compounding, frequency, bump=2e-4):
        return _ORE.CallableBond_effectiveConvexity(self, oas, engineTS, dayCounter, compounding, frequency, bump)
    __swig_destroy__ = _ORE.delete_CallableBond

# Register CallableBond in _ORE:
_ORE.CallableBond_swigregister(CallableBond)

class CallableFixedRateBond(CallableBond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.CallableFixedRateBond_swiginit(self, _ORE.new_CallableFixedRateBond(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_CallableFixedRateBond

# Register CallableFixedRateBond in _ORE:
_ORE.CallableFixedRateBond_swigregister(CallableFixedRateBond)

class CallableZeroCouponBond(CallableBond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.CallableZeroCouponBond_swiginit(self, _ORE.new_CallableZeroCouponBond(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_CallableZeroCouponBond

# Register CallableZeroCouponBond in _ORE:
_ORE.CallableZeroCouponBond_swigregister(CallableZeroCouponBond)

class TreeCallableFixedRateBondEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.TreeCallableFixedRateBondEngine_swiginit(self, _ORE.new_TreeCallableFixedRateBondEngine(*args))
    __swig_destroy__ = _ORE.delete_TreeCallableFixedRateBondEngine

# Register TreeCallableFixedRateBondEngine in _ORE:
_ORE.TreeCallableFixedRateBondEngine_swigregister(TreeCallableFixedRateBondEngine)

class BlackCallableFixedRateBondEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fwdYieldVol, discountCurve):
        _ORE.BlackCallableFixedRateBondEngine_swiginit(self, _ORE.new_BlackCallableFixedRateBondEngine(fwdYieldVol, discountCurve))
    __swig_destroy__ = _ORE.delete_BlackCallableFixedRateBondEngine

# Register BlackCallableFixedRateBondEngine in _ORE:
_ORE.BlackCallableFixedRateBondEngine_swigregister(BlackCallableFixedRateBondEngine)

class CPIBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.CPIBond_swiginit(self, _ORE.new_CPIBond(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_CPIBond

# Register CPIBond in _ORE:
_ORE.CPIBond_swigregister(CPIBond)

class BondFunctions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def startDate(bond):
        return _ORE.BondFunctions_startDate(bond)

    @staticmethod
    def maturityDate(bond):
        return _ORE.BondFunctions_maturityDate(bond)

    @staticmethod
    def isTradable(*args):
        return _ORE.BondFunctions_isTradable(*args)

    @staticmethod
    def previousCashFlowDate(*args):
        return _ORE.BondFunctions_previousCashFlowDate(*args)

    @staticmethod
    def nextCashFlowDate(*args):
        return _ORE.BondFunctions_nextCashFlowDate(*args)

    @staticmethod
    def previousCashFlowAmount(*args):
        return _ORE.BondFunctions_previousCashFlowAmount(*args)

    @staticmethod
    def nextCashFlowAmount(*args):
        return _ORE.BondFunctions_nextCashFlowAmount(*args)

    @staticmethod
    def previousCouponRate(*args):
        return _ORE.BondFunctions_previousCouponRate(*args)

    @staticmethod
    def nextCouponRate(*args):
        return _ORE.BondFunctions_nextCouponRate(*args)

    @staticmethod
    def accrualStartDate(*args):
        return _ORE.BondFunctions_accrualStartDate(*args)

    @staticmethod
    def accrualEndDate(*args):
        return _ORE.BondFunctions_accrualEndDate(*args)

    @staticmethod
    def accrualPeriod(*args):
        return _ORE.BondFunctions_accrualPeriod(*args)

    @staticmethod
    def accrualDays(*args):
        return _ORE.BondFunctions_accrualDays(*args)

    @staticmethod
    def accruedPeriod(*args):
        return _ORE.BondFunctions_accruedPeriod(*args)

    @staticmethod
    def accruedDays(*args):
        return _ORE.BondFunctions_accruedDays(*args)

    @staticmethod
    def accruedAmount(*args):
        return _ORE.BondFunctions_accruedAmount(*args)

    @staticmethod
    def atmRate(*args):
        return _ORE.BondFunctions_atmRate(*args)

    @staticmethod
    def cleanPrice(*args):
        return _ORE.BondFunctions_cleanPrice(*args)

    @staticmethod
    def bps(*args):
        return _ORE.BondFunctions_bps(*args)

    @staticmethod
    def bondYield(*args):
        return _ORE.BondFunctions_bondYield(*args)

    @staticmethod
    def duration(*args):
        return _ORE.BondFunctions_duration(*args)

    @staticmethod
    def convexity(*args):
        return _ORE.BondFunctions_convexity(*args)

    @staticmethod
    def basisPointValue(*args):
        return _ORE.BondFunctions_basisPointValue(*args)

    @staticmethod
    def yieldValueBasisPoint(*args):
        return _ORE.BondFunctions_yieldValueBasisPoint(*args)

    @staticmethod
    def zSpread(*args):
        return _ORE.BondFunctions_zSpread(*args)

    @staticmethod
    def yieldBrent(*args):
        return _ORE.BondFunctions_yieldBrent(*args)

    @staticmethod
    def yieldBisection(*args):
        return _ORE.BondFunctions_yieldBisection(*args)

    @staticmethod
    def yieldFalsePosition(*args):
        return _ORE.BondFunctions_yieldFalsePosition(*args)

    @staticmethod
    def yieldRidder(*args):
        return _ORE.BondFunctions_yieldRidder(*args)

    @staticmethod
    def yieldSecant(*args):
        return _ORE.BondFunctions_yieldSecant(*args)

    @staticmethod
    def yieldNewton(*args):
        return _ORE.BondFunctions_yieldNewton(*args)

    @staticmethod
    def yieldNewtonSafe(*args):
        return _ORE.BondFunctions_yieldNewtonSafe(*args)

    def __init__(self):
        _ORE.BondFunctions_swiginit(self, _ORE.new_BondFunctions())
    __swig_destroy__ = _ORE.delete_BondFunctions

# Register BondFunctions in _ORE:
_ORE.BondFunctions_swigregister(BondFunctions)

def BondFunctions_startDate(bond):
    return _ORE.BondFunctions_startDate(bond)

def BondFunctions_maturityDate(bond):
    return _ORE.BondFunctions_maturityDate(bond)

def BondFunctions_isTradable(*args):
    return _ORE.BondFunctions_isTradable(*args)

def BondFunctions_previousCashFlowDate(*args):
    return _ORE.BondFunctions_previousCashFlowDate(*args)

def BondFunctions_nextCashFlowDate(*args):
    return _ORE.BondFunctions_nextCashFlowDate(*args)

def BondFunctions_previousCashFlowAmount(*args):
    return _ORE.BondFunctions_previousCashFlowAmount(*args)

def BondFunctions_nextCashFlowAmount(*args):
    return _ORE.BondFunctions_nextCashFlowAmount(*args)

def BondFunctions_previousCouponRate(*args):
    return _ORE.BondFunctions_previousCouponRate(*args)

def BondFunctions_nextCouponRate(*args):
    return _ORE.BondFunctions_nextCouponRate(*args)

def BondFunctions_accrualStartDate(*args):
    return _ORE.BondFunctions_accrualStartDate(*args)

def BondFunctions_accrualEndDate(*args):
    return _ORE.BondFunctions_accrualEndDate(*args)

def BondFunctions_accrualPeriod(*args):
    return _ORE.BondFunctions_accrualPeriod(*args)

def BondFunctions_accrualDays(*args):
    return _ORE.BondFunctions_accrualDays(*args)

def BondFunctions_accruedPeriod(*args):
    return _ORE.BondFunctions_accruedPeriod(*args)

def BondFunctions_accruedDays(*args):
    return _ORE.BondFunctions_accruedDays(*args)

def BondFunctions_accruedAmount(*args):
    return _ORE.BondFunctions_accruedAmount(*args)

def BondFunctions_atmRate(*args):
    return _ORE.BondFunctions_atmRate(*args)

def BondFunctions_cleanPrice(*args):
    return _ORE.BondFunctions_cleanPrice(*args)

def BondFunctions_bps(*args):
    return _ORE.BondFunctions_bps(*args)

def BondFunctions_bondYield(*args):
    return _ORE.BondFunctions_bondYield(*args)

def BondFunctions_duration(*args):
    return _ORE.BondFunctions_duration(*args)

def BondFunctions_convexity(*args):
    return _ORE.BondFunctions_convexity(*args)

def BondFunctions_basisPointValue(*args):
    return _ORE.BondFunctions_basisPointValue(*args)

def BondFunctions_yieldValueBasisPoint(*args):
    return _ORE.BondFunctions_yieldValueBasisPoint(*args)

def BondFunctions_zSpread(*args):
    return _ORE.BondFunctions_zSpread(*args)

def BondFunctions_yieldBrent(*args):
    return _ORE.BondFunctions_yieldBrent(*args)

def BondFunctions_yieldBisection(*args):
    return _ORE.BondFunctions_yieldBisection(*args)

def BondFunctions_yieldFalsePosition(*args):
    return _ORE.BondFunctions_yieldFalsePosition(*args)

def BondFunctions_yieldRidder(*args):
    return _ORE.BondFunctions_yieldRidder(*args)

def BondFunctions_yieldSecant(*args):
    return _ORE.BondFunctions_yieldSecant(*args)

def BondFunctions_yieldNewton(*args):
    return _ORE.BondFunctions_yieldNewton(*args)

def BondFunctions_yieldNewtonSafe(*args):
    return _ORE.BondFunctions_yieldNewtonSafe(*args)

class BlackCalibrationHelper(CalibrationHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    RelativePriceError = _ORE.BlackCalibrationHelper_RelativePriceError
    PriceError = _ORE.BlackCalibrationHelper_PriceError
    ImpliedVolError = _ORE.BlackCalibrationHelper_ImpliedVolError

    def setPricingEngine(self, engine):
        return _ORE.BlackCalibrationHelper_setPricingEngine(self, engine)

    def marketValue(self):
        return _ORE.BlackCalibrationHelper_marketValue(self)

    def modelValue(self):
        return _ORE.BlackCalibrationHelper_modelValue(self)

    def impliedVolatility(self, targetValue, accuracy, maxEvaluations, minVol, maxVol):
        return _ORE.BlackCalibrationHelper_impliedVolatility(self, targetValue, accuracy, maxEvaluations, minVol, maxVol)

    def blackPrice(self, volatility):
        return _ORE.BlackCalibrationHelper_blackPrice(self, volatility)

    def volatility(self):
        return _ORE.BlackCalibrationHelper_volatility(self)

    def volatilityType(self):
        return _ORE.BlackCalibrationHelper_volatilityType(self)

    def calibrationError(self):
        return _ORE.BlackCalibrationHelper_calibrationError(self)
    __swig_destroy__ = _ORE.delete_BlackCalibrationHelper

# Register BlackCalibrationHelper in _ORE:
_ORE.BlackCalibrationHelper_swigregister(BlackCalibrationHelper)


def as_black_helper(h):
    return _ORE.as_black_helper(h)

def as_swaption_helper(h):
    return _ORE.as_swaption_helper(h)
class SwaptionHelper(BlackCalibrationHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SwaptionHelper_swiginit(self, _ORE.new_SwaptionHelper(*args))

    def underlyingSwap(self):
        return _ORE.SwaptionHelper_underlyingSwap(self)

    def swaption(self):
        return _ORE.SwaptionHelper_swaption(self)

    def times(self):
        return _ORE.SwaptionHelper_times(self)

    def swaptionExpiryDate(self):
        return _ORE.SwaptionHelper_swaptionExpiryDate(self)

    def swaptionStrike(self):
        return _ORE.SwaptionHelper_swaptionStrike(self)

    def swaptionNominal(self):
        return _ORE.SwaptionHelper_swaptionNominal(self)

    def swaptionMaturityDate(self):
        return _ORE.SwaptionHelper_swaptionMaturityDate(self)
    __swig_destroy__ = _ORE.delete_SwaptionHelper

# Register SwaptionHelper in _ORE:
_ORE.SwaptionHelper_swigregister(SwaptionHelper)

class CapHelper(BlackCalibrationHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CapHelper_swiginit(self, _ORE.new_CapHelper(*args))

    def times(self):
        return _ORE.CapHelper_times(self)
    __swig_destroy__ = _ORE.delete_CapHelper

# Register CapHelper in _ORE:
_ORE.CapHelper_swigregister(CapHelper)

class HestonModelHelper(BlackCalibrationHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.HestonModelHelper_swiginit(self, _ORE.new_HestonModelHelper(*args))
    __swig_destroy__ = _ORE.delete_HestonModelHelper

# Register HestonModelHelper in _ORE:
_ORE.HestonModelHelper_swigregister(HestonModelHelper)

class BlackCalibrationHelperVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.BlackCalibrationHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.BlackCalibrationHelperVector___nonzero__(self)

    def __bool__(self):
        return _ORE.BlackCalibrationHelperVector___bool__(self)

    def __len__(self):
        return _ORE.BlackCalibrationHelperVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.BlackCalibrationHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.BlackCalibrationHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.BlackCalibrationHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.BlackCalibrationHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.BlackCalibrationHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.BlackCalibrationHelperVector___setitem__(self, *args)

    def pop(self):
        return _ORE.BlackCalibrationHelperVector_pop(self)

    def append(self, x):
        return _ORE.BlackCalibrationHelperVector_append(self, x)

    def empty(self):
        return _ORE.BlackCalibrationHelperVector_empty(self)

    def size(self):
        return _ORE.BlackCalibrationHelperVector_size(self)

    def swap(self, v):
        return _ORE.BlackCalibrationHelperVector_swap(self, v)

    def begin(self):
        return _ORE.BlackCalibrationHelperVector_begin(self)

    def end(self):
        return _ORE.BlackCalibrationHelperVector_end(self)

    def rbegin(self):
        return _ORE.BlackCalibrationHelperVector_rbegin(self)

    def rend(self):
        return _ORE.BlackCalibrationHelperVector_rend(self)

    def clear(self):
        return _ORE.BlackCalibrationHelperVector_clear(self)

    def get_allocator(self):
        return _ORE.BlackCalibrationHelperVector_get_allocator(self)

    def pop_back(self):
        return _ORE.BlackCalibrationHelperVector_pop_back(self)

    def erase(self, *args):
        return _ORE.BlackCalibrationHelperVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.BlackCalibrationHelperVector_swiginit(self, _ORE.new_BlackCalibrationHelperVector(*args))

    def push_back(self, x):
        return _ORE.BlackCalibrationHelperVector_push_back(self, x)

    def front(self):
        return _ORE.BlackCalibrationHelperVector_front(self)

    def back(self):
        return _ORE.BlackCalibrationHelperVector_back(self)

    def assign(self, n, x):
        return _ORE.BlackCalibrationHelperVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.BlackCalibrationHelperVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.BlackCalibrationHelperVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.BlackCalibrationHelperVector_reserve(self, n)

    def capacity(self):
        return _ORE.BlackCalibrationHelperVector_capacity(self)
    __swig_destroy__ = _ORE.delete_BlackCalibrationHelperVector

# Register BlackCalibrationHelperVector in _ORE:
_ORE.BlackCalibrationHelperVector_swigregister(BlackCalibrationHelperVector)

class CapFloor(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def impliedVolatility(self, price, disc, guess, accuracy=1.0e-4, maxEvaluations=100, minVol=1.0e-7, maxVol=4.0, type=ShiftedLognormal, displacement=0.0):
        return _ORE.CapFloor_impliedVolatility(self, price, disc, guess, accuracy, maxEvaluations, minVol, maxVol, type, displacement)
    Cap = _ORE.CapFloor_Cap
    Floor = _ORE.CapFloor_Floor
    Collar = _ORE.CapFloor_Collar

    def floatingLeg(self):
        return _ORE.CapFloor_floatingLeg(self)

    def capRates(self):
        return _ORE.CapFloor_capRates(self)

    def floorRates(self):
        return _ORE.CapFloor_floorRates(self)

    def startDate(self):
        return _ORE.CapFloor_startDate(self)

    def maturityDate(self):
        return _ORE.CapFloor_maturityDate(self)

    def type(self):
        return _ORE.CapFloor_type(self)

    def atmRate(self, discountCurve):
        return _ORE.CapFloor_atmRate(self, discountCurve)

    def vega(self):
        return _ORE.CapFloor_vega(self)

    def optionletsPrice(self):
        return _ORE.CapFloor_optionletsPrice(self)

    def optionletsVega(self):
        return _ORE.CapFloor_optionletsVega(self)

    def optionletsDelta(self):
        return _ORE.CapFloor_optionletsDelta(self)

    def optionletsDiscountFactor(self):
        return _ORE.CapFloor_optionletsDiscountFactor(self)

    def optionletsAtmForward(self):
        return _ORE.CapFloor_optionletsAtmForward(self)

    def optionletsStdDev(self):
        return _ORE.CapFloor_optionletsStdDev(self)
    __swig_destroy__ = _ORE.delete_CapFloor

# Register CapFloor in _ORE:
_ORE.CapFloor_swigregister(CapFloor)

class Cap(CapFloor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, leg, capRates):
        _ORE.Cap_swiginit(self, _ORE.new_Cap(leg, capRates))
    __swig_destroy__ = _ORE.delete_Cap

# Register Cap in _ORE:
_ORE.Cap_swigregister(Cap)

class Floor(CapFloor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, leg, floorRates):
        _ORE.Floor_swiginit(self, _ORE.new_Floor(leg, floorRates))
    __swig_destroy__ = _ORE.delete_Floor

# Register Floor in _ORE:
_ORE.Floor_swigregister(Floor)

class Collar(CapFloor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, leg, capRates, floorRates):
        _ORE.Collar_swiginit(self, _ORE.new_Collar(leg, capRates, floorRates))
    __swig_destroy__ = _ORE.delete_Collar

# Register Collar in _ORE:
_ORE.Collar_swigregister(Collar)

class BlackCapFloorEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BlackCapFloorEngine_swiginit(self, _ORE.new_BlackCapFloorEngine(*args))
    __swig_destroy__ = _ORE.delete_BlackCapFloorEngine

# Register BlackCapFloorEngine in _ORE:
_ORE.BlackCapFloorEngine_swigregister(BlackCapFloorEngine)

class BachelierCapFloorEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BachelierCapFloorEngine_swiginit(self, _ORE.new_BachelierCapFloorEngine(*args))
    __swig_destroy__ = _ORE.delete_BachelierCapFloorEngine

# Register BachelierCapFloorEngine in _ORE:
_ORE.BachelierCapFloorEngine_swigregister(BachelierCapFloorEngine)

class CliquetOption(OneAssetOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff, maturity, resetDates):
        _ORE.CliquetOption_swiginit(self, _ORE.new_CliquetOption(payoff, maturity, resetDates))
    __swig_destroy__ = _ORE.delete_CliquetOption

# Register CliquetOption in _ORE:
_ORE.CliquetOption_swigregister(CliquetOption)

class AnalyticCliquetEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.AnalyticCliquetEngine_swiginit(self, _ORE.new_AnalyticCliquetEngine(process))
    __swig_destroy__ = _ORE.delete_AnalyticCliquetEngine

# Register AnalyticCliquetEngine in _ORE:
_ORE.AnalyticCliquetEngine_swigregister(AnalyticCliquetEngine)

class AnalyticPerformanceEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.AnalyticPerformanceEngine_swiginit(self, _ORE.new_AnalyticPerformanceEngine(process))
    __swig_destroy__ = _ORE.delete_AnalyticPerformanceEngine

# Register AnalyticPerformanceEngine in _ORE:
_ORE.AnalyticPerformanceEngine_swigregister(AnalyticPerformanceEngine)

class MCPRPerformanceEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCPRPerformanceEngine_swiginit(self, _ORE.new_MCPRPerformanceEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCPRPerformanceEngine

# Register MCPRPerformanceEngine in _ORE:
_ORE.MCPRPerformanceEngine_swigregister(MCPRPerformanceEngine)

class MCLDPerformanceEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.MCLDPerformanceEngine_swiginit(self, _ORE.new_MCLDPerformanceEngine(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_MCLDPerformanceEngine

# Register MCLDPerformanceEngine in _ORE:
_ORE.MCLDPerformanceEngine_swigregister(MCLDPerformanceEngine)


def MCPerformanceEngine(process,
                        traits,
                        brownianBridge=False,
                        antitheticVariate=False,
                        requiredSamples=None,
                        requiredTolerance=None,
                        maxSamples=None,
                        seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRPerformanceEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDPerformanceEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               brownianBridge,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)

class ConvertibleZeroCouponBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, exercise, conversionRatio, callability, issueDate, settlementDays, dayCounter, schedule, redemption=100.0):
        _ORE.ConvertibleZeroCouponBond_swiginit(self, _ORE.new_ConvertibleZeroCouponBond(exercise, conversionRatio, callability, issueDate, settlementDays, dayCounter, schedule, redemption))
    __swig_destroy__ = _ORE.delete_ConvertibleZeroCouponBond

# Register ConvertibleZeroCouponBond in _ORE:
_ORE.ConvertibleZeroCouponBond_swigregister(ConvertibleZeroCouponBond)

class ConvertibleFixedCouponBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ConvertibleFixedCouponBond_swiginit(self, _ORE.new_ConvertibleFixedCouponBond(*args))
    __swig_destroy__ = _ORE.delete_ConvertibleFixedCouponBond

# Register ConvertibleFixedCouponBond in _ORE:
_ORE.ConvertibleFixedCouponBond_swigregister(ConvertibleFixedCouponBond)

class ConvertibleFloatingRateBond(Bond):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ConvertibleFloatingRateBond_swiginit(self, _ORE.new_ConvertibleFloatingRateBond(*args))
    __swig_destroy__ = _ORE.delete_ConvertibleFloatingRateBond

# Register ConvertibleFloatingRateBond in _ORE:
_ORE.ConvertibleFloatingRateBond_swigregister(ConvertibleFloatingRateBond)

class BinomialCRRConvertibleEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BinomialCRRConvertibleEngine_swiginit(self, _ORE.new_BinomialCRRConvertibleEngine(*args))
    __swig_destroy__ = _ORE.delete_BinomialCRRConvertibleEngine

# Register BinomialCRRConvertibleEngine in _ORE:
_ORE.BinomialCRRConvertibleEngine_swigregister(BinomialCRRConvertibleEngine)

class BinomialJRConvertibleEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BinomialJRConvertibleEngine_swiginit(self, _ORE.new_BinomialJRConvertibleEngine(*args))
    __swig_destroy__ = _ORE.delete_BinomialJRConvertibleEngine

# Register BinomialJRConvertibleEngine in _ORE:
_ORE.BinomialJRConvertibleEngine_swigregister(BinomialJRConvertibleEngine)

class BinomialEQPConvertibleEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BinomialEQPConvertibleEngine_swiginit(self, _ORE.new_BinomialEQPConvertibleEngine(*args))
    __swig_destroy__ = _ORE.delete_BinomialEQPConvertibleEngine

# Register BinomialEQPConvertibleEngine in _ORE:
_ORE.BinomialEQPConvertibleEngine_swigregister(BinomialEQPConvertibleEngine)

class BinomialTrigeorgisConvertibleEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BinomialTrigeorgisConvertibleEngine_swiginit(self, _ORE.new_BinomialTrigeorgisConvertibleEngine(*args))
    __swig_destroy__ = _ORE.delete_BinomialTrigeorgisConvertibleEngine

# Register BinomialTrigeorgisConvertibleEngine in _ORE:
_ORE.BinomialTrigeorgisConvertibleEngine_swigregister(BinomialTrigeorgisConvertibleEngine)

class BinomialTianConvertibleEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BinomialTianConvertibleEngine_swiginit(self, _ORE.new_BinomialTianConvertibleEngine(*args))
    __swig_destroy__ = _ORE.delete_BinomialTianConvertibleEngine

# Register BinomialTianConvertibleEngine in _ORE:
_ORE.BinomialTianConvertibleEngine_swigregister(BinomialTianConvertibleEngine)

class BinomialLRConvertibleEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BinomialLRConvertibleEngine_swiginit(self, _ORE.new_BinomialLRConvertibleEngine(*args))
    __swig_destroy__ = _ORE.delete_BinomialLRConvertibleEngine

# Register BinomialLRConvertibleEngine in _ORE:
_ORE.BinomialLRConvertibleEngine_swigregister(BinomialLRConvertibleEngine)

class BinomialJ4ConvertibleEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BinomialJ4ConvertibleEngine_swiginit(self, _ORE.new_BinomialJ4ConvertibleEngine(*args))
    __swig_destroy__ = _ORE.delete_BinomialJ4ConvertibleEngine

# Register BinomialJ4ConvertibleEngine in _ORE:
_ORE.BinomialJ4ConvertibleEngine_swigregister(BinomialJ4ConvertibleEngine)


def BinomialConvertibleEngine(process, type, steps, creditSpread, dividends=[]):
    type = type.lower()
    if type == "crr" or type == "coxrossrubinstein":
        cls = BinomialCRRConvertibleEngine
    elif type == "jr" or type == "jarrowrudd":
        cls = BinomialJRConvertibleEngine
    elif type == "eqp":
        cls = BinomialEQPConvertibleEngine
    elif type == "trigeorgis":
        cls = BinomialTrigeorgisConvertibleEngine
    elif type == "tian":
        cls = BinomialTianConvertibleEngine
    elif type == "lr" or type == "leisenreimer":
        cls = BinomialLRConvertibleEngine
    elif type == "j4" or type == "joshi4":
        cls = BinomialJ4ConvertibleEngine
    else:
        raise RuntimeError("unknown binomial engine type: %s" % type);
    return cls(process, steps, creditSpread, dividends)

class Forward(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def settlementDate(self):
        return _ORE.Forward_settlementDate(self)

    def isExpired(self):
        return _ORE.Forward_isExpired(self)

    def calendar(self):
        return _ORE.Forward_calendar(self)

    def businessDayConvention(self):
        return _ORE.Forward_businessDayConvention(self)

    def dayCounter(self):
        return _ORE.Forward_dayCounter(self)

    def discountCurve(self):
        return _ORE.Forward_discountCurve(self)

    def incomeDiscountCurve(self):
        return _ORE.Forward_incomeDiscountCurve(self)

    def spotValue(self):
        return _ORE.Forward_spotValue(self)

    def spotIncome(self, incomeDiscountCurve):
        return _ORE.Forward_spotIncome(self, incomeDiscountCurve)

    def forwardValue(self):
        return _ORE.Forward_forwardValue(self)

    def impliedYield(self, underlyingSpotValue, forwardValue, settlementDate, compoundingConvention, dayCounter):
        return _ORE.Forward_impliedYield(self, underlyingSpotValue, forwardValue, settlementDate, compoundingConvention, dayCounter)
    __swig_destroy__ = _ORE.delete_Forward

# Register Forward in _ORE:
_ORE.Forward_swigregister(Forward)

class BondForward(Forward):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BondForward_swiginit(self, _ORE.new_BondForward(*args))

    def forwardPrice(self):
        return _ORE.BondForward_forwardPrice(self)

    def cleanForwardPrice(self):
        return _ORE.BondForward_cleanForwardPrice(self)
    __swig_destroy__ = _ORE.delete_BondForward

# Register BondForward in _ORE:
_ORE.BondForward_swigregister(BondForward)

class FixedRateBondForward(BondForward):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FixedRateBondForward_swiginit(self, _ORE.new_FixedRateBondForward(*args))
    __swig_destroy__ = _ORE.delete_FixedRateBondForward

# Register FixedRateBondForward in _ORE:
_ORE.FixedRateBondForward_swigregister(FixedRateBondForward)

class Futures(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IMM = _ORE.Futures_IMM
    ASX = _ORE.Futures_ASX

    def __init__(self):
        _ORE.Futures_swiginit(self, _ORE.new_Futures())
    __swig_destroy__ = _ORE.delete_Futures

# Register Futures in _ORE:
_ORE.Futures_swigregister(Futures)

class OvernightIndexFuture(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.OvernightIndexFuture_swiginit(self, _ORE.new_OvernightIndexFuture(*args))

    def convexityAdjustment(self):
        return _ORE.OvernightIndexFuture_convexityAdjustment(self)
    __swig_destroy__ = _ORE.delete_OvernightIndexFuture

# Register OvernightIndexFuture in _ORE:
_ORE.OvernightIndexFuture_swigregister(OvernightIndexFuture)

class Pillar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MaturityDate = _ORE.Pillar_MaturityDate
    LastRelevantDate = _ORE.Pillar_LastRelevantDate
    CustomDate = _ORE.Pillar_CustomDate

    def __init__(self):
        _ORE.Pillar_swiginit(self, _ORE.new_Pillar())
    __swig_destroy__ = _ORE.delete_Pillar

# Register Pillar in _ORE:
_ORE.Pillar_swigregister(Pillar)

class RateHelper(Observable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def quote(self):
        return _ORE.RateHelper_quote(self)

    def latestDate(self):
        return _ORE.RateHelper_latestDate(self)

    def earliestDate(self):
        return _ORE.RateHelper_earliestDate(self)

    def maturityDate(self):
        return _ORE.RateHelper_maturityDate(self)

    def latestRelevantDate(self):
        return _ORE.RateHelper_latestRelevantDate(self)

    def pillarDate(self):
        return _ORE.RateHelper_pillarDate(self)

    def impliedQuote(self):
        return _ORE.RateHelper_impliedQuote(self)

    def quoteError(self):
        return _ORE.RateHelper_quoteError(self)
    __swig_destroy__ = _ORE.delete_RateHelper

# Register RateHelper in _ORE:
_ORE.RateHelper_swigregister(RateHelper)

class DepositRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.DepositRateHelper_swiginit(self, _ORE.new_DepositRateHelper(*args))
    __swig_destroy__ = _ORE.delete_DepositRateHelper

# Register DepositRateHelper in _ORE:
_ORE.DepositRateHelper_swigregister(DepositRateHelper)

class FraRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FraRateHelper_swiginit(self, _ORE.new_FraRateHelper(*args))
    __swig_destroy__ = _ORE.delete_FraRateHelper

# Register FraRateHelper in _ORE:
_ORE.FraRateHelper_swigregister(FraRateHelper)

class FuturesRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FuturesRateHelper_swiginit(self, _ORE.new_FuturesRateHelper(*args))
    __swig_destroy__ = _ORE.delete_FuturesRateHelper

# Register FuturesRateHelper in _ORE:
_ORE.FuturesRateHelper_swigregister(FuturesRateHelper)

class SwapRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SwapRateHelper_swiginit(self, _ORE.new_SwapRateHelper(*args))

    def spread(self):
        return _ORE.SwapRateHelper_spread(self)

    def swap(self):
        return _ORE.SwapRateHelper_swap(self)
    __swig_destroy__ = _ORE.delete_SwapRateHelper

# Register SwapRateHelper in _ORE:
_ORE.SwapRateHelper_swigregister(SwapRateHelper)

class BondHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BondHelper_swiginit(self, _ORE.new_BondHelper(*args))

    def bond(self):
        return _ORE.BondHelper_bond(self)
    __swig_destroy__ = _ORE.delete_BondHelper

# Register BondHelper in _ORE:
_ORE.BondHelper_swigregister(BondHelper)

class FixedRateBondHelper(BondHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FixedRateBondHelper_swiginit(self, _ORE.new_FixedRateBondHelper(*args))

    def fixedRateBond(self):
        return _ORE.FixedRateBondHelper_fixedRateBond(self)
    __swig_destroy__ = _ORE.delete_FixedRateBondHelper

# Register FixedRateBondHelper in _ORE:
_ORE.FixedRateBondHelper_swigregister(FixedRateBondHelper)

class OISRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.OISRateHelper_swiginit(self, _ORE.new_OISRateHelper(*args, **kwargs))

    def swap(self):
        return _ORE.OISRateHelper_swap(self)
    __swig_destroy__ = _ORE.delete_OISRateHelper

# Register OISRateHelper in _ORE:
_ORE.OISRateHelper_swigregister(OISRateHelper)

class DatedOISRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.DatedOISRateHelper_swiginit(self, _ORE.new_DatedOISRateHelper(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_DatedOISRateHelper

# Register DatedOISRateHelper in _ORE:
_ORE.DatedOISRateHelper_swigregister(DatedOISRateHelper)

class FxSwapRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FxSwapRateHelper_swiginit(self, _ORE.new_FxSwapRateHelper(*args))
    __swig_destroy__ = _ORE.delete_FxSwapRateHelper

# Register FxSwapRateHelper in _ORE:
_ORE.FxSwapRateHelper_swigregister(FxSwapRateHelper)

class OvernightIndexFutureRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.OvernightIndexFutureRateHelper_swiginit(self, _ORE.new_OvernightIndexFutureRateHelper(*args))
    __swig_destroy__ = _ORE.delete_OvernightIndexFutureRateHelper

# Register OvernightIndexFutureRateHelper in _ORE:
_ORE.OvernightIndexFutureRateHelper_swigregister(OvernightIndexFutureRateHelper)

class SofrFutureRateHelper(OvernightIndexFutureRateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SofrFutureRateHelper_swiginit(self, _ORE.new_SofrFutureRateHelper(*args))
    __swig_destroy__ = _ORE.delete_SofrFutureRateHelper

# Register SofrFutureRateHelper in _ORE:
_ORE.SofrFutureRateHelper_swigregister(SofrFutureRateHelper)

class ConstNotionalCrossCurrencyBasisSwapRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, basis, tenor, fixingDays, calendar, convention, endOfMonth, baseCurrencyIndex, quoteCurrencyIndex, collateralCurve, isFxBaseCurrencyCollateralCurrency, isBasisOnFxBaseCurrencyLeg):
        _ORE.ConstNotionalCrossCurrencyBasisSwapRateHelper_swiginit(self, _ORE.new_ConstNotionalCrossCurrencyBasisSwapRateHelper(basis, tenor, fixingDays, calendar, convention, endOfMonth, baseCurrencyIndex, quoteCurrencyIndex, collateralCurve, isFxBaseCurrencyCollateralCurrency, isBasisOnFxBaseCurrencyLeg))
    __swig_destroy__ = _ORE.delete_ConstNotionalCrossCurrencyBasisSwapRateHelper

# Register ConstNotionalCrossCurrencyBasisSwapRateHelper in _ORE:
_ORE.ConstNotionalCrossCurrencyBasisSwapRateHelper_swigregister(ConstNotionalCrossCurrencyBasisSwapRateHelper)

class MtMCrossCurrencyBasisSwapRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, basis, tenor, fixingDays, calendar, convention, endOfMonth, baseCurrencyIndex, quoteCurrencyIndex, collateralCurve, isFxBaseCurrencyCollateralCurrency, isBasisOnFxBaseCurrencyLeg, isFxBaseCurrencyLegResettable):
        _ORE.MtMCrossCurrencyBasisSwapRateHelper_swiginit(self, _ORE.new_MtMCrossCurrencyBasisSwapRateHelper(basis, tenor, fixingDays, calendar, convention, endOfMonth, baseCurrencyIndex, quoteCurrencyIndex, collateralCurve, isFxBaseCurrencyCollateralCurrency, isBasisOnFxBaseCurrencyLeg, isFxBaseCurrencyLegResettable))
    __swig_destroy__ = _ORE.delete_MtMCrossCurrencyBasisSwapRateHelper

# Register MtMCrossCurrencyBasisSwapRateHelper in _ORE:
_ORE.MtMCrossCurrencyBasisSwapRateHelper_swigregister(MtMCrossCurrencyBasisSwapRateHelper)

class IborIborBasisSwapRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, basis, tenor, settlementDays, calendar, convention, endOfMonth, baseIndex, otherIndex, discountHandle, bootstrapBaseCurve):
        _ORE.IborIborBasisSwapRateHelper_swiginit(self, _ORE.new_IborIborBasisSwapRateHelper(basis, tenor, settlementDays, calendar, convention, endOfMonth, baseIndex, otherIndex, discountHandle, bootstrapBaseCurve))
    __swig_destroy__ = _ORE.delete_IborIborBasisSwapRateHelper

# Register IborIborBasisSwapRateHelper in _ORE:
_ORE.IborIborBasisSwapRateHelper_swigregister(IborIborBasisSwapRateHelper)

class OvernightIborBasisSwapRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.OvernightIborBasisSwapRateHelper_swiginit(self, _ORE.new_OvernightIborBasisSwapRateHelper(*args))
    __swig_destroy__ = _ORE.delete_OvernightIborBasisSwapRateHelper

# Register OvernightIborBasisSwapRateHelper in _ORE:
_ORE.OvernightIborBasisSwapRateHelper_swigregister(OvernightIborBasisSwapRateHelper)

class ArithmeticOISRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ArithmeticOISRateHelper_swiginit(self, _ORE.new_ArithmeticOISRateHelper(*args))

    def swap(self):
        return _ORE.ArithmeticOISRateHelper_swap(self)
    __swig_destroy__ = _ORE.delete_ArithmeticOISRateHelper

# Register ArithmeticOISRateHelper in _ORE:
_ORE.ArithmeticOISRateHelper_swigregister(ArithmeticOISRateHelper)

class RateHelperVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.RateHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.RateHelperVector___nonzero__(self)

    def __bool__(self):
        return _ORE.RateHelperVector___bool__(self)

    def __len__(self):
        return _ORE.RateHelperVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.RateHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.RateHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.RateHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.RateHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.RateHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.RateHelperVector___setitem__(self, *args)

    def pop(self):
        return _ORE.RateHelperVector_pop(self)

    def append(self, x):
        return _ORE.RateHelperVector_append(self, x)

    def empty(self):
        return _ORE.RateHelperVector_empty(self)

    def size(self):
        return _ORE.RateHelperVector_size(self)

    def swap(self, v):
        return _ORE.RateHelperVector_swap(self, v)

    def begin(self):
        return _ORE.RateHelperVector_begin(self)

    def end(self):
        return _ORE.RateHelperVector_end(self)

    def rbegin(self):
        return _ORE.RateHelperVector_rbegin(self)

    def rend(self):
        return _ORE.RateHelperVector_rend(self)

    def clear(self):
        return _ORE.RateHelperVector_clear(self)

    def get_allocator(self):
        return _ORE.RateHelperVector_get_allocator(self)

    def pop_back(self):
        return _ORE.RateHelperVector_pop_back(self)

    def erase(self, *args):
        return _ORE.RateHelperVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.RateHelperVector_swiginit(self, _ORE.new_RateHelperVector(*args))

    def push_back(self, x):
        return _ORE.RateHelperVector_push_back(self, x)

    def front(self):
        return _ORE.RateHelperVector_front(self)

    def back(self):
        return _ORE.RateHelperVector_back(self)

    def assign(self, n, x):
        return _ORE.RateHelperVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.RateHelperVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.RateHelperVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.RateHelperVector_reserve(self, n)

    def capacity(self):
        return _ORE.RateHelperVector_capacity(self)
    __swig_destroy__ = _ORE.delete_RateHelperVector

# Register RateHelperVector in _ORE:
_ORE.RateHelperVector_swigregister(RateHelperVector)

class BondHelperVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.BondHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.BondHelperVector___nonzero__(self)

    def __bool__(self):
        return _ORE.BondHelperVector___bool__(self)

    def __len__(self):
        return _ORE.BondHelperVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.BondHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.BondHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.BondHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.BondHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.BondHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.BondHelperVector___setitem__(self, *args)

    def pop(self):
        return _ORE.BondHelperVector_pop(self)

    def append(self, x):
        return _ORE.BondHelperVector_append(self, x)

    def empty(self):
        return _ORE.BondHelperVector_empty(self)

    def size(self):
        return _ORE.BondHelperVector_size(self)

    def swap(self, v):
        return _ORE.BondHelperVector_swap(self, v)

    def begin(self):
        return _ORE.BondHelperVector_begin(self)

    def end(self):
        return _ORE.BondHelperVector_end(self)

    def rbegin(self):
        return _ORE.BondHelperVector_rbegin(self)

    def rend(self):
        return _ORE.BondHelperVector_rend(self)

    def clear(self):
        return _ORE.BondHelperVector_clear(self)

    def get_allocator(self):
        return _ORE.BondHelperVector_get_allocator(self)

    def pop_back(self):
        return _ORE.BondHelperVector_pop_back(self)

    def erase(self, *args):
        return _ORE.BondHelperVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.BondHelperVector_swiginit(self, _ORE.new_BondHelperVector(*args))

    def push_back(self, x):
        return _ORE.BondHelperVector_push_back(self, x)

    def front(self):
        return _ORE.BondHelperVector_front(self)

    def back(self):
        return _ORE.BondHelperVector_back(self)

    def assign(self, n, x):
        return _ORE.BondHelperVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.BondHelperVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.BondHelperVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.BondHelperVector_reserve(self, n)

    def capacity(self):
        return _ORE.BondHelperVector_capacity(self)
    __swig_destroy__ = _ORE.delete_BondHelperVector

# Register BondHelperVector in _ORE:
_ORE.BondHelperVector_swigregister(BondHelperVector)


def as_depositratehelper(helper):
    return _ORE.as_depositratehelper(helper)

def as_fraratehelper(helper):
    return _ORE.as_fraratehelper(helper)

def as_swapratehelper(helper):
    return _ORE.as_swapratehelper(helper)

def as_oisratehelper(helper):
    return _ORE.as_oisratehelper(helper)

def as_constnotionalcrosscurrencybasisswapratehelper(helper):
    return _ORE.as_constnotionalcrosscurrencybasisswapratehelper(helper)

def as_mtmcrosscurrencybasisswapratehelper(helper):
    return _ORE.as_mtmcrosscurrencybasisswapratehelper(helper)
class Discount(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Discount_swiginit(self, _ORE.new_Discount())
    __swig_destroy__ = _ORE.delete_Discount

# Register Discount in _ORE:
_ORE.Discount_swigregister(Discount)

class ZeroYield(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.ZeroYield_swiginit(self, _ORE.new_ZeroYield())
    __swig_destroy__ = _ORE.delete_ZeroYield

# Register ZeroYield in _ORE:
_ORE.ZeroYield_swigregister(ZeroYield)

class ForwardRate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.ForwardRate_swiginit(self, _ORE.new_ForwardRate())
    __swig_destroy__ = _ORE.delete_ForwardRate

# Register ForwardRate in _ORE:
_ORE.ForwardRate_swigregister(ForwardRate)

class IterativeBootstrap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.IterativeBootstrap_swiginit(self, _ORE.new_IterativeBootstrap(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_IterativeBootstrap

# Register IterativeBootstrap in _ORE:
_ORE.IterativeBootstrap_swigregister(IterativeBootstrap)

class PiecewiseFlatForward(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.PiecewiseFlatForward_swiginit(self, _ORE.new_PiecewiseFlatForward(*args))

    def dates(self):
        return _ORE.PiecewiseFlatForward_dates(self)

    def times(self):
        return _ORE.PiecewiseFlatForward_times(self)

    def nodes(self):
        return _ORE.PiecewiseFlatForward_nodes(self)

    def recalculate(self):
        return _ORE.PiecewiseFlatForward_recalculate(self)

    def freeze(self):
        return _ORE.PiecewiseFlatForward_freeze(self)

    def unfreeze(self):
        return _ORE.PiecewiseFlatForward_unfreeze(self)
    __swig_destroy__ = _ORE.delete_PiecewiseFlatForward

# Register PiecewiseFlatForward in _ORE:
_ORE.PiecewiseFlatForward_swigregister(PiecewiseFlatForward)

class PiecewiseLogLinearDiscount(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.PiecewiseLogLinearDiscount_swiginit(self, _ORE.new_PiecewiseLogLinearDiscount(*args))

    def dates(self):
        return _ORE.PiecewiseLogLinearDiscount_dates(self)

    def times(self):
        return _ORE.PiecewiseLogLinearDiscount_times(self)

    def nodes(self):
        return _ORE.PiecewiseLogLinearDiscount_nodes(self)

    def recalculate(self):
        return _ORE.PiecewiseLogLinearDiscount_recalculate(self)

    def freeze(self):
        return _ORE.PiecewiseLogLinearDiscount_freeze(self)

    def unfreeze(self):
        return _ORE.PiecewiseLogLinearDiscount_unfreeze(self)
    __swig_destroy__ = _ORE.delete_PiecewiseLogLinearDiscount

# Register PiecewiseLogLinearDiscount in _ORE:
_ORE.PiecewiseLogLinearDiscount_swigregister(PiecewiseLogLinearDiscount)

class PiecewiseLinearForward(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.PiecewiseLinearForward_swiginit(self, _ORE.new_PiecewiseLinearForward(*args))

    def dates(self):
        return _ORE.PiecewiseLinearForward_dates(self)

    def times(self):
        return _ORE.PiecewiseLinearForward_times(self)

    def nodes(self):
        return _ORE.PiecewiseLinearForward_nodes(self)

    def recalculate(self):
        return _ORE.PiecewiseLinearForward_recalculate(self)

    def freeze(self):
        return _ORE.PiecewiseLinearForward_freeze(self)

    def unfreeze(self):
        return _ORE.PiecewiseLinearForward_unfreeze(self)
    __swig_destroy__ = _ORE.delete_PiecewiseLinearForward

# Register PiecewiseLinearForward in _ORE:
_ORE.PiecewiseLinearForward_swigregister(PiecewiseLinearForward)

class PiecewiseLinearZero(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.PiecewiseLinearZero_swiginit(self, _ORE.new_PiecewiseLinearZero(*args))

    def dates(self):
        return _ORE.PiecewiseLinearZero_dates(self)

    def times(self):
        return _ORE.PiecewiseLinearZero_times(self)

    def nodes(self):
        return _ORE.PiecewiseLinearZero_nodes(self)

    def recalculate(self):
        return _ORE.PiecewiseLinearZero_recalculate(self)

    def freeze(self):
        return _ORE.PiecewiseLinearZero_freeze(self)

    def unfreeze(self):
        return _ORE.PiecewiseLinearZero_unfreeze(self)
    __swig_destroy__ = _ORE.delete_PiecewiseLinearZero

# Register PiecewiseLinearZero in _ORE:
_ORE.PiecewiseLinearZero_swigregister(PiecewiseLinearZero)

class PiecewiseCubicZero(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.PiecewiseCubicZero_swiginit(self, _ORE.new_PiecewiseCubicZero(*args))

    def dates(self):
        return _ORE.PiecewiseCubicZero_dates(self)

    def times(self):
        return _ORE.PiecewiseCubicZero_times(self)

    def nodes(self):
        return _ORE.PiecewiseCubicZero_nodes(self)

    def recalculate(self):
        return _ORE.PiecewiseCubicZero_recalculate(self)

    def freeze(self):
        return _ORE.PiecewiseCubicZero_freeze(self)

    def unfreeze(self):
        return _ORE.PiecewiseCubicZero_unfreeze(self)
    __swig_destroy__ = _ORE.delete_PiecewiseCubicZero

# Register PiecewiseCubicZero in _ORE:
_ORE.PiecewiseCubicZero_swigregister(PiecewiseCubicZero)

class PiecewiseLogCubicDiscount(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.PiecewiseLogCubicDiscount_swiginit(self, _ORE.new_PiecewiseLogCubicDiscount(*args))

    def dates(self):
        return _ORE.PiecewiseLogCubicDiscount_dates(self)

    def times(self):
        return _ORE.PiecewiseLogCubicDiscount_times(self)

    def nodes(self):
        return _ORE.PiecewiseLogCubicDiscount_nodes(self)

    def recalculate(self):
        return _ORE.PiecewiseLogCubicDiscount_recalculate(self)

    def freeze(self):
        return _ORE.PiecewiseLogCubicDiscount_freeze(self)

    def unfreeze(self):
        return _ORE.PiecewiseLogCubicDiscount_unfreeze(self)
    __swig_destroy__ = _ORE.delete_PiecewiseLogCubicDiscount

# Register PiecewiseLogCubicDiscount in _ORE:
_ORE.PiecewiseLogCubicDiscount_swigregister(PiecewiseLogCubicDiscount)

class PiecewiseSplineCubicDiscount(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.PiecewiseSplineCubicDiscount_swiginit(self, _ORE.new_PiecewiseSplineCubicDiscount(*args))

    def dates(self):
        return _ORE.PiecewiseSplineCubicDiscount_dates(self)

    def times(self):
        return _ORE.PiecewiseSplineCubicDiscount_times(self)

    def nodes(self):
        return _ORE.PiecewiseSplineCubicDiscount_nodes(self)

    def recalculate(self):
        return _ORE.PiecewiseSplineCubicDiscount_recalculate(self)

    def freeze(self):
        return _ORE.PiecewiseSplineCubicDiscount_freeze(self)

    def unfreeze(self):
        return _ORE.PiecewiseSplineCubicDiscount_unfreeze(self)
    __swig_destroy__ = _ORE.delete_PiecewiseSplineCubicDiscount

# Register PiecewiseSplineCubicDiscount in _ORE:
_ORE.PiecewiseSplineCubicDiscount_swigregister(PiecewiseSplineCubicDiscount)

class PiecewiseKrugerZero(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.PiecewiseKrugerZero_swiginit(self, _ORE.new_PiecewiseKrugerZero(*args))

    def dates(self):
        return _ORE.PiecewiseKrugerZero_dates(self)

    def times(self):
        return _ORE.PiecewiseKrugerZero_times(self)

    def nodes(self):
        return _ORE.PiecewiseKrugerZero_nodes(self)

    def recalculate(self):
        return _ORE.PiecewiseKrugerZero_recalculate(self)

    def freeze(self):
        return _ORE.PiecewiseKrugerZero_freeze(self)

    def unfreeze(self):
        return _ORE.PiecewiseKrugerZero_unfreeze(self)
    __swig_destroy__ = _ORE.delete_PiecewiseKrugerZero

# Register PiecewiseKrugerZero in _ORE:
_ORE.PiecewiseKrugerZero_swigregister(PiecewiseKrugerZero)

class PiecewiseKrugerLogDiscount(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.PiecewiseKrugerLogDiscount_swiginit(self, _ORE.new_PiecewiseKrugerLogDiscount(*args))

    def dates(self):
        return _ORE.PiecewiseKrugerLogDiscount_dates(self)

    def times(self):
        return _ORE.PiecewiseKrugerLogDiscount_times(self)

    def nodes(self):
        return _ORE.PiecewiseKrugerLogDiscount_nodes(self)

    def recalculate(self):
        return _ORE.PiecewiseKrugerLogDiscount_recalculate(self)

    def freeze(self):
        return _ORE.PiecewiseKrugerLogDiscount_freeze(self)

    def unfreeze(self):
        return _ORE.PiecewiseKrugerLogDiscount_unfreeze(self)
    __swig_destroy__ = _ORE.delete_PiecewiseKrugerLogDiscount

# Register PiecewiseKrugerLogDiscount in _ORE:
_ORE.PiecewiseKrugerLogDiscount_swigregister(PiecewiseKrugerLogDiscount)

class PiecewiseConvexMonotoneZero(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.PiecewiseConvexMonotoneZero_swiginit(self, _ORE.new_PiecewiseConvexMonotoneZero(*args))

    def dates(self):
        return _ORE.PiecewiseConvexMonotoneZero_dates(self)

    def times(self):
        return _ORE.PiecewiseConvexMonotoneZero_times(self)

    def nodes(self):
        return _ORE.PiecewiseConvexMonotoneZero_nodes(self)

    def recalculate(self):
        return _ORE.PiecewiseConvexMonotoneZero_recalculate(self)

    def freeze(self):
        return _ORE.PiecewiseConvexMonotoneZero_freeze(self)

    def unfreeze(self):
        return _ORE.PiecewiseConvexMonotoneZero_unfreeze(self)
    __swig_destroy__ = _ORE.delete_PiecewiseConvexMonotoneZero

# Register PiecewiseConvexMonotoneZero in _ORE:
_ORE.PiecewiseConvexMonotoneZero_swigregister(PiecewiseConvexMonotoneZero)

class PiecewiseNaturalCubicZero(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.PiecewiseNaturalCubicZero_swiginit(self, _ORE.new_PiecewiseNaturalCubicZero(*args))

    def dates(self):
        return _ORE.PiecewiseNaturalCubicZero_dates(self)

    def times(self):
        return _ORE.PiecewiseNaturalCubicZero_times(self)

    def nodes(self):
        return _ORE.PiecewiseNaturalCubicZero_nodes(self)

    def recalculate(self):
        return _ORE.PiecewiseNaturalCubicZero_recalculate(self)

    def freeze(self):
        return _ORE.PiecewiseNaturalCubicZero_freeze(self)

    def unfreeze(self):
        return _ORE.PiecewiseNaturalCubicZero_unfreeze(self)
    __swig_destroy__ = _ORE.delete_PiecewiseNaturalCubicZero

# Register PiecewiseNaturalCubicZero in _ORE:
_ORE.PiecewiseNaturalCubicZero_swigregister(PiecewiseNaturalCubicZero)

class PiecewiseNaturalLogCubicDiscount(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.PiecewiseNaturalLogCubicDiscount_swiginit(self, _ORE.new_PiecewiseNaturalLogCubicDiscount(*args))

    def dates(self):
        return _ORE.PiecewiseNaturalLogCubicDiscount_dates(self)

    def times(self):
        return _ORE.PiecewiseNaturalLogCubicDiscount_times(self)

    def nodes(self):
        return _ORE.PiecewiseNaturalLogCubicDiscount_nodes(self)

    def recalculate(self):
        return _ORE.PiecewiseNaturalLogCubicDiscount_recalculate(self)

    def freeze(self):
        return _ORE.PiecewiseNaturalLogCubicDiscount_freeze(self)

    def unfreeze(self):
        return _ORE.PiecewiseNaturalLogCubicDiscount_unfreeze(self)
    __swig_destroy__ = _ORE.delete_PiecewiseNaturalLogCubicDiscount

# Register PiecewiseNaturalLogCubicDiscount in _ORE:
_ORE.PiecewiseNaturalLogCubicDiscount_swigregister(PiecewiseNaturalLogCubicDiscount)

class PiecewiseLogMixedLinearCubicDiscount(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.PiecewiseLogMixedLinearCubicDiscount_swiginit(self, _ORE.new_PiecewiseLogMixedLinearCubicDiscount(*args))

    def dates(self):
        return _ORE.PiecewiseLogMixedLinearCubicDiscount_dates(self)

    def times(self):
        return _ORE.PiecewiseLogMixedLinearCubicDiscount_times(self)

    def nodes(self):
        return _ORE.PiecewiseLogMixedLinearCubicDiscount_nodes(self)

    def recalculate(self):
        return _ORE.PiecewiseLogMixedLinearCubicDiscount_recalculate(self)

    def freeze(self):
        return _ORE.PiecewiseLogMixedLinearCubicDiscount_freeze(self)

    def unfreeze(self):
        return _ORE.PiecewiseLogMixedLinearCubicDiscount_unfreeze(self)
    __swig_destroy__ = _ORE.delete_PiecewiseLogMixedLinearCubicDiscount

# Register PiecewiseLogMixedLinearCubicDiscount in _ORE:
_ORE.PiecewiseLogMixedLinearCubicDiscount_swigregister(PiecewiseLogMixedLinearCubicDiscount)

class GlobalBootstrap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.GlobalBootstrap_swiginit(self, _ORE.new_GlobalBootstrap(*args))
    __swig_destroy__ = _ORE.delete_GlobalBootstrap

# Register GlobalBootstrap in _ORE:
_ORE.GlobalBootstrap_swigregister(GlobalBootstrap)

class GlobalLinearSimpleZeroCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, referenceDate, instruments, dayCounter, b):
        _ORE.GlobalLinearSimpleZeroCurve_swiginit(self, _ORE.new_GlobalLinearSimpleZeroCurve(referenceDate, instruments, dayCounter, b))

    def dates(self):
        return _ORE.GlobalLinearSimpleZeroCurve_dates(self)

    def times(self):
        return _ORE.GlobalLinearSimpleZeroCurve_times(self)

    def nodes(self):
        return _ORE.GlobalLinearSimpleZeroCurve_nodes(self)
    __swig_destroy__ = _ORE.delete_GlobalLinearSimpleZeroCurve

# Register GlobalLinearSimpleZeroCurve in _ORE:
_ORE.GlobalLinearSimpleZeroCurve_swigregister(GlobalLinearSimpleZeroCurve)

class DefaultProbabilityTermStructure(TermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def defaultProbability(self, *args):
        return _ORE.DefaultProbabilityTermStructure_defaultProbability(self, *args)

    def survivalProbability(self, *args):
        return _ORE.DefaultProbabilityTermStructure_survivalProbability(self, *args)

    def defaultDensity(self, *args):
        return _ORE.DefaultProbabilityTermStructure_defaultDensity(self, *args)

    def hazardRate(self, *args):
        return _ORE.DefaultProbabilityTermStructure_hazardRate(self, *args)
    __swig_destroy__ = _ORE.delete_DefaultProbabilityTermStructure

# Register DefaultProbabilityTermStructure in _ORE:
_ORE.DefaultProbabilityTermStructure_swigregister(DefaultProbabilityTermStructure)

class DefaultProbabilityTermStructureHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.DefaultProbabilityTermStructureHandle_swiginit(self, _ORE.new_DefaultProbabilityTermStructureHandle(*args))

    def __deref__(self):
        return _ORE.DefaultProbabilityTermStructureHandle___deref__(self)

    def currentLink(self):
        return _ORE.DefaultProbabilityTermStructureHandle_currentLink(self)

    def __nonzero__(self):
        return _ORE.DefaultProbabilityTermStructureHandle___nonzero__(self)

    def __bool__(self):
        return _ORE.DefaultProbabilityTermStructureHandle___bool__(self)

    def asObservable(self):
        return _ORE.DefaultProbabilityTermStructureHandle_asObservable(self)
    __swig_destroy__ = _ORE.delete_DefaultProbabilityTermStructureHandle

    def defaultProbability(self, *args):
        return _ORE.DefaultProbabilityTermStructureHandle_defaultProbability(self, *args)

    def survivalProbability(self, *args):
        return _ORE.DefaultProbabilityTermStructureHandle_survivalProbability(self, *args)

    def defaultDensity(self, *args):
        return _ORE.DefaultProbabilityTermStructureHandle_defaultDensity(self, *args)

    def hazardRate(self, *args):
        return _ORE.DefaultProbabilityTermStructureHandle_hazardRate(self, *args)

    def dayCounter(self):
        return _ORE.DefaultProbabilityTermStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _ORE.DefaultProbabilityTermStructureHandle_timeFromReference(self, date)

    def calendar(self):
        return _ORE.DefaultProbabilityTermStructureHandle_calendar(self)

    def referenceDate(self):
        return _ORE.DefaultProbabilityTermStructureHandle_referenceDate(self)

    def maxDate(self):
        return _ORE.DefaultProbabilityTermStructureHandle_maxDate(self)

    def maxTime(self):
        return _ORE.DefaultProbabilityTermStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        return _ORE.DefaultProbabilityTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _ORE.DefaultProbabilityTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _ORE.DefaultProbabilityTermStructureHandle_allowsExtrapolation(self)

# Register DefaultProbabilityTermStructureHandle in _ORE:
_ORE.DefaultProbabilityTermStructureHandle_swigregister(DefaultProbabilityTermStructureHandle)

class RelinkableDefaultProbabilityTermStructureHandle(DefaultProbabilityTermStructureHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.RelinkableDefaultProbabilityTermStructureHandle_swiginit(self, _ORE.new_RelinkableDefaultProbabilityTermStructureHandle(*args))

    def linkTo(self, arg2):
        return _ORE.RelinkableDefaultProbabilityTermStructureHandle_linkTo(self, arg2)

    def reset(self):
        return _ORE.RelinkableDefaultProbabilityTermStructureHandle_reset(self)
    __swig_destroy__ = _ORE.delete_RelinkableDefaultProbabilityTermStructureHandle

# Register RelinkableDefaultProbabilityTermStructureHandle in _ORE:
_ORE.RelinkableDefaultProbabilityTermStructureHandle_swigregister(RelinkableDefaultProbabilityTermStructureHandle)

class FlatHazardRate(DefaultProbabilityTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FlatHazardRate_swiginit(self, _ORE.new_FlatHazardRate(*args))
    __swig_destroy__ = _ORE.delete_FlatHazardRate

# Register FlatHazardRate in _ORE:
_ORE.FlatHazardRate_swigregister(FlatHazardRate)

class HazardRateCurve(DefaultProbabilityTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.HazardRateCurve_swiginit(self, _ORE.new_HazardRateCurve(*args))

    def dates(self):
        return _ORE.HazardRateCurve_dates(self)

    def hazardRates(self):
        return _ORE.HazardRateCurve_hazardRates(self)

    def nodes(self):
        return _ORE.HazardRateCurve_nodes(self)
    __swig_destroy__ = _ORE.delete_HazardRateCurve

# Register HazardRateCurve in _ORE:
_ORE.HazardRateCurve_swigregister(HazardRateCurve)

class DefaultDensityCurve(DefaultProbabilityTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.DefaultDensityCurve_swiginit(self, _ORE.new_DefaultDensityCurve(*args))

    def dates(self):
        return _ORE.DefaultDensityCurve_dates(self)

    def defaultDensities(self):
        return _ORE.DefaultDensityCurve_defaultDensities(self)

    def nodes(self):
        return _ORE.DefaultDensityCurve_nodes(self)
    __swig_destroy__ = _ORE.delete_DefaultDensityCurve

# Register DefaultDensityCurve in _ORE:
_ORE.DefaultDensityCurve_swigregister(DefaultDensityCurve)

class SurvivalProbabilityCurve(DefaultProbabilityTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SurvivalProbabilityCurve_swiginit(self, _ORE.new_SurvivalProbabilityCurve(*args))

    def dates(self):
        return _ORE.SurvivalProbabilityCurve_dates(self)

    def survivalProbabilities(self):
        return _ORE.SurvivalProbabilityCurve_survivalProbabilities(self)

    def nodes(self):
        return _ORE.SurvivalProbabilityCurve_nodes(self)
    __swig_destroy__ = _ORE.delete_SurvivalProbabilityCurve

# Register SurvivalProbabilityCurve in _ORE:
_ORE.SurvivalProbabilityCurve_swigregister(SurvivalProbabilityCurve)

class DefaultProbabilityHelper(Observable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def quote(self):
        return _ORE.DefaultProbabilityHelper_quote(self)

    def latestDate(self):
        return _ORE.DefaultProbabilityHelper_latestDate(self)

    def earliestDate(self):
        return _ORE.DefaultProbabilityHelper_earliestDate(self)

    def maturityDate(self):
        return _ORE.DefaultProbabilityHelper_maturityDate(self)

    def latestRelevantDate(self):
        return _ORE.DefaultProbabilityHelper_latestRelevantDate(self)

    def pillarDate(self):
        return _ORE.DefaultProbabilityHelper_pillarDate(self)

    def impliedQuote(self):
        return _ORE.DefaultProbabilityHelper_impliedQuote(self)

    def quoteError(self):
        return _ORE.DefaultProbabilityHelper_quoteError(self)
    __swig_destroy__ = _ORE.delete_DefaultProbabilityHelper

# Register DefaultProbabilityHelper in _ORE:
_ORE.DefaultProbabilityHelper_swigregister(DefaultProbabilityHelper)

class DefaultProbabilityHelperVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.DefaultProbabilityHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.DefaultProbabilityHelperVector___nonzero__(self)

    def __bool__(self):
        return _ORE.DefaultProbabilityHelperVector___bool__(self)

    def __len__(self):
        return _ORE.DefaultProbabilityHelperVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.DefaultProbabilityHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.DefaultProbabilityHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.DefaultProbabilityHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.DefaultProbabilityHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.DefaultProbabilityHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.DefaultProbabilityHelperVector___setitem__(self, *args)

    def pop(self):
        return _ORE.DefaultProbabilityHelperVector_pop(self)

    def append(self, x):
        return _ORE.DefaultProbabilityHelperVector_append(self, x)

    def empty(self):
        return _ORE.DefaultProbabilityHelperVector_empty(self)

    def size(self):
        return _ORE.DefaultProbabilityHelperVector_size(self)

    def swap(self, v):
        return _ORE.DefaultProbabilityHelperVector_swap(self, v)

    def begin(self):
        return _ORE.DefaultProbabilityHelperVector_begin(self)

    def end(self):
        return _ORE.DefaultProbabilityHelperVector_end(self)

    def rbegin(self):
        return _ORE.DefaultProbabilityHelperVector_rbegin(self)

    def rend(self):
        return _ORE.DefaultProbabilityHelperVector_rend(self)

    def clear(self):
        return _ORE.DefaultProbabilityHelperVector_clear(self)

    def get_allocator(self):
        return _ORE.DefaultProbabilityHelperVector_get_allocator(self)

    def pop_back(self):
        return _ORE.DefaultProbabilityHelperVector_pop_back(self)

    def erase(self, *args):
        return _ORE.DefaultProbabilityHelperVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.DefaultProbabilityHelperVector_swiginit(self, _ORE.new_DefaultProbabilityHelperVector(*args))

    def push_back(self, x):
        return _ORE.DefaultProbabilityHelperVector_push_back(self, x)

    def front(self):
        return _ORE.DefaultProbabilityHelperVector_front(self)

    def back(self):
        return _ORE.DefaultProbabilityHelperVector_back(self)

    def assign(self, n, x):
        return _ORE.DefaultProbabilityHelperVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.DefaultProbabilityHelperVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.DefaultProbabilityHelperVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.DefaultProbabilityHelperVector_reserve(self, n)

    def capacity(self):
        return _ORE.DefaultProbabilityHelperVector_capacity(self)
    __swig_destroy__ = _ORE.delete_DefaultProbabilityHelperVector

# Register DefaultProbabilityHelperVector in _ORE:
_ORE.DefaultProbabilityHelperVector_swigregister(DefaultProbabilityHelperVector)

class SpreadCdsHelper(DefaultProbabilityHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SpreadCdsHelper_swiginit(self, _ORE.new_SpreadCdsHelper(*args))
    __swig_destroy__ = _ORE.delete_SpreadCdsHelper

# Register SpreadCdsHelper in _ORE:
_ORE.SpreadCdsHelper_swigregister(SpreadCdsHelper)

class UpfrontCdsHelper(DefaultProbabilityHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.UpfrontCdsHelper_swiginit(self, _ORE.new_UpfrontCdsHelper(*args))
    __swig_destroy__ = _ORE.delete_UpfrontCdsHelper

# Register UpfrontCdsHelper in _ORE:
_ORE.UpfrontCdsHelper_swigregister(UpfrontCdsHelper)

class HazardRate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.HazardRate_swiginit(self, _ORE.new_HazardRate())
    __swig_destroy__ = _ORE.delete_HazardRate

# Register HazardRate in _ORE:
_ORE.HazardRate_swigregister(HazardRate)

class DefaultDensity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.DefaultDensity_swiginit(self, _ORE.new_DefaultDensity())
    __swig_destroy__ = _ORE.delete_DefaultDensity

# Register DefaultDensity in _ORE:
_ORE.DefaultDensity_swigregister(DefaultDensity)

class PiecewiseFlatHazardRate(DefaultProbabilityTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.PiecewiseFlatHazardRate_swiginit(self, _ORE.new_PiecewiseFlatHazardRate(*args))

    def dates(self):
        return _ORE.PiecewiseFlatHazardRate_dates(self)

    def times(self):
        return _ORE.PiecewiseFlatHazardRate_times(self)

    def nodes(self):
        return _ORE.PiecewiseFlatHazardRate_nodes(self)
    __swig_destroy__ = _ORE.delete_PiecewiseFlatHazardRate

# Register PiecewiseFlatHazardRate in _ORE:
_ORE.PiecewiseFlatHazardRate_swigregister(PiecewiseFlatHazardRate)

class RiskyBondEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, defaultCurve, recoveryRate, riskFreeCurve):
        _ORE.RiskyBondEngine_swiginit(self, _ORE.new_RiskyBondEngine(defaultCurve, recoveryRate, riskFreeCurve))
    __swig_destroy__ = _ORE.delete_RiskyBondEngine

# Register RiskyBondEngine in _ORE:
_ORE.RiskyBondEngine_swigregister(RiskyBondEngine)

class Protection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Buyer = _ORE.Protection_Buyer
    Seller = _ORE.Protection_Seller

    def __init__(self):
        _ORE.Protection_swiginit(self, _ORE.new_Protection())
    __swig_destroy__ = _ORE.delete_Protection

# Register Protection in _ORE:
_ORE.Protection_swigregister(Protection)

class Claim(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def amount(self, defaultDate, notional, recoveryRate):
        return _ORE.Claim_amount(self, defaultDate, notional, recoveryRate)
    __swig_destroy__ = _ORE.delete_Claim

# Register Claim in _ORE:
_ORE.Claim_swigregister(Claim)

class FaceValueClaim(Claim):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.FaceValueClaim_swiginit(self, _ORE.new_FaceValueClaim())
    __swig_destroy__ = _ORE.delete_FaceValueClaim

# Register FaceValueClaim in _ORE:
_ORE.FaceValueClaim_swigregister(FaceValueClaim)

class FaceValueAccrualClaim(Claim):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, bond):
        _ORE.FaceValueAccrualClaim_swiginit(self, _ORE.new_FaceValueAccrualClaim(bond))
    __swig_destroy__ = _ORE.delete_FaceValueAccrualClaim

# Register FaceValueAccrualClaim in _ORE:
_ORE.FaceValueAccrualClaim_swigregister(FaceValueAccrualClaim)

class CreditDefaultSwap(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Midpoint = _ORE.CreditDefaultSwap_Midpoint
    ISDA = _ORE.CreditDefaultSwap_ISDA

    def __init__(self, *args):
        _ORE.CreditDefaultSwap_swiginit(self, _ORE.new_CreditDefaultSwap(*args))

    def side(self):
        return _ORE.CreditDefaultSwap_side(self)

    def notional(self):
        return _ORE.CreditDefaultSwap_notional(self)

    def runningSpread(self):
        return _ORE.CreditDefaultSwap_runningSpread(self)

    def upfront(self):
        return _ORE.CreditDefaultSwap_upfront(self)

    def settlesAccrual(self):
        return _ORE.CreditDefaultSwap_settlesAccrual(self)

    def paysAtDefaultTime(self):
        return _ORE.CreditDefaultSwap_paysAtDefaultTime(self)

    def coupons(self):
        return _ORE.CreditDefaultSwap_coupons(self)

    def protectionStartDate(self):
        return _ORE.CreditDefaultSwap_protectionStartDate(self)

    def protectionEndDate(self):
        return _ORE.CreditDefaultSwap_protectionEndDate(self)

    def rebatesAccrual(self):
        return _ORE.CreditDefaultSwap_rebatesAccrual(self)

    def upfrontPayment(self):
        return _ORE.CreditDefaultSwap_upfrontPayment(self)

    def accrualRebate(self):
        return _ORE.CreditDefaultSwap_accrualRebate(self)

    def tradeDate(self):
        return _ORE.CreditDefaultSwap_tradeDate(self)

    def cashSettlementDays(self):
        return _ORE.CreditDefaultSwap_cashSettlementDays(self)

    def fairUpfront(self):
        return _ORE.CreditDefaultSwap_fairUpfront(self)

    def fairSpread(self):
        return _ORE.CreditDefaultSwap_fairSpread(self)

    def couponLegBPS(self):
        return _ORE.CreditDefaultSwap_couponLegBPS(self)

    def upfrontBPS(self):
        return _ORE.CreditDefaultSwap_upfrontBPS(self)

    def couponLegNPV(self):
        return _ORE.CreditDefaultSwap_couponLegNPV(self)

    def defaultLegNPV(self):
        return _ORE.CreditDefaultSwap_defaultLegNPV(self)

    def upfrontNPV(self):
        return _ORE.CreditDefaultSwap_upfrontNPV(self)

    def accrualRebateNPV(self):
        return _ORE.CreditDefaultSwap_accrualRebateNPV(self)

    def impliedHazardRate(self, *args):
        return _ORE.CreditDefaultSwap_impliedHazardRate(self, *args)

    def conventionalSpread(self, *args):
        return _ORE.CreditDefaultSwap_conventionalSpread(self, *args)
    __swig_destroy__ = _ORE.delete_CreditDefaultSwap

# Register CreditDefaultSwap in _ORE:
_ORE.CreditDefaultSwap_swigregister(CreditDefaultSwap)

class MidPointCdsEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, probability, recoveryRate, discountCurve):
        _ORE.MidPointCdsEngine_swiginit(self, _ORE.new_MidPointCdsEngine(probability, recoveryRate, discountCurve))
    __swig_destroy__ = _ORE.delete_MidPointCdsEngine

# Register MidPointCdsEngine in _ORE:
_ORE.MidPointCdsEngine_swigregister(MidPointCdsEngine)

class IntegralCdsEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, integrationStep, probability, recoveryRate, discountCurve, includeSettlementDateFlows=False):
        _ORE.IntegralCdsEngine_swiginit(self, _ORE.new_IntegralCdsEngine(integrationStep, probability, recoveryRate, discountCurve, includeSettlementDateFlows))
    __swig_destroy__ = _ORE.delete_IntegralCdsEngine

# Register IntegralCdsEngine in _ORE:
_ORE.IntegralCdsEngine_swigregister(IntegralCdsEngine)

class IsdaCdsEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoFix = _ORE.IsdaCdsEngine_NoFix
    Taylor = _ORE.IsdaCdsEngine_Taylor
    HalfDayBias = _ORE.IsdaCdsEngine_HalfDayBias
    NoBias = _ORE.IsdaCdsEngine_NoBias
    Flat = _ORE.IsdaCdsEngine_Flat
    Piecewise = _ORE.IsdaCdsEngine_Piecewise

    def __init__(self, *args):
        _ORE.IsdaCdsEngine_swiginit(self, _ORE.new_IsdaCdsEngine(*args))
    __swig_destroy__ = _ORE.delete_IsdaCdsEngine

# Register IsdaCdsEngine in _ORE:
_ORE.IsdaCdsEngine_swigregister(IsdaCdsEngine)

class CdsOption(Option):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, swap, exercise, knocksOut=True):
        _ORE.CdsOption_swiginit(self, _ORE.new_CdsOption(swap, exercise, knocksOut))

    def atmRate(self):
        return _ORE.CdsOption_atmRate(self)

    def riskyAnnuity(self):
        return _ORE.CdsOption_riskyAnnuity(self)

    def impliedVolatility(self, price, termStructure, arg4, recoveryRate, accuracy=1.e-4, maxEvaluations=100, minVol=1.0e-7, maxVol=4.0):
        return _ORE.CdsOption_impliedVolatility(self, price, termStructure, arg4, recoveryRate, accuracy, maxEvaluations, minVol, maxVol)
    __swig_destroy__ = _ORE.delete_CdsOption

# Register CdsOption in _ORE:
_ORE.CdsOption_swigregister(CdsOption)

class BlackCdsOptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, recoveryRate, termStructure, vol):
        _ORE.BlackCdsOptionEngine_swiginit(self, _ORE.new_BlackCdsOptionEngine(arg2, recoveryRate, termStructure, vol))

    def termStructure(self):
        return _ORE.BlackCdsOptionEngine_termStructure(self)

    def volatility(self):
        return _ORE.BlackCdsOptionEngine_volatility(self)
    __swig_destroy__ = _ORE.delete_BlackCdsOptionEngine

# Register BlackCdsOptionEngine in _ORE:
_ORE.BlackCdsOptionEngine_swigregister(BlackCdsOptionEngine)

class DiscountCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.DiscountCurve_swiginit(self, _ORE.new_DiscountCurve(*args))

    def times(self):
        return _ORE.DiscountCurve_times(self)

    def data(self):
        return _ORE.DiscountCurve_data(self)

    def dates(self):
        return _ORE.DiscountCurve_dates(self)

    def discounts(self):
        return _ORE.DiscountCurve_discounts(self)

    def nodes(self):
        return _ORE.DiscountCurve_nodes(self)
    __swig_destroy__ = _ORE.delete_DiscountCurve

# Register DiscountCurve in _ORE:
_ORE.DiscountCurve_swigregister(DiscountCurve)

class MonotonicLogCubicDiscountCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.MonotonicLogCubicDiscountCurve_swiginit(self, _ORE.new_MonotonicLogCubicDiscountCurve(*args))

    def times(self):
        return _ORE.MonotonicLogCubicDiscountCurve_times(self)

    def data(self):
        return _ORE.MonotonicLogCubicDiscountCurve_data(self)

    def dates(self):
        return _ORE.MonotonicLogCubicDiscountCurve_dates(self)

    def discounts(self):
        return _ORE.MonotonicLogCubicDiscountCurve_discounts(self)

    def nodes(self):
        return _ORE.MonotonicLogCubicDiscountCurve_nodes(self)
    __swig_destroy__ = _ORE.delete_MonotonicLogCubicDiscountCurve

# Register MonotonicLogCubicDiscountCurve in _ORE:
_ORE.MonotonicLogCubicDiscountCurve_swigregister(MonotonicLogCubicDiscountCurve)

class NaturalCubicDiscountCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.NaturalCubicDiscountCurve_swiginit(self, _ORE.new_NaturalCubicDiscountCurve(*args))

    def times(self):
        return _ORE.NaturalCubicDiscountCurve_times(self)

    def data(self):
        return _ORE.NaturalCubicDiscountCurve_data(self)

    def dates(self):
        return _ORE.NaturalCubicDiscountCurve_dates(self)

    def discounts(self):
        return _ORE.NaturalCubicDiscountCurve_discounts(self)

    def nodes(self):
        return _ORE.NaturalCubicDiscountCurve_nodes(self)
    __swig_destroy__ = _ORE.delete_NaturalCubicDiscountCurve

# Register NaturalCubicDiscountCurve in _ORE:
_ORE.NaturalCubicDiscountCurve_swigregister(NaturalCubicDiscountCurve)

class KrugerLogDiscountCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.KrugerLogDiscountCurve_swiginit(self, _ORE.new_KrugerLogDiscountCurve(*args))

    def times(self):
        return _ORE.KrugerLogDiscountCurve_times(self)

    def data(self):
        return _ORE.KrugerLogDiscountCurve_data(self)

    def dates(self):
        return _ORE.KrugerLogDiscountCurve_dates(self)

    def discounts(self):
        return _ORE.KrugerLogDiscountCurve_discounts(self)

    def nodes(self):
        return _ORE.KrugerLogDiscountCurve_nodes(self)
    __swig_destroy__ = _ORE.delete_KrugerLogDiscountCurve

# Register KrugerLogDiscountCurve in _ORE:
_ORE.KrugerLogDiscountCurve_swigregister(KrugerLogDiscountCurve)

class NaturalLogCubicDiscountCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.NaturalLogCubicDiscountCurve_swiginit(self, _ORE.new_NaturalLogCubicDiscountCurve(*args))

    def times(self):
        return _ORE.NaturalLogCubicDiscountCurve_times(self)

    def data(self):
        return _ORE.NaturalLogCubicDiscountCurve_data(self)

    def dates(self):
        return _ORE.NaturalLogCubicDiscountCurve_dates(self)

    def discounts(self):
        return _ORE.NaturalLogCubicDiscountCurve_discounts(self)

    def nodes(self):
        return _ORE.NaturalLogCubicDiscountCurve_nodes(self)
    __swig_destroy__ = _ORE.delete_NaturalLogCubicDiscountCurve

# Register NaturalLogCubicDiscountCurve in _ORE:
_ORE.NaturalLogCubicDiscountCurve_swigregister(NaturalLogCubicDiscountCurve)

class LogMixedLinearCubicDiscountCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.LogMixedLinearCubicDiscountCurve_swiginit(self, _ORE.new_LogMixedLinearCubicDiscountCurve(*args))

    def times(self):
        return _ORE.LogMixedLinearCubicDiscountCurve_times(self)

    def data(self):
        return _ORE.LogMixedLinearCubicDiscountCurve_data(self)

    def dates(self):
        return _ORE.LogMixedLinearCubicDiscountCurve_dates(self)

    def discounts(self):
        return _ORE.LogMixedLinearCubicDiscountCurve_discounts(self)

    def nodes(self):
        return _ORE.LogMixedLinearCubicDiscountCurve_nodes(self)
    __swig_destroy__ = _ORE.delete_LogMixedLinearCubicDiscountCurve

# Register LogMixedLinearCubicDiscountCurve in _ORE:
_ORE.LogMixedLinearCubicDiscountCurve_swigregister(LogMixedLinearCubicDiscountCurve)

class NormalDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, average=0.0, sigma=1.0):
        _ORE.NormalDistribution_swiginit(self, _ORE.new_NormalDistribution(average, sigma))

    def __call__(self, x):
        return _ORE.NormalDistribution___call__(self, x)

    def derivative(self, x):
        return _ORE.NormalDistribution_derivative(self, x)
    __swig_destroy__ = _ORE.delete_NormalDistribution

# Register NormalDistribution in _ORE:
_ORE.NormalDistribution_swigregister(NormalDistribution)

class CumulativeNormalDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, average=0.0, sigma=1.0):
        _ORE.CumulativeNormalDistribution_swiginit(self, _ORE.new_CumulativeNormalDistribution(average, sigma))

    def __call__(self, x):
        return _ORE.CumulativeNormalDistribution___call__(self, x)

    def derivative(self, x):
        return _ORE.CumulativeNormalDistribution_derivative(self, x)
    __swig_destroy__ = _ORE.delete_CumulativeNormalDistribution

# Register CumulativeNormalDistribution in _ORE:
_ORE.CumulativeNormalDistribution_swigregister(CumulativeNormalDistribution)

class InverseCumulativeNormal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, average=0.0, sigma=1.0):
        _ORE.InverseCumulativeNormal_swiginit(self, _ORE.new_InverseCumulativeNormal(average, sigma))

    def __call__(self, x):
        return _ORE.InverseCumulativeNormal___call__(self, x)
    __swig_destroy__ = _ORE.delete_InverseCumulativeNormal

# Register InverseCumulativeNormal in _ORE:
_ORE.InverseCumulativeNormal_swigregister(InverseCumulativeNormal)

class MoroInverseCumulativeNormal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, average=0.0, sigma=1.0):
        _ORE.MoroInverseCumulativeNormal_swiginit(self, _ORE.new_MoroInverseCumulativeNormal(average, sigma))

    def __call__(self, x):
        return _ORE.MoroInverseCumulativeNormal___call__(self, x)
    __swig_destroy__ = _ORE.delete_MoroInverseCumulativeNormal

# Register MoroInverseCumulativeNormal in _ORE:
_ORE.MoroInverseCumulativeNormal_swigregister(MoroInverseCumulativeNormal)

class BivariateCumulativeNormalDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rho):
        _ORE.BivariateCumulativeNormalDistribution_swiginit(self, _ORE.new_BivariateCumulativeNormalDistribution(rho))

    def __call__(self, x, y):
        return _ORE.BivariateCumulativeNormalDistribution___call__(self, x, y)
    __swig_destroy__ = _ORE.delete_BivariateCumulativeNormalDistribution

# Register BivariateCumulativeNormalDistribution in _ORE:
_ORE.BivariateCumulativeNormalDistribution_swigregister(BivariateCumulativeNormalDistribution)

class BinomialDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p, n):
        _ORE.BinomialDistribution_swiginit(self, _ORE.new_BinomialDistribution(p, n))

    def __call__(self, k):
        return _ORE.BinomialDistribution___call__(self, k)
    __swig_destroy__ = _ORE.delete_BinomialDistribution

# Register BinomialDistribution in _ORE:
_ORE.BinomialDistribution_swigregister(BinomialDistribution)

class CumulativeBinomialDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p, n):
        _ORE.CumulativeBinomialDistribution_swiginit(self, _ORE.new_CumulativeBinomialDistribution(p, n))

    def __call__(self, k):
        return _ORE.CumulativeBinomialDistribution___call__(self, k)
    __swig_destroy__ = _ORE.delete_CumulativeBinomialDistribution

# Register CumulativeBinomialDistribution in _ORE:
_ORE.CumulativeBinomialDistribution_swigregister(CumulativeBinomialDistribution)

class BivariateCumulativeNormalDistributionDr78(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rho):
        _ORE.BivariateCumulativeNormalDistributionDr78_swiginit(self, _ORE.new_BivariateCumulativeNormalDistributionDr78(rho))

    def __call__(self, a, b):
        return _ORE.BivariateCumulativeNormalDistributionDr78___call__(self, a, b)
    __swig_destroy__ = _ORE.delete_BivariateCumulativeNormalDistributionDr78

# Register BivariateCumulativeNormalDistributionDr78 in _ORE:
_ORE.BivariateCumulativeNormalDistributionDr78_swigregister(BivariateCumulativeNormalDistributionDr78)

class BivariateCumulativeNormalDistributionWe04DP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rho):
        _ORE.BivariateCumulativeNormalDistributionWe04DP_swiginit(self, _ORE.new_BivariateCumulativeNormalDistributionWe04DP(rho))

    def __call__(self, a, b):
        return _ORE.BivariateCumulativeNormalDistributionWe04DP___call__(self, a, b)
    __swig_destroy__ = _ORE.delete_BivariateCumulativeNormalDistributionWe04DP

# Register BivariateCumulativeNormalDistributionWe04DP in _ORE:
_ORE.BivariateCumulativeNormalDistributionWe04DP_swigregister(BivariateCumulativeNormalDistributionWe04DP)

class CumulativeChiSquareDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, df):
        _ORE.CumulativeChiSquareDistribution_swiginit(self, _ORE.new_CumulativeChiSquareDistribution(df))

    def __call__(self, x):
        return _ORE.CumulativeChiSquareDistribution___call__(self, x)
    __swig_destroy__ = _ORE.delete_CumulativeChiSquareDistribution

# Register CumulativeChiSquareDistribution in _ORE:
_ORE.CumulativeChiSquareDistribution_swigregister(CumulativeChiSquareDistribution)

class NonCentralCumulativeChiSquareDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, df, ncp):
        _ORE.NonCentralCumulativeChiSquareDistribution_swiginit(self, _ORE.new_NonCentralCumulativeChiSquareDistribution(df, ncp))

    def __call__(self, x):
        return _ORE.NonCentralCumulativeChiSquareDistribution___call__(self, x)
    __swig_destroy__ = _ORE.delete_NonCentralCumulativeChiSquareDistribution

# Register NonCentralCumulativeChiSquareDistribution in _ORE:
_ORE.NonCentralCumulativeChiSquareDistribution_swigregister(NonCentralCumulativeChiSquareDistribution)

class InverseNonCentralCumulativeChiSquareDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, df, ncp, maxEvaluations=10, accuracy=1e-8):
        _ORE.InverseNonCentralCumulativeChiSquareDistribution_swiginit(self, _ORE.new_InverseNonCentralCumulativeChiSquareDistribution(df, ncp, maxEvaluations, accuracy))

    def __call__(self, x):
        return _ORE.InverseNonCentralCumulativeChiSquareDistribution___call__(self, x)
    __swig_destroy__ = _ORE.delete_InverseNonCentralCumulativeChiSquareDistribution

# Register InverseNonCentralCumulativeChiSquareDistribution in _ORE:
_ORE.InverseNonCentralCumulativeChiSquareDistribution_swigregister(InverseNonCentralCumulativeChiSquareDistribution)

class CumulativeGammaDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a):
        _ORE.CumulativeGammaDistribution_swiginit(self, _ORE.new_CumulativeGammaDistribution(a))

    def __call__(self, x):
        return _ORE.CumulativeGammaDistribution___call__(self, x)
    __swig_destroy__ = _ORE.delete_CumulativeGammaDistribution

# Register CumulativeGammaDistribution in _ORE:
_ORE.CumulativeGammaDistribution_swigregister(CumulativeGammaDistribution)

class GammaFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def logValue(self, x):
        return _ORE.GammaFunction_logValue(self, x)

    def __init__(self):
        _ORE.GammaFunction_swiginit(self, _ORE.new_GammaFunction())
    __swig_destroy__ = _ORE.delete_GammaFunction

# Register GammaFunction in _ORE:
_ORE.GammaFunction_swigregister(GammaFunction)

class PoissonDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mu):
        _ORE.PoissonDistribution_swiginit(self, _ORE.new_PoissonDistribution(mu))

    def __call__(self, k):
        return _ORE.PoissonDistribution___call__(self, k)
    __swig_destroy__ = _ORE.delete_PoissonDistribution

# Register PoissonDistribution in _ORE:
_ORE.PoissonDistribution_swigregister(PoissonDistribution)

class CumulativePoissonDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mu):
        _ORE.CumulativePoissonDistribution_swiginit(self, _ORE.new_CumulativePoissonDistribution(mu))

    def __call__(self, k):
        return _ORE.CumulativePoissonDistribution___call__(self, k)
    __swig_destroy__ = _ORE.delete_CumulativePoissonDistribution

# Register CumulativePoissonDistribution in _ORE:
_ORE.CumulativePoissonDistribution_swigregister(CumulativePoissonDistribution)

class InverseCumulativePoisson(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lambda_parameter):
        _ORE.InverseCumulativePoisson_swiginit(self, _ORE.new_InverseCumulativePoisson(lambda_parameter))

    def __call__(self, x):
        return _ORE.InverseCumulativePoisson___call__(self, x)
    __swig_destroy__ = _ORE.delete_InverseCumulativePoisson

# Register InverseCumulativePoisson in _ORE:
_ORE.InverseCumulativePoisson_swigregister(InverseCumulativePoisson)

class StudentDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n):
        _ORE.StudentDistribution_swiginit(self, _ORE.new_StudentDistribution(n))

    def __call__(self, x):
        return _ORE.StudentDistribution___call__(self, x)
    __swig_destroy__ = _ORE.delete_StudentDistribution

# Register StudentDistribution in _ORE:
_ORE.StudentDistribution_swigregister(StudentDistribution)

class CumulativeStudentDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n):
        _ORE.CumulativeStudentDistribution_swiginit(self, _ORE.new_CumulativeStudentDistribution(n))

    def __call__(self, x):
        return _ORE.CumulativeStudentDistribution___call__(self, x)
    __swig_destroy__ = _ORE.delete_CumulativeStudentDistribution

# Register CumulativeStudentDistribution in _ORE:
_ORE.CumulativeStudentDistribution_swigregister(CumulativeStudentDistribution)

class InverseCumulativeStudent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n, accuracy=1e-6, maxIterations=50):
        _ORE.InverseCumulativeStudent_swiginit(self, _ORE.new_InverseCumulativeStudent(n, accuracy, maxIterations))

    def __call__(self, x):
        return _ORE.InverseCumulativeStudent___call__(self, x)
    __swig_destroy__ = _ORE.delete_InverseCumulativeStudent

# Register InverseCumulativeStudent in _ORE:
_ORE.InverseCumulativeStudent_swigregister(InverseCumulativeStudent)

class Money(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Money_swiginit(self, _ORE.new_Money(*args))

    def currency(self):
        return _ORE.Money_currency(self)

    def value(self):
        return _ORE.Money_value(self)

    def rounded(self):
        return _ORE.Money_rounded(self)

    def __pos__(self):
        return _ORE.Money___pos__(self)

    def __neg__(self):
        return _ORE.Money___neg__(self)

    def __add__(self, m):
        return _ORE.Money___add__(self, m)

    def __sub__(self, m):
        return _ORE.Money___sub__(self, m)

    def __mul__(self, x):
        return _ORE.Money___mul__(self, x)

    def __truediv__(self, *args):
        return _ORE.Money___truediv__(self, *args)
    __div__ = __truediv__



    def __rmul__(self, x):
        return _ORE.Money___rmul__(self, x)

    def __lt__(self, other):
        return _ORE.Money___lt__(self, other)

    def __gt__(self, other):
        return _ORE.Money___gt__(self, other)

    def __le__(self, other):
        return _ORE.Money___le__(self, other)

    def __ge__(self, other):
        return _ORE.Money___ge__(self, other)

    def __cmp__(self, other):
        return _ORE.Money___cmp__(self, other)

    def __str__(self):
        return _ORE.Money___str__(self)
    NoConversion = _ORE.Money_NoConversion
    BaseCurrencyConversion = _ORE.Money_BaseCurrencyConversion
    AutomatedConversion = _ORE.Money_AutomatedConversion

    @staticmethod
    def setConversionType(type):
        return _ORE.Money_setConversionType(type)

    @staticmethod
    def setBaseCurrency(c):
        return _ORE.Money_setBaseCurrency(c)
    __swig_destroy__ = _ORE.delete_Money

# Register Money in _ORE:
_ORE.Money_swigregister(Money)

def Money_setConversionType(type):
    return _ORE.Money_setConversionType(type)

def Money_setBaseCurrency(c):
    return _ORE.Money_setBaseCurrency(c)

class ExchangeRate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Direct = _ORE.ExchangeRate_Direct
    Derived = _ORE.ExchangeRate_Derived

    def __init__(self, source, target, rate):
        _ORE.ExchangeRate_swiginit(self, _ORE.new_ExchangeRate(source, target, rate))

    def source(self):
        return _ORE.ExchangeRate_source(self)

    def target(self):
        return _ORE.ExchangeRate_target(self)

    def type(self):
        return _ORE.ExchangeRate_type(self)

    def rate(self):
        return _ORE.ExchangeRate_rate(self)

    def exchange(self, amount):
        return _ORE.ExchangeRate_exchange(self, amount)

    @staticmethod
    def chain(r1, r2):
        return _ORE.ExchangeRate_chain(r1, r2)
    __swig_destroy__ = _ORE.delete_ExchangeRate

# Register ExchangeRate in _ORE:
_ORE.ExchangeRate_swigregister(ExchangeRate)

def ExchangeRate_chain(r1, r2):
    return _ORE.ExchangeRate_chain(r1, r2)

class ExchangeRateManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def instance():
        return _ORE.ExchangeRateManager_instance()

    def add(self, *args):
        return _ORE.ExchangeRateManager_add(self, *args)

    def lookup(self, *args):
        return _ORE.ExchangeRateManager_lookup(self, *args)

    def clear(self):
        return _ORE.ExchangeRateManager_clear(self)
    __swig_destroy__ = _ORE.delete_ExchangeRateManager

# Register ExchangeRateManager in _ORE:
_ORE.ExchangeRateManager_swigregister(ExchangeRateManager)

def ExchangeRateManager_instance():
    return _ORE.ExchangeRateManager_instance()

class Settings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def instance():
        return _ORE.Settings_instance()

    def getEvaluationDate(self):
        return _ORE.Settings_getEvaluationDate(self)

    def setEvaluationDate(self, d):
        return _ORE.Settings_setEvaluationDate(self, d)

    def includeReferenceDateEvents(self, b):
        return _ORE.Settings_includeReferenceDateEvents(self, b)

    def includeTodaysCashFlows(self, b):
        return _ORE.Settings_includeTodaysCashFlows(self, b)

    def setEnforcesTodaysHistoricFixings(self, b):
        return _ORE.Settings_setEnforcesTodaysHistoricFixings(self, b)

    def getEnforcesTodaysHistoricFixings(self):
        return _ORE.Settings_getEnforcesTodaysHistoricFixings(self)

    evaluationDate = property(getEvaluationDate,setEvaluationDate,None)
    includeReferenceDateCashFlows = property(None,includeReferenceDateEvents,None)
    includeReferenceDateEvents = property(None,includeReferenceDateEvents,None)
    includeTodaysCashFlows = property(None,includeTodaysCashFlows,None)
    enforcesTodaysHistoricFixings = property(getEnforcesTodaysHistoricFixings, setEnforcesTodaysHistoricFixings, None)

    __swig_destroy__ = _ORE.delete_Settings

# Register Settings in _ORE:
_ORE.Settings_swigregister(Settings)

def Settings_instance():
    return _ORE.Settings_instance()

class Fdm1dMesher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size):
        _ORE.Fdm1dMesher_swiginit(self, _ORE.new_Fdm1dMesher(size))

    def size(self):
        return _ORE.Fdm1dMesher_size(self)

    def dplus(self, index):
        return _ORE.Fdm1dMesher_dplus(self, index)

    def dminus(self, index):
        return _ORE.Fdm1dMesher_dminus(self, index)

    def location(self, index):
        return _ORE.Fdm1dMesher_location(self, index)

    def locations(self):
        return _ORE.Fdm1dMesher_locations(self)
    __swig_destroy__ = _ORE.delete_Fdm1dMesher

# Register Fdm1dMesher in _ORE:
_ORE.Fdm1dMesher_swigregister(Fdm1dMesher)

class Fdm1dMesherVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.Fdm1dMesherVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.Fdm1dMesherVector___nonzero__(self)

    def __bool__(self):
        return _ORE.Fdm1dMesherVector___bool__(self)

    def __len__(self):
        return _ORE.Fdm1dMesherVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.Fdm1dMesherVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.Fdm1dMesherVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.Fdm1dMesherVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.Fdm1dMesherVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.Fdm1dMesherVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.Fdm1dMesherVector___setitem__(self, *args)

    def pop(self):
        return _ORE.Fdm1dMesherVector_pop(self)

    def append(self, x):
        return _ORE.Fdm1dMesherVector_append(self, x)

    def empty(self):
        return _ORE.Fdm1dMesherVector_empty(self)

    def size(self):
        return _ORE.Fdm1dMesherVector_size(self)

    def swap(self, v):
        return _ORE.Fdm1dMesherVector_swap(self, v)

    def begin(self):
        return _ORE.Fdm1dMesherVector_begin(self)

    def end(self):
        return _ORE.Fdm1dMesherVector_end(self)

    def rbegin(self):
        return _ORE.Fdm1dMesherVector_rbegin(self)

    def rend(self):
        return _ORE.Fdm1dMesherVector_rend(self)

    def clear(self):
        return _ORE.Fdm1dMesherVector_clear(self)

    def get_allocator(self):
        return _ORE.Fdm1dMesherVector_get_allocator(self)

    def pop_back(self):
        return _ORE.Fdm1dMesherVector_pop_back(self)

    def erase(self, *args):
        return _ORE.Fdm1dMesherVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.Fdm1dMesherVector_swiginit(self, _ORE.new_Fdm1dMesherVector(*args))

    def push_back(self, x):
        return _ORE.Fdm1dMesherVector_push_back(self, x)

    def front(self):
        return _ORE.Fdm1dMesherVector_front(self)

    def back(self):
        return _ORE.Fdm1dMesherVector_back(self)

    def assign(self, n, x):
        return _ORE.Fdm1dMesherVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.Fdm1dMesherVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.Fdm1dMesherVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.Fdm1dMesherVector_reserve(self, n)

    def capacity(self):
        return _ORE.Fdm1dMesherVector_capacity(self)
    __swig_destroy__ = _ORE.delete_Fdm1dMesherVector

# Register Fdm1dMesherVector in _ORE:
_ORE.Fdm1dMesherVector_swigregister(Fdm1dMesherVector)

class FdmBlackScholesMesher(Fdm1dMesher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.FdmBlackScholesMesher_swiginit(self, _ORE.new_FdmBlackScholesMesher(*args, **kwargs))

    @staticmethod
    def processHelper(s0, rTS, qTS, vol):
        return _ORE.FdmBlackScholesMesher_processHelper(s0, rTS, qTS, vol)
    __swig_destroy__ = _ORE.delete_FdmBlackScholesMesher

# Register FdmBlackScholesMesher in _ORE:
_ORE.FdmBlackScholesMesher_swigregister(FdmBlackScholesMesher)

def FdmBlackScholesMesher_processHelper(s0, rTS, qTS, vol):
    return _ORE.FdmBlackScholesMesher_processHelper(s0, rTS, qTS, vol)

class Concentrating1dMesherPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, arg4):
        _ORE.Concentrating1dMesherPoint_swiginit(self, _ORE.new_Concentrating1dMesherPoint(arg2, arg3, arg4))

    def first(self):
        return _ORE.Concentrating1dMesherPoint_first(self)

    def second(self):
        return _ORE.Concentrating1dMesherPoint_second(self)

    def third(self):
        return _ORE.Concentrating1dMesherPoint_third(self)
    __swig_destroy__ = _ORE.delete_Concentrating1dMesherPoint

# Register Concentrating1dMesherPoint in _ORE:
_ORE.Concentrating1dMesherPoint_swigregister(Concentrating1dMesherPoint)

class Concentrating1dMesherPointVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.Concentrating1dMesherPointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.Concentrating1dMesherPointVector___nonzero__(self)

    def __bool__(self):
        return _ORE.Concentrating1dMesherPointVector___bool__(self)

    def __len__(self):
        return _ORE.Concentrating1dMesherPointVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.Concentrating1dMesherPointVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.Concentrating1dMesherPointVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.Concentrating1dMesherPointVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.Concentrating1dMesherPointVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.Concentrating1dMesherPointVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.Concentrating1dMesherPointVector___setitem__(self, *args)

    def pop(self):
        return _ORE.Concentrating1dMesherPointVector_pop(self)

    def append(self, x):
        return _ORE.Concentrating1dMesherPointVector_append(self, x)

    def empty(self):
        return _ORE.Concentrating1dMesherPointVector_empty(self)

    def size(self):
        return _ORE.Concentrating1dMesherPointVector_size(self)

    def swap(self, v):
        return _ORE.Concentrating1dMesherPointVector_swap(self, v)

    def begin(self):
        return _ORE.Concentrating1dMesherPointVector_begin(self)

    def end(self):
        return _ORE.Concentrating1dMesherPointVector_end(self)

    def rbegin(self):
        return _ORE.Concentrating1dMesherPointVector_rbegin(self)

    def rend(self):
        return _ORE.Concentrating1dMesherPointVector_rend(self)

    def clear(self):
        return _ORE.Concentrating1dMesherPointVector_clear(self)

    def get_allocator(self):
        return _ORE.Concentrating1dMesherPointVector_get_allocator(self)

    def pop_back(self):
        return _ORE.Concentrating1dMesherPointVector_pop_back(self)

    def erase(self, *args):
        return _ORE.Concentrating1dMesherPointVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.Concentrating1dMesherPointVector_swiginit(self, _ORE.new_Concentrating1dMesherPointVector(*args))

    def push_back(self, x):
        return _ORE.Concentrating1dMesherPointVector_push_back(self, x)

    def front(self):
        return _ORE.Concentrating1dMesherPointVector_front(self)

    def back(self):
        return _ORE.Concentrating1dMesherPointVector_back(self)

    def assign(self, n, x):
        return _ORE.Concentrating1dMesherPointVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.Concentrating1dMesherPointVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.Concentrating1dMesherPointVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.Concentrating1dMesherPointVector_reserve(self, n)

    def capacity(self):
        return _ORE.Concentrating1dMesherPointVector_capacity(self)
    __swig_destroy__ = _ORE.delete_Concentrating1dMesherPointVector

# Register Concentrating1dMesherPointVector in _ORE:
_ORE.Concentrating1dMesherPointVector_swigregister(Concentrating1dMesherPointVector)

class Concentrating1dMesher(Fdm1dMesher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Concentrating1dMesher_swiginit(self, _ORE.new_Concentrating1dMesher(*args))
    __swig_destroy__ = _ORE.delete_Concentrating1dMesher

# Register Concentrating1dMesher in _ORE:
_ORE.Concentrating1dMesher_swigregister(Concentrating1dMesher)

class ExponentialJump1dMesher(Fdm1dMesher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, steps, beta, jumpIntensity, eta, eps=1e-3):
        _ORE.ExponentialJump1dMesher_swiginit(self, _ORE.new_ExponentialJump1dMesher(steps, beta, jumpIntensity, eta, eps))
    __swig_destroy__ = _ORE.delete_ExponentialJump1dMesher

# Register ExponentialJump1dMesher in _ORE:
_ORE.ExponentialJump1dMesher_swigregister(ExponentialJump1dMesher)

class FdmCEV1dMesher(Fdm1dMesher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.FdmCEV1dMesher_swiginit(self, _ORE.new_FdmCEV1dMesher(*args, **kwargs))
    __swig_destroy__ = _ORE.delete_FdmCEV1dMesher

# Register FdmCEV1dMesher in _ORE:
_ORE.FdmCEV1dMesher_swigregister(FdmCEV1dMesher)

class FdmHestonVarianceMesher(Fdm1dMesher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size, process, maturity, tAvgSteps=10, epsilon=0.0001):
        _ORE.FdmHestonVarianceMesher_swiginit(self, _ORE.new_FdmHestonVarianceMesher(size, process, maturity, tAvgSteps, epsilon))

    def volaEstimate(self):
        return _ORE.FdmHestonVarianceMesher_volaEstimate(self)
    __swig_destroy__ = _ORE.delete_FdmHestonVarianceMesher

# Register FdmHestonVarianceMesher in _ORE:
_ORE.FdmHestonVarianceMesher_swigregister(FdmHestonVarianceMesher)

class FdmHestonLocalVolatilityVarianceMesher(Fdm1dMesher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size, process, leverageFct, maturity, tAvgSteps=10, epsilon=0.0001):
        _ORE.FdmHestonLocalVolatilityVarianceMesher_swiginit(self, _ORE.new_FdmHestonLocalVolatilityVarianceMesher(size, process, leverageFct, maturity, tAvgSteps, epsilon))

    def volaEstimate(self):
        return _ORE.FdmHestonLocalVolatilityVarianceMesher_volaEstimate(self)
    __swig_destroy__ = _ORE.delete_FdmHestonLocalVolatilityVarianceMesher

# Register FdmHestonLocalVolatilityVarianceMesher in _ORE:
_ORE.FdmHestonLocalVolatilityVarianceMesher_swigregister(FdmHestonLocalVolatilityVarianceMesher)

class FdmSimpleProcess1dMesher(Fdm1dMesher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdmSimpleProcess1dMesher_swiginit(self, _ORE.new_FdmSimpleProcess1dMesher(*args))
    __swig_destroy__ = _ORE.delete_FdmSimpleProcess1dMesher

# Register FdmSimpleProcess1dMesher in _ORE:
_ORE.FdmSimpleProcess1dMesher_swigregister(FdmSimpleProcess1dMesher)

class Uniform1dMesher(Fdm1dMesher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, start, end, size):
        _ORE.Uniform1dMesher_swiginit(self, _ORE.new_Uniform1dMesher(start, end, size))
    __swig_destroy__ = _ORE.delete_Uniform1dMesher

# Register Uniform1dMesher in _ORE:
_ORE.Uniform1dMesher_swigregister(Uniform1dMesher)

class Predefined1dMesher(Fdm1dMesher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x):
        _ORE.Predefined1dMesher_swiginit(self, _ORE.new_Predefined1dMesher(x))
    __swig_destroy__ = _ORE.delete_Predefined1dMesher

# Register Predefined1dMesher in _ORE:
_ORE.Predefined1dMesher_swigregister(Predefined1dMesher)

class Glued1dMesher(Fdm1dMesher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, leftMesher, rightMesher):
        _ORE.Glued1dMesher_swiginit(self, _ORE.new_Glued1dMesher(leftMesher, rightMesher))
    __swig_destroy__ = _ORE.delete_Glued1dMesher

# Register Glued1dMesher in _ORE:
_ORE.Glued1dMesher_swigregister(Glued1dMesher)

class FdmLinearOpIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdmLinearOpIterator_swiginit(self, _ORE.new_FdmLinearOpIterator(*args))

    def coordinates(self):
        return _ORE.FdmLinearOpIterator_coordinates(self)

    def increment(self):
        return _ORE.FdmLinearOpIterator_increment(self)

    def notEqual(self, iterator):
        return _ORE.FdmLinearOpIterator_notEqual(self, iterator)

    def index(self):
        return _ORE.FdmLinearOpIterator_index(self)
    __swig_destroy__ = _ORE.delete_FdmLinearOpIterator

# Register FdmLinearOpIterator in _ORE:
_ORE.FdmLinearOpIterator_swigregister(FdmLinearOpIterator)

class FdmLinearOpLayout(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dim):
        _ORE.FdmLinearOpLayout_swiginit(self, _ORE.new_FdmLinearOpLayout(dim))

    def spacing(self):
        return _ORE.FdmLinearOpLayout_spacing(self)

    def dim(self):
        return _ORE.FdmLinearOpLayout_dim(self)

    def index(self, coordinates):
        return _ORE.FdmLinearOpLayout_index(self, coordinates)

    def begin(self):
        return _ORE.FdmLinearOpLayout_begin(self)

    def end(self):
        return _ORE.FdmLinearOpLayout_end(self)

    def size(self):
        return _ORE.FdmLinearOpLayout_size(self)

    def neighbourhood(self, *args):
        return _ORE.FdmLinearOpLayout_neighbourhood(self, *args)

    def iter_neighbourhood(self, iterator, i, offset):
        return _ORE.FdmLinearOpLayout_iter_neighbourhood(self, iterator, i, offset)
    __swig_destroy__ = _ORE.delete_FdmLinearOpLayout

# Register FdmLinearOpLayout in _ORE:
_ORE.FdmLinearOpLayout_swigregister(FdmLinearOpLayout)

class FdmMesher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def dplus(self, iter, direction):
        return _ORE.FdmMesher_dplus(self, iter, direction)

    def dminus(self, iter, direction):
        return _ORE.FdmMesher_dminus(self, iter, direction)

    def location(self, iter, direction):
        return _ORE.FdmMesher_location(self, iter, direction)

    def locations(self, direction):
        return _ORE.FdmMesher_locations(self, direction)

    def layout(self):
        return _ORE.FdmMesher_layout(self)
    __swig_destroy__ = _ORE.delete_FdmMesher

# Register FdmMesher in _ORE:
_ORE.FdmMesher_swigregister(FdmMesher)

class FdmMesherComposite(FdmMesher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdmMesherComposite_swiginit(self, _ORE.new_FdmMesherComposite(*args))

    def getFdm1dMeshers(self):
        return _ORE.FdmMesherComposite_getFdm1dMeshers(self)
    __swig_destroy__ = _ORE.delete_FdmMesherComposite

# Register FdmMesherComposite in _ORE:
_ORE.FdmMesherComposite_swigregister(FdmMesherComposite)

class FdmLinearOp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def apply(self, r):
        return _ORE.FdmLinearOp_apply(self, r)
    __swig_destroy__ = _ORE.delete_FdmLinearOp

# Register FdmLinearOp in _ORE:
_ORE.FdmLinearOp_swigregister(FdmLinearOp)

class SparseMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    row_idx = property(_ORE.SparseMatrix_row_idx_get, _ORE.SparseMatrix_row_idx_set)
    col_idx = property(_ORE.SparseMatrix_col_idx_get, _ORE.SparseMatrix_col_idx_set)
    data = property(_ORE.SparseMatrix_data_get, _ORE.SparseMatrix_data_set)

    def __init__(self):
        _ORE.SparseMatrix_swiginit(self, _ORE.new_SparseMatrix())
    __swig_destroy__ = _ORE.delete_SparseMatrix

# Register SparseMatrix in _ORE:
_ORE.SparseMatrix_swigregister(SparseMatrix)

class FdmLinearOpComposite(FdmLinearOp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def size(self):
        return _ORE.FdmLinearOpComposite_size(self)

    def setTime(self, t1, t2):
        return _ORE.FdmLinearOpComposite_setTime(self, t1, t2)

    def apply_mixed(self, r):
        return _ORE.FdmLinearOpComposite_apply_mixed(self, r)

    def apply_direction(self, direction, r):
        return _ORE.FdmLinearOpComposite_apply_direction(self, direction, r)

    def solve_splitting(self, direction, r, s):
        return _ORE.FdmLinearOpComposite_solve_splitting(self, direction, r, s)

    def preconditioner(self, r, s):
        return _ORE.FdmLinearOpComposite_preconditioner(self, r, s)

    def to_sparse_matrix(self):
        return _ORE.FdmLinearOpComposite_to_sparse_matrix(self)
    __swig_destroy__ = _ORE.delete_FdmLinearOpComposite

# Register FdmLinearOpComposite in _ORE:
_ORE.FdmLinearOpComposite_swigregister(FdmLinearOpComposite)

class FdmLinearOpCompositeProxy(FdmLinearOpComposite):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, callback):
        _ORE.FdmLinearOpCompositeProxy_swiginit(self, _ORE.new_FdmLinearOpCompositeProxy(callback))
    __swig_destroy__ = _ORE.delete_FdmLinearOpCompositeProxy

# Register FdmLinearOpCompositeProxy in _ORE:
_ORE.FdmLinearOpCompositeProxy_swigregister(FdmLinearOpCompositeProxy)

class FdmBoundaryCondition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    NoSide = _ORE.FdmBoundaryCondition_NoSide
    Upper = _ORE.FdmBoundaryCondition_Upper
    Lower = _ORE.FdmBoundaryCondition_Lower

    def applyBeforeApplying(self, arg2):
        return _ORE.FdmBoundaryCondition_applyBeforeApplying(self, arg2)

    def applyAfterApplying(self, arg2):
        return _ORE.FdmBoundaryCondition_applyAfterApplying(self, arg2)

    def applyBeforeSolving(self, arg2, rhs):
        return _ORE.FdmBoundaryCondition_applyBeforeSolving(self, arg2, rhs)

    def applyAfterSolving(self, arg2):
        return _ORE.FdmBoundaryCondition_applyAfterSolving(self, arg2)

    def setTime(self, t):
        return _ORE.FdmBoundaryCondition_setTime(self, t)
    __swig_destroy__ = _ORE.delete_FdmBoundaryCondition

# Register FdmBoundaryCondition in _ORE:
_ORE.FdmBoundaryCondition_swigregister(FdmBoundaryCondition)

class FdmBoundaryConditionSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.FdmBoundaryConditionSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.FdmBoundaryConditionSet___nonzero__(self)

    def __bool__(self):
        return _ORE.FdmBoundaryConditionSet___bool__(self)

    def __len__(self):
        return _ORE.FdmBoundaryConditionSet___len__(self)

    def __getslice__(self, i, j):
        return _ORE.FdmBoundaryConditionSet___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.FdmBoundaryConditionSet___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.FdmBoundaryConditionSet___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.FdmBoundaryConditionSet___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.FdmBoundaryConditionSet___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.FdmBoundaryConditionSet___setitem__(self, *args)

    def pop(self):
        return _ORE.FdmBoundaryConditionSet_pop(self)

    def append(self, x):
        return _ORE.FdmBoundaryConditionSet_append(self, x)

    def empty(self):
        return _ORE.FdmBoundaryConditionSet_empty(self)

    def size(self):
        return _ORE.FdmBoundaryConditionSet_size(self)

    def swap(self, v):
        return _ORE.FdmBoundaryConditionSet_swap(self, v)

    def begin(self):
        return _ORE.FdmBoundaryConditionSet_begin(self)

    def end(self):
        return _ORE.FdmBoundaryConditionSet_end(self)

    def rbegin(self):
        return _ORE.FdmBoundaryConditionSet_rbegin(self)

    def rend(self):
        return _ORE.FdmBoundaryConditionSet_rend(self)

    def clear(self):
        return _ORE.FdmBoundaryConditionSet_clear(self)

    def get_allocator(self):
        return _ORE.FdmBoundaryConditionSet_get_allocator(self)

    def pop_back(self):
        return _ORE.FdmBoundaryConditionSet_pop_back(self)

    def erase(self, *args):
        return _ORE.FdmBoundaryConditionSet_erase(self, *args)

    def __init__(self, *args):
        _ORE.FdmBoundaryConditionSet_swiginit(self, _ORE.new_FdmBoundaryConditionSet(*args))

    def push_back(self, x):
        return _ORE.FdmBoundaryConditionSet_push_back(self, x)

    def front(self):
        return _ORE.FdmBoundaryConditionSet_front(self)

    def back(self):
        return _ORE.FdmBoundaryConditionSet_back(self)

    def assign(self, n, x):
        return _ORE.FdmBoundaryConditionSet_assign(self, n, x)

    def resize(self, *args):
        return _ORE.FdmBoundaryConditionSet_resize(self, *args)

    def insert(self, *args):
        return _ORE.FdmBoundaryConditionSet_insert(self, *args)

    def reserve(self, n):
        return _ORE.FdmBoundaryConditionSet_reserve(self, n)

    def capacity(self):
        return _ORE.FdmBoundaryConditionSet_capacity(self)
    __swig_destroy__ = _ORE.delete_FdmBoundaryConditionSet

# Register FdmBoundaryConditionSet in _ORE:
_ORE.FdmBoundaryConditionSet_swigregister(FdmBoundaryConditionSet)

class FdmDirichletBoundary(FdmBoundaryCondition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, valueOnBoundary, direction, side):
        _ORE.FdmDirichletBoundary_swiginit(self, _ORE.new_FdmDirichletBoundary(mesher, valueOnBoundary, direction, side))

    def applyAfterApplying(self, *args):
        return _ORE.FdmDirichletBoundary_applyAfterApplying(self, *args)
    __swig_destroy__ = _ORE.delete_FdmDirichletBoundary

# Register FdmDirichletBoundary in _ORE:
_ORE.FdmDirichletBoundary_swigregister(FdmDirichletBoundary)

class FdmDiscountDirichletBoundary(FdmBoundaryCondition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, rTS, maturityTime, valueOnBoundary, direction, side):
        _ORE.FdmDiscountDirichletBoundary_swiginit(self, _ORE.new_FdmDiscountDirichletBoundary(mesher, rTS, maturityTime, valueOnBoundary, direction, side))
    __swig_destroy__ = _ORE.delete_FdmDiscountDirichletBoundary

# Register FdmDiscountDirichletBoundary in _ORE:
_ORE.FdmDiscountDirichletBoundary_swigregister(FdmDiscountDirichletBoundary)

class FdmTimeDepDirichletBoundary(FdmBoundaryCondition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, function, direction, side):
        _ORE.FdmTimeDepDirichletBoundary_swiginit(self, _ORE.new_FdmTimeDepDirichletBoundary(mesher, function, direction, side))
    __swig_destroy__ = _ORE.delete_FdmTimeDepDirichletBoundary

# Register FdmTimeDepDirichletBoundary in _ORE:
_ORE.FdmTimeDepDirichletBoundary_swigregister(FdmTimeDepDirichletBoundary)

class FdmBatesOp(FdmLinearOpComposite):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdmBatesOp_swiginit(self, _ORE.new_FdmBatesOp(*args))
    __swig_destroy__ = _ORE.delete_FdmBatesOp

# Register FdmBatesOp in _ORE:
_ORE.FdmBatesOp_swigregister(FdmBatesOp)

class FdmBlackScholesOp(FdmLinearOpComposite):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdmBlackScholesOp_swiginit(self, _ORE.new_FdmBlackScholesOp(*args))
    __swig_destroy__ = _ORE.delete_FdmBlackScholesOp

# Register FdmBlackScholesOp in _ORE:
_ORE.FdmBlackScholesOp_swigregister(FdmBlackScholesOp)

class Fdm2dBlackScholesOp(FdmLinearOpComposite):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Fdm2dBlackScholesOp_swiginit(self, _ORE.new_Fdm2dBlackScholesOp(*args))
    __swig_destroy__ = _ORE.delete_Fdm2dBlackScholesOp

# Register Fdm2dBlackScholesOp in _ORE:
_ORE.Fdm2dBlackScholesOp_swigregister(Fdm2dBlackScholesOp)

class FdmCEVOp(FdmLinearOpComposite):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, rTS, f0, alpha, beta, direction):
        _ORE.FdmCEVOp_swiginit(self, _ORE.new_FdmCEVOp(mesher, rTS, f0, alpha, beta, direction))
    __swig_destroy__ = _ORE.delete_FdmCEVOp

# Register FdmCEVOp in _ORE:
_ORE.FdmCEVOp_swigregister(FdmCEVOp)

class FdmG2Op(FdmLinearOpComposite):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, model, direction1, direction2):
        _ORE.FdmG2Op_swiginit(self, _ORE.new_FdmG2Op(mesher, model, direction1, direction2))
    __swig_destroy__ = _ORE.delete_FdmG2Op

# Register FdmG2Op in _ORE:
_ORE.FdmG2Op_swigregister(FdmG2Op)

class FdmHestonHullWhiteOp(FdmLinearOpComposite):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, hestonProcess, hwProcess, equityShortRateCorrelation):
        _ORE.FdmHestonHullWhiteOp_swiginit(self, _ORE.new_FdmHestonHullWhiteOp(mesher, hestonProcess, hwProcess, equityShortRateCorrelation))
    __swig_destroy__ = _ORE.delete_FdmHestonHullWhiteOp

# Register FdmHestonHullWhiteOp in _ORE:
_ORE.FdmHestonHullWhiteOp_swigregister(FdmHestonHullWhiteOp)

class FdmHestonOp(FdmLinearOpComposite):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdmHestonOp_swiginit(self, _ORE.new_FdmHestonOp(*args))
    __swig_destroy__ = _ORE.delete_FdmHestonOp

# Register FdmHestonOp in _ORE:
_ORE.FdmHestonOp_swigregister(FdmHestonOp)

class FdmHullWhiteOp(FdmLinearOpComposite):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, model, direction):
        _ORE.FdmHullWhiteOp_swiginit(self, _ORE.new_FdmHullWhiteOp(mesher, model, direction))
    __swig_destroy__ = _ORE.delete_FdmHullWhiteOp

# Register FdmHullWhiteOp in _ORE:
_ORE.FdmHullWhiteOp_swigregister(FdmHullWhiteOp)

class FdmLocalVolFwdOp(FdmLinearOpComposite):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, spot, rTS, qTS, localVol, direction=0):
        _ORE.FdmLocalVolFwdOp_swiginit(self, _ORE.new_FdmLocalVolFwdOp(mesher, spot, rTS, qTS, localVol, direction))
    __swig_destroy__ = _ORE.delete_FdmLocalVolFwdOp

# Register FdmLocalVolFwdOp in _ORE:
_ORE.FdmLocalVolFwdOp_swigregister(FdmLocalVolFwdOp)

class FdmOrnsteinUhlenbeckOp(FdmLinearOpComposite):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, p, rTS, direction=0):
        _ORE.FdmOrnsteinUhlenbeckOp_swiginit(self, _ORE.new_FdmOrnsteinUhlenbeckOp(mesher, p, rTS, direction))
    __swig_destroy__ = _ORE.delete_FdmOrnsteinUhlenbeckOp

# Register FdmOrnsteinUhlenbeckOp in _ORE:
_ORE.FdmOrnsteinUhlenbeckOp_swigregister(FdmOrnsteinUhlenbeckOp)

class FdmSabrOp(FdmLinearOpComposite):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, rTS, f0, alpha, beta, nu, rho):
        _ORE.FdmSabrOp_swiginit(self, _ORE.new_FdmSabrOp(mesher, rTS, f0, alpha, beta, nu, rho))
    __swig_destroy__ = _ORE.delete_FdmSabrOp

# Register FdmSabrOp in _ORE:
_ORE.FdmSabrOp_swigregister(FdmSabrOp)

class FdmZabrOp(FdmLinearOpComposite):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, beta, nu, rho, gamma):
        _ORE.FdmZabrOp_swiginit(self, _ORE.new_FdmZabrOp(mesher, beta, nu, rho, gamma))
    __swig_destroy__ = _ORE.delete_FdmZabrOp

# Register FdmZabrOp in _ORE:
_ORE.FdmZabrOp_swigregister(FdmZabrOp)

class FdmDupire1dOp(FdmLinearOpComposite):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, localVolatility):
        _ORE.FdmDupire1dOp_swiginit(self, _ORE.new_FdmDupire1dOp(mesher, localVolatility))
    __swig_destroy__ = _ORE.delete_FdmDupire1dOp

# Register FdmDupire1dOp in _ORE:
_ORE.FdmDupire1dOp_swigregister(FdmDupire1dOp)

class FdmBlackScholesFwdOp(FdmLinearOpComposite):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdmBlackScholesFwdOp_swiginit(self, _ORE.new_FdmBlackScholesFwdOp(*args))
    __swig_destroy__ = _ORE.delete_FdmBlackScholesFwdOp

# Register FdmBlackScholesFwdOp in _ORE:
_ORE.FdmBlackScholesFwdOp_swigregister(FdmBlackScholesFwdOp)

class FdmSquareRootFwdOp(FdmLinearOpComposite):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Plain = _ORE.FdmSquareRootFwdOp_Plain
    Power = _ORE.FdmSquareRootFwdOp_Power
    Log = _ORE.FdmSquareRootFwdOp_Log

    def __init__(self, *args):
        _ORE.FdmSquareRootFwdOp_swiginit(self, _ORE.new_FdmSquareRootFwdOp(*args))
    __swig_destroy__ = _ORE.delete_FdmSquareRootFwdOp

# Register FdmSquareRootFwdOp in _ORE:
_ORE.FdmSquareRootFwdOp_swigregister(FdmSquareRootFwdOp)

class FdmHestonFwdOp(FdmLinearOpComposite):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdmHestonFwdOp_swiginit(self, _ORE.new_FdmHestonFwdOp(*args))
    __swig_destroy__ = _ORE.delete_FdmHestonFwdOp

# Register FdmHestonFwdOp in _ORE:
_ORE.FdmHestonFwdOp_swigregister(FdmHestonFwdOp)

class TripleBandLinearOp(FdmLinearOp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, direction, mesher):
        _ORE.TripleBandLinearOp_swiginit(self, _ORE.new_TripleBandLinearOp(direction, mesher))

    def apply(self, r):
        return _ORE.TripleBandLinearOp_apply(self, r)

    def solve_splitting(self, r, a, b=1.0):
        return _ORE.TripleBandLinearOp_solve_splitting(self, r, a, b)

    def mult(self, u):
        return _ORE.TripleBandLinearOp_mult(self, u)

    def multR(self, u):
        return _ORE.TripleBandLinearOp_multR(self, u)

    def add(self, *args):
        return _ORE.TripleBandLinearOp_add(self, *args)

    def axpyb(self, a, x, y, b):
        return _ORE.TripleBandLinearOp_axpyb(self, a, x, y, b)

    def swap(self, m):
        return _ORE.TripleBandLinearOp_swap(self, m)
    __swig_destroy__ = _ORE.delete_TripleBandLinearOp

# Register TripleBandLinearOp in _ORE:
_ORE.TripleBandLinearOp_swigregister(TripleBandLinearOp)

class FirstDerivativeOp(TripleBandLinearOp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, direction, mesher):
        _ORE.FirstDerivativeOp_swiginit(self, _ORE.new_FirstDerivativeOp(direction, mesher))
    __swig_destroy__ = _ORE.delete_FirstDerivativeOp

# Register FirstDerivativeOp in _ORE:
_ORE.FirstDerivativeOp_swigregister(FirstDerivativeOp)

class SecondDerivativeOp(TripleBandLinearOp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, direction, mesher):
        _ORE.SecondDerivativeOp_swiginit(self, _ORE.new_SecondDerivativeOp(direction, mesher))
    __swig_destroy__ = _ORE.delete_SecondDerivativeOp

# Register SecondDerivativeOp in _ORE:
_ORE.SecondDerivativeOp_swigregister(SecondDerivativeOp)

class NinePointLinearOp(FdmLinearOp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d0, d1, mesher):
        _ORE.NinePointLinearOp_swiginit(self, _ORE.new_NinePointLinearOp(d0, d1, mesher))
    __swig_destroy__ = _ORE.delete_NinePointLinearOp

# Register NinePointLinearOp in _ORE:
_ORE.NinePointLinearOp_swigregister(NinePointLinearOp)

class SecondOrderMixedDerivativeOp(NinePointLinearOp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d0, d1, mesher):
        _ORE.SecondOrderMixedDerivativeOp_swiginit(self, _ORE.new_SecondOrderMixedDerivativeOp(d0, d1, mesher))
    __swig_destroy__ = _ORE.delete_SecondOrderMixedDerivativeOp

# Register SecondOrderMixedDerivativeOp in _ORE:
_ORE.SecondOrderMixedDerivativeOp_swigregister(SecondOrderMixedDerivativeOp)

class NthOrderDerivativeOp(FdmLinearOp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, direction, order, nPoints, mesher):
        _ORE.NthOrderDerivativeOp_swiginit(self, _ORE.new_NthOrderDerivativeOp(direction, order, nPoints, mesher))
    __swig_destroy__ = _ORE.delete_NthOrderDerivativeOp

# Register NthOrderDerivativeOp in _ORE:
_ORE.NthOrderDerivativeOp_swigregister(NthOrderDerivativeOp)

class CraigSneydScheme(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CraigSneydScheme_swiginit(self, _ORE.new_CraigSneydScheme(*args))

    def step(self, a, t):
        return _ORE.CraigSneydScheme_step(self, a, t)

    def setStep(self, dt):
        return _ORE.CraigSneydScheme_setStep(self, dt)
    __swig_destroy__ = _ORE.delete_CraigSneydScheme

# Register CraigSneydScheme in _ORE:
_ORE.CraigSneydScheme_swigregister(CraigSneydScheme)

class ImplicitEulerScheme(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BiCGstab = _ORE.ImplicitEulerScheme_BiCGstab
    GMRES = _ORE.ImplicitEulerScheme_GMRES

    def __init__(self, *args, **kwargs):
        _ORE.ImplicitEulerScheme_swiginit(self, _ORE.new_ImplicitEulerScheme(*args, **kwargs))

    def step(self, a, t):
        return _ORE.ImplicitEulerScheme_step(self, a, t)

    def setStep(self, dt):
        return _ORE.ImplicitEulerScheme_setStep(self, dt)

    def numberOfIterations(self):
        return _ORE.ImplicitEulerScheme_numberOfIterations(self)
    __swig_destroy__ = _ORE.delete_ImplicitEulerScheme

# Register ImplicitEulerScheme in _ORE:
_ORE.ImplicitEulerScheme_swigregister(ImplicitEulerScheme)

class CrankNicolsonScheme(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.CrankNicolsonScheme_swiginit(self, _ORE.new_CrankNicolsonScheme(*args, **kwargs))

    def step(self, a, t):
        return _ORE.CrankNicolsonScheme_step(self, a, t)

    def setStep(self, dt):
        return _ORE.CrankNicolsonScheme_setStep(self, dt)

    def numberOfIterations(self):
        return _ORE.CrankNicolsonScheme_numberOfIterations(self)
    __swig_destroy__ = _ORE.delete_CrankNicolsonScheme

# Register CrankNicolsonScheme in _ORE:
_ORE.CrankNicolsonScheme_swigregister(CrankNicolsonScheme)

class DouglasScheme(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.DouglasScheme_swiginit(self, _ORE.new_DouglasScheme(*args))

    def step(self, a, t):
        return _ORE.DouglasScheme_step(self, a, t)

    def setStep(self, dt):
        return _ORE.DouglasScheme_setStep(self, dt)
    __swig_destroy__ = _ORE.delete_DouglasScheme

# Register DouglasScheme in _ORE:
_ORE.DouglasScheme_swigregister(DouglasScheme)

class ExplicitEulerScheme(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ExplicitEulerScheme_swiginit(self, _ORE.new_ExplicitEulerScheme(*args))

    def step(self, a, t):
        return _ORE.ExplicitEulerScheme_step(self, a, t)

    def setStep(self, dt):
        return _ORE.ExplicitEulerScheme_setStep(self, dt)
    __swig_destroy__ = _ORE.delete_ExplicitEulerScheme

# Register ExplicitEulerScheme in _ORE:
_ORE.ExplicitEulerScheme_swigregister(ExplicitEulerScheme)

class HundsdorferScheme(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.HundsdorferScheme_swiginit(self, _ORE.new_HundsdorferScheme(*args))

    def step(self, a, t):
        return _ORE.HundsdorferScheme_step(self, a, t)

    def setStep(self, dt):
        return _ORE.HundsdorferScheme_setStep(self, dt)
    __swig_destroy__ = _ORE.delete_HundsdorferScheme

# Register HundsdorferScheme in _ORE:
_ORE.HundsdorferScheme_swigregister(HundsdorferScheme)

class MethodOfLinesScheme(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.MethodOfLinesScheme_swiginit(self, _ORE.new_MethodOfLinesScheme(*args))

    def step(self, a, t):
        return _ORE.MethodOfLinesScheme_step(self, a, t)

    def setStep(self, dt):
        return _ORE.MethodOfLinesScheme_setStep(self, dt)
    __swig_destroy__ = _ORE.delete_MethodOfLinesScheme

# Register MethodOfLinesScheme in _ORE:
_ORE.MethodOfLinesScheme_swigregister(MethodOfLinesScheme)

class ModifiedCraigSneydScheme(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ModifiedCraigSneydScheme_swiginit(self, _ORE.new_ModifiedCraigSneydScheme(*args))

    def step(self, a, t):
        return _ORE.ModifiedCraigSneydScheme_step(self, a, t)

    def setStep(self, dt):
        return _ORE.ModifiedCraigSneydScheme_setStep(self, dt)
    __swig_destroy__ = _ORE.delete_ModifiedCraigSneydScheme

# Register ModifiedCraigSneydScheme in _ORE:
_ORE.ModifiedCraigSneydScheme_swigregister(ModifiedCraigSneydScheme)

class FdmStepCondition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def applyTo(self, a, t):
        return _ORE.FdmStepCondition_applyTo(self, a, t)
    __swig_destroy__ = _ORE.delete_FdmStepCondition

# Register FdmStepCondition in _ORE:
_ORE.FdmStepCondition_swigregister(FdmStepCondition)

class FdmStepConditionProxy(FdmStepCondition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, callback):
        _ORE.FdmStepConditionProxy_swiginit(self, _ORE.new_FdmStepConditionProxy(callback))
    __swig_destroy__ = _ORE.delete_FdmStepConditionProxy

# Register FdmStepConditionProxy in _ORE:
_ORE.FdmStepConditionProxy_swigregister(FdmStepConditionProxy)

class FdmInnerValueCalculator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def innerValue(self, iter, t):
        return _ORE.FdmInnerValueCalculator_innerValue(self, iter, t)

    def avgInnerValue(self, iter, t):
        return _ORE.FdmInnerValueCalculator_avgInnerValue(self, iter, t)
    __swig_destroy__ = _ORE.delete_FdmInnerValueCalculator

# Register FdmInnerValueCalculator in _ORE:
_ORE.FdmInnerValueCalculator_swigregister(FdmInnerValueCalculator)

class FdmInnerValueCalculatorProxy(FdmInnerValueCalculator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, callback):
        _ORE.FdmInnerValueCalculatorProxy_swiginit(self, _ORE.new_FdmInnerValueCalculatorProxy(callback))
    __swig_destroy__ = _ORE.delete_FdmInnerValueCalculatorProxy

# Register FdmInnerValueCalculatorProxy in _ORE:
_ORE.FdmInnerValueCalculatorProxy_swigregister(FdmInnerValueCalculatorProxy)

class FdmCellAveragingInnerValue(FdmInnerValueCalculator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdmCellAveragingInnerValue_swiginit(self, _ORE.new_FdmCellAveragingInnerValue(*args))
    __swig_destroy__ = _ORE.delete_FdmCellAveragingInnerValue

# Register FdmCellAveragingInnerValue in _ORE:
_ORE.FdmCellAveragingInnerValue_swigregister(FdmCellAveragingInnerValue)

class FdmLogInnerValue(FdmCellAveragingInnerValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff, mesher, direction):
        _ORE.FdmLogInnerValue_swiginit(self, _ORE.new_FdmLogInnerValue(payoff, mesher, direction))
    __swig_destroy__ = _ORE.delete_FdmLogInnerValue

# Register FdmLogInnerValue in _ORE:
_ORE.FdmLogInnerValue_swigregister(FdmLogInnerValue)

class FdmLogBasketInnerValue(FdmInnerValueCalculator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff, mesher):
        _ORE.FdmLogBasketInnerValue_swiginit(self, _ORE.new_FdmLogBasketInnerValue(payoff, mesher))
    __swig_destroy__ = _ORE.delete_FdmLogBasketInnerValue

# Register FdmLogBasketInnerValue in _ORE:
_ORE.FdmLogBasketInnerValue_swigregister(FdmLogBasketInnerValue)

class FdmZeroInnerValue(FdmInnerValueCalculator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.FdmZeroInnerValue_swiginit(self, _ORE.new_FdmZeroInnerValue())
    __swig_destroy__ = _ORE.delete_FdmZeroInnerValue

# Register FdmZeroInnerValue in _ORE:
_ORE.FdmZeroInnerValue_swigregister(FdmZeroInnerValue)

class TimeToDateMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.TimeToDateMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.TimeToDateMap___nonzero__(self)

    def __bool__(self):
        return _ORE.TimeToDateMap___bool__(self)

    def __len__(self):
        return _ORE.TimeToDateMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _ORE.TimeToDateMap___getitem__(self, key)

    def __delitem__(self, key):
        return _ORE.TimeToDateMap___delitem__(self, key)

    def has_key(self, key):
        return _ORE.TimeToDateMap_has_key(self, key)

    def keys(self):
        return _ORE.TimeToDateMap_keys(self)

    def values(self):
        return _ORE.TimeToDateMap_values(self)

    def items(self):
        return _ORE.TimeToDateMap_items(self)

    def __contains__(self, key):
        return _ORE.TimeToDateMap___contains__(self, key)

    def key_iterator(self):
        return _ORE.TimeToDateMap_key_iterator(self)

    def value_iterator(self):
        return _ORE.TimeToDateMap_value_iterator(self)

    def __setitem__(self, *args):
        return _ORE.TimeToDateMap___setitem__(self, *args)

    def asdict(self):
        return _ORE.TimeToDateMap_asdict(self)

    def __init__(self, *args):
        _ORE.TimeToDateMap_swiginit(self, _ORE.new_TimeToDateMap(*args))

    def empty(self):
        return _ORE.TimeToDateMap_empty(self)

    def size(self):
        return _ORE.TimeToDateMap_size(self)

    def swap(self, v):
        return _ORE.TimeToDateMap_swap(self, v)

    def begin(self):
        return _ORE.TimeToDateMap_begin(self)

    def end(self):
        return _ORE.TimeToDateMap_end(self)

    def rbegin(self):
        return _ORE.TimeToDateMap_rbegin(self)

    def rend(self):
        return _ORE.TimeToDateMap_rend(self)

    def clear(self):
        return _ORE.TimeToDateMap_clear(self)

    def get_allocator(self):
        return _ORE.TimeToDateMap_get_allocator(self)

    def count(self, x):
        return _ORE.TimeToDateMap_count(self, x)

    def erase(self, *args):
        return _ORE.TimeToDateMap_erase(self, *args)

    def find(self, x):
        return _ORE.TimeToDateMap_find(self, x)

    def lower_bound(self, x):
        return _ORE.TimeToDateMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _ORE.TimeToDateMap_upper_bound(self, x)
    __swig_destroy__ = _ORE.delete_TimeToDateMap

# Register TimeToDateMap in _ORE:
_ORE.TimeToDateMap_swigregister(TimeToDateMap)

class FdmAffineG2ModelSwapInnerValue(FdmInnerValueCalculator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, disModel, fwdModel, swap, exerciseDates, mesher, direction):
        _ORE.FdmAffineG2ModelSwapInnerValue_swiginit(self, _ORE.new_FdmAffineG2ModelSwapInnerValue(disModel, fwdModel, swap, exerciseDates, mesher, direction))
    __swig_destroy__ = _ORE.delete_FdmAffineG2ModelSwapInnerValue

# Register FdmAffineG2ModelSwapInnerValue in _ORE:
_ORE.FdmAffineG2ModelSwapInnerValue_swigregister(FdmAffineG2ModelSwapInnerValue)

class FdmAffineHullWhiteModelSwapInnerValue(FdmInnerValueCalculator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, disModel, fwdModel, swap, exerciseDates, mesher, direction):
        _ORE.FdmAffineHullWhiteModelSwapInnerValue_swiginit(self, _ORE.new_FdmAffineHullWhiteModelSwapInnerValue(disModel, fwdModel, swap, exerciseDates, mesher, direction))
    __swig_destroy__ = _ORE.delete_FdmAffineHullWhiteModelSwapInnerValue

# Register FdmAffineHullWhiteModelSwapInnerValue in _ORE:
_ORE.FdmAffineHullWhiteModelSwapInnerValue_swigregister(FdmAffineHullWhiteModelSwapInnerValue)

class FdmSnapshotCondition(FdmStepCondition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, t):
        _ORE.FdmSnapshotCondition_swiginit(self, _ORE.new_FdmSnapshotCondition(t))

    def getTime(self):
        return _ORE.FdmSnapshotCondition_getTime(self)

    def getValues(self):
        return _ORE.FdmSnapshotCondition_getValues(self)
    __swig_destroy__ = _ORE.delete_FdmSnapshotCondition

# Register FdmSnapshotCondition in _ORE:
_ORE.FdmSnapshotCondition_swigregister(FdmSnapshotCondition)

class FdmStepConditionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.FdmStepConditionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.FdmStepConditionVector___nonzero__(self)

    def __bool__(self):
        return _ORE.FdmStepConditionVector___bool__(self)

    def __len__(self):
        return _ORE.FdmStepConditionVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.FdmStepConditionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.FdmStepConditionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.FdmStepConditionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.FdmStepConditionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.FdmStepConditionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.FdmStepConditionVector___setitem__(self, *args)

    def pop(self):
        return _ORE.FdmStepConditionVector_pop(self)

    def append(self, x):
        return _ORE.FdmStepConditionVector_append(self, x)

    def empty(self):
        return _ORE.FdmStepConditionVector_empty(self)

    def size(self):
        return _ORE.FdmStepConditionVector_size(self)

    def swap(self, v):
        return _ORE.FdmStepConditionVector_swap(self, v)

    def begin(self):
        return _ORE.FdmStepConditionVector_begin(self)

    def end(self):
        return _ORE.FdmStepConditionVector_end(self)

    def rbegin(self):
        return _ORE.FdmStepConditionVector_rbegin(self)

    def rend(self):
        return _ORE.FdmStepConditionVector_rend(self)

    def clear(self):
        return _ORE.FdmStepConditionVector_clear(self)

    def get_allocator(self):
        return _ORE.FdmStepConditionVector_get_allocator(self)

    def pop_back(self):
        return _ORE.FdmStepConditionVector_pop_back(self)

    def erase(self, *args):
        return _ORE.FdmStepConditionVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.FdmStepConditionVector_swiginit(self, _ORE.new_FdmStepConditionVector(*args))

    def push_back(self, x):
        return _ORE.FdmStepConditionVector_push_back(self, x)

    def front(self):
        return _ORE.FdmStepConditionVector_front(self)

    def back(self):
        return _ORE.FdmStepConditionVector_back(self)

    def assign(self, n, x):
        return _ORE.FdmStepConditionVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.FdmStepConditionVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.FdmStepConditionVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.FdmStepConditionVector_reserve(self, n)

    def capacity(self):
        return _ORE.FdmStepConditionVector_capacity(self)
    __swig_destroy__ = _ORE.delete_FdmStepConditionVector

# Register FdmStepConditionVector in _ORE:
_ORE.FdmStepConditionVector_swigregister(FdmStepConditionVector)

class FdmStepConditionComposite(FdmStepCondition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, stoppingTimes, conditions):
        _ORE.FdmStepConditionComposite_swiginit(self, _ORE.new_FdmStepConditionComposite(stoppingTimes, conditions))

    def stoppingTimes(self):
        return _ORE.FdmStepConditionComposite_stoppingTimes(self)

    def conditions(self):
        return _ORE.FdmStepConditionComposite_conditions(self)

    @staticmethod
    def joinConditions(c1, c2):
        return _ORE.FdmStepConditionComposite_joinConditions(c1, c2)

    @staticmethod
    def vanillaComposite(schedule, exercise, mesher, calculator, refDate, dayCounter):
        return _ORE.FdmStepConditionComposite_vanillaComposite(schedule, exercise, mesher, calculator, refDate, dayCounter)
    __swig_destroy__ = _ORE.delete_FdmStepConditionComposite

# Register FdmStepConditionComposite in _ORE:
_ORE.FdmStepConditionComposite_swigregister(FdmStepConditionComposite)

def FdmStepConditionComposite_joinConditions(c1, c2):
    return _ORE.FdmStepConditionComposite_joinConditions(c1, c2)

def FdmStepConditionComposite_vanillaComposite(schedule, exercise, mesher, calculator, refDate, dayCounter):
    return _ORE.FdmStepConditionComposite_vanillaComposite(schedule, exercise, mesher, calculator, refDate, dayCounter)

class FdmAmericanStepCondition(FdmStepCondition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, calculator):
        _ORE.FdmAmericanStepCondition_swiginit(self, _ORE.new_FdmAmericanStepCondition(mesher, calculator))
    __swig_destroy__ = _ORE.delete_FdmAmericanStepCondition

# Register FdmAmericanStepCondition in _ORE:
_ORE.FdmAmericanStepCondition_swigregister(FdmAmericanStepCondition)

class FdmArithmeticAverageCondition(FdmStepCondition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, averageTimes, arg3, pastFixings, mesher, equityDirection):
        _ORE.FdmArithmeticAverageCondition_swiginit(self, _ORE.new_FdmArithmeticAverageCondition(averageTimes, arg3, pastFixings, mesher, equityDirection))
    __swig_destroy__ = _ORE.delete_FdmArithmeticAverageCondition

# Register FdmArithmeticAverageCondition in _ORE:
_ORE.FdmArithmeticAverageCondition_swigregister(FdmArithmeticAverageCondition)

class FdmBermudanStepCondition(FdmStepCondition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, exerciseDates, referenceDate, dayCounter, mesher, calculator):
        _ORE.FdmBermudanStepCondition_swiginit(self, _ORE.new_FdmBermudanStepCondition(exerciseDates, referenceDate, dayCounter, mesher, calculator))

    def exerciseTimes(self):
        return _ORE.FdmBermudanStepCondition_exerciseTimes(self)
    __swig_destroy__ = _ORE.delete_FdmBermudanStepCondition

# Register FdmBermudanStepCondition in _ORE:
_ORE.FdmBermudanStepCondition_swigregister(FdmBermudanStepCondition)

class FdmSimpleStorageCondition(FdmStepCondition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, exerciseTimes, mesher, calculator, changeRate):
        _ORE.FdmSimpleStorageCondition_swiginit(self, _ORE.new_FdmSimpleStorageCondition(exerciseTimes, mesher, calculator, changeRate))
    __swig_destroy__ = _ORE.delete_FdmSimpleStorageCondition

# Register FdmSimpleStorageCondition in _ORE:
_ORE.FdmSimpleStorageCondition_swigregister(FdmSimpleStorageCondition)

class FdmSimpleSwingCondition(FdmStepCondition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, exerciseTimes, mesher, calculator, swingDirection, minExercises=0):
        _ORE.FdmSimpleSwingCondition_swiginit(self, _ORE.new_FdmSimpleSwingCondition(exerciseTimes, mesher, calculator, swingDirection, minExercises))
    __swig_destroy__ = _ORE.delete_FdmSimpleSwingCondition

# Register FdmSimpleSwingCondition in _ORE:
_ORE.FdmSimpleSwingCondition_swigregister(FdmSimpleSwingCondition)

class FdmDividendHandler(FdmStepCondition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, schedule, mesher, referenceDate, dayCounter, equityDirection):
        _ORE.FdmDividendHandler_swiginit(self, _ORE.new_FdmDividendHandler(schedule, mesher, referenceDate, dayCounter, equityDirection))

    def dividendTimes(self):
        return _ORE.FdmDividendHandler_dividendTimes(self)

    def dividendDates(self):
        return _ORE.FdmDividendHandler_dividendDates(self)

    def dividends(self):
        return _ORE.FdmDividendHandler_dividends(self)
    __swig_destroy__ = _ORE.delete_FdmDividendHandler

# Register FdmDividendHandler in _ORE:
_ORE.FdmDividendHandler_swigregister(FdmDividendHandler)

class FdmSolverDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, bcSet, condition, calculator, maturity, timeSteps, dampingSteps):
        _ORE.FdmSolverDesc_swiginit(self, _ORE.new_FdmSolverDesc(mesher, bcSet, condition, calculator, maturity, timeSteps, dampingSteps))

    def getMesher(self):
        return _ORE.FdmSolverDesc_getMesher(self)

    def getBcSet(self):
        return _ORE.FdmSolverDesc_getBcSet(self)

    def getStepConditions(self):
        return _ORE.FdmSolverDesc_getStepConditions(self)

    def getCalculator(self):
        return _ORE.FdmSolverDesc_getCalculator(self)

    def getMaturity(self):
        return _ORE.FdmSolverDesc_getMaturity(self)

    def getTimeSteps(self):
        return _ORE.FdmSolverDesc_getTimeSteps(self)

    def getDampingSteps(self):
        return _ORE.FdmSolverDesc_getDampingSteps(self)
    __swig_destroy__ = _ORE.delete_FdmSolverDesc

# Register FdmSolverDesc in _ORE:
_ORE.FdmSolverDesc_swigregister(FdmSolverDesc)

class Fdm1DimSolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, solverDesc, schemeDesc, op):
        _ORE.Fdm1DimSolver_swiginit(self, _ORE.new_Fdm1DimSolver(solverDesc, schemeDesc, op))

    def interpolateAt(self, x):
        return _ORE.Fdm1DimSolver_interpolateAt(self, x)

    def thetaAt(self, x):
        return _ORE.Fdm1DimSolver_thetaAt(self, x)

    def derivativeX(self, x):
        return _ORE.Fdm1DimSolver_derivativeX(self, x)

    def derivativeXX(self, x):
        return _ORE.Fdm1DimSolver_derivativeXX(self, x)
    __swig_destroy__ = _ORE.delete_Fdm1DimSolver

# Register Fdm1DimSolver in _ORE:
_ORE.Fdm1DimSolver_swigregister(Fdm1DimSolver)

class FdmBackwardSolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, map, bcSet, condition, schemeDesc):
        _ORE.FdmBackwardSolver_swiginit(self, _ORE.new_FdmBackwardSolver(map, bcSet, condition, schemeDesc))

    def rollback(self, a, _from, to, steps, dampingSteps):
        return _ORE.FdmBackwardSolver_rollback(self, a, _from, to, steps, dampingSteps)
    __swig_destroy__ = _ORE.delete_FdmBackwardSolver

# Register FdmBackwardSolver in _ORE:
_ORE.FdmBackwardSolver_swigregister(FdmBackwardSolver)

class Fdm2dBlackScholesSolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.Fdm2dBlackScholesSolver_swiginit(self, _ORE.new_Fdm2dBlackScholesSolver(*args, **kwargs))

    def valueAt(self, x, y):
        return _ORE.Fdm2dBlackScholesSolver_valueAt(self, x, y)

    def thetaAt(self, x, y):
        return _ORE.Fdm2dBlackScholesSolver_thetaAt(self, x, y)

    def deltaXat(self, x, y):
        return _ORE.Fdm2dBlackScholesSolver_deltaXat(self, x, y)

    def deltaYat(self, x, y):
        return _ORE.Fdm2dBlackScholesSolver_deltaYat(self, x, y)

    def gammaXat(self, x, y):
        return _ORE.Fdm2dBlackScholesSolver_gammaXat(self, x, y)

    def gammaYat(self, x, y):
        return _ORE.Fdm2dBlackScholesSolver_gammaYat(self, x, y)

    def gammaXYat(self, x, y):
        return _ORE.Fdm2dBlackScholesSolver_gammaXYat(self, x, y)
    __swig_destroy__ = _ORE.delete_Fdm2dBlackScholesSolver

# Register Fdm2dBlackScholesSolver in _ORE:
_ORE.Fdm2dBlackScholesSolver_swigregister(Fdm2dBlackScholesSolver)

class Fdm2DimSolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, solverDesc, schemeDesc, op):
        _ORE.Fdm2DimSolver_swiginit(self, _ORE.new_Fdm2DimSolver(solverDesc, schemeDesc, op))

    def interpolateAt(self, x, y):
        return _ORE.Fdm2DimSolver_interpolateAt(self, x, y)

    def thetaAt(self, x, y):
        return _ORE.Fdm2DimSolver_thetaAt(self, x, y)

    def derivativeX(self, x, y):
        return _ORE.Fdm2DimSolver_derivativeX(self, x, y)

    def derivativeY(self, x, y):
        return _ORE.Fdm2DimSolver_derivativeY(self, x, y)

    def derivativeXX(self, x, y):
        return _ORE.Fdm2DimSolver_derivativeXX(self, x, y)

    def derivativeYY(self, x, y):
        return _ORE.Fdm2DimSolver_derivativeYY(self, x, y)

    def derivativeXY(self, x, y):
        return _ORE.Fdm2DimSolver_derivativeXY(self, x, y)
    __swig_destroy__ = _ORE.delete_Fdm2DimSolver

# Register Fdm2DimSolver in _ORE:
_ORE.Fdm2DimSolver_swigregister(Fdm2DimSolver)

class Fdm3DimSolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, solverDesc, schemeDesc, op):
        _ORE.Fdm3DimSolver_swiginit(self, _ORE.new_Fdm3DimSolver(solverDesc, schemeDesc, op))

    def performCalculations(self):
        return _ORE.Fdm3DimSolver_performCalculations(self)

    def interpolateAt(self, x, y, z):
        return _ORE.Fdm3DimSolver_interpolateAt(self, x, y, z)

    def thetaAt(self, x, y, z):
        return _ORE.Fdm3DimSolver_thetaAt(self, x, y, z)
    __swig_destroy__ = _ORE.delete_Fdm3DimSolver

# Register Fdm3DimSolver in _ORE:
_ORE.Fdm3DimSolver_swigregister(Fdm3DimSolver)

class FdmG2Solver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdmG2Solver_swiginit(self, _ORE.new_FdmG2Solver(*args))

    def valueAt(self, x, y):
        return _ORE.FdmG2Solver_valueAt(self, x, y)
    __swig_destroy__ = _ORE.delete_FdmG2Solver

# Register FdmG2Solver in _ORE:
_ORE.FdmG2Solver_swigregister(FdmG2Solver)

class FdmHestonHullWhiteSolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdmHestonHullWhiteSolver_swiginit(self, _ORE.new_FdmHestonHullWhiteSolver(*args))

    def valueAt(self, s, v, r):
        return _ORE.FdmHestonHullWhiteSolver_valueAt(self, s, v, r)

    def thetaAt(self, s, v, r):
        return _ORE.FdmHestonHullWhiteSolver_thetaAt(self, s, v, r)

    def deltaAt(self, s, v, r, eps):
        return _ORE.FdmHestonHullWhiteSolver_deltaAt(self, s, v, r, eps)

    def gammaAt(self, s, v, r, eps):
        return _ORE.FdmHestonHullWhiteSolver_gammaAt(self, s, v, r, eps)
    __swig_destroy__ = _ORE.delete_FdmHestonHullWhiteSolver

# Register FdmHestonHullWhiteSolver in _ORE:
_ORE.FdmHestonHullWhiteSolver_swigregister(FdmHestonHullWhiteSolver)

class FdmHestonSolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.FdmHestonSolver_swiginit(self, _ORE.new_FdmHestonSolver(*args, **kwargs))

    def valueAt(self, s, v):
        return _ORE.FdmHestonSolver_valueAt(self, s, v)

    def thetaAt(self, s, v):
        return _ORE.FdmHestonSolver_thetaAt(self, s, v)

    def deltaAt(self, s, v):
        return _ORE.FdmHestonSolver_deltaAt(self, s, v)

    def gammaAt(self, s, v):
        return _ORE.FdmHestonSolver_gammaAt(self, s, v)

    def meanVarianceDeltaAt(self, s, v):
        return _ORE.FdmHestonSolver_meanVarianceDeltaAt(self, s, v)

    def meanVarianceGammaAt(self, s, v):
        return _ORE.FdmHestonSolver_meanVarianceGammaAt(self, s, v)
    __swig_destroy__ = _ORE.delete_FdmHestonSolver

# Register FdmHestonSolver in _ORE:
_ORE.FdmHestonSolver_swigregister(FdmHestonSolver)

class FdmHullWhiteSolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdmHullWhiteSolver_swiginit(self, _ORE.new_FdmHullWhiteSolver(*args))

    def valueAt(self, r):
        return _ORE.FdmHullWhiteSolver_valueAt(self, r)
    __swig_destroy__ = _ORE.delete_FdmHullWhiteSolver

# Register FdmHullWhiteSolver in _ORE:
_ORE.FdmHullWhiteSolver_swigregister(FdmHullWhiteSolver)

class Fdm4dimSolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, solverDesc, schemeDesc, op):
        _ORE.Fdm4dimSolver_swiginit(self, _ORE.new_Fdm4dimSolver(solverDesc, schemeDesc, op))

    def interpolateAt(self, x):
        return _ORE.Fdm4dimSolver_interpolateAt(self, x)

    def thetaAt(self, x):
        return _ORE.Fdm4dimSolver_thetaAt(self, x)
    __swig_destroy__ = _ORE.delete_Fdm4dimSolver

# Register Fdm4dimSolver in _ORE:
_ORE.Fdm4dimSolver_swigregister(Fdm4dimSolver)

class Fdm5dimSolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, solverDesc, schemeDesc, op):
        _ORE.Fdm5dimSolver_swiginit(self, _ORE.new_Fdm5dimSolver(solverDesc, schemeDesc, op))

    def interpolateAt(self, x):
        return _ORE.Fdm5dimSolver_interpolateAt(self, x)

    def thetaAt(self, x):
        return _ORE.Fdm5dimSolver_thetaAt(self, x)
    __swig_destroy__ = _ORE.delete_Fdm5dimSolver

# Register Fdm5dimSolver in _ORE:
_ORE.Fdm5dimSolver_swigregister(Fdm5dimSolver)

class Fdm6dimSolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, solverDesc, schemeDesc, op):
        _ORE.Fdm6dimSolver_swiginit(self, _ORE.new_Fdm6dimSolver(solverDesc, schemeDesc, op))

    def interpolateAt(self, x):
        return _ORE.Fdm6dimSolver_interpolateAt(self, x)

    def thetaAt(self, x):
        return _ORE.Fdm6dimSolver_thetaAt(self, x)
    __swig_destroy__ = _ORE.delete_Fdm6dimSolver

# Register Fdm6dimSolver in _ORE:
_ORE.Fdm6dimSolver_swigregister(Fdm6dimSolver)

class FdmIndicesOnBoundary(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, l, direction, side):
        _ORE.FdmIndicesOnBoundary_swiginit(self, _ORE.new_FdmIndicesOnBoundary(l, direction, side))

    def getIndices(self):
        return _ORE.FdmIndicesOnBoundary_getIndices(self)
    __swig_destroy__ = _ORE.delete_FdmIndicesOnBoundary

# Register FdmIndicesOnBoundary in _ORE:
_ORE.FdmIndicesOnBoundary_swigregister(FdmIndicesOnBoundary)

class RiskNeutralDensityCalculator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def pdf(self, x, t):
        return _ORE.RiskNeutralDensityCalculator_pdf(self, x, t)

    def cdf(self, x, t):
        return _ORE.RiskNeutralDensityCalculator_cdf(self, x, t)

    def invcdf(self, p, t):
        return _ORE.RiskNeutralDensityCalculator_invcdf(self, p, t)
    __swig_destroy__ = _ORE.delete_RiskNeutralDensityCalculator

# Register RiskNeutralDensityCalculator in _ORE:
_ORE.RiskNeutralDensityCalculator_swigregister(RiskNeutralDensityCalculator)

class BSMRNDCalculator(RiskNeutralDensityCalculator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.BSMRNDCalculator_swiginit(self, _ORE.new_BSMRNDCalculator(process))
    __swig_destroy__ = _ORE.delete_BSMRNDCalculator

# Register BSMRNDCalculator in _ORE:
_ORE.BSMRNDCalculator_swigregister(BSMRNDCalculator)

class CEVRNDCalculator(RiskNeutralDensityCalculator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, f0, alpha, beta):
        _ORE.CEVRNDCalculator_swiginit(self, _ORE.new_CEVRNDCalculator(f0, alpha, beta))

    def massAtZero(self, t):
        return _ORE.CEVRNDCalculator_massAtZero(self, t)
    __swig_destroy__ = _ORE.delete_CEVRNDCalculator

# Register CEVRNDCalculator in _ORE:
_ORE.CEVRNDCalculator_swigregister(CEVRNDCalculator)

class GBSMRNDCalculator(RiskNeutralDensityCalculator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.GBSMRNDCalculator_swiginit(self, _ORE.new_GBSMRNDCalculator(process))
    __swig_destroy__ = _ORE.delete_GBSMRNDCalculator

# Register GBSMRNDCalculator in _ORE:
_ORE.GBSMRNDCalculator_swigregister(GBSMRNDCalculator)

class HestonRNDCalculator(RiskNeutralDensityCalculator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, hestonProcess, integrationEps=1e-6, maxIntegrationIterations=10000):
        _ORE.HestonRNDCalculator_swiginit(self, _ORE.new_HestonRNDCalculator(hestonProcess, integrationEps, maxIntegrationIterations))
    __swig_destroy__ = _ORE.delete_HestonRNDCalculator

# Register HestonRNDCalculator in _ORE:
_ORE.HestonRNDCalculator_swigregister(HestonRNDCalculator)

class LocalVolRNDCalculator(RiskNeutralDensityCalculator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.LocalVolRNDCalculator_swiginit(self, _ORE.new_LocalVolRNDCalculator(*args, **kwargs))

    def mesher(self, t):
        return _ORE.LocalVolRNDCalculator_mesher(self, t)

    def rescaleTimeSteps(self):
        return _ORE.LocalVolRNDCalculator_rescaleTimeSteps(self)
    __swig_destroy__ = _ORE.delete_LocalVolRNDCalculator

# Register LocalVolRNDCalculator in _ORE:
_ORE.LocalVolRNDCalculator_swigregister(LocalVolRNDCalculator)

class SquareRootProcessRNDCalculator(RiskNeutralDensityCalculator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, v0, kappa, theta, sigma):
        _ORE.SquareRootProcessRNDCalculator_swiginit(self, _ORE.new_SquareRootProcessRNDCalculator(v0, kappa, theta, sigma))

    def stationary_pdf(self, v):
        return _ORE.SquareRootProcessRNDCalculator_stationary_pdf(self, v)

    def stationary_cdf(self, v):
        return _ORE.SquareRootProcessRNDCalculator_stationary_cdf(self, v)

    def stationary_invcdf(self, q):
        return _ORE.SquareRootProcessRNDCalculator_stationary_invcdf(self, q)
    __swig_destroy__ = _ORE.delete_SquareRootProcessRNDCalculator

# Register SquareRootProcessRNDCalculator in _ORE:
_ORE.SquareRootProcessRNDCalculator_swigregister(SquareRootProcessRNDCalculator)

class FittingMethod(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ORE.delete_FittingMethod

    def size(self):
        return _ORE.FittingMethod_size(self)

    def solution(self):
        return _ORE.FittingMethod_solution(self)

    def numberOfIterations(self):
        return _ORE.FittingMethod_numberOfIterations(self)

    def minimumCostValue(self):
        return _ORE.FittingMethod_minimumCostValue(self)

    def constrainAtZero(self):
        return _ORE.FittingMethod_constrainAtZero(self)

    def weights(self):
        return _ORE.FittingMethod_weights(self)

# Register FittingMethod in _ORE:
_ORE.FittingMethod_swigregister(FittingMethod)

class FittedBondDiscountCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FittedBondDiscountCurve_swiginit(self, _ORE.new_FittedBondDiscountCurve(*args))

    def fitResults(self):
        return _ORE.FittedBondDiscountCurve_fitResults(self)
    __swig_destroy__ = _ORE.delete_FittedBondDiscountCurve

# Register FittedBondDiscountCurve in _ORE:
_ORE.FittedBondDiscountCurve_swigregister(FittedBondDiscountCurve)

class ExponentialSplinesFitting(FittingMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ExponentialSplinesFitting_swiginit(self, _ORE.new_ExponentialSplinesFitting(*args))
    __swig_destroy__ = _ORE.delete_ExponentialSplinesFitting

# Register ExponentialSplinesFitting in _ORE:
_ORE.ExponentialSplinesFitting_swigregister(ExponentialSplinesFitting)

class NelsonSiegelFitting(FittingMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.NelsonSiegelFitting_swiginit(self, _ORE.new_NelsonSiegelFitting(*args))
    __swig_destroy__ = _ORE.delete_NelsonSiegelFitting

# Register NelsonSiegelFitting in _ORE:
_ORE.NelsonSiegelFitting_swigregister(NelsonSiegelFitting)

class SvenssonFitting(FittingMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SvenssonFitting_swiginit(self, _ORE.new_SvenssonFitting(*args))
    __swig_destroy__ = _ORE.delete_SvenssonFitting

# Register SvenssonFitting in _ORE:
_ORE.SvenssonFitting_swigregister(SvenssonFitting)

class CubicBSplinesFitting(FittingMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CubicBSplinesFitting_swiginit(self, _ORE.new_CubicBSplinesFitting(*args))

    def basisFunction(self, i, t):
        return _ORE.CubicBSplinesFitting_basisFunction(self, i, t)
    __swig_destroy__ = _ORE.delete_CubicBSplinesFitting

# Register CubicBSplinesFitting in _ORE:
_ORE.CubicBSplinesFitting_swigregister(CubicBSplinesFitting)

class SimplePolynomialFitting(FittingMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SimplePolynomialFitting_swiginit(self, _ORE.new_SimplePolynomialFitting(*args))
    __swig_destroy__ = _ORE.delete_SimplePolynomialFitting

# Register SimplePolynomialFitting in _ORE:
_ORE.SimplePolynomialFitting_swigregister(SimplePolynomialFitting)

class SpreadFittingMethod(FittingMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SpreadFittingMethod_swiginit(self, _ORE.new_SpreadFittingMethod(*args))
    __swig_destroy__ = _ORE.delete_SpreadFittingMethod

# Register SpreadFittingMethod in _ORE:
_ORE.SpreadFittingMethod_swigregister(SpreadFittingMethod)

class ForwardCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ForwardCurve_swiginit(self, _ORE.new_ForwardCurve(*args))

    def dates(self):
        return _ORE.ForwardCurve_dates(self)

    def forwards(self):
        return _ORE.ForwardCurve_forwards(self)

    def nodes(self):
        return _ORE.ForwardCurve_nodes(self)
    __swig_destroy__ = _ORE.delete_ForwardCurve

# Register ForwardCurve in _ORE:
_ORE.ForwardCurve_swigregister(ForwardCurve)

class Position(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Long = _ORE.Position_Long
    Short = _ORE.Position_Short

    def __init__(self):
        _ORE.Position_swiginit(self, _ORE.new_Position())
    __swig_destroy__ = _ORE.delete_Position

# Register Position in _ORE:
_ORE.Position_swigregister(Position)

class ForwardRateAgreement(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ForwardRateAgreement_swiginit(self, _ORE.new_ForwardRateAgreement(*args))

    def amount(self):
        return _ORE.ForwardRateAgreement_amount(self)

    def fixingDate(self):
        return _ORE.ForwardRateAgreement_fixingDate(self)

    def forwardRate(self):
        return _ORE.ForwardRateAgreement_forwardRate(self)
    __swig_destroy__ = _ORE.delete_ForwardRateAgreement

# Register ForwardRateAgreement in _ORE:
_ORE.ForwardRateAgreement_swigregister(ForwardRateAgreement)

class Gaussian1dModel(TermStructureConsistentModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def stateProcess(self):
        return _ORE.Gaussian1dModel_stateProcess(self)

    def numeraire(self, *args):
        return _ORE.Gaussian1dModel_numeraire(self, *args)

    def zerobond(self, *args):
        return _ORE.Gaussian1dModel_zerobond(self, *args)

    def zerobondOption(self, *args):
        return _ORE.Gaussian1dModel_zerobondOption(self, *args)

    def forwardRate(self, *args):
        return _ORE.Gaussian1dModel_forwardRate(self, *args)

    def swapRate(self, *args):
        return _ORE.Gaussian1dModel_swapRate(self, *args)

    def swapAnnuity(self, *args):
        return _ORE.Gaussian1dModel_swapAnnuity(self, *args)
    __swig_destroy__ = _ORE.delete_Gaussian1dModel

# Register Gaussian1dModel in _ORE:
_ORE.Gaussian1dModel_swigregister(Gaussian1dModel)

class Gsr(Gaussian1dModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, termStructure, volstepdates, volatilities, reversions, T=60.0):
        _ORE.Gsr_swiginit(self, _ORE.new_Gsr(termStructure, volstepdates, volatilities, reversions, T))

    def calibrateVolatilitiesIterative(self, *args):
        return _ORE.Gsr_calibrateVolatilitiesIterative(self, *args)

    def reversion(self):
        return _ORE.Gsr_reversion(self)

    def volatility(self):
        return _ORE.Gsr_volatility(self)

    def params(self):
        return _ORE.Gsr_params(self)

    def calibrate(self, *args):
        return _ORE.Gsr_calibrate(self, *args)

    def setParams(self, params):
        return _ORE.Gsr_setParams(self, params)

    def value(self, params, instruments):
        return _ORE.Gsr_value(self, params, instruments)

    def constraint(self):
        return _ORE.Gsr_constraint(self)

    def endCriteria(self):
        return _ORE.Gsr_endCriteria(self)

    def problemValues(self):
        return _ORE.Gsr_problemValues(self)

    def functionEvaluation(self):
        return _ORE.Gsr_functionEvaluation(self)
    __swig_destroy__ = _ORE.delete_Gsr

# Register Gsr in _ORE:
_ORE.Gsr_swigregister(Gsr)

class MarkovFunctional(Gaussian1dModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.MarkovFunctional_swiginit(self, _ORE.new_MarkovFunctional(*args))

    def volatility(self):
        return _ORE.MarkovFunctional_volatility(self)

    def calibrate(self, *args):
        return _ORE.MarkovFunctional_calibrate(self, *args)

    def params(self):
        return _ORE.MarkovFunctional_params(self)

    def setParams(self, params):
        return _ORE.MarkovFunctional_setParams(self, params)

    def value(self, params, instruments):
        return _ORE.MarkovFunctional_value(self, params, instruments)

    def constraint(self):
        return _ORE.MarkovFunctional_constraint(self)

    def endCriteria(self):
        return _ORE.MarkovFunctional_endCriteria(self)

    def problemValues(self):
        return _ORE.MarkovFunctional_problemValues(self)

    def functionEvaluation(self):
        return _ORE.MarkovFunctional_functionEvaluation(self)
    __swig_destroy__ = _ORE.delete_MarkovFunctional

# Register MarkovFunctional in _ORE:
_ORE.MarkovFunctional_swigregister(MarkovFunctional)

class MarkovFunctionalSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AdjustNone = _ORE.MarkovFunctionalSettings_AdjustNone
    AdjustDigitals = _ORE.MarkovFunctionalSettings_AdjustDigitals
    AdjustYts = _ORE.MarkovFunctionalSettings_AdjustYts
    ExtrapolatePayoffFlat = _ORE.MarkovFunctionalSettings_ExtrapolatePayoffFlat
    NoPayoffExtrapolation = _ORE.MarkovFunctionalSettings_NoPayoffExtrapolation
    KahaleSmile = _ORE.MarkovFunctionalSettings_KahaleSmile
    SmileExponentialExtrapolation = _ORE.MarkovFunctionalSettings_SmileExponentialExtrapolation
    KahaleInterpolation = _ORE.MarkovFunctionalSettings_KahaleInterpolation
    SmileDeleteArbitragePoints = _ORE.MarkovFunctionalSettings_SmileDeleteArbitragePoints
    SabrSmile = _ORE.MarkovFunctionalSettings_SabrSmile

    def __init__(self, *args):
        _ORE.MarkovFunctionalSettings_swiginit(self, _ORE.new_MarkovFunctionalSettings(*args))

    def validate(self):
        return _ORE.MarkovFunctionalSettings_validate(self)
    __swig_destroy__ = _ORE.delete_MarkovFunctionalSettings

# Register MarkovFunctionalSettings in _ORE:
_ORE.MarkovFunctionalSettings_swigregister(MarkovFunctionalSettings)

class Gaussian1dCapFloorEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Gaussian1dCapFloorEngine_swiginit(self, _ORE.new_Gaussian1dCapFloorEngine(*args))
    __swig_destroy__ = _ORE.delete_Gaussian1dCapFloorEngine

# Register Gaussian1dCapFloorEngine in _ORE:
_ORE.Gaussian1dCapFloorEngine_swigregister(Gaussian1dCapFloorEngine)

class Gaussian1dSwaptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoProb = _ORE.Gaussian1dSwaptionEngine_NoProb
    Naive = _ORE.Gaussian1dSwaptionEngine_Naive
    Digital = _ORE.Gaussian1dSwaptionEngine_Digital

    def __init__(self, *args):
        _ORE.Gaussian1dSwaptionEngine_swiginit(self, _ORE.new_Gaussian1dSwaptionEngine(*args))
    __swig_destroy__ = _ORE.delete_Gaussian1dSwaptionEngine

# Register Gaussian1dSwaptionEngine in _ORE:
_ORE.Gaussian1dSwaptionEngine_swigregister(Gaussian1dSwaptionEngine)

class Gaussian1dJamshidianSwaptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model):
        _ORE.Gaussian1dJamshidianSwaptionEngine_swiginit(self, _ORE.new_Gaussian1dJamshidianSwaptionEngine(model))
    __swig_destroy__ = _ORE.delete_Gaussian1dJamshidianSwaptionEngine

# Register Gaussian1dJamshidianSwaptionEngine in _ORE:
_ORE.Gaussian1dJamshidianSwaptionEngine_swigregister(Gaussian1dJamshidianSwaptionEngine)

class Gaussian1dNonstandardSwaptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoProb = _ORE.Gaussian1dNonstandardSwaptionEngine_NoProb
    Naive = _ORE.Gaussian1dNonstandardSwaptionEngine_Naive
    Digital = _ORE.Gaussian1dNonstandardSwaptionEngine_Digital

    def __init__(self, *args):
        _ORE.Gaussian1dNonstandardSwaptionEngine_swiginit(self, _ORE.new_Gaussian1dNonstandardSwaptionEngine(*args))
    __swig_destroy__ = _ORE.delete_Gaussian1dNonstandardSwaptionEngine

# Register Gaussian1dNonstandardSwaptionEngine in _ORE:
_ORE.Gaussian1dNonstandardSwaptionEngine_swigregister(Gaussian1dNonstandardSwaptionEngine)

class Gaussian1dFloatFloatSwaptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoProb = _ORE.Gaussian1dFloatFloatSwaptionEngine_NoProb
    Naive = _ORE.Gaussian1dFloatFloatSwaptionEngine_Naive
    Digital = _ORE.Gaussian1dFloatFloatSwaptionEngine_Digital

    def __init__(self, *args):
        _ORE.Gaussian1dFloatFloatSwaptionEngine_swiginit(self, _ORE.new_Gaussian1dFloatFloatSwaptionEngine(*args))
    __swig_destroy__ = _ORE.delete_Gaussian1dFloatFloatSwaptionEngine

# Register Gaussian1dFloatFloatSwaptionEngine in _ORE:
_ORE.Gaussian1dFloatFloatSwaptionEngine_swigregister(Gaussian1dFloatFloatSwaptionEngine)

class SegmentIntegral(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, intervals):
        _ORE.SegmentIntegral_swiginit(self, _ORE.new_SegmentIntegral(intervals))

    def __call__(self, pyFunction, a, b):
        return _ORE.SegmentIntegral___call__(self, pyFunction, a, b)
    __swig_destroy__ = _ORE.delete_SegmentIntegral

# Register SegmentIntegral in _ORE:
_ORE.SegmentIntegral_swigregister(SegmentIntegral)

class TrapezoidIntegralDefault(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, accuracy, maxIterations):
        _ORE.TrapezoidIntegralDefault_swiginit(self, _ORE.new_TrapezoidIntegralDefault(accuracy, maxIterations))

    def __call__(self, pyFunction, a, b):
        return _ORE.TrapezoidIntegralDefault___call__(self, pyFunction, a, b)
    __swig_destroy__ = _ORE.delete_TrapezoidIntegralDefault

# Register TrapezoidIntegralDefault in _ORE:
_ORE.TrapezoidIntegralDefault_swigregister(TrapezoidIntegralDefault)

class TrapezoidIntegralMidPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, accuracy, maxIterations):
        _ORE.TrapezoidIntegralMidPoint_swiginit(self, _ORE.new_TrapezoidIntegralMidPoint(accuracy, maxIterations))

    def __call__(self, pyFunction, a, b):
        return _ORE.TrapezoidIntegralMidPoint___call__(self, pyFunction, a, b)
    __swig_destroy__ = _ORE.delete_TrapezoidIntegralMidPoint

# Register TrapezoidIntegralMidPoint in _ORE:
_ORE.TrapezoidIntegralMidPoint_swigregister(TrapezoidIntegralMidPoint)

class SimpsonIntegral(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, accuracy, maxIterations):
        _ORE.SimpsonIntegral_swiginit(self, _ORE.new_SimpsonIntegral(accuracy, maxIterations))

    def __call__(self, pyFunction, a, b):
        return _ORE.SimpsonIntegral___call__(self, pyFunction, a, b)
    __swig_destroy__ = _ORE.delete_SimpsonIntegral

# Register SimpsonIntegral in _ORE:
_ORE.SimpsonIntegral_swigregister(SimpsonIntegral)

class GaussKronrodAdaptive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.GaussKronrodAdaptive_swiginit(self, _ORE.new_GaussKronrodAdaptive(*args))

    def __call__(self, pyFunction, a, b):
        return _ORE.GaussKronrodAdaptive___call__(self, pyFunction, a, b)
    __swig_destroy__ = _ORE.delete_GaussKronrodAdaptive

# Register GaussKronrodAdaptive in _ORE:
_ORE.GaussKronrodAdaptive_swigregister(GaussKronrodAdaptive)

class GaussKronrodNonAdaptive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, absoluteAccuracy, maxEvaluations, relativeAccuracy):
        _ORE.GaussKronrodNonAdaptive_swiginit(self, _ORE.new_GaussKronrodNonAdaptive(absoluteAccuracy, maxEvaluations, relativeAccuracy))

    def __call__(self, pyFunction, a, b):
        return _ORE.GaussKronrodNonAdaptive___call__(self, pyFunction, a, b)
    __swig_destroy__ = _ORE.delete_GaussKronrodNonAdaptive

# Register GaussKronrodNonAdaptive in _ORE:
_ORE.GaussKronrodNonAdaptive_swigregister(GaussKronrodNonAdaptive)

class GaussLobattoIntegral(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.GaussLobattoIntegral_swiginit(self, _ORE.new_GaussLobattoIntegral(*args))

    def __call__(self, pyFunction, a, b):
        return _ORE.GaussLobattoIntegral___call__(self, pyFunction, a, b)
    __swig_destroy__ = _ORE.delete_GaussLobattoIntegral

# Register GaussLobattoIntegral in _ORE:
_ORE.GaussLobattoIntegral_swigregister(GaussLobattoIntegral)

class GaussianQuadrature(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def order(self):
        return _ORE.GaussianQuadrature_order(self)

    def weights(self):
        return _ORE.GaussianQuadrature_weights(self)

    def x(self):
        return _ORE.GaussianQuadrature_x(self)

    def __call__(self, pyFunction):
        return _ORE.GaussianQuadrature___call__(self, pyFunction)
    __swig_destroy__ = _ORE.delete_GaussianQuadrature

# Register GaussianQuadrature in _ORE:
_ORE.GaussianQuadrature_swigregister(GaussianQuadrature)

class GaussLaguerreIntegration(GaussianQuadrature):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n, s=0.0):
        _ORE.GaussLaguerreIntegration_swiginit(self, _ORE.new_GaussLaguerreIntegration(n, s))
    __swig_destroy__ = _ORE.delete_GaussLaguerreIntegration

# Register GaussLaguerreIntegration in _ORE:
_ORE.GaussLaguerreIntegration_swigregister(GaussLaguerreIntegration)

class GaussHermiteIntegration(GaussianQuadrature):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n, mu=0.0):
        _ORE.GaussHermiteIntegration_swiginit(self, _ORE.new_GaussHermiteIntegration(n, mu))
    __swig_destroy__ = _ORE.delete_GaussHermiteIntegration

# Register GaussHermiteIntegration in _ORE:
_ORE.GaussHermiteIntegration_swigregister(GaussHermiteIntegration)

class GaussJacobiIntegration(GaussianQuadrature):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n, alpha, beta):
        _ORE.GaussJacobiIntegration_swiginit(self, _ORE.new_GaussJacobiIntegration(n, alpha, beta))
    __swig_destroy__ = _ORE.delete_GaussJacobiIntegration

# Register GaussJacobiIntegration in _ORE:
_ORE.GaussJacobiIntegration_swigregister(GaussJacobiIntegration)

class GaussHyperbolicIntegration(GaussianQuadrature):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n):
        _ORE.GaussHyperbolicIntegration_swiginit(self, _ORE.new_GaussHyperbolicIntegration(n))
    __swig_destroy__ = _ORE.delete_GaussHyperbolicIntegration

# Register GaussHyperbolicIntegration in _ORE:
_ORE.GaussHyperbolicIntegration_swigregister(GaussHyperbolicIntegration)

class GaussLegendreIntegration(GaussianQuadrature):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n):
        _ORE.GaussLegendreIntegration_swiginit(self, _ORE.new_GaussLegendreIntegration(n))
    __swig_destroy__ = _ORE.delete_GaussLegendreIntegration

# Register GaussLegendreIntegration in _ORE:
_ORE.GaussLegendreIntegration_swigregister(GaussLegendreIntegration)

class GaussChebyshevIntegration(GaussianQuadrature):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n):
        _ORE.GaussChebyshevIntegration_swiginit(self, _ORE.new_GaussChebyshevIntegration(n))
    __swig_destroy__ = _ORE.delete_GaussChebyshevIntegration

# Register GaussChebyshevIntegration in _ORE:
_ORE.GaussChebyshevIntegration_swigregister(GaussChebyshevIntegration)

class GaussChebyshev2ndIntegration(GaussianQuadrature):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n):
        _ORE.GaussChebyshev2ndIntegration_swiginit(self, _ORE.new_GaussChebyshev2ndIntegration(n))
    __swig_destroy__ = _ORE.delete_GaussChebyshev2ndIntegration

# Register GaussChebyshev2ndIntegration in _ORE:
_ORE.GaussChebyshev2ndIntegration_swigregister(GaussChebyshev2ndIntegration)

class GaussGegenbauerIntegration(GaussianQuadrature):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n, lambda_parameter):
        _ORE.GaussGegenbauerIntegration_swiginit(self, _ORE.new_GaussGegenbauerIntegration(n, lambda_parameter))
    __swig_destroy__ = _ORE.delete_GaussGegenbauerIntegration

# Register GaussGegenbauerIntegration in _ORE:
_ORE.GaussGegenbauerIntegration_swigregister(GaussGegenbauerIntegration)

class TanhSinhIntegral(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.TanhSinhIntegral_swiginit(self, _ORE.new_TanhSinhIntegral(*args))

    def __call__(self, pyFunction, a, b):
        return _ORE.TanhSinhIntegral___call__(self, pyFunction, a, b)
    __swig_destroy__ = _ORE.delete_TanhSinhIntegral

# Register TanhSinhIntegral in _ORE:
_ORE.TanhSinhIntegral_swigregister(TanhSinhIntegral)

class LocalConstantVol(LocalVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.LocalConstantVol_swiginit(self, _ORE.new_LocalConstantVol(*args))
    __swig_destroy__ = _ORE.delete_LocalConstantVol

# Register LocalConstantVol in _ORE:
_ORE.LocalConstantVol_swigregister(LocalConstantVol)

class LocalVolSurface(LocalVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.LocalVolSurface_swiginit(self, _ORE.new_LocalVolSurface(*args))
    __swig_destroy__ = _ORE.delete_LocalVolSurface

# Register LocalVolSurface in _ORE:
_ORE.LocalVolSurface_swigregister(LocalVolSurface)

class NoExceptLocalVolSurface(LocalVolSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.NoExceptLocalVolSurface_swiginit(self, _ORE.new_NoExceptLocalVolSurface(*args))
    __swig_destroy__ = _ORE.delete_NoExceptLocalVolSurface

# Register NoExceptLocalVolSurface in _ORE:
_ORE.NoExceptLocalVolSurface_swigregister(NoExceptLocalVolSurface)

class FixedLocalVolSurface(LocalVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ConstantExtrapolation = _ORE.FixedLocalVolSurface_ConstantExtrapolation
    InterpolatorDefaultExtrapolation = _ORE.FixedLocalVolSurface_InterpolatorDefaultExtrapolation

    def __init__(self, *args):
        _ORE.FixedLocalVolSurface_swiginit(self, _ORE.new_FixedLocalVolSurface(*args))

    def setInterpolation(self, *args):
        return _ORE.FixedLocalVolSurface_setInterpolation(self, *args)
    __swig_destroy__ = _ORE.delete_FixedLocalVolSurface

# Register FixedLocalVolSurface in _ORE:
_ORE.FixedLocalVolSurface_swigregister(FixedLocalVolSurface)

class GridModelLocalVolSurface(LocalVolTermStructure, CalibratedModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.GridModelLocalVolSurface_swiginit(self, _ORE.new_GridModelLocalVolSurface(*args))
    __swig_destroy__ = _ORE.delete_GridModelLocalVolSurface

# Register GridModelLocalVolSurface in _ORE:
_ORE.GridModelLocalVolSurface_swigregister(GridModelLocalVolSurface)

class SampleNumber(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self):
        return _ORE.SampleNumber_value(self)

    def weight(self):
        return _ORE.SampleNumber_weight(self)
    __swig_destroy__ = _ORE.delete_SampleNumber

# Register SampleNumber in _ORE:
_ORE.SampleNumber_swigregister(SampleNumber)

class SampleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self):
        return _ORE.SampleArray_value(self)

    def weight(self):
        return _ORE.SampleArray_weight(self)
    __swig_destroy__ = _ORE.delete_SampleArray

# Register SampleArray in _ORE:
_ORE.SampleArray_swigregister(SampleArray)

class SampleRealVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self):
        return _ORE.SampleRealVector_value(self)

    def weight(self):
        return _ORE.SampleRealVector_weight(self)
    __swig_destroy__ = _ORE.delete_SampleRealVector

# Register SampleRealVector in _ORE:
_ORE.SampleRealVector_swigregister(SampleRealVector)

class LecuyerUniformRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        _ORE.LecuyerUniformRng_swiginit(self, _ORE.new_LecuyerUniformRng(seed))

    def next(self):
        return _ORE.LecuyerUniformRng_next(self)
    __swig_destroy__ = _ORE.delete_LecuyerUniformRng

# Register LecuyerUniformRng in _ORE:
_ORE.LecuyerUniformRng_swigregister(LecuyerUniformRng)

class KnuthUniformRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        _ORE.KnuthUniformRng_swiginit(self, _ORE.new_KnuthUniformRng(seed))

    def next(self):
        return _ORE.KnuthUniformRng_next(self)
    __swig_destroy__ = _ORE.delete_KnuthUniformRng

# Register KnuthUniformRng in _ORE:
_ORE.KnuthUniformRng_swigregister(KnuthUniformRng)

class MersenneTwisterUniformRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        _ORE.MersenneTwisterUniformRng_swiginit(self, _ORE.new_MersenneTwisterUniformRng(seed))

    def next(self):
        return _ORE.MersenneTwisterUniformRng_next(self)
    __swig_destroy__ = _ORE.delete_MersenneTwisterUniformRng

# Register MersenneTwisterUniformRng in _ORE:
_ORE.MersenneTwisterUniformRng_swigregister(MersenneTwisterUniformRng)

class UniformRandomGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        _ORE.UniformRandomGenerator_swiginit(self, _ORE.new_UniformRandomGenerator(seed))

    def next(self):
        return _ORE.UniformRandomGenerator_next(self)

    def nextValue(self):
        return _ORE.UniformRandomGenerator_nextValue(self)
    __swig_destroy__ = _ORE.delete_UniformRandomGenerator

# Register UniformRandomGenerator in _ORE:
_ORE.UniformRandomGenerator_swigregister(UniformRandomGenerator)

class CentralLimitLecuyerGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        _ORE.CentralLimitLecuyerGaussianRng_swiginit(self, _ORE.new_CentralLimitLecuyerGaussianRng(rng))

    def next(self):
        return _ORE.CentralLimitLecuyerGaussianRng_next(self)
    __swig_destroy__ = _ORE.delete_CentralLimitLecuyerGaussianRng

# Register CentralLimitLecuyerGaussianRng in _ORE:
_ORE.CentralLimitLecuyerGaussianRng_swigregister(CentralLimitLecuyerGaussianRng)

class CentralLimitKnuthGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        _ORE.CentralLimitKnuthGaussianRng_swiginit(self, _ORE.new_CentralLimitKnuthGaussianRng(rng))

    def next(self):
        return _ORE.CentralLimitKnuthGaussianRng_next(self)
    __swig_destroy__ = _ORE.delete_CentralLimitKnuthGaussianRng

# Register CentralLimitKnuthGaussianRng in _ORE:
_ORE.CentralLimitKnuthGaussianRng_swigregister(CentralLimitKnuthGaussianRng)

class CentralLimitMersenneTwisterGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        _ORE.CentralLimitMersenneTwisterGaussianRng_swiginit(self, _ORE.new_CentralLimitMersenneTwisterGaussianRng(rng))

    def next(self):
        return _ORE.CentralLimitMersenneTwisterGaussianRng_next(self)
    __swig_destroy__ = _ORE.delete_CentralLimitMersenneTwisterGaussianRng

# Register CentralLimitMersenneTwisterGaussianRng in _ORE:
_ORE.CentralLimitMersenneTwisterGaussianRng_swigregister(CentralLimitMersenneTwisterGaussianRng)

class BoxMullerLecuyerGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        _ORE.BoxMullerLecuyerGaussianRng_swiginit(self, _ORE.new_BoxMullerLecuyerGaussianRng(rng))

    def next(self):
        return _ORE.BoxMullerLecuyerGaussianRng_next(self)
    __swig_destroy__ = _ORE.delete_BoxMullerLecuyerGaussianRng

# Register BoxMullerLecuyerGaussianRng in _ORE:
_ORE.BoxMullerLecuyerGaussianRng_swigregister(BoxMullerLecuyerGaussianRng)

class BoxMullerKnuthGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        _ORE.BoxMullerKnuthGaussianRng_swiginit(self, _ORE.new_BoxMullerKnuthGaussianRng(rng))

    def next(self):
        return _ORE.BoxMullerKnuthGaussianRng_next(self)
    __swig_destroy__ = _ORE.delete_BoxMullerKnuthGaussianRng

# Register BoxMullerKnuthGaussianRng in _ORE:
_ORE.BoxMullerKnuthGaussianRng_swigregister(BoxMullerKnuthGaussianRng)

class BoxMullerMersenneTwisterGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        _ORE.BoxMullerMersenneTwisterGaussianRng_swiginit(self, _ORE.new_BoxMullerMersenneTwisterGaussianRng(rng))

    def next(self):
        return _ORE.BoxMullerMersenneTwisterGaussianRng_next(self)
    __swig_destroy__ = _ORE.delete_BoxMullerMersenneTwisterGaussianRng

# Register BoxMullerMersenneTwisterGaussianRng in _ORE:
_ORE.BoxMullerMersenneTwisterGaussianRng_swigregister(BoxMullerMersenneTwisterGaussianRng)

class MoroInvCumulativeLecuyerGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        _ORE.MoroInvCumulativeLecuyerGaussianRng_swiginit(self, _ORE.new_MoroInvCumulativeLecuyerGaussianRng(rng))

    def next(self):
        return _ORE.MoroInvCumulativeLecuyerGaussianRng_next(self)
    __swig_destroy__ = _ORE.delete_MoroInvCumulativeLecuyerGaussianRng

# Register MoroInvCumulativeLecuyerGaussianRng in _ORE:
_ORE.MoroInvCumulativeLecuyerGaussianRng_swigregister(MoroInvCumulativeLecuyerGaussianRng)

class MoroInvCumulativeKnuthGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        _ORE.MoroInvCumulativeKnuthGaussianRng_swiginit(self, _ORE.new_MoroInvCumulativeKnuthGaussianRng(rng))

    def next(self):
        return _ORE.MoroInvCumulativeKnuthGaussianRng_next(self)
    __swig_destroy__ = _ORE.delete_MoroInvCumulativeKnuthGaussianRng

# Register MoroInvCumulativeKnuthGaussianRng in _ORE:
_ORE.MoroInvCumulativeKnuthGaussianRng_swigregister(MoroInvCumulativeKnuthGaussianRng)

class MoroInvCumulativeMersenneTwisterGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        _ORE.MoroInvCumulativeMersenneTwisterGaussianRng_swiginit(self, _ORE.new_MoroInvCumulativeMersenneTwisterGaussianRng(rng))

    def next(self):
        return _ORE.MoroInvCumulativeMersenneTwisterGaussianRng_next(self)
    __swig_destroy__ = _ORE.delete_MoroInvCumulativeMersenneTwisterGaussianRng

# Register MoroInvCumulativeMersenneTwisterGaussianRng in _ORE:
_ORE.MoroInvCumulativeMersenneTwisterGaussianRng_swigregister(MoroInvCumulativeMersenneTwisterGaussianRng)

class InvCumulativeLecuyerGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        _ORE.InvCumulativeLecuyerGaussianRng_swiginit(self, _ORE.new_InvCumulativeLecuyerGaussianRng(rng))

    def next(self):
        return _ORE.InvCumulativeLecuyerGaussianRng_next(self)
    __swig_destroy__ = _ORE.delete_InvCumulativeLecuyerGaussianRng

# Register InvCumulativeLecuyerGaussianRng in _ORE:
_ORE.InvCumulativeLecuyerGaussianRng_swigregister(InvCumulativeLecuyerGaussianRng)

class InvCumulativeKnuthGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        _ORE.InvCumulativeKnuthGaussianRng_swiginit(self, _ORE.new_InvCumulativeKnuthGaussianRng(rng))

    def next(self):
        return _ORE.InvCumulativeKnuthGaussianRng_next(self)
    __swig_destroy__ = _ORE.delete_InvCumulativeKnuthGaussianRng

# Register InvCumulativeKnuthGaussianRng in _ORE:
_ORE.InvCumulativeKnuthGaussianRng_swigregister(InvCumulativeKnuthGaussianRng)

class InvCumulativeMersenneTwisterGaussianRng(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        _ORE.InvCumulativeMersenneTwisterGaussianRng_swiginit(self, _ORE.new_InvCumulativeMersenneTwisterGaussianRng(rng))

    def next(self):
        return _ORE.InvCumulativeMersenneTwisterGaussianRng_next(self)
    __swig_destroy__ = _ORE.delete_InvCumulativeMersenneTwisterGaussianRng

# Register InvCumulativeMersenneTwisterGaussianRng in _ORE:
_ORE.InvCumulativeMersenneTwisterGaussianRng_swigregister(InvCumulativeMersenneTwisterGaussianRng)

class GaussianRandomGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        _ORE.GaussianRandomGenerator_swiginit(self, _ORE.new_GaussianRandomGenerator(rng))

    def next(self):
        return _ORE.GaussianRandomGenerator_next(self)

    def nextValue(self):
        return _ORE.GaussianRandomGenerator_nextValue(self)
    __swig_destroy__ = _ORE.delete_GaussianRandomGenerator

# Register GaussianRandomGenerator in _ORE:
_ORE.GaussianRandomGenerator_swigregister(GaussianRandomGenerator)

class HaltonRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimensionality, seed=0, randomStart=True, randomShift=False):
        _ORE.HaltonRsg_swiginit(self, _ORE.new_HaltonRsg(dimensionality, seed, randomStart, randomShift))

    def nextSequence(self):
        return _ORE.HaltonRsg_nextSequence(self)

    def lastSequence(self):
        return _ORE.HaltonRsg_lastSequence(self)

    def dimension(self):
        return _ORE.HaltonRsg_dimension(self)
    __swig_destroy__ = _ORE.delete_HaltonRsg

# Register HaltonRsg in _ORE:
_ORE.HaltonRsg_swigregister(HaltonRsg)

class SobolRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Unit = _ORE.SobolRsg_Unit
    Jaeckel = _ORE.SobolRsg_Jaeckel
    SobolLevitan = _ORE.SobolRsg_SobolLevitan
    SobolLevitanLemieux = _ORE.SobolRsg_SobolLevitanLemieux
    JoeKuoD5 = _ORE.SobolRsg_JoeKuoD5
    JoeKuoD6 = _ORE.SobolRsg_JoeKuoD6
    JoeKuoD7 = _ORE.SobolRsg_JoeKuoD7
    Kuo = _ORE.SobolRsg_Kuo
    Kuo2 = _ORE.SobolRsg_Kuo2
    Kuo3 = _ORE.SobolRsg_Kuo3

    def __init__(self, *args):
        _ORE.SobolRsg_swiginit(self, _ORE.new_SobolRsg(*args))

    def nextSequence(self):
        return _ORE.SobolRsg_nextSequence(self)

    def lastSequence(self):
        return _ORE.SobolRsg_lastSequence(self)

    def dimension(self):
        return _ORE.SobolRsg_dimension(self)

    def skipTo(self, n):
        return _ORE.SobolRsg_skipTo(self, n)

    def nextInt32Sequence(self):
        return _ORE.SobolRsg_nextInt32Sequence(self)
    __swig_destroy__ = _ORE.delete_SobolRsg

# Register SobolRsg in _ORE:
_ORE.SobolRsg_swigregister(SobolRsg)

class SobolBrownianBridgeRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, factors, steps):
        _ORE.SobolBrownianBridgeRsg_swiginit(self, _ORE.new_SobolBrownianBridgeRsg(factors, steps))

    def nextSequence(self):
        return _ORE.SobolBrownianBridgeRsg_nextSequence(self)

    def lastSequence(self):
        return _ORE.SobolBrownianBridgeRsg_lastSequence(self)

    def dimension(self):
        return _ORE.SobolBrownianBridgeRsg_dimension(self)
    __swig_destroy__ = _ORE.delete_SobolBrownianBridgeRsg

# Register SobolBrownianBridgeRsg in _ORE:
_ORE.SobolBrownianBridgeRsg_swigregister(SobolBrownianBridgeRsg)

class LecuyerUniformRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.LecuyerUniformRsg_swiginit(self, _ORE.new_LecuyerUniformRsg(*args))

    def nextSequence(self):
        return _ORE.LecuyerUniformRsg_nextSequence(self)

    def dimension(self):
        return _ORE.LecuyerUniformRsg_dimension(self)
    __swig_destroy__ = _ORE.delete_LecuyerUniformRsg

# Register LecuyerUniformRsg in _ORE:
_ORE.LecuyerUniformRsg_swigregister(LecuyerUniformRsg)

class KnuthUniformRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.KnuthUniformRsg_swiginit(self, _ORE.new_KnuthUniformRsg(*args))

    def nextSequence(self):
        return _ORE.KnuthUniformRsg_nextSequence(self)

    def dimension(self):
        return _ORE.KnuthUniformRsg_dimension(self)
    __swig_destroy__ = _ORE.delete_KnuthUniformRsg

# Register KnuthUniformRsg in _ORE:
_ORE.KnuthUniformRsg_swigregister(KnuthUniformRsg)

class MersenneTwisterUniformRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.MersenneTwisterUniformRsg_swiginit(self, _ORE.new_MersenneTwisterUniformRsg(*args))

    def nextSequence(self):
        return _ORE.MersenneTwisterUniformRsg_nextSequence(self)

    def dimension(self):
        return _ORE.MersenneTwisterUniformRsg_dimension(self)
    __swig_destroy__ = _ORE.delete_MersenneTwisterUniformRsg

# Register MersenneTwisterUniformRsg in _ORE:
_ORE.MersenneTwisterUniformRsg_swigregister(MersenneTwisterUniformRsg)

class UniformRandomSequenceGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimensionality, rng):
        _ORE.UniformRandomSequenceGenerator_swiginit(self, _ORE.new_UniformRandomSequenceGenerator(dimensionality, rng))

    def nextSequence(self):
        return _ORE.UniformRandomSequenceGenerator_nextSequence(self)

    def dimension(self):
        return _ORE.UniformRandomSequenceGenerator_dimension(self)
    __swig_destroy__ = _ORE.delete_UniformRandomSequenceGenerator

# Register UniformRandomSequenceGenerator in _ORE:
_ORE.UniformRandomSequenceGenerator_swigregister(UniformRandomSequenceGenerator)

class UniformLowDiscrepancySequenceGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.UniformLowDiscrepancySequenceGenerator_swiginit(self, _ORE.new_UniformLowDiscrepancySequenceGenerator(*args))

    def nextSequence(self):
        return _ORE.UniformLowDiscrepancySequenceGenerator_nextSequence(self)

    def dimension(self):
        return _ORE.UniformLowDiscrepancySequenceGenerator_dimension(self)
    __swig_destroy__ = _ORE.delete_UniformLowDiscrepancySequenceGenerator

# Register UniformLowDiscrepancySequenceGenerator in _ORE:
_ORE.UniformLowDiscrepancySequenceGenerator_swigregister(UniformLowDiscrepancySequenceGenerator)

class MoroInvCumulativeLecuyerGaussianRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.MoroInvCumulativeLecuyerGaussianRsg_swiginit(self, _ORE.new_MoroInvCumulativeLecuyerGaussianRsg(*args))

    def nextSequence(self):
        return _ORE.MoroInvCumulativeLecuyerGaussianRsg_nextSequence(self)

    def dimension(self):
        return _ORE.MoroInvCumulativeLecuyerGaussianRsg_dimension(self)
    __swig_destroy__ = _ORE.delete_MoroInvCumulativeLecuyerGaussianRsg

# Register MoroInvCumulativeLecuyerGaussianRsg in _ORE:
_ORE.MoroInvCumulativeLecuyerGaussianRsg_swigregister(MoroInvCumulativeLecuyerGaussianRsg)

class MoroInvCumulativeKnuthGaussianRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.MoroInvCumulativeKnuthGaussianRsg_swiginit(self, _ORE.new_MoroInvCumulativeKnuthGaussianRsg(*args))

    def nextSequence(self):
        return _ORE.MoroInvCumulativeKnuthGaussianRsg_nextSequence(self)

    def dimension(self):
        return _ORE.MoroInvCumulativeKnuthGaussianRsg_dimension(self)
    __swig_destroy__ = _ORE.delete_MoroInvCumulativeKnuthGaussianRsg

# Register MoroInvCumulativeKnuthGaussianRsg in _ORE:
_ORE.MoroInvCumulativeKnuthGaussianRsg_swigregister(MoroInvCumulativeKnuthGaussianRsg)

class MoroInvCumulativeMersenneTwisterGaussianRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.MoroInvCumulativeMersenneTwisterGaussianRsg_swiginit(self, _ORE.new_MoroInvCumulativeMersenneTwisterGaussianRsg(*args))

    def nextSequence(self):
        return _ORE.MoroInvCumulativeMersenneTwisterGaussianRsg_nextSequence(self)

    def dimension(self):
        return _ORE.MoroInvCumulativeMersenneTwisterGaussianRsg_dimension(self)
    __swig_destroy__ = _ORE.delete_MoroInvCumulativeMersenneTwisterGaussianRsg

# Register MoroInvCumulativeMersenneTwisterGaussianRsg in _ORE:
_ORE.MoroInvCumulativeMersenneTwisterGaussianRsg_swigregister(MoroInvCumulativeMersenneTwisterGaussianRsg)

class MoroInvCumulativeHaltonGaussianRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.MoroInvCumulativeHaltonGaussianRsg_swiginit(self, _ORE.new_MoroInvCumulativeHaltonGaussianRsg(*args))

    def nextSequence(self):
        return _ORE.MoroInvCumulativeHaltonGaussianRsg_nextSequence(self)

    def dimension(self):
        return _ORE.MoroInvCumulativeHaltonGaussianRsg_dimension(self)
    __swig_destroy__ = _ORE.delete_MoroInvCumulativeHaltonGaussianRsg

# Register MoroInvCumulativeHaltonGaussianRsg in _ORE:
_ORE.MoroInvCumulativeHaltonGaussianRsg_swigregister(MoroInvCumulativeHaltonGaussianRsg)

class MoroInvCumulativeSobolGaussianRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.MoroInvCumulativeSobolGaussianRsg_swiginit(self, _ORE.new_MoroInvCumulativeSobolGaussianRsg(*args))

    def nextSequence(self):
        return _ORE.MoroInvCumulativeSobolGaussianRsg_nextSequence(self)

    def dimension(self):
        return _ORE.MoroInvCumulativeSobolGaussianRsg_dimension(self)
    __swig_destroy__ = _ORE.delete_MoroInvCumulativeSobolGaussianRsg

# Register MoroInvCumulativeSobolGaussianRsg in _ORE:
_ORE.MoroInvCumulativeSobolGaussianRsg_swigregister(MoroInvCumulativeSobolGaussianRsg)

class InvCumulativeLecuyerGaussianRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.InvCumulativeLecuyerGaussianRsg_swiginit(self, _ORE.new_InvCumulativeLecuyerGaussianRsg(*args))

    def nextSequence(self):
        return _ORE.InvCumulativeLecuyerGaussianRsg_nextSequence(self)

    def dimension(self):
        return _ORE.InvCumulativeLecuyerGaussianRsg_dimension(self)
    __swig_destroy__ = _ORE.delete_InvCumulativeLecuyerGaussianRsg

# Register InvCumulativeLecuyerGaussianRsg in _ORE:
_ORE.InvCumulativeLecuyerGaussianRsg_swigregister(InvCumulativeLecuyerGaussianRsg)

class InvCumulativeKnuthGaussianRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.InvCumulativeKnuthGaussianRsg_swiginit(self, _ORE.new_InvCumulativeKnuthGaussianRsg(*args))

    def nextSequence(self):
        return _ORE.InvCumulativeKnuthGaussianRsg_nextSequence(self)

    def dimension(self):
        return _ORE.InvCumulativeKnuthGaussianRsg_dimension(self)
    __swig_destroy__ = _ORE.delete_InvCumulativeKnuthGaussianRsg

# Register InvCumulativeKnuthGaussianRsg in _ORE:
_ORE.InvCumulativeKnuthGaussianRsg_swigregister(InvCumulativeKnuthGaussianRsg)

class InvCumulativeMersenneTwisterGaussianRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.InvCumulativeMersenneTwisterGaussianRsg_swiginit(self, _ORE.new_InvCumulativeMersenneTwisterGaussianRsg(*args))

    def nextSequence(self):
        return _ORE.InvCumulativeMersenneTwisterGaussianRsg_nextSequence(self)

    def dimension(self):
        return _ORE.InvCumulativeMersenneTwisterGaussianRsg_dimension(self)
    __swig_destroy__ = _ORE.delete_InvCumulativeMersenneTwisterGaussianRsg

# Register InvCumulativeMersenneTwisterGaussianRsg in _ORE:
_ORE.InvCumulativeMersenneTwisterGaussianRsg_swigregister(InvCumulativeMersenneTwisterGaussianRsg)

class InvCumulativeHaltonGaussianRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.InvCumulativeHaltonGaussianRsg_swiginit(self, _ORE.new_InvCumulativeHaltonGaussianRsg(*args))

    def nextSequence(self):
        return _ORE.InvCumulativeHaltonGaussianRsg_nextSequence(self)

    def dimension(self):
        return _ORE.InvCumulativeHaltonGaussianRsg_dimension(self)
    __swig_destroy__ = _ORE.delete_InvCumulativeHaltonGaussianRsg

# Register InvCumulativeHaltonGaussianRsg in _ORE:
_ORE.InvCumulativeHaltonGaussianRsg_swigregister(InvCumulativeHaltonGaussianRsg)

class InvCumulativeSobolGaussianRsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.InvCumulativeSobolGaussianRsg_swiginit(self, _ORE.new_InvCumulativeSobolGaussianRsg(*args))

    def nextSequence(self):
        return _ORE.InvCumulativeSobolGaussianRsg_nextSequence(self)

    def dimension(self):
        return _ORE.InvCumulativeSobolGaussianRsg_dimension(self)
    __swig_destroy__ = _ORE.delete_InvCumulativeSobolGaussianRsg

# Register InvCumulativeSobolGaussianRsg in _ORE:
_ORE.InvCumulativeSobolGaussianRsg_swigregister(InvCumulativeSobolGaussianRsg)

class GaussianRandomSequenceGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, uniformSequenceGenerator):
        _ORE.GaussianRandomSequenceGenerator_swiginit(self, _ORE.new_GaussianRandomSequenceGenerator(uniformSequenceGenerator))

    def nextSequence(self):
        return _ORE.GaussianRandomSequenceGenerator_nextSequence(self)

    def dimension(self):
        return _ORE.GaussianRandomSequenceGenerator_dimension(self)
    __swig_destroy__ = _ORE.delete_GaussianRandomSequenceGenerator

# Register GaussianRandomSequenceGenerator in _ORE:
_ORE.GaussianRandomSequenceGenerator_swigregister(GaussianRandomSequenceGenerator)

class GaussianLowDiscrepancySequenceGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, u):
        _ORE.GaussianLowDiscrepancySequenceGenerator_swiginit(self, _ORE.new_GaussianLowDiscrepancySequenceGenerator(u))

    def nextSequence(self):
        return _ORE.GaussianLowDiscrepancySequenceGenerator_nextSequence(self)

    def dimension(self):
        return _ORE.GaussianLowDiscrepancySequenceGenerator_dimension(self)
    __swig_destroy__ = _ORE.delete_GaussianLowDiscrepancySequenceGenerator

# Register GaussianLowDiscrepancySequenceGenerator in _ORE:
_ORE.GaussianLowDiscrepancySequenceGenerator_swigregister(GaussianLowDiscrepancySequenceGenerator)

class BrownianGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def nextStep(self, arg2):
        return _ORE.BrownianGenerator_nextStep(self, arg2)

    def nextPath(self):
        return _ORE.BrownianGenerator_nextPath(self)

    def numberOfFactors(self):
        return _ORE.BrownianGenerator_numberOfFactors(self)

    def numberOfSteps(self):
        return _ORE.BrownianGenerator_numberOfSteps(self)
    __swig_destroy__ = _ORE.delete_BrownianGenerator

# Register BrownianGenerator in _ORE:
_ORE.BrownianGenerator_swigregister(BrownianGenerator)

class BrownianGeneratorFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def create(self, factors, steps):
        return _ORE.BrownianGeneratorFactory_create(self, factors, steps)
    __swig_destroy__ = _ORE.delete_BrownianGeneratorFactory

# Register BrownianGeneratorFactory in _ORE:
_ORE.BrownianGeneratorFactory_swigregister(BrownianGeneratorFactory)

class MTBrownianGenerator(BrownianGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, factors, steps, seed=0):
        _ORE.MTBrownianGenerator_swiginit(self, _ORE.new_MTBrownianGenerator(factors, steps, seed))
    __swig_destroy__ = _ORE.delete_MTBrownianGenerator

# Register MTBrownianGenerator in _ORE:
_ORE.MTBrownianGenerator_swigregister(MTBrownianGenerator)

class MTBrownianGeneratorFactory(BrownianGeneratorFactory):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        _ORE.MTBrownianGeneratorFactory_swiginit(self, _ORE.new_MTBrownianGeneratorFactory(seed))
    __swig_destroy__ = _ORE.delete_MTBrownianGeneratorFactory

# Register MTBrownianGeneratorFactory in _ORE:
_ORE.MTBrownianGeneratorFactory_swigregister(MTBrownianGeneratorFactory)

class SobolBrownianGenerator(BrownianGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Factors = _ORE.SobolBrownianGenerator_Factors
    Steps = _ORE.SobolBrownianGenerator_Steps
    Diagonal = _ORE.SobolBrownianGenerator_Diagonal

    def __init__(self, *args):
        _ORE.SobolBrownianGenerator_swiginit(self, _ORE.new_SobolBrownianGenerator(*args))
    __swig_destroy__ = _ORE.delete_SobolBrownianGenerator

# Register SobolBrownianGenerator in _ORE:
_ORE.SobolBrownianGenerator_swigregister(SobolBrownianGenerator)

class SobolBrownianGeneratorFactory(BrownianGeneratorFactory):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SobolBrownianGeneratorFactory_swiginit(self, _ORE.new_SobolBrownianGeneratorFactory(*args))
    __swig_destroy__ = _ORE.delete_SobolBrownianGeneratorFactory

# Register SobolBrownianGeneratorFactory in _ORE:
_ORE.SobolBrownianGeneratorFactory_swigregister(SobolBrownianGeneratorFactory)

class EvolutionDescription(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EvolutionDescription_swiginit(self, _ORE.new_EvolutionDescription(*args))

    def rateTimes(self):
        return _ORE.EvolutionDescription_rateTimes(self)

    def rateTaus(self):
        return _ORE.EvolutionDescription_rateTaus(self)

    def evolutionTimes(self):
        return _ORE.EvolutionDescription_evolutionTimes(self)

    def firstAliveRate(self):
        return _ORE.EvolutionDescription_firstAliveRate(self)

    def relevanceRates(self):
        return _ORE.EvolutionDescription_relevanceRates(self)

    def numberOfRates(self):
        return _ORE.EvolutionDescription_numberOfRates(self)

    def numberOfSteps(self):
        return _ORE.EvolutionDescription_numberOfSteps(self)
    __swig_destroy__ = _ORE.delete_EvolutionDescription

# Register EvolutionDescription in _ORE:
_ORE.EvolutionDescription_swigregister(EvolutionDescription)


def checkCompatibility(evolution, numeraires):
    return _ORE.checkCompatibility(evolution, numeraires)

def isInTerminalMeasure(evolution, numeraires):
    return _ORE.isInTerminalMeasure(evolution, numeraires)

def isInMoneyMarketPlusMeasure(evolution, numeraires, offset=1):
    return _ORE.isInMoneyMarketPlusMeasure(evolution, numeraires, offset)

def isInMoneyMarketMeasure(evolution, numeraires):
    return _ORE.isInMoneyMarketMeasure(evolution, numeraires)

def terminalMeasure(evolution):
    return _ORE.terminalMeasure(evolution)

def moneyMarketPlusMeasure(evolution, offset=1):
    return _ORE.moneyMarketPlusMeasure(evolution, offset)

def moneyMarketMeasure(evolution):
    return _ORE.moneyMarketMeasure(evolution)
class MarketModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def initialRates(self):
        return _ORE.MarketModel_initialRates(self)

    def displacements(self):
        return _ORE.MarketModel_displacements(self)

    def evolution(self):
        return _ORE.MarketModel_evolution(self)

    def numberOfRates(self):
        return _ORE.MarketModel_numberOfRates(self)

    def numberOfFactors(self):
        return _ORE.MarketModel_numberOfFactors(self)

    def numberOfSteps(self):
        return _ORE.MarketModel_numberOfSteps(self)

    def pseudoRoot(self, i):
        return _ORE.MarketModel_pseudoRoot(self, i)

    def covariance(self, i):
        return _ORE.MarketModel_covariance(self, i)

    def totalCovariance(self, endIndex):
        return _ORE.MarketModel_totalCovariance(self, endIndex)

    def timeDependentVolatility(self, i):
        return _ORE.MarketModel_timeDependentVolatility(self, i)
    __swig_destroy__ = _ORE.delete_MarketModel

# Register MarketModel in _ORE:
_ORE.MarketModel_swigregister(MarketModel)

class MarketModelFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def create(self, arg2, numberOfFactors):
        return _ORE.MarketModelFactory_create(self, arg2, numberOfFactors)
    __swig_destroy__ = _ORE.delete_MarketModelFactory

# Register MarketModelFactory in _ORE:
_ORE.MarketModelFactory_swigregister(MarketModelFactory)

class PiecewiseConstantCorrelation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def times(self):
        return _ORE.PiecewiseConstantCorrelation_times(self)

    def rateTimes(self):
        return _ORE.PiecewiseConstantCorrelation_rateTimes(self)

    def correlations(self):
        return _ORE.PiecewiseConstantCorrelation_correlations(self)

    def correlation(self, i):
        return _ORE.PiecewiseConstantCorrelation_correlation(self, i)

    def numberOfRates(self):
        return _ORE.PiecewiseConstantCorrelation_numberOfRates(self)
    __swig_destroy__ = _ORE.delete_PiecewiseConstantCorrelation

# Register PiecewiseConstantCorrelation in _ORE:
_ORE.PiecewiseConstantCorrelation_swigregister(PiecewiseConstantCorrelation)

class ExponentialForwardCorrelation(PiecewiseConstantCorrelation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ExponentialForwardCorrelation_swiginit(self, _ORE.new_ExponentialForwardCorrelation(*args))
    __swig_destroy__ = _ORE.delete_ExponentialForwardCorrelation

# Register ExponentialForwardCorrelation in _ORE:
_ORE.ExponentialForwardCorrelation_swigregister(ExponentialForwardCorrelation)

class CurveState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def numberOfRates(self):
        return _ORE.CurveState_numberOfRates(self)

    def rateTimes(self):
        return _ORE.CurveState_rateTimes(self)

    def rateTaus(self):
        return _ORE.CurveState_rateTaus(self)

    def discountRatio(self, i, j):
        return _ORE.CurveState_discountRatio(self, i, j)

    def forwardRate(self, i):
        return _ORE.CurveState_forwardRate(self, i)

    def coterminalSwapAnnuity(self, numeraire, i):
        return _ORE.CurveState_coterminalSwapAnnuity(self, numeraire, i)

    def coterminalSwapRate(self, i):
        return _ORE.CurveState_coterminalSwapRate(self, i)

    def cmSwapAnnuity(self, numeraire, i, spanningForwards):
        return _ORE.CurveState_cmSwapAnnuity(self, numeraire, i, spanningForwards)

    def cmSwapRate(self, i, spanningForwards):
        return _ORE.CurveState_cmSwapRate(self, i, spanningForwards)

    def forwardRates(self):
        return _ORE.CurveState_forwardRates(self)

    def coterminalSwapRates(self):
        return _ORE.CurveState_coterminalSwapRates(self)

    def cmSwapRates(self, spanningForwards):
        return _ORE.CurveState_cmSwapRates(self, spanningForwards)

    def swapRate(self, begin, end):
        return _ORE.CurveState_swapRate(self, begin, end)
    __swig_destroy__ = _ORE.delete_CurveState

# Register CurveState in _ORE:
_ORE.CurveState_swigregister(CurveState)

class LMMCurveState(CurveState):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rateTimes):
        _ORE.LMMCurveState_swiginit(self, _ORE.new_LMMCurveState(rateTimes))

    def setOnForwardRates(self, fwdRates, firstValidIndex=0):
        return _ORE.LMMCurveState_setOnForwardRates(self, fwdRates, firstValidIndex)

    def setOnDiscountRatios(self, discRatios, firstValidIndex=0):
        return _ORE.LMMCurveState_setOnDiscountRatios(self, discRatios, firstValidIndex)
    __swig_destroy__ = _ORE.delete_LMMCurveState

# Register LMMCurveState in _ORE:
_ORE.LMMCurveState_swigregister(LMMCurveState)

class LMMDriftCalculator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pseudo, displacements, taus, numeraire, alive):
        _ORE.LMMDriftCalculator_swiginit(self, _ORE.new_LMMDriftCalculator(pseudo, displacements, taus, numeraire, alive))

    def compute(self, *args):
        return _ORE.LMMDriftCalculator_compute(self, *args)

    def computePlain(self, *args):
        return _ORE.LMMDriftCalculator_computePlain(self, *args)

    def computeReduced(self, *args):
        return _ORE.LMMDriftCalculator_computeReduced(self, *args)
    __swig_destroy__ = _ORE.delete_LMMDriftCalculator

# Register LMMDriftCalculator in _ORE:
_ORE.LMMDriftCalculator_swigregister(LMMDriftCalculator)

class MarketModelEvolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def numeraires(self):
        return _ORE.MarketModelEvolver_numeraires(self)

    def startNewPath(self):
        return _ORE.MarketModelEvolver_startNewPath(self)

    def advanceStep(self):
        return _ORE.MarketModelEvolver_advanceStep(self)

    def currentStep(self):
        return _ORE.MarketModelEvolver_currentStep(self)

    def currentState(self):
        return _ORE.MarketModelEvolver_currentState(self)

    def setInitialState(self, arg2):
        return _ORE.MarketModelEvolver_setInitialState(self, arg2)
    __swig_destroy__ = _ORE.delete_MarketModelEvolver

# Register MarketModelEvolver in _ORE:
_ORE.MarketModelEvolver_swigregister(MarketModelEvolver)

class LogNormalFwdRateIpc(MarketModelEvolver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model, factory, numeraires, initialStep=0):
        _ORE.LogNormalFwdRateIpc_swiginit(self, _ORE.new_LogNormalFwdRateIpc(model, factory, numeraires, initialStep))
    __swig_destroy__ = _ORE.delete_LogNormalFwdRateIpc

# Register LogNormalFwdRateIpc in _ORE:
_ORE.LogNormalFwdRateIpc_swigregister(LogNormalFwdRateIpc)

class AbcdVol(MarketModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a, b, c, d, ks, corr, evolution, numberOfFactors, initialRates, displacements):
        _ORE.AbcdVol_swiginit(self, _ORE.new_AbcdVol(a, b, c, d, ks, corr, evolution, numberOfFactors, initialRates, displacements))
    __swig_destroy__ = _ORE.delete_AbcdVol

# Register AbcdVol in _ORE:
_ORE.AbcdVol_swigregister(AbcdVol)

class AbcdMathFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.AbcdMathFunction_swiginit(self, _ORE.new_AbcdMathFunction(*args))

    def __call__(self, t):
        return _ORE.AbcdMathFunction___call__(self, t)

    def maximumLocation(self):
        return _ORE.AbcdMathFunction_maximumLocation(self)

    def maximumValue(self):
        return _ORE.AbcdMathFunction_maximumValue(self)

    def longTermValue(self):
        return _ORE.AbcdMathFunction_longTermValue(self)

    def derivative(self, t):
        return _ORE.AbcdMathFunction_derivative(self, t)

    def primitive(self, t):
        return _ORE.AbcdMathFunction_primitive(self, t)

    def definiteIntegral(self, t1, t2):
        return _ORE.AbcdMathFunction_definiteIntegral(self, t1, t2)

    def a(self):
        return _ORE.AbcdMathFunction_a(self)

    def b(self):
        return _ORE.AbcdMathFunction_b(self)

    def c(self):
        return _ORE.AbcdMathFunction_c(self)

    def d(self):
        return _ORE.AbcdMathFunction_d(self)

    def coefficients(self):
        return _ORE.AbcdMathFunction_coefficients(self)

    def derivativeCoefficients(self):
        return _ORE.AbcdMathFunction_derivativeCoefficients(self)

    def definiteIntegralCoefficients(self, t, t2):
        return _ORE.AbcdMathFunction_definiteIntegralCoefficients(self, t, t2)

    def definiteDerivativeCoefficients(self, t, t2):
        return _ORE.AbcdMathFunction_definiteDerivativeCoefficients(self, t, t2)

    @staticmethod
    def validate(a, b, c, d):
        return _ORE.AbcdMathFunction_validate(a, b, c, d)
    __swig_destroy__ = _ORE.delete_AbcdMathFunction

# Register AbcdMathFunction in _ORE:
_ORE.AbcdMathFunction_swigregister(AbcdMathFunction)

def AbcdMathFunction_validate(a, b, c, d):
    return _ORE.AbcdMathFunction_validate(a, b, c, d)

class AbcdFunction(AbcdMathFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a=-0.06, b=0.17, c=0.54, d=0.17):
        _ORE.AbcdFunction_swiginit(self, _ORE.new_AbcdFunction(a, b, c, d))

    def maximumVolatility(self):
        return _ORE.AbcdFunction_maximumVolatility(self)

    def shortTermVolatility(self):
        return _ORE.AbcdFunction_shortTermVolatility(self)

    def longTermVolatility(self):
        return _ORE.AbcdFunction_longTermVolatility(self)

    def covariance(self, *args):
        return _ORE.AbcdFunction_covariance(self, *args)

    def volatility(self, tMin, tMax, T):
        return _ORE.AbcdFunction_volatility(self, tMin, tMax, T)

    def variance(self, tMin, tMax, T):
        return _ORE.AbcdFunction_variance(self, tMin, tMax, T)

    def instantaneousVolatility(self, t, T):
        return _ORE.AbcdFunction_instantaneousVolatility(self, t, T)

    def instantaneousVariance(self, t, T):
        return _ORE.AbcdFunction_instantaneousVariance(self, t, T)

    def instantaneousCovariance(self, u, T, S):
        return _ORE.AbcdFunction_instantaneousCovariance(self, u, T, S)

    def primitive(self, t, T, S):
        return _ORE.AbcdFunction_primitive(self, t, T, S)
    __swig_destroy__ = _ORE.delete_AbcdFunction

# Register AbcdFunction in _ORE:
_ORE.AbcdFunction_swigregister(AbcdFunction)

class ContinuousFloatingLookbackOption(OneAssetOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, currentMinmax, payoff, exercise):
        _ORE.ContinuousFloatingLookbackOption_swiginit(self, _ORE.new_ContinuousFloatingLookbackOption(currentMinmax, payoff, exercise))
    __swig_destroy__ = _ORE.delete_ContinuousFloatingLookbackOption

# Register ContinuousFloatingLookbackOption in _ORE:
_ORE.ContinuousFloatingLookbackOption_swigregister(ContinuousFloatingLookbackOption)

class ContinuousFixedLookbackOption(OneAssetOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, currentMinmax, payoff, exercise):
        _ORE.ContinuousFixedLookbackOption_swiginit(self, _ORE.new_ContinuousFixedLookbackOption(currentMinmax, payoff, exercise))
    __swig_destroy__ = _ORE.delete_ContinuousFixedLookbackOption

# Register ContinuousFixedLookbackOption in _ORE:
_ORE.ContinuousFixedLookbackOption_swigregister(ContinuousFixedLookbackOption)

class ContinuousPartialFloatingLookbackOption(ContinuousFloatingLookbackOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, currentMinmax, lambda_parameter, lookbackPeriodEnd, payoff, exercise):
        _ORE.ContinuousPartialFloatingLookbackOption_swiginit(self, _ORE.new_ContinuousPartialFloatingLookbackOption(currentMinmax, lambda_parameter, lookbackPeriodEnd, payoff, exercise))
    __swig_destroy__ = _ORE.delete_ContinuousPartialFloatingLookbackOption

# Register ContinuousPartialFloatingLookbackOption in _ORE:
_ORE.ContinuousPartialFloatingLookbackOption_swigregister(ContinuousPartialFloatingLookbackOption)

class ContinuousPartialFixedLookbackOption(ContinuousFixedLookbackOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lookbackPeriodStart, payoff, exercise):
        _ORE.ContinuousPartialFixedLookbackOption_swiginit(self, _ORE.new_ContinuousPartialFixedLookbackOption(lookbackPeriodStart, payoff, exercise))
    __swig_destroy__ = _ORE.delete_ContinuousPartialFixedLookbackOption

# Register ContinuousPartialFixedLookbackOption in _ORE:
_ORE.ContinuousPartialFixedLookbackOption_swigregister(ContinuousPartialFixedLookbackOption)

class AnalyticContinuousFloatingLookbackEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.AnalyticContinuousFloatingLookbackEngine_swiginit(self, _ORE.new_AnalyticContinuousFloatingLookbackEngine(process))
    __swig_destroy__ = _ORE.delete_AnalyticContinuousFloatingLookbackEngine

# Register AnalyticContinuousFloatingLookbackEngine in _ORE:
_ORE.AnalyticContinuousFloatingLookbackEngine_swigregister(AnalyticContinuousFloatingLookbackEngine)

class AnalyticContinuousFixedLookbackEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.AnalyticContinuousFixedLookbackEngine_swiginit(self, _ORE.new_AnalyticContinuousFixedLookbackEngine(process))
    __swig_destroy__ = _ORE.delete_AnalyticContinuousFixedLookbackEngine

# Register AnalyticContinuousFixedLookbackEngine in _ORE:
_ORE.AnalyticContinuousFixedLookbackEngine_swigregister(AnalyticContinuousFixedLookbackEngine)

class AnalyticContinuousPartialFloatingLookbackEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.AnalyticContinuousPartialFloatingLookbackEngine_swiginit(self, _ORE.new_AnalyticContinuousPartialFloatingLookbackEngine(process))
    __swig_destroy__ = _ORE.delete_AnalyticContinuousPartialFloatingLookbackEngine

# Register AnalyticContinuousPartialFloatingLookbackEngine in _ORE:
_ORE.AnalyticContinuousPartialFloatingLookbackEngine_swigregister(AnalyticContinuousPartialFloatingLookbackEngine)

class AnalyticContinuousPartialFixedLookbackEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        _ORE.AnalyticContinuousPartialFixedLookbackEngine_swiginit(self, _ORE.new_AnalyticContinuousPartialFixedLookbackEngine(process))
    __swig_destroy__ = _ORE.delete_AnalyticContinuousPartialFixedLookbackEngine

# Register AnalyticContinuousPartialFixedLookbackEngine in _ORE:
_ORE.AnalyticContinuousPartialFixedLookbackEngine_swigregister(AnalyticContinuousPartialFixedLookbackEngine)


def getCovariance(volatilities, correlations):
    return _ORE.getCovariance(volatilities, correlations)
class Path(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __len__(self):
        return _ORE.Path___len__(self)

    def value(self, i):
        return _ORE.Path_value(self, i)

    def front(self):
        return _ORE.Path_front(self)

    def back(self):
        return _ORE.Path_back(self)

    def time(self, i):
        return _ORE.Path_time(self, i)

    def __getitem__(self, i):
        return _ORE.Path___getitem__(self, i)
    __swig_destroy__ = _ORE.delete_Path

# Register Path in _ORE:
_ORE.Path_swigregister(Path)

class SamplePath(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self):
        return _ORE.SamplePath_value(self)

    def weight(self):
        return _ORE.SamplePath_weight(self)
    __swig_destroy__ = _ORE.delete_SamplePath

# Register SamplePath in _ORE:
_ORE.SamplePath_swigregister(SamplePath)

class GaussianPathGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.GaussianPathGenerator_swiginit(self, _ORE.new_GaussianPathGenerator(*args))

    def next(self):
        return _ORE.GaussianPathGenerator_next(self)

    def antithetic(self):
        return _ORE.GaussianPathGenerator_antithetic(self)

    def size(self):
        return _ORE.GaussianPathGenerator_size(self)

    def timeGrid(self):
        return _ORE.GaussianPathGenerator_timeGrid(self)
    __swig_destroy__ = _ORE.delete_GaussianPathGenerator

# Register GaussianPathGenerator in _ORE:
_ORE.GaussianPathGenerator_swigregister(GaussianPathGenerator)

class GaussianSobolPathGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.GaussianSobolPathGenerator_swiginit(self, _ORE.new_GaussianSobolPathGenerator(*args))

    def next(self):
        return _ORE.GaussianSobolPathGenerator_next(self)

    def antithetic(self):
        return _ORE.GaussianSobolPathGenerator_antithetic(self)

    def size(self):
        return _ORE.GaussianSobolPathGenerator_size(self)

    def timeGrid(self):
        return _ORE.GaussianSobolPathGenerator_timeGrid(self)
    __swig_destroy__ = _ORE.delete_GaussianSobolPathGenerator

# Register GaussianSobolPathGenerator in _ORE:
_ORE.GaussianSobolPathGenerator_swigregister(GaussianSobolPathGenerator)

class InvCumulativeMersenneTwisterPathGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.InvCumulativeMersenneTwisterPathGenerator_swiginit(self, _ORE.new_InvCumulativeMersenneTwisterPathGenerator(*args))

    def next(self):
        return _ORE.InvCumulativeMersenneTwisterPathGenerator_next(self)

    def antithetic(self):
        return _ORE.InvCumulativeMersenneTwisterPathGenerator_antithetic(self)

    def size(self):
        return _ORE.InvCumulativeMersenneTwisterPathGenerator_size(self)

    def timeGrid(self):
        return _ORE.InvCumulativeMersenneTwisterPathGenerator_timeGrid(self)
    __swig_destroy__ = _ORE.delete_InvCumulativeMersenneTwisterPathGenerator

# Register InvCumulativeMersenneTwisterPathGenerator in _ORE:
_ORE.InvCumulativeMersenneTwisterPathGenerator_swigregister(InvCumulativeMersenneTwisterPathGenerator)

class MultiPath(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __len__(self):
        return _ORE.MultiPath___len__(self)

    def assetNumber(self):
        return _ORE.MultiPath_assetNumber(self)

    def at(self, j):
        return _ORE.MultiPath_at(self, j)

    def __getitem__(self, i):
        return _ORE.MultiPath___getitem__(self, i)
    __swig_destroy__ = _ORE.delete_MultiPath

# Register MultiPath in _ORE:
_ORE.MultiPath_swigregister(MultiPath)

class SampleMultiPath(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self):
        return _ORE.SampleMultiPath_value(self)

    def weight(self):
        return _ORE.SampleMultiPath_weight(self)
    __swig_destroy__ = _ORE.delete_SampleMultiPath

# Register SampleMultiPath in _ORE:
_ORE.SampleMultiPath_swigregister(SampleMultiPath)

class GaussianMultiPathGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.GaussianMultiPathGenerator_swiginit(self, _ORE.new_GaussianMultiPathGenerator(*args))

    def next(self):
        return _ORE.GaussianMultiPathGenerator_next(self)

    def antithetic(self):
        return _ORE.GaussianMultiPathGenerator_antithetic(self)
    __swig_destroy__ = _ORE.delete_GaussianMultiPathGenerator

# Register GaussianMultiPathGenerator in _ORE:
_ORE.GaussianMultiPathGenerator_swigregister(GaussianMultiPathGenerator)

class GaussianSobolMultiPathGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.GaussianSobolMultiPathGenerator_swiginit(self, _ORE.new_GaussianSobolMultiPathGenerator(*args))

    def next(self):
        return _ORE.GaussianSobolMultiPathGenerator_next(self)

    def antithetic(self):
        return _ORE.GaussianSobolMultiPathGenerator_antithetic(self)
    __swig_destroy__ = _ORE.delete_GaussianSobolMultiPathGenerator

# Register GaussianSobolMultiPathGenerator in _ORE:
_ORE.GaussianSobolMultiPathGenerator_swigregister(GaussianSobolMultiPathGenerator)

class BrownianBridge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BrownianBridge_swiginit(self, _ORE.new_BrownianBridge(*args))

    def size(self):
        return _ORE.BrownianBridge_size(self)

    def times(self):
        return _ORE.BrownianBridge_times(self)

    def leftWeight(self):
        return _ORE.BrownianBridge_leftWeight(self)

    def rightWeight(self):
        return _ORE.BrownianBridge_rightWeight(self)

    def stdDeviation(self):
        return _ORE.BrownianBridge_stdDeviation(self)

    def transform(self, input):
        return _ORE.BrownianBridge_transform(self, input)

    def bridgeIndex(self):
        return _ORE.BrownianBridge_bridgeIndex(self)

    def leftIndex(self):
        return _ORE.BrownianBridge_leftIndex(self)

    def rightIndex(self):
        return _ORE.BrownianBridge_rightIndex(self)
    __swig_destroy__ = _ORE.delete_BrownianBridge

# Register BrownianBridge in _ORE:
_ORE.BrownianBridge_swigregister(BrownianBridge)

class RungeKutta(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, eps=1.0e-6, h1=1.0e-4, hmin=0.0):
        _ORE.RungeKutta_swiginit(self, _ORE.new_RungeKutta(eps, h1, hmin))

    def __call__(self, *args):
        return _ORE.RungeKutta___call__(self, *args)
    __swig_destroy__ = _ORE.delete_RungeKutta

# Register RungeKutta in _ORE:
_ORE.RungeKutta_swigregister(RungeKutta)

class DefaultBoundaryCondition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    NoSide = _ORE.DefaultBoundaryCondition_NoSide
    Upper = _ORE.DefaultBoundaryCondition_Upper
    Lower = _ORE.DefaultBoundaryCondition_Lower
    __swig_destroy__ = _ORE.delete_DefaultBoundaryCondition

# Register DefaultBoundaryCondition in _ORE:
_ORE.DefaultBoundaryCondition_swigregister(DefaultBoundaryCondition)

class NeumannBC(DefaultBoundaryCondition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, side):
        _ORE.NeumannBC_swiginit(self, _ORE.new_NeumannBC(value, side))
    __swig_destroy__ = _ORE.delete_NeumannBC

# Register NeumannBC in _ORE:
_ORE.NeumannBC_swigregister(NeumannBC)

class DirichletBC(DefaultBoundaryCondition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, side):
        _ORE.DirichletBC_swiginit(self, _ORE.new_DirichletBC(value, side))
    __swig_destroy__ = _ORE.delete_DirichletBC

# Register DirichletBC in _ORE:
_ORE.DirichletBC_swigregister(DirichletBC)

class TridiagonalOperator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, low, mid, high):
        _ORE.TridiagonalOperator_swiginit(self, _ORE.new_TridiagonalOperator(low, mid, high))

    def solveFor(self, rhs):
        return _ORE.TridiagonalOperator_solveFor(self, rhs)

    def applyTo(self, v):
        return _ORE.TridiagonalOperator_applyTo(self, v)

    def size(self):
        return _ORE.TridiagonalOperator_size(self)

    def setFirstRow(self, arg2, arg3):
        return _ORE.TridiagonalOperator_setFirstRow(self, arg2, arg3)

    def setMidRow(self, arg2, arg3, arg4, arg5):
        return _ORE.TridiagonalOperator_setMidRow(self, arg2, arg3, arg4, arg5)

    def setMidRows(self, arg2, arg3, arg4):
        return _ORE.TridiagonalOperator_setMidRows(self, arg2, arg3, arg4)

    def setLastRow(self, arg2, arg3):
        return _ORE.TridiagonalOperator_setLastRow(self, arg2, arg3)

    @staticmethod
    def identity(size):
        return _ORE.TridiagonalOperator_identity(size)

    def __add__(self, O):
        return _ORE.TridiagonalOperator___add__(self, O)

    def __sub__(self, O):
        return _ORE.TridiagonalOperator___sub__(self, O)

    def __mul__(self, a):
        return _ORE.TridiagonalOperator___mul__(self, a)

    def __div__(self, a):
        return _ORE.TridiagonalOperator___div__(self, a)

    def __iadd__(self, O):
        return _ORE.TridiagonalOperator___iadd__(self, O)

    def __isub__(self, O):
        return _ORE.TridiagonalOperator___isub__(self, O)

    def __imul__(self, a):
        return _ORE.TridiagonalOperator___imul__(self, a)

    def __rmul__(self, a):
        return _ORE.TridiagonalOperator___rmul__(self, a)

    def __idiv__(self, a):
        return _ORE.TridiagonalOperator___idiv__(self, a)
    __swig_destroy__ = _ORE.delete_TridiagonalOperator

# Register TridiagonalOperator in _ORE:
_ORE.TridiagonalOperator_swigregister(TridiagonalOperator)

def TridiagonalOperator_identity(size):
    return _ORE.TridiagonalOperator_identity(size)

class DPlus(TridiagonalOperator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gridPoints, h):
        _ORE.DPlus_swiginit(self, _ORE.new_DPlus(gridPoints, h))
    __swig_destroy__ = _ORE.delete_DPlus

# Register DPlus in _ORE:
_ORE.DPlus_swigregister(DPlus)

class DMinus(TridiagonalOperator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gridPoints, h):
        _ORE.DMinus_swiginit(self, _ORE.new_DMinus(gridPoints, h))
    __swig_destroy__ = _ORE.delete_DMinus

# Register DMinus in _ORE:
_ORE.DMinus_swigregister(DMinus)

class DZero(TridiagonalOperator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gridPoints, h):
        _ORE.DZero_swiginit(self, _ORE.new_DZero(gridPoints, h))
    __swig_destroy__ = _ORE.delete_DZero

# Register DZero in _ORE:
_ORE.DZero_swigregister(DZero)

class DPlusDMinus(TridiagonalOperator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gridPoints, h):
        _ORE.DPlusDMinus_swiginit(self, _ORE.new_DPlusDMinus(gridPoints, h))
    __swig_destroy__ = _ORE.delete_DPlusDMinus

# Register DPlusDMinus in _ORE:
_ORE.DPlusDMinus_swigregister(DPlusDMinus)

class SampledCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SampledCurve_swiginit(self, _ORE.new_SampledCurve(*args))

    def grid(self):
        return _ORE.SampledCurve_grid(self)

    def values(self):
        return _ORE.SampledCurve_values(self)

    def gridValue(self, i):
        return _ORE.SampledCurve_gridValue(self, i)

    def value(self, i):
        return _ORE.SampledCurve_value(self, i)

    def size(self):
        return _ORE.SampledCurve_size(self)

    def empty(self):
        return _ORE.SampledCurve_empty(self)

    def setGrid(self, arg2):
        return _ORE.SampledCurve_setGrid(self, arg2)

    def setValues(self, arg2):
        return _ORE.SampledCurve_setValues(self, arg2)

    def swap(self, arg2):
        return _ORE.SampledCurve_swap(self, arg2)

    def setLogGrid(self, min, max):
        return _ORE.SampledCurve_setLogGrid(self, min, max)

    def regridLogGrid(self, min, max):
        return _ORE.SampledCurve_regridLogGrid(self, min, max)

    def shiftGrid(self, s):
        return _ORE.SampledCurve_shiftGrid(self, s)

    def scaleGrid(self, s):
        return _ORE.SampledCurve_scaleGrid(self, s)

    def regrid(self, arg2):
        return _ORE.SampledCurve_regrid(self, arg2)
    __swig_destroy__ = _ORE.delete_SampledCurve

# Register SampledCurve in _ORE:
_ORE.SampledCurve_swigregister(SampledCurve)

class HestonSLVProcess(StochasticProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, hestonProcess, leverageFct, mixingFactor=1.0):
        _ORE.HestonSLVProcess_swiginit(self, _ORE.new_HestonSLVProcess(hestonProcess, leverageFct, mixingFactor))
    __swig_destroy__ = _ORE.delete_HestonSLVProcess

# Register HestonSLVProcess in _ORE:
_ORE.HestonSLVProcess_swigregister(HestonSLVProcess)

class HestonSLVMCModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.HestonSLVMCModel_swiginit(self, _ORE.new_HestonSLVMCModel(*args))

    def hestonProcess(self):
        return _ORE.HestonSLVMCModel_hestonProcess(self)

    def localVol(self):
        return _ORE.HestonSLVMCModel_localVol(self)

    def leverageFunction(self):
        return _ORE.HestonSLVMCModel_leverageFunction(self)
    __swig_destroy__ = _ORE.delete_HestonSLVMCModel

# Register HestonSLVMCModel in _ORE:
_ORE.HestonSLVMCModel_swigregister(HestonSLVMCModel)

class FdmHestonGreensFct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ZeroCorrelation = _ORE.FdmHestonGreensFct_ZeroCorrelation
    Gaussian = _ORE.FdmHestonGreensFct_Gaussian
    SemiAnalytical = _ORE.FdmHestonGreensFct_SemiAnalytical
    __swig_destroy__ = _ORE.delete_FdmHestonGreensFct

# Register FdmHestonGreensFct in _ORE:
_ORE.FdmHestonGreensFct_swigregister(FdmHestonGreensFct)

class HestonSLVFokkerPlanckFdmParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, xGrid, vGrid, tMaxStepsPerYear, tMinStepsPerYear, tStepNumberDecay, nRannacherTimeSteps, predictionCorretionSteps, x0Density, localVolEpsProb, maxIntegrationIterations, vLowerEps, vUpperEps, vMin, v0Density, vLowerBoundDensity, vUpperBoundDensity, leverageFctPropEps, greensAlgorithm, trafoType, schemeDesc):
        _ORE.HestonSLVFokkerPlanckFdmParams_swiginit(self, _ORE.new_HestonSLVFokkerPlanckFdmParams(xGrid, vGrid, tMaxStepsPerYear, tMinStepsPerYear, tStepNumberDecay, nRannacherTimeSteps, predictionCorretionSteps, x0Density, localVolEpsProb, maxIntegrationIterations, vLowerEps, vUpperEps, vMin, v0Density, vLowerBoundDensity, vUpperBoundDensity, leverageFctPropEps, greensAlgorithm, trafoType, schemeDesc))
    __swig_destroy__ = _ORE.delete_HestonSLVFokkerPlanckFdmParams

# Register HestonSLVFokkerPlanckFdmParams in _ORE:
_ORE.HestonSLVFokkerPlanckFdmParams_swigregister(HestonSLVFokkerPlanckFdmParams)

class HestonSLVFDMModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.HestonSLVFDMModel_swiginit(self, _ORE.new_HestonSLVFDMModel(*args))

    def hestonProcess(self):
        return _ORE.HestonSLVFDMModel_hestonProcess(self)

    def localVol(self):
        return _ORE.HestonSLVFDMModel_localVol(self)

    def leverageFunction(self):
        return _ORE.HestonSLVFDMModel_leverageFunction(self)
    __swig_destroy__ = _ORE.delete_HestonSLVFDMModel

# Register HestonSLVFDMModel in _ORE:
_ORE.HestonSLVFDMModel_swigregister(HestonSLVFDMModel)

class SpreadOption(MultiAssetOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff, exercise):
        _ORE.SpreadOption_swiginit(self, _ORE.new_SpreadOption(payoff, exercise))
    __swig_destroy__ = _ORE.delete_SpreadOption

# Register SpreadOption in _ORE:
_ORE.SpreadOption_swigregister(SpreadOption)

class KirkSpreadOptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process1, process2, correlation):
        _ORE.KirkSpreadOptionEngine_swiginit(self, _ORE.new_KirkSpreadOptionEngine(process1, process2, correlation))
    __swig_destroy__ = _ORE.delete_KirkSpreadOptionEngine

# Register KirkSpreadOptionEngine in _ORE:
_ORE.KirkSpreadOptionEngine_swigregister(KirkSpreadOptionEngine)

class Statistics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def samples(self):
        return _ORE.Statistics_samples(self)

    def weightSum(self):
        return _ORE.Statistics_weightSum(self)

    def mean(self):
        return _ORE.Statistics_mean(self)

    def variance(self):
        return _ORE.Statistics_variance(self)

    def standardDeviation(self):
        return _ORE.Statistics_standardDeviation(self)

    def errorEstimate(self):
        return _ORE.Statistics_errorEstimate(self)

    def skewness(self):
        return _ORE.Statistics_skewness(self)

    def kurtosis(self):
        return _ORE.Statistics_kurtosis(self)

    def min(self):
        return _ORE.Statistics_min(self)

    def max(self):
        return _ORE.Statistics_max(self)

    def reset(self):
        return _ORE.Statistics_reset(self)

    def add(self, *args):
        return _ORE.Statistics_add(self, *args)

    def __init__(self):
        _ORE.Statistics_swiginit(self, _ORE.new_Statistics())
    __swig_destroy__ = _ORE.delete_Statistics

# Register Statistics in _ORE:
_ORE.Statistics_swigregister(Statistics)

class IncrementalStatistics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def samples(self):
        return _ORE.IncrementalStatistics_samples(self)

    def weightSum(self):
        return _ORE.IncrementalStatistics_weightSum(self)

    def mean(self):
        return _ORE.IncrementalStatistics_mean(self)

    def variance(self):
        return _ORE.IncrementalStatistics_variance(self)

    def standardDeviation(self):
        return _ORE.IncrementalStatistics_standardDeviation(self)

    def errorEstimate(self):
        return _ORE.IncrementalStatistics_errorEstimate(self)

    def skewness(self):
        return _ORE.IncrementalStatistics_skewness(self)

    def kurtosis(self):
        return _ORE.IncrementalStatistics_kurtosis(self)

    def min(self):
        return _ORE.IncrementalStatistics_min(self)

    def max(self):
        return _ORE.IncrementalStatistics_max(self)

    def reset(self):
        return _ORE.IncrementalStatistics_reset(self)

    def add(self, *args):
        return _ORE.IncrementalStatistics_add(self, *args)

    def __init__(self):
        _ORE.IncrementalStatistics_swiginit(self, _ORE.new_IncrementalStatistics())
    __swig_destroy__ = _ORE.delete_IncrementalStatistics

# Register IncrementalStatistics in _ORE:
_ORE.IncrementalStatistics_swigregister(IncrementalStatistics)

class RiskStatistics(Statistics):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def semiVariance(self):
        return _ORE.RiskStatistics_semiVariance(self)

    def semiDeviation(self):
        return _ORE.RiskStatistics_semiDeviation(self)

    def downsideVariance(self):
        return _ORE.RiskStatistics_downsideVariance(self)

    def downsideDeviation(self):
        return _ORE.RiskStatistics_downsideDeviation(self)

    def regret(self, target):
        return _ORE.RiskStatistics_regret(self, target)

    def potentialUpside(self, percentile):
        return _ORE.RiskStatistics_potentialUpside(self, percentile)

    def valueAtRisk(self, percentile):
        return _ORE.RiskStatistics_valueAtRisk(self, percentile)

    def expectedShortfall(self, percentile):
        return _ORE.RiskStatistics_expectedShortfall(self, percentile)

    def shortfall(self, target):
        return _ORE.RiskStatistics_shortfall(self, target)

    def averageShortfall(self, target):
        return _ORE.RiskStatistics_averageShortfall(self, target)

    def __init__(self):
        _ORE.RiskStatistics_swiginit(self, _ORE.new_RiskStatistics())
    __swig_destroy__ = _ORE.delete_RiskStatistics

# Register RiskStatistics in _ORE:
_ORE.RiskStatistics_swigregister(RiskStatistics)

class MultipleStatistics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimension):
        _ORE.MultipleStatistics_swiginit(self, _ORE.new_MultipleStatistics(dimension))

    def size(self):
        return _ORE.MultipleStatistics_size(self)

    def samples(self):
        return _ORE.MultipleStatistics_samples(self)

    def weightSum(self):
        return _ORE.MultipleStatistics_weightSum(self)

    def mean(self):
        return _ORE.MultipleStatistics_mean(self)

    def variance(self):
        return _ORE.MultipleStatistics_variance(self)

    def standardDeviation(self):
        return _ORE.MultipleStatistics_standardDeviation(self)

    def errorEstimate(self):
        return _ORE.MultipleStatistics_errorEstimate(self)

    def skewness(self):
        return _ORE.MultipleStatistics_skewness(self)

    def kurtosis(self):
        return _ORE.MultipleStatistics_kurtosis(self)

    def min(self):
        return _ORE.MultipleStatistics_min(self)

    def max(self):
        return _ORE.MultipleStatistics_max(self)

    def covariance(self):
        return _ORE.MultipleStatistics_covariance(self)

    def correlation(self):
        return _ORE.MultipleStatistics_correlation(self)

    def reset(self):
        return _ORE.MultipleStatistics_reset(self)

    def add(self, *args):
        return _ORE.MultipleStatistics_add(self, *args)
    __swig_destroy__ = _ORE.delete_MultipleStatistics

# Register MultipleStatistics in _ORE:
_ORE.MultipleStatistics_swigregister(MultipleStatistics)

class SequenceStatistics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimension):
        _ORE.SequenceStatistics_swiginit(self, _ORE.new_SequenceStatistics(dimension))

    def size(self):
        return _ORE.SequenceStatistics_size(self)

    def samples(self):
        return _ORE.SequenceStatistics_samples(self)

    def weightSum(self):
        return _ORE.SequenceStatistics_weightSum(self)

    def mean(self):
        return _ORE.SequenceStatistics_mean(self)

    def variance(self):
        return _ORE.SequenceStatistics_variance(self)

    def standardDeviation(self):
        return _ORE.SequenceStatistics_standardDeviation(self)

    def errorEstimate(self):
        return _ORE.SequenceStatistics_errorEstimate(self)

    def skewness(self):
        return _ORE.SequenceStatistics_skewness(self)

    def kurtosis(self):
        return _ORE.SequenceStatistics_kurtosis(self)

    def min(self):
        return _ORE.SequenceStatistics_min(self)

    def max(self):
        return _ORE.SequenceStatistics_max(self)

    def covariance(self):
        return _ORE.SequenceStatistics_covariance(self)

    def correlation(self):
        return _ORE.SequenceStatistics_correlation(self)

    def reset(self):
        return _ORE.SequenceStatistics_reset(self)

    def add(self, *args):
        return _ORE.SequenceStatistics_add(self, *args)
    __swig_destroy__ = _ORE.delete_SequenceStatistics

# Register SequenceStatistics in _ORE:
_ORE.SequenceStatistics_swigregister(SequenceStatistics)

class MultipleIncrementalStatistics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimension):
        _ORE.MultipleIncrementalStatistics_swiginit(self, _ORE.new_MultipleIncrementalStatistics(dimension))

    def size(self):
        return _ORE.MultipleIncrementalStatistics_size(self)

    def samples(self):
        return _ORE.MultipleIncrementalStatistics_samples(self)

    def weightSum(self):
        return _ORE.MultipleIncrementalStatistics_weightSum(self)

    def mean(self):
        return _ORE.MultipleIncrementalStatistics_mean(self)

    def variance(self):
        return _ORE.MultipleIncrementalStatistics_variance(self)

    def standardDeviation(self):
        return _ORE.MultipleIncrementalStatistics_standardDeviation(self)

    def errorEstimate(self):
        return _ORE.MultipleIncrementalStatistics_errorEstimate(self)

    def skewness(self):
        return _ORE.MultipleIncrementalStatistics_skewness(self)

    def kurtosis(self):
        return _ORE.MultipleIncrementalStatistics_kurtosis(self)

    def min(self):
        return _ORE.MultipleIncrementalStatistics_min(self)

    def max(self):
        return _ORE.MultipleIncrementalStatistics_max(self)

    def covariance(self):
        return _ORE.MultipleIncrementalStatistics_covariance(self)

    def correlation(self):
        return _ORE.MultipleIncrementalStatistics_correlation(self)

    def reset(self):
        return _ORE.MultipleIncrementalStatistics_reset(self)

    def add(self, *args):
        return _ORE.MultipleIncrementalStatistics_add(self, *args)
    __swig_destroy__ = _ORE.delete_MultipleIncrementalStatistics

# Register MultipleIncrementalStatistics in _ORE:
_ORE.MultipleIncrementalStatistics_swigregister(MultipleIncrementalStatistics)

class CapFloorTermVolatilityStructure(VolatilityTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def volatility(self, *args):
        return _ORE.CapFloorTermVolatilityStructure_volatility(self, *args)
    __swig_destroy__ = _ORE.delete_CapFloorTermVolatilityStructure

# Register CapFloorTermVolatilityStructure in _ORE:
_ORE.CapFloorTermVolatilityStructure_swigregister(CapFloorTermVolatilityStructure)

class CapFloorTermVolatilityStructureHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CapFloorTermVolatilityStructureHandle_swiginit(self, _ORE.new_CapFloorTermVolatilityStructureHandle(*args))

    def __deref__(self):
        return _ORE.CapFloorTermVolatilityStructureHandle___deref__(self)

    def currentLink(self):
        return _ORE.CapFloorTermVolatilityStructureHandle_currentLink(self)

    def __nonzero__(self):
        return _ORE.CapFloorTermVolatilityStructureHandle___nonzero__(self)

    def __bool__(self):
        return _ORE.CapFloorTermVolatilityStructureHandle___bool__(self)

    def asObservable(self):
        return _ORE.CapFloorTermVolatilityStructureHandle_asObservable(self)
    __swig_destroy__ = _ORE.delete_CapFloorTermVolatilityStructureHandle

    def volatility(self, *args):
        return _ORE.CapFloorTermVolatilityStructureHandle_volatility(self, *args)

    def minStrike(self):
        return _ORE.CapFloorTermVolatilityStructureHandle_minStrike(self)

    def maxStrike(self):
        return _ORE.CapFloorTermVolatilityStructureHandle_maxStrike(self)

    def dayCounter(self):
        return _ORE.CapFloorTermVolatilityStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _ORE.CapFloorTermVolatilityStructureHandle_timeFromReference(self, date)

    def calendar(self):
        return _ORE.CapFloorTermVolatilityStructureHandle_calendar(self)

    def referenceDate(self):
        return _ORE.CapFloorTermVolatilityStructureHandle_referenceDate(self)

    def maxDate(self):
        return _ORE.CapFloorTermVolatilityStructureHandle_maxDate(self)

    def maxTime(self):
        return _ORE.CapFloorTermVolatilityStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        return _ORE.CapFloorTermVolatilityStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _ORE.CapFloorTermVolatilityStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _ORE.CapFloorTermVolatilityStructureHandle_allowsExtrapolation(self)

# Register CapFloorTermVolatilityStructureHandle in _ORE:
_ORE.CapFloorTermVolatilityStructureHandle_swigregister(CapFloorTermVolatilityStructureHandle)

class RelinkableCapFloorTermVolatilityStructureHandle(CapFloorTermVolatilityStructureHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.RelinkableCapFloorTermVolatilityStructureHandle_swiginit(self, _ORE.new_RelinkableCapFloorTermVolatilityStructureHandle(*args))

    def linkTo(self, arg2):
        return _ORE.RelinkableCapFloorTermVolatilityStructureHandle_linkTo(self, arg2)

    def reset(self):
        return _ORE.RelinkableCapFloorTermVolatilityStructureHandle_reset(self)
    __swig_destroy__ = _ORE.delete_RelinkableCapFloorTermVolatilityStructureHandle

# Register RelinkableCapFloorTermVolatilityStructureHandle in _ORE:
_ORE.RelinkableCapFloorTermVolatilityStructureHandle_swigregister(RelinkableCapFloorTermVolatilityStructureHandle)

class CapFloorTermVolCurve(CapFloorTermVolatilityStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CapFloorTermVolCurve_swiginit(self, _ORE.new_CapFloorTermVolCurve(*args))
    __swig_destroy__ = _ORE.delete_CapFloorTermVolCurve

# Register CapFloorTermVolCurve in _ORE:
_ORE.CapFloorTermVolCurve_swigregister(CapFloorTermVolCurve)

class CapFloorTermVolSurface(CapFloorTermVolatilityStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CapFloorTermVolSurface_swiginit(self, _ORE.new_CapFloorTermVolSurface(*args))

    def maxDate(self):
        return _ORE.CapFloorTermVolSurface_maxDate(self)

    def minStrike(self):
        return _ORE.CapFloorTermVolSurface_minStrike(self)

    def maxStrike(self):
        return _ORE.CapFloorTermVolSurface_maxStrike(self)

    def optionTenors(self):
        return _ORE.CapFloorTermVolSurface_optionTenors(self)

    def optionDates(self):
        return _ORE.CapFloorTermVolSurface_optionDates(self)

    def optionTimes(self):
        return _ORE.CapFloorTermVolSurface_optionTimes(self)

    def strikes(self):
        return _ORE.CapFloorTermVolSurface_strikes(self)
    __swig_destroy__ = _ORE.delete_CapFloorTermVolSurface

# Register CapFloorTermVolSurface in _ORE:
_ORE.CapFloorTermVolSurface_swigregister(CapFloorTermVolSurface)

class StrippedOptionletBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def optionletStrikes(self, i):
        return _ORE.StrippedOptionletBase_optionletStrikes(self, i)

    def optionletVolatilities(self, i):
        return _ORE.StrippedOptionletBase_optionletVolatilities(self, i)

    def optionletFixingDates(self):
        return _ORE.StrippedOptionletBase_optionletFixingDates(self)

    def optionletFixingTimes(self):
        return _ORE.StrippedOptionletBase_optionletFixingTimes(self)

    def optionletMaturities(self):
        return _ORE.StrippedOptionletBase_optionletMaturities(self)

    def atmOptionletRates(self):
        return _ORE.StrippedOptionletBase_atmOptionletRates(self)

    def dayCounter(self):
        return _ORE.StrippedOptionletBase_dayCounter(self)

    def calendar(self):
        return _ORE.StrippedOptionletBase_calendar(self)

    def settlementDays(self):
        return _ORE.StrippedOptionletBase_settlementDays(self)

    def businessDayConvention(self):
        return _ORE.StrippedOptionletBase_businessDayConvention(self)

    def volatilityType(self):
        return _ORE.StrippedOptionletBase_volatilityType(self)

    def displacement(self):
        return _ORE.StrippedOptionletBase_displacement(self)
    __swig_destroy__ = _ORE.delete_StrippedOptionletBase

# Register StrippedOptionletBase in _ORE:
_ORE.StrippedOptionletBase_swigregister(StrippedOptionletBase)

class StrippedOptionlet(StrippedOptionletBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, settlementDays, calendar, bdc, iborIndex, optionletDates, strikes, volatilities, dc, type=ShiftedLognormal, displacement=0.0):
        _ORE.StrippedOptionlet_swiginit(self, _ORE.new_StrippedOptionlet(settlementDays, calendar, bdc, iborIndex, optionletDates, strikes, volatilities, dc, type, displacement))
    __swig_destroy__ = _ORE.delete_StrippedOptionlet

# Register StrippedOptionlet in _ORE:
_ORE.StrippedOptionlet_swigregister(StrippedOptionlet)

class OptionletStripper1(StrippedOptionletBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _ORE.OptionletStripper1_swiginit(self, _ORE.new_OptionletStripper1(*args, **kwargs))

    def capFloorPrices(self):
        return _ORE.OptionletStripper1_capFloorPrices(self)

    def capFloorVolatilities(self):
        return _ORE.OptionletStripper1_capFloorVolatilities(self)

    def optionletPrices(self):
        return _ORE.OptionletStripper1_optionletPrices(self)

    def switchStrike(self):
        return _ORE.OptionletStripper1_switchStrike(self)
    __swig_destroy__ = _ORE.delete_OptionletStripper1

# Register OptionletStripper1 in _ORE:
_ORE.OptionletStripper1_swigregister(OptionletStripper1)

class StrippedOptionletAdapter(OptionletVolatilityStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2):
        _ORE.StrippedOptionletAdapter_swiginit(self, _ORE.new_StrippedOptionletAdapter(arg2))
    __swig_destroy__ = _ORE.delete_StrippedOptionletAdapter

# Register StrippedOptionletAdapter in _ORE:
_ORE.StrippedOptionletAdapter_swigregister(StrippedOptionletAdapter)

class Settlement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Physical = _ORE.Settlement_Physical
    Cash = _ORE.Settlement_Cash
    PhysicalOTC = _ORE.Settlement_PhysicalOTC
    PhysicalCleared = _ORE.Settlement_PhysicalCleared
    CollateralizedCashPrice = _ORE.Settlement_CollateralizedCashPrice
    ParYieldCurve = _ORE.Settlement_ParYieldCurve

    def __init__(self):
        _ORE.Settlement_swiginit(self, _ORE.new_Settlement())
    __swig_destroy__ = _ORE.delete_Settlement

# Register Settlement in _ORE:
_ORE.Settlement_swigregister(Settlement)

class Swaption(Option):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Swaption_swiginit(self, _ORE.new_Swaption(*args))

    def settlementType(self):
        return _ORE.Swaption_settlementType(self)

    def settlementMethod(self):
        return _ORE.Swaption_settlementMethod(self)

    def type(self):
        return _ORE.Swaption_type(self)

    def underlyingSwap(self):
        return _ORE.Swaption_underlyingSwap(self)

    def impliedVolatility(self, price, discountCurve, guess, accuracy=1.0e-4, maxEvaluations=100, minVol=1.0e-7, maxVol=4.0, type=ShiftedLognormal, displacement=0.0):
        return _ORE.Swaption_impliedVolatility(self, price, discountCurve, guess, accuracy, maxEvaluations, minVol, maxVol, type, displacement)

    def vega(self):
        return _ORE.Swaption_vega(self)

    def delta(self):
        return _ORE.Swaption_delta(self)

    def annuity(self):
        return _ORE.Swaption_annuity(self)
    __swig_destroy__ = _ORE.delete_Swaption

# Register Swaption in _ORE:
_ORE.Swaption_swigregister(Swaption)

class NonstandardSwaption(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.NonstandardSwaption_swiginit(self, _ORE.new_NonstandardSwaption(*args))

    def underlyingSwap(self):
        return _ORE.NonstandardSwaption_underlyingSwap(self)

    def calibrationBasket(self, swapIndex, swaptionVolatility, typeStr):
        return _ORE.NonstandardSwaption_calibrationBasket(self, swapIndex, swaptionVolatility, typeStr)

    def probabilities(self):
        return _ORE.NonstandardSwaption_probabilities(self)
    __swig_destroy__ = _ORE.delete_NonstandardSwaption

# Register NonstandardSwaption in _ORE:
_ORE.NonstandardSwaption_swigregister(NonstandardSwaption)

class FloatFloatSwaption(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FloatFloatSwaption_swiginit(self, _ORE.new_FloatFloatSwaption(*args))

    def underlyingSwap(self):
        return _ORE.FloatFloatSwaption_underlyingSwap(self)

    def calibrationBasket(self, swapIndex, swaptionVolatility, typeStr):
        return _ORE.FloatFloatSwaption_calibrationBasket(self, swapIndex, swaptionVolatility, typeStr)

    def underlyingValue(self):
        return _ORE.FloatFloatSwaption_underlyingValue(self)

    def probabilities(self):
        return _ORE.FloatFloatSwaption_probabilities(self)
    __swig_destroy__ = _ORE.delete_FloatFloatSwaption

# Register FloatFloatSwaption in _ORE:
_ORE.FloatFloatSwaption_swigregister(FloatFloatSwaption)

class BlackSwaptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BlackSwaptionEngine_swiginit(self, _ORE.new_BlackSwaptionEngine(*args))
    __swig_destroy__ = _ORE.delete_BlackSwaptionEngine

# Register BlackSwaptionEngine in _ORE:
_ORE.BlackSwaptionEngine_swigregister(BlackSwaptionEngine)

class BachelierSwaptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BachelierSwaptionEngine_swiginit(self, _ORE.new_BachelierSwaptionEngine(*args))
    __swig_destroy__ = _ORE.delete_BachelierSwaptionEngine

# Register BachelierSwaptionEngine in _ORE:
_ORE.BachelierSwaptionEngine_swigregister(BachelierSwaptionEngine)

class VanillaSwingOption(OneAssetOption):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff, ex, minExerciseRights, maxExerciseRights):
        _ORE.VanillaSwingOption_swiginit(self, _ORE.new_VanillaSwingOption(payoff, ex, minExerciseRights, maxExerciseRights))
    __swig_destroy__ = _ORE.delete_VanillaSwingOption

# Register VanillaSwingOption in _ORE:
_ORE.VanillaSwingOption_swigregister(VanillaSwingOption)

class FdSimpleBSSwingEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdSimpleBSSwingEngine_swiginit(self, _ORE.new_FdSimpleBSSwingEngine(*args))
    __swig_destroy__ = _ORE.delete_FdSimpleBSSwingEngine

# Register FdSimpleBSSwingEngine in _ORE:
_ORE.FdSimpleBSSwingEngine_swigregister(FdSimpleBSSwingEngine)

class FdSimpleExtOUJumpSwingEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FdSimpleExtOUJumpSwingEngine_swiginit(self, _ORE.new_FdSimpleExtOUJumpSwingEngine(*args))
    __swig_destroy__ = _ORE.delete_FdSimpleExtOUJumpSwingEngine

# Register FdSimpleExtOUJumpSwingEngine in _ORE:
_ORE.FdSimpleExtOUJumpSwingEngine_swigregister(FdSimpleExtOUJumpSwingEngine)


def enableTracing():
    return _ORE.enableTracing()

def disableTracing():
    return _ORE.disableTracing()
class ConstantEstimator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size):
        _ORE.ConstantEstimator_swiginit(self, _ORE.new_ConstantEstimator(size))

    def calculate(self, arg2):
        return _ORE.ConstantEstimator_calculate(self, arg2)
    __swig_destroy__ = _ORE.delete_ConstantEstimator

# Register ConstantEstimator in _ORE:
_ORE.ConstantEstimator_swigregister(ConstantEstimator)

class ParkinsonSigma(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, yearFraction):
        _ORE.ParkinsonSigma_swiginit(self, _ORE.new_ParkinsonSigma(yearFraction))

    def calculate(self, arg2):
        return _ORE.ParkinsonSigma_calculate(self, arg2)
    __swig_destroy__ = _ORE.delete_ParkinsonSigma

# Register ParkinsonSigma in _ORE:
_ORE.ParkinsonSigma_swigregister(ParkinsonSigma)

class GarmanKlassSigma1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, yearFraction, marketOpenFraction):
        _ORE.GarmanKlassSigma1_swiginit(self, _ORE.new_GarmanKlassSigma1(yearFraction, marketOpenFraction))

    def calculate(self, arg2):
        return _ORE.GarmanKlassSigma1_calculate(self, arg2)
    __swig_destroy__ = _ORE.delete_GarmanKlassSigma1

# Register GarmanKlassSigma1 in _ORE:
_ORE.GarmanKlassSigma1_swigregister(GarmanKlassSigma1)

class GarmanKlassSigma3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, yearFraction, marketOpenFraction):
        _ORE.GarmanKlassSigma3_swiginit(self, _ORE.new_GarmanKlassSigma3(yearFraction, marketOpenFraction))

    def calculate(self, arg2):
        return _ORE.GarmanKlassSigma3_calculate(self, arg2)
    __swig_destroy__ = _ORE.delete_GarmanKlassSigma3

# Register GarmanKlassSigma3 in _ORE:
_ORE.GarmanKlassSigma3_swigregister(GarmanKlassSigma3)

class GarmanKlassSigma4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, yearFraction):
        _ORE.GarmanKlassSigma4_swiginit(self, _ORE.new_GarmanKlassSigma4(yearFraction))

    def calculate(self, arg2):
        return _ORE.GarmanKlassSigma4_calculate(self, arg2)
    __swig_destroy__ = _ORE.delete_GarmanKlassSigma4

# Register GarmanKlassSigma4 in _ORE:
_ORE.GarmanKlassSigma4_swigregister(GarmanKlassSigma4)

class GarmanKlassSigma5(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, yearFraction):
        _ORE.GarmanKlassSigma5_swiginit(self, _ORE.new_GarmanKlassSigma5(yearFraction))

    def calculate(self, arg2):
        return _ORE.GarmanKlassSigma5_calculate(self, arg2)
    __swig_destroy__ = _ORE.delete_GarmanKlassSigma5

# Register GarmanKlassSigma5 in _ORE:
_ORE.GarmanKlassSigma5_swigregister(GarmanKlassSigma5)

class GarmanKlassSigma6(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, yearFraction, marketOpenFraction):
        _ORE.GarmanKlassSigma6_swiginit(self, _ORE.new_GarmanKlassSigma6(yearFraction, marketOpenFraction))

    def calculate(self, arg2):
        return _ORE.GarmanKlassSigma6_calculate(self, arg2)
    __swig_destroy__ = _ORE.delete_GarmanKlassSigma6

# Register GarmanKlassSigma6 in _ORE:
_ORE.GarmanKlassSigma6_swigregister(GarmanKlassSigma6)

class ZeroCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ZeroCurve_swiginit(self, _ORE.new_ZeroCurve(*args))

    def times(self):
        return _ORE.ZeroCurve_times(self)

    def data(self):
        return _ORE.ZeroCurve_data(self)

    def dates(self):
        return _ORE.ZeroCurve_dates(self)

    def zeroRates(self):
        return _ORE.ZeroCurve_zeroRates(self)

    def nodes(self):
        return _ORE.ZeroCurve_nodes(self)
    __swig_destroy__ = _ORE.delete_ZeroCurve

# Register ZeroCurve in _ORE:
_ORE.ZeroCurve_swigregister(ZeroCurve)

class LogLinearZeroCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.LogLinearZeroCurve_swiginit(self, _ORE.new_LogLinearZeroCurve(*args))

    def times(self):
        return _ORE.LogLinearZeroCurve_times(self)

    def data(self):
        return _ORE.LogLinearZeroCurve_data(self)

    def dates(self):
        return _ORE.LogLinearZeroCurve_dates(self)

    def zeroRates(self):
        return _ORE.LogLinearZeroCurve_zeroRates(self)

    def nodes(self):
        return _ORE.LogLinearZeroCurve_nodes(self)
    __swig_destroy__ = _ORE.delete_LogLinearZeroCurve

# Register LogLinearZeroCurve in _ORE:
_ORE.LogLinearZeroCurve_swigregister(LogLinearZeroCurve)

class CubicZeroCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CubicZeroCurve_swiginit(self, _ORE.new_CubicZeroCurve(*args))

    def times(self):
        return _ORE.CubicZeroCurve_times(self)

    def data(self):
        return _ORE.CubicZeroCurve_data(self)

    def dates(self):
        return _ORE.CubicZeroCurve_dates(self)

    def zeroRates(self):
        return _ORE.CubicZeroCurve_zeroRates(self)

    def nodes(self):
        return _ORE.CubicZeroCurve_nodes(self)
    __swig_destroy__ = _ORE.delete_CubicZeroCurve

# Register CubicZeroCurve in _ORE:
_ORE.CubicZeroCurve_swigregister(CubicZeroCurve)

class NaturalCubicZeroCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.NaturalCubicZeroCurve_swiginit(self, _ORE.new_NaturalCubicZeroCurve(*args))

    def times(self):
        return _ORE.NaturalCubicZeroCurve_times(self)

    def data(self):
        return _ORE.NaturalCubicZeroCurve_data(self)

    def dates(self):
        return _ORE.NaturalCubicZeroCurve_dates(self)

    def zeroRates(self):
        return _ORE.NaturalCubicZeroCurve_zeroRates(self)

    def nodes(self):
        return _ORE.NaturalCubicZeroCurve_nodes(self)
    __swig_destroy__ = _ORE.delete_NaturalCubicZeroCurve

# Register NaturalCubicZeroCurve in _ORE:
_ORE.NaturalCubicZeroCurve_swigregister(NaturalCubicZeroCurve)

class LogCubicZeroCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.LogCubicZeroCurve_swiginit(self, _ORE.new_LogCubicZeroCurve(*args))

    def times(self):
        return _ORE.LogCubicZeroCurve_times(self)

    def data(self):
        return _ORE.LogCubicZeroCurve_data(self)

    def dates(self):
        return _ORE.LogCubicZeroCurve_dates(self)

    def zeroRates(self):
        return _ORE.LogCubicZeroCurve_zeroRates(self)

    def nodes(self):
        return _ORE.LogCubicZeroCurve_nodes(self)
    __swig_destroy__ = _ORE.delete_LogCubicZeroCurve

# Register LogCubicZeroCurve in _ORE:
_ORE.LogCubicZeroCurve_swigregister(LogCubicZeroCurve)

class MonotonicCubicZeroCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.MonotonicCubicZeroCurve_swiginit(self, _ORE.new_MonotonicCubicZeroCurve(*args))

    def times(self):
        return _ORE.MonotonicCubicZeroCurve_times(self)

    def data(self):
        return _ORE.MonotonicCubicZeroCurve_data(self)

    def dates(self):
        return _ORE.MonotonicCubicZeroCurve_dates(self)

    def zeroRates(self):
        return _ORE.MonotonicCubicZeroCurve_zeroRates(self)

    def nodes(self):
        return _ORE.MonotonicCubicZeroCurve_nodes(self)
    __swig_destroy__ = _ORE.delete_MonotonicCubicZeroCurve

# Register MonotonicCubicZeroCurve in _ORE:
_ORE.MonotonicCubicZeroCurve_swigregister(MonotonicCubicZeroCurve)

class KrugerZeroCurve(YieldTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.KrugerZeroCurve_swiginit(self, _ORE.new_KrugerZeroCurve(*args))

    def times(self):
        return _ORE.KrugerZeroCurve_times(self)

    def data(self):
        return _ORE.KrugerZeroCurve_data(self)

    def dates(self):
        return _ORE.KrugerZeroCurve_dates(self)

    def zeroRates(self):
        return _ORE.KrugerZeroCurve_zeroRates(self)

    def nodes(self):
        return _ORE.KrugerZeroCurve_nodes(self)
    __swig_destroy__ = _ORE.delete_KrugerZeroCurve

# Register KrugerZeroCurve in _ORE:
_ORE.KrugerZeroCurve_swigregister(KrugerZeroCurve)

class Belgium(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _ORE.Belgium_Settlement

    def __init__(self, *args):
        _ORE.Belgium_swiginit(self, _ORE.new_Belgium(*args))
    __swig_destroy__ = _ORE.delete_Belgium

# Register Belgium in _ORE:
_ORE.Belgium_swigregister(Belgium)

class CME(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.CME_swiginit(self, _ORE.new_CME())
    __swig_destroy__ = _ORE.delete_CME

# Register CME in _ORE:
_ORE.CME_swigregister(CME)

class Colombia(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CSE = _ORE.Colombia_CSE

    def __init__(self, *args):
        _ORE.Colombia_swiginit(self, _ORE.new_Colombia(*args))
    __swig_destroy__ = _ORE.delete_Colombia

# Register Colombia in _ORE:
_ORE.Colombia_swigregister(Colombia)

class Cyprus(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Cyprus_swiginit(self, _ORE.new_Cyprus())
    __swig_destroy__ = _ORE.delete_Cyprus

# Register Cyprus in _ORE:
_ORE.Cyprus_swigregister(Cyprus)

class Greece(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Greece_swiginit(self, _ORE.new_Greece())
    __swig_destroy__ = _ORE.delete_Greece

# Register Greece in _ORE:
_ORE.Greece_swigregister(Greece)

class ICE(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FuturesUS = _ORE.ICE_FuturesUS
    FuturesUS_1 = _ORE.ICE_FuturesUS_1
    FuturesUS_2 = _ORE.ICE_FuturesUS_2
    FuturesEU = _ORE.ICE_FuturesEU
    FuturesEU_1 = _ORE.ICE_FuturesEU_1
    EndexEnergy = _ORE.ICE_EndexEnergy
    EndexEquities = _ORE.ICE_EndexEquities
    SwapTradeUS = _ORE.ICE_SwapTradeUS
    SwapTradeUK = _ORE.ICE_SwapTradeUK
    FuturesSingapore = _ORE.ICE_FuturesSingapore

    def __init__(self, market):
        _ORE.ICE_swiginit(self, _ORE.new_ICE(market))
    __swig_destroy__ = _ORE.delete_ICE

# Register ICE in _ORE:
_ORE.ICE_swigregister(ICE)

class Ireland(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IrishStockExchange = _ORE.Ireland_IrishStockExchange
    BankHolidays = _ORE.Ireland_BankHolidays

    def __init__(self, *args):
        _ORE.Ireland_swiginit(self, _ORE.new_Ireland(*args))
    __swig_destroy__ = _ORE.delete_Ireland

# Register Ireland in _ORE:
_ORE.Ireland_swigregister(Ireland)

class IslamicWeekendsOnly(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.IslamicWeekendsOnly_swiginit(self, _ORE.new_IslamicWeekendsOnly())
    __swig_destroy__ = _ORE.delete_IslamicWeekendsOnly

# Register IslamicWeekendsOnly in _ORE:
_ORE.IslamicWeekendsOnly_swigregister(IslamicWeekendsOnly)

class Luxembourg(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _ORE.Luxembourg_Settlement

    def __init__(self, *args):
        _ORE.Luxembourg_swiginit(self, _ORE.new_Luxembourg(*args))
    __swig_destroy__ = _ORE.delete_Luxembourg

# Register Luxembourg in _ORE:
_ORE.Luxembourg_swigregister(Luxembourg)

class Malaysia(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MYX = _ORE.Malaysia_MYX

    def __init__(self, *args):
        _ORE.Malaysia_swiginit(self, _ORE.new_Malaysia(*args))
    __swig_destroy__ = _ORE.delete_Malaysia

# Register Malaysia in _ORE:
_ORE.Malaysia_swigregister(Malaysia)

class Netherlands(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _ORE.Netherlands_Settlement

    def __init__(self, *args):
        _ORE.Netherlands_swiginit(self, _ORE.new_Netherlands(*args))
    __swig_destroy__ = _ORE.delete_Netherlands

# Register Netherlands in _ORE:
_ORE.Netherlands_swigregister(Netherlands)

class Peru(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LSE = _ORE.Peru_LSE

    def __init__(self, *args):
        _ORE.Peru_swiginit(self, _ORE.new_Peru(*args))
    __swig_destroy__ = _ORE.delete_Peru

# Register Peru in _ORE:
_ORE.Peru_swigregister(Peru)

class Philippines(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PHE = _ORE.Philippines_PHE

    def __init__(self, *args):
        _ORE.Philippines_swiginit(self, _ORE.new_Philippines(*args))
    __swig_destroy__ = _ORE.delete_Philippines

# Register Philippines in _ORE:
_ORE.Philippines_swigregister(Philippines)

class RussiaModified(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.RussiaModified_swiginit(self, _ORE.new_RussiaModified(*args))
    __swig_destroy__ = _ORE.delete_RussiaModified

# Register RussiaModified in _ORE:
_ORE.RussiaModified_swigregister(RussiaModified)

class Spain(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _ORE.Spain_Settlement

    def __init__(self, *args):
        _ORE.Spain_swiginit(self, _ORE.new_Spain(*args))
    __swig_destroy__ = _ORE.delete_Spain

# Register Spain in _ORE:
_ORE.Spain_swigregister(Spain)

class Wmr(Calendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _ORE.Wmr_Settlement

    def __init__(self, *args):
        _ORE.Wmr_swiginit(self, _ORE.new_Wmr(*args))
    __swig_destroy__ = _ORE.delete_Wmr

# Register Wmr in _ORE:
_ORE.Wmr_swigregister(Wmr)

class BEHICP(ZeroInflationIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BEHICP_swiginit(self, _ORE.new_BEHICP(*args))
    __swig_destroy__ = _ORE.delete_BEHICP

# Register BEHICP in _ORE:
_ORE.BEHICP_swigregister(BEHICP)

class BondIndex(Index):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BondIndex_swiginit(self, _ORE.new_BondIndex(*args))

    def securityName(self):
        return _ORE.BondIndex_securityName(self)

    def dirty(self):
        return _ORE.BondIndex_dirty(self)

    def relative(self):
        return _ORE.BondIndex_relative(self)

    def bond(self):
        return _ORE.BondIndex_bond(self)

    def discountCurve(self):
        return _ORE.BondIndex_discountCurve(self)

    def defaultCurve(self):
        return _ORE.BondIndex_defaultCurve(self)

    def recoveryRate(self):
        return _ORE.BondIndex_recoveryRate(self)

    def securitySpread(self):
        return _ORE.BondIndex_securitySpread(self)

    def incomeCurve(self):
        return _ORE.BondIndex_incomeCurve(self)

    def conditionalOnSurvival(self):
        return _ORE.BondIndex_conditionalOnSurvival(self)

    def issueDate(self):
        return _ORE.BondIndex_issueDate(self)

    def forecastFixing(self, fixingDate):
        return _ORE.BondIndex_forecastFixing(self, fixingDate)

    def pastFixing(self, fixingDate):
        return _ORE.BondIndex_pastFixing(self, fixingDate)
    __swig_destroy__ = _ORE.delete_BondIndex

# Register BondIndex in _ORE:
_ORE.BondIndex_swigregister(BondIndex)

class BondFuturesIndex(BondIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BondFuturesIndex_swiginit(self, _ORE.new_BondFuturesIndex(*args))

    def name(self):
        return _ORE.BondFuturesIndex_name(self)

    def forecastFixing(self, fixingDate):
        return _ORE.BondFuturesIndex_forecastFixing(self, fixingDate)

    def expiryDate(self):
        return _ORE.BondFuturesIndex_expiryDate(self)
    __swig_destroy__ = _ORE.delete_BondFuturesIndex

# Register BondFuturesIndex in _ORE:
_ORE.BondFuturesIndex_swigregister(BondFuturesIndex)

class ConstantMaturityBondIndex(InterestRateIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ConstantMaturityBondIndex_swiginit(self, _ORE.new_ConstantMaturityBondIndex(*args))

    def maturityDate(self, valueDate):
        return _ORE.ConstantMaturityBondIndex_maturityDate(self, valueDate)

    def forecastFixing(self, fixingDate):
        return _ORE.ConstantMaturityBondIndex_forecastFixing(self, fixingDate)

    def convention(self):
        return _ORE.ConstantMaturityBondIndex_convention(self)

    def endOfMonth(self):
        return _ORE.ConstantMaturityBondIndex_endOfMonth(self)

    def bond(self):
        return _ORE.ConstantMaturityBondIndex_bond(self)
    __swig_destroy__ = _ORE.delete_ConstantMaturityBondIndex

# Register ConstantMaturityBondIndex in _ORE:
_ORE.ConstantMaturityBondIndex_swigregister(ConstantMaturityBondIndex)

class EquityIndex2(Index):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EquityIndex2_swiginit(self, _ORE.new_EquityIndex2(*args))

    def name(self):
        return _ORE.EquityIndex2_name(self)

    def currency(self):
        return _ORE.EquityIndex2_currency(self)

    def fixingCalendar(self):
        return _ORE.EquityIndex2_fixingCalendar(self)

    def isValidFixingDate(self, fixingDate):
        return _ORE.EquityIndex2_isValidFixingDate(self, fixingDate)

    def fixing(self, *args):
        return _ORE.EquityIndex2_fixing(self, *args)

    def familyName(self):
        return _ORE.EquityIndex2_familyName(self)

    def equitySpot(self):
        return _ORE.EquityIndex2_equitySpot(self)

    def equityForecastCurve(self):
        return _ORE.EquityIndex2_equityForecastCurve(self)

    def equityDividendCurve(self):
        return _ORE.EquityIndex2_equityDividendCurve(self)

    def forecastFixing(self, *args):
        return _ORE.EquityIndex2_forecastFixing(self, *args)

    def pastFixing(self, fixingDate):
        return _ORE.EquityIndex2_pastFixing(self, fixingDate)

    def clone(self, spotQuote, rate, dividend):
        return _ORE.EquityIndex2_clone(self, spotQuote, rate, dividend)
    __swig_destroy__ = _ORE.delete_EquityIndex2

# Register EquityIndex2 in _ORE:
_ORE.EquityIndex2_swigregister(EquityIndex2)

class FxIndex(Index):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FxIndex_swiginit(self, _ORE.new_FxIndex(*args))

    def familyName(self):
        return _ORE.FxIndex_familyName(self)

    def fixingDays(self):
        return _ORE.FxIndex_fixingDays(self)

    def fixingDate(self, valueDate):
        return _ORE.FxIndex_fixingDate(self, valueDate)

    def sourceCurrency(self):
        return _ORE.FxIndex_sourceCurrency(self)

    def targetCurrency(self):
        return _ORE.FxIndex_targetCurrency(self)

    def valueDate(self, fixingDate):
        return _ORE.FxIndex_valueDate(self, fixingDate)

    def forecastFixing(self, fixingDate):
        return _ORE.FxIndex_forecastFixing(self, fixingDate)

    def pastFixing(self, fixingDate):
        return _ORE.FxIndex_pastFixing(self, fixingDate)

    def fixing(self, fixingDate, forecastTodaysFixing=False):
        return _ORE.FxIndex_fixing(self, fixingDate, forecastTodaysFixing)
    __swig_destroy__ = _ORE.delete_FxIndex

# Register FxIndex in _ORE:
_ORE.FxIndex_swigregister(FxIndex)

class CommodityIndex(Index):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def underlyingName(self):
        return _ORE.CommodityIndex_underlyingName(self)

    def priceCurve(self):
        return _ORE.CommodityIndex_priceCurve(self)

    def fixing(self, fixingDate, forecastTodaysFixing=False):
        return _ORE.CommodityIndex_fixing(self, fixingDate, forecastTodaysFixing)

    def clone(self, *args):
        return _ORE.CommodityIndex_clone(self, *args)
    __swig_destroy__ = _ORE.delete_CommodityIndex

# Register CommodityIndex in _ORE:
_ORE.CommodityIndex_swigregister(CommodityIndex)

class CommoditySpotIndex(CommodityIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CommoditySpotIndex_swiginit(self, _ORE.new_CommoditySpotIndex(*args))

    def clone(self, *args):
        return _ORE.CommoditySpotIndex_clone(self, *args)
    __swig_destroy__ = _ORE.delete_CommoditySpotIndex

# Register CommoditySpotIndex in _ORE:
_ORE.CommoditySpotIndex_swigregister(CommoditySpotIndex)

class CommodityFuturesIndex(CommodityIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CommodityFuturesIndex_swiginit(self, _ORE.new_CommodityFuturesIndex(*args))

    def clone(self, *args):
        return _ORE.CommodityFuturesIndex_clone(self, *args)
    __swig_destroy__ = _ORE.delete_CommodityFuturesIndex

# Register CommodityFuturesIndex in _ORE:
_ORE.CommodityFuturesIndex_swigregister(CommodityFuturesIndex)

class BMAIndex(InterestRateIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BMAIndex_swiginit(self, _ORE.new_BMAIndex(*args))

    def name(self):
        return _ORE.BMAIndex_name(self)

    def isValidFixingDate(self, fixingDate):
        return _ORE.BMAIndex_isValidFixingDate(self, fixingDate)

    def forwardingTermStructure(self):
        return _ORE.BMAIndex_forwardingTermStructure(self)

    def maturityDate(self, valueDate):
        return _ORE.BMAIndex_maturityDate(self, valueDate)

    def fixingSchedule(self, start, end):
        return _ORE.BMAIndex_fixingSchedule(self, start, end)
    __swig_destroy__ = _ORE.delete_BMAIndex

# Register BMAIndex in _ORE:
_ORE.BMAIndex_swigregister(BMAIndex)

class BMAIndexWrapper(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, bma):
        _ORE.BMAIndexWrapper_swiginit(self, _ORE.new_BMAIndexWrapper(bma))

    def name(self):
        return _ORE.BMAIndexWrapper_name(self)

    def isValidFixingDate(self, fixingDate):
        return _ORE.BMAIndexWrapper_isValidFixingDate(self, fixingDate)

    def forwardingTermStructure(self):
        return _ORE.BMAIndexWrapper_forwardingTermStructure(self)

    def maturityDate(self, valueDate):
        return _ORE.BMAIndexWrapper_maturityDate(self, valueDate)

    def fixingSchedule(self, start, end):
        return _ORE.BMAIndexWrapper_fixingSchedule(self, start, end)

    def bma(self):
        return _ORE.BMAIndexWrapper_bma(self)
    __swig_destroy__ = _ORE.delete_BMAIndexWrapper

# Register BMAIndexWrapper in _ORE:
_ORE.BMAIndexWrapper_swigregister(BMAIndexWrapper)

class CZKPribor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CZKPribor_swiginit(self, _ORE.new_CZKPribor(*args))
    __swig_destroy__ = _ORE.delete_CZKPribor

# Register CZKPribor in _ORE:
_ORE.CZKPribor_swigregister(CZKPribor)

class DEMLibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.DEMLibor_swiginit(self, _ORE.new_DEMLibor(*args))
    __swig_destroy__ = _ORE.delete_DEMLibor

# Register DEMLibor in _ORE:
_ORE.DEMLibor_swigregister(DEMLibor)

class DKKCibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.DKKCibor_swiginit(self, _ORE.new_DKKCibor(*args))
    __swig_destroy__ = _ORE.delete_DKKCibor

# Register DKKCibor in _ORE:
_ORE.DKKCibor_swigregister(DKKCibor)

class HKDHibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.HKDHibor_swiginit(self, _ORE.new_HKDHibor(*args))
    __swig_destroy__ = _ORE.delete_HKDHibor

# Register HKDHibor in _ORE:
_ORE.HKDHibor_swigregister(HKDHibor)

class HUFBubor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.HUFBubor_swiginit(self, _ORE.new_HUFBubor(*args))
    __swig_destroy__ = _ORE.delete_HUFBubor

# Register HUFBubor in _ORE:
_ORE.HUFBubor_swigregister(HUFBubor)

class IDRIdrfix(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.IDRIdrfix_swiginit(self, _ORE.new_IDRIdrfix(*args))
    __swig_destroy__ = _ORE.delete_IDRIdrfix

# Register IDRIdrfix in _ORE:
_ORE.IDRIdrfix_swigregister(IDRIdrfix)

class INRMifor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.INRMifor_swiginit(self, _ORE.new_INRMifor(*args))
    __swig_destroy__ = _ORE.delete_INRMifor

# Register INRMifor in _ORE:
_ORE.INRMifor_swigregister(INRMifor)

class KRWKoribor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.KRWKoribor_swiginit(self, _ORE.new_KRWKoribor(*args))
    __swig_destroy__ = _ORE.delete_KRWKoribor

# Register KRWKoribor in _ORE:
_ORE.KRWKoribor_swigregister(KRWKoribor)

class MXNTiie(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.MXNTiie_swiginit(self, _ORE.new_MXNTiie(*args))
    __swig_destroy__ = _ORE.delete_MXNTiie

# Register MXNTiie in _ORE:
_ORE.MXNTiie_swigregister(MXNTiie)

class MYRKlibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.MYRKlibor_swiginit(self, _ORE.new_MYRKlibor(*args))
    __swig_destroy__ = _ORE.delete_MYRKlibor

# Register MYRKlibor in _ORE:
_ORE.MYRKlibor_swigregister(MYRKlibor)

class NOKNibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.NOKNibor_swiginit(self, _ORE.new_NOKNibor(*args))
    __swig_destroy__ = _ORE.delete_NOKNibor

# Register NOKNibor in _ORE:
_ORE.NOKNibor_swigregister(NOKNibor)

class NZDBKBM(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.NZDBKBM_swiginit(self, _ORE.new_NZDBKBM(*args))
    __swig_destroy__ = _ORE.delete_NZDBKBM

# Register NZDBKBM in _ORE:
_ORE.NZDBKBM_swigregister(NZDBKBM)

class PHPPhiref(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.PHPPhiref_swiginit(self, _ORE.new_PHPPhiref(*args))
    __swig_destroy__ = _ORE.delete_PHPPhiref

# Register PHPPhiref in _ORE:
_ORE.PHPPhiref_swigregister(PHPPhiref)

class SEKStibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SEKStibor_swiginit(self, _ORE.new_SEKStibor(*args))
    __swig_destroy__ = _ORE.delete_SEKStibor

# Register SEKStibor in _ORE:
_ORE.SEKStibor_swigregister(SEKStibor)

class SGDSibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SGDSibor_swiginit(self, _ORE.new_SGDSibor(*args))
    __swig_destroy__ = _ORE.delete_SGDSibor

# Register SGDSibor in _ORE:
_ORE.SGDSibor_swigregister(SGDSibor)

class SGDSor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SGDSor_swiginit(self, _ORE.new_SGDSor(*args))
    __swig_destroy__ = _ORE.delete_SGDSor

# Register SGDSor in _ORE:
_ORE.SGDSor_swigregister(SGDSor)

class SKKBribor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SKKBribor_swiginit(self, _ORE.new_SKKBribor(*args))
    __swig_destroy__ = _ORE.delete_SKKBribor

# Register SKKBribor in _ORE:
_ORE.SKKBribor_swigregister(SKKBribor)

class THBBibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.THBBibor_swiginit(self, _ORE.new_THBBibor(*args))
    __swig_destroy__ = _ORE.delete_THBBibor

# Register THBBibor in _ORE:
_ORE.THBBibor_swigregister(THBBibor)

class TWDTaibor(IborIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.TWDTaibor_swiginit(self, _ORE.new_TWDTaibor(*args))
    __swig_destroy__ = _ORE.delete_TWDTaibor

# Register TWDTaibor in _ORE:
_ORE.TWDTaibor_swigregister(TWDTaibor)

class BRLCdi(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BRLCdi_swiginit(self, _ORE.new_BRLCdi(*args))
    __swig_destroy__ = _ORE.delete_BRLCdi

# Register BRLCdi in _ORE:
_ORE.BRLCdi_swigregister(BRLCdi)

class CHFTois(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CHFTois_swiginit(self, _ORE.new_CHFTois(*args))
    __swig_destroy__ = _ORE.delete_CHFTois

# Register CHFTois in _ORE:
_ORE.CHFTois_swigregister(CHFTois)

class CLPCamara(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CLPCamara_swiginit(self, _ORE.new_CLPCamara(*args))
    __swig_destroy__ = _ORE.delete_CLPCamara

# Register CLPCamara in _ORE:
_ORE.CLPCamara_swigregister(CLPCamara)

class COPIbr(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.COPIbr_swiginit(self, _ORE.new_COPIbr(*args))
    __swig_destroy__ = _ORE.delete_COPIbr

# Register COPIbr in _ORE:
_ORE.COPIbr_swigregister(COPIbr)

class CORRA(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CORRA_swiginit(self, _ORE.new_CORRA(*args))
    __swig_destroy__ = _ORE.delete_CORRA

# Register CORRA in _ORE:
_ORE.CORRA_swigregister(CORRA)

class DKKOis(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.DKKOis_swiginit(self, _ORE.new_DKKOis(*args))
    __swig_destroy__ = _ORE.delete_DKKOis

# Register DKKOis in _ORE:
_ORE.DKKOis_swigregister(DKKOis)

class SEKSior(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SEKSior_swiginit(self, _ORE.new_SEKSior(*args))
    __swig_destroy__ = _ORE.delete_SEKSior

# Register SEKSior in _ORE:
_ORE.SEKSior_swigregister(SEKSior)

class Tonar(OvernightIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Tonar_swiginit(self, _ORE.new_Tonar(*args))
    __swig_destroy__ = _ORE.delete_Tonar

# Register Tonar in _ORE:
_ORE.Tonar_swigregister(Tonar)

class FXLinkedCashFlow(CashFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cashFlowDate, fixingDate, foreignAmount, fxIndex):
        _ORE.FXLinkedCashFlow_swiginit(self, _ORE.new_FXLinkedCashFlow(cashFlowDate, fixingDate, foreignAmount, fxIndex))

    def date(self):
        return _ORE.FXLinkedCashFlow_date(self)

    def fxFixingDate(self):
        return _ORE.FXLinkedCashFlow_fxFixingDate(self)

    def fxIndex(self):
        return _ORE.FXLinkedCashFlow_fxIndex(self)

    def amount(self):
        return _ORE.FXLinkedCashFlow_amount(self)

    def foreignAmount(self):
        return _ORE.FXLinkedCashFlow_foreignAmount(self)

    def fxRate(self):
        return _ORE.FXLinkedCashFlow_fxRate(self)
    __swig_destroy__ = _ORE.delete_FXLinkedCashFlow

# Register FXLinkedCashFlow in _ORE:
_ORE.FXLinkedCashFlow_swigregister(FXLinkedCashFlow)

class FloatingRateFXLinkedNotionalCoupon(FloatingRateCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fxFixingDate, foreignAmount, fxIndex, underlying):
        _ORE.FloatingRateFXLinkedNotionalCoupon_swiginit(self, _ORE.new_FloatingRateFXLinkedNotionalCoupon(fxFixingDate, foreignAmount, fxIndex, underlying))

    def nominal(self):
        return _ORE.FloatingRateFXLinkedNotionalCoupon_nominal(self)

    def rate(self):
        return _ORE.FloatingRateFXLinkedNotionalCoupon_rate(self)

    def indexFixing(self):
        return _ORE.FloatingRateFXLinkedNotionalCoupon_indexFixing(self)

    def setPricer(self, p):
        return _ORE.FloatingRateFXLinkedNotionalCoupon_setPricer(self, p)
    __swig_destroy__ = _ORE.delete_FloatingRateFXLinkedNotionalCoupon

# Register FloatingRateFXLinkedNotionalCoupon in _ORE:
_ORE.FloatingRateFXLinkedNotionalCoupon_swigregister(FloatingRateFXLinkedNotionalCoupon)

class XAUCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.XAUCurrency_swiginit(self, _ORE.new_XAUCurrency())
    __swig_destroy__ = _ORE.delete_XAUCurrency

# Register XAUCurrency in _ORE:
_ORE.XAUCurrency_swigregister(XAUCurrency)

class XAGCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.XAGCurrency_swiginit(self, _ORE.new_XAGCurrency())
    __swig_destroy__ = _ORE.delete_XAGCurrency

# Register XAGCurrency in _ORE:
_ORE.XAGCurrency_swigregister(XAGCurrency)

class XPTCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.XPTCurrency_swiginit(self, _ORE.new_XPTCurrency())
    __swig_destroy__ = _ORE.delete_XPTCurrency

# Register XPTCurrency in _ORE:
_ORE.XPTCurrency_swigregister(XPTCurrency)

class XPDCurrency(Currency):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.XPDCurrency_swiginit(self, _ORE.new_XPDCurrency())
    __swig_destroy__ = _ORE.delete_XPDCurrency

# Register XPDCurrency in _ORE:
_ORE.XPDCurrency_swigregister(XPDCurrency)

class PriceTermStructure(TermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def price(self, *args):
        return _ORE.PriceTermStructure_price(self, *args)
    __swig_destroy__ = _ORE.delete_PriceTermStructure

# Register PriceTermStructure in _ORE:
_ORE.PriceTermStructure_swigregister(PriceTermStructure)

class PriceTermStructureHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.PriceTermStructureHandle_swiginit(self, _ORE.new_PriceTermStructureHandle(*args))

    def __deref__(self):
        return _ORE.PriceTermStructureHandle___deref__(self)

    def currentLink(self):
        return _ORE.PriceTermStructureHandle_currentLink(self)

    def __nonzero__(self):
        return _ORE.PriceTermStructureHandle___nonzero__(self)

    def __bool__(self):
        return _ORE.PriceTermStructureHandle___bool__(self)

    def asObservable(self):
        return _ORE.PriceTermStructureHandle_asObservable(self)
    __swig_destroy__ = _ORE.delete_PriceTermStructureHandle

    def price(self, *args):
        return _ORE.PriceTermStructureHandle_price(self, *args)

    def dayCounter(self):
        return _ORE.PriceTermStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _ORE.PriceTermStructureHandle_timeFromReference(self, date)

    def calendar(self):
        return _ORE.PriceTermStructureHandle_calendar(self)

    def referenceDate(self):
        return _ORE.PriceTermStructureHandle_referenceDate(self)

    def maxDate(self):
        return _ORE.PriceTermStructureHandle_maxDate(self)

    def maxTime(self):
        return _ORE.PriceTermStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        return _ORE.PriceTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _ORE.PriceTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _ORE.PriceTermStructureHandle_allowsExtrapolation(self)

# Register PriceTermStructureHandle in _ORE:
_ORE.PriceTermStructureHandle_swigregister(PriceTermStructureHandle)

class RelinkablePriceTermStructureHandle(PriceTermStructureHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.RelinkablePriceTermStructureHandle_swiginit(self, _ORE.new_RelinkablePriceTermStructureHandle(*args))

    def linkTo(self, arg2):
        return _ORE.RelinkablePriceTermStructureHandle_linkTo(self, arg2)

    def reset(self):
        return _ORE.RelinkablePriceTermStructureHandle_reset(self)
    __swig_destroy__ = _ORE.delete_RelinkablePriceTermStructureHandle

# Register RelinkablePriceTermStructureHandle in _ORE:
_ORE.RelinkablePriceTermStructureHandle_swigregister(RelinkablePriceTermStructureHandle)

class LinearInterpolatedPriceCurve(PriceTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.LinearInterpolatedPriceCurve_swiginit(self, _ORE.new_LinearInterpolatedPriceCurve(*args))

    def times(self):
        return _ORE.LinearInterpolatedPriceCurve_times(self)

    def prices(self):
        return _ORE.LinearInterpolatedPriceCurve_prices(self)
    __swig_destroy__ = _ORE.delete_LinearInterpolatedPriceCurve

# Register LinearInterpolatedPriceCurve in _ORE:
_ORE.LinearInterpolatedPriceCurve_swigregister(LinearInterpolatedPriceCurve)

class BackwardFlatInterpolatedPriceCurve(PriceTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BackwardFlatInterpolatedPriceCurve_swiginit(self, _ORE.new_BackwardFlatInterpolatedPriceCurve(*args))

    def times(self):
        return _ORE.BackwardFlatInterpolatedPriceCurve_times(self)

    def prices(self):
        return _ORE.BackwardFlatInterpolatedPriceCurve_prices(self)
    __swig_destroy__ = _ORE.delete_BackwardFlatInterpolatedPriceCurve

# Register BackwardFlatInterpolatedPriceCurve in _ORE:
_ORE.BackwardFlatInterpolatedPriceCurve_swigregister(BackwardFlatInterpolatedPriceCurve)

class LogLinearInterpolatedPriceCurve(PriceTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.LogLinearInterpolatedPriceCurve_swiginit(self, _ORE.new_LogLinearInterpolatedPriceCurve(*args))

    def times(self):
        return _ORE.LogLinearInterpolatedPriceCurve_times(self)

    def prices(self):
        return _ORE.LogLinearInterpolatedPriceCurve_prices(self)
    __swig_destroy__ = _ORE.delete_LogLinearInterpolatedPriceCurve

# Register LogLinearInterpolatedPriceCurve in _ORE:
_ORE.LogLinearInterpolatedPriceCurve_swigregister(LogLinearInterpolatedPriceCurve)

class CubicInterpolatedPriceCurve(PriceTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CubicInterpolatedPriceCurve_swiginit(self, _ORE.new_CubicInterpolatedPriceCurve(*args))

    def times(self):
        return _ORE.CubicInterpolatedPriceCurve_times(self)

    def prices(self):
        return _ORE.CubicInterpolatedPriceCurve_prices(self)
    __swig_destroy__ = _ORE.delete_CubicInterpolatedPriceCurve

# Register CubicInterpolatedPriceCurve in _ORE:
_ORE.CubicInterpolatedPriceCurve_swigregister(CubicInterpolatedPriceCurve)

class SplineCubicInterpolatedPriceCurve(PriceTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SplineCubicInterpolatedPriceCurve_swiginit(self, _ORE.new_SplineCubicInterpolatedPriceCurve(*args))

    def times(self):
        return _ORE.SplineCubicInterpolatedPriceCurve_times(self)

    def prices(self):
        return _ORE.SplineCubicInterpolatedPriceCurve_prices(self)
    __swig_destroy__ = _ORE.delete_SplineCubicInterpolatedPriceCurve

# Register SplineCubicInterpolatedPriceCurve in _ORE:
_ORE.SplineCubicInterpolatedPriceCurve_swigregister(SplineCubicInterpolatedPriceCurve)

class MonotonicCubicInterpolatedPriceCurve(PriceTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.MonotonicCubicInterpolatedPriceCurve_swiginit(self, _ORE.new_MonotonicCubicInterpolatedPriceCurve(*args))

    def times(self):
        return _ORE.MonotonicCubicInterpolatedPriceCurve_times(self)

    def prices(self):
        return _ORE.MonotonicCubicInterpolatedPriceCurve_prices(self)
    __swig_destroy__ = _ORE.delete_MonotonicCubicInterpolatedPriceCurve

# Register MonotonicCubicInterpolatedPriceCurve in _ORE:
_ORE.MonotonicCubicInterpolatedPriceCurve_swigregister(MonotonicCubicInterpolatedPriceCurve)

class QLESwaptionVolCube2(SwaptionVolatilityCube):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, atmVolStructure, optionTenors, swapTenors, strikeSpreads, volSpreads, swapIndexBase, shortSwapIndexBase, vegaWeightedSmileFit, flatExtrapolation, volsAreSpreads=True):
        _ORE.QLESwaptionVolCube2_swiginit(self, _ORE.new_QLESwaptionVolCube2(atmVolStructure, optionTenors, swapTenors, strikeSpreads, volSpreads, swapIndexBase, shortSwapIndexBase, vegaWeightedSmileFit, flatExtrapolation, volsAreSpreads))
    __swig_destroy__ = _ORE.delete_QLESwaptionVolCube2

# Register QLESwaptionVolCube2 in _ORE:
_ORE.QLESwaptionVolCube2_swigregister(QLESwaptionVolCube2)

class FxBlackVannaVolgaVolatilitySurface(BlackVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, refDate, dates, atmVols, rr25d, bf25d, dc, cal, fx, dom, fore):
        _ORE.FxBlackVannaVolgaVolatilitySurface_swiginit(self, _ORE.new_FxBlackVannaVolgaVolatilitySurface(refDate, dates, atmVols, rr25d, bf25d, dc, cal, fx, dom, fore))
    __swig_destroy__ = _ORE.delete_FxBlackVannaVolgaVolatilitySurface

# Register FxBlackVannaVolgaVolatilitySurface in _ORE:
_ORE.FxBlackVannaVolgaVolatilitySurface_swigregister(FxBlackVannaVolgaVolatilitySurface)

class BlackVarianceSurfaceMoneynessSpot(BlackVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cal, spot, times, moneyness, blackVolMatrix, dayCounter, stickyStrike):
        _ORE.BlackVarianceSurfaceMoneynessSpot_swiginit(self, _ORE.new_BlackVarianceSurfaceMoneynessSpot(cal, spot, times, moneyness, blackVolMatrix, dayCounter, stickyStrike))
    __swig_destroy__ = _ORE.delete_BlackVarianceSurfaceMoneynessSpot

# Register BlackVarianceSurfaceMoneynessSpot in _ORE:
_ORE.BlackVarianceSurfaceMoneynessSpot_swigregister(BlackVarianceSurfaceMoneynessSpot)

class BlackVarianceSurfaceMoneynessForward(BlackVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cal, spot, times, moneyness, blackVolMatrix, dayCounter, forTS, domTS, stickyStrike=False):
        _ORE.BlackVarianceSurfaceMoneynessForward_swiginit(self, _ORE.new_BlackVarianceSurfaceMoneynessForward(cal, spot, times, moneyness, blackVolMatrix, dayCounter, forTS, domTS, stickyStrike))
    __swig_destroy__ = _ORE.delete_BlackVarianceSurfaceMoneynessForward

# Register BlackVarianceSurfaceMoneynessForward in _ORE:
_ORE.BlackVarianceSurfaceMoneynessForward_swigregister(BlackVarianceSurfaceMoneynessForward)

class SwaptionVolCubeWithATM(SwaptionVolatilityStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cube):
        _ORE.SwaptionVolCubeWithATM_swiginit(self, _ORE.new_SwaptionVolCubeWithATM(cube))
    __swig_destroy__ = _ORE.delete_SwaptionVolCubeWithATM

# Register SwaptionVolCubeWithATM in _ORE:
_ORE.SwaptionVolCubeWithATM_swigregister(SwaptionVolCubeWithATM)

class SwaptionVolatilityConstantSpread(SwaptionVolatilityStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, atm, cube):
        _ORE.SwaptionVolatilityConstantSpread_swiginit(self, _ORE.new_SwaptionVolatilityConstantSpread(atm, cube))

    def atmVol(self):
        return _ORE.SwaptionVolatilityConstantSpread_atmVol(self)

    def cube(self):
        return _ORE.SwaptionVolatilityConstantSpread_cube(self)
    __swig_destroy__ = _ORE.delete_SwaptionVolatilityConstantSpread

# Register SwaptionVolatilityConstantSpread in _ORE:
_ORE.SwaptionVolatilityConstantSpread_swigregister(SwaptionVolatilityConstantSpread)

class SwapConventions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, settlementDays, fixedTenor, fixedCalendar, fixedConvention, fixedDayCounter, floatIndex):
        _ORE.SwapConventions_swiginit(self, _ORE.new_SwapConventions(settlementDays, fixedTenor, fixedCalendar, fixedConvention, fixedDayCounter, floatIndex))

    def settlementDays(self):
        return _ORE.SwapConventions_settlementDays(self)

    def fixedTenor(self):
        return _ORE.SwapConventions_fixedTenor(self)

    def fixedCalendar(self):
        return _ORE.SwapConventions_fixedCalendar(self)

    def fixedConvention(self):
        return _ORE.SwapConventions_fixedConvention(self)

    def fixedDayCounter(self):
        return _ORE.SwapConventions_fixedDayCounter(self)

    def floatIndex(self):
        return _ORE.SwapConventions_floatIndex(self)
    __swig_destroy__ = _ORE.delete_SwapConventions

# Register SwapConventions in _ORE:
_ORE.SwapConventions_swigregister(SwapConventions)

class SwaptionVolatilityConverter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SwaptionVolatilityConverter_swiginit(self, _ORE.new_SwaptionVolatilityConverter(*args))

    def convert(self):
        return _ORE.SwaptionVolatilityConverter_convert(self)

    def accuracy(self):
        return _ORE.SwaptionVolatilityConverter_accuracy(self)

    def maxEvaluations(self):
        return _ORE.SwaptionVolatilityConverter_maxEvaluations(self)
    __swig_destroy__ = _ORE.delete_SwaptionVolatilityConverter

# Register SwaptionVolatilityConverter in _ORE:
_ORE.SwaptionVolatilityConverter_swigregister(SwaptionVolatilityConverter)

class CreditCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CreditCurve_swiginit(self, _ORE.new_CreditCurve(*args))

    def refData(self):
        return _ORE.CreditCurve_refData(self)

    def curve(self):
        return _ORE.CreditCurve_curve(self)

    def rateCurve(self):
        return _ORE.CreditCurve_rateCurve(self)

    def recovery(self):
        return _ORE.CreditCurve_recovery(self)
    __swig_destroy__ = _ORE.delete_CreditCurve

# Register CreditCurve in _ORE:
_ORE.CreditCurve_swigregister(CreditCurve)

class CreditCurveHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CreditCurveHandle_swiginit(self, _ORE.new_CreditCurveHandle(*args))

    def __deref__(self):
        return _ORE.CreditCurveHandle___deref__(self)

    def currentLink(self):
        return _ORE.CreditCurveHandle_currentLink(self)

    def __nonzero__(self):
        return _ORE.CreditCurveHandle___nonzero__(self)

    def __bool__(self):
        return _ORE.CreditCurveHandle___bool__(self)

    def asObservable(self):
        return _ORE.CreditCurveHandle_asObservable(self)
    __swig_destroy__ = _ORE.delete_CreditCurveHandle

    def refData(self):
        return _ORE.CreditCurveHandle_refData(self)

    def curve(self):
        return _ORE.CreditCurveHandle_curve(self)

    def rateCurve(self):
        return _ORE.CreditCurveHandle_rateCurve(self)

    def recovery(self):
        return _ORE.CreditCurveHandle_recovery(self)

# Register CreditCurveHandle in _ORE:
_ORE.CreditCurveHandle_swigregister(CreditCurveHandle)

class RelinkableCreditCurveHandle(CreditCurveHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.RelinkableCreditCurveHandle_swiginit(self, _ORE.new_RelinkableCreditCurveHandle(*args))

    def linkTo(self, arg2):
        return _ORE.RelinkableCreditCurveHandle_linkTo(self, arg2)

    def reset(self):
        return _ORE.RelinkableCreditCurveHandle_reset(self)
    __swig_destroy__ = _ORE.delete_RelinkableCreditCurveHandle

# Register RelinkableCreditCurveHandle in _ORE:
_ORE.RelinkableCreditCurveHandle_swigregister(RelinkableCreditCurveHandle)

class CreditVolCurve(VolatilityTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Type_Price = _ORE.CreditVolCurve_Type_Price
    Type_Spread = _ORE.CreditVolCurve_Type_Spread

    def volatility(self, *args):
        return _ORE.CreditVolCurve_volatility(self, *args)

    def type(self):
        return _ORE.CreditVolCurve_type(self)

    def atmStrike(self, *args):
        return _ORE.CreditVolCurve_atmStrike(self, *args)

    def minStrike(self):
        return _ORE.CreditVolCurve_minStrike(self)

    def maxStrike(self):
        return _ORE.CreditVolCurve_maxStrike(self)

    def maxDate(self):
        return _ORE.CreditVolCurve_maxDate(self)
    __swig_destroy__ = _ORE.delete_CreditVolCurve

# Register CreditVolCurve in _ORE:
_ORE.CreditVolCurve_swigregister(CreditVolCurve)

class CreditVolCurveWrapper(CreditVolCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vol):
        _ORE.CreditVolCurveWrapper_swiginit(self, _ORE.new_CreditVolCurveWrapper(vol))

    def volatility(self, exerciseDate, underlyingLength, strike, targetType):
        return _ORE.CreditVolCurveWrapper_volatility(self, exerciseDate, underlyingLength, strike, targetType)

    def referenceDate(self):
        return _ORE.CreditVolCurveWrapper_referenceDate(self)
    __swig_destroy__ = _ORE.delete_CreditVolCurveWrapper

# Register CreditVolCurveWrapper in _ORE:
_ORE.CreditVolCurveWrapper_swigregister(CreditVolCurveWrapper)

class CreditVolCurveHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CreditVolCurveHandle_swiginit(self, _ORE.new_CreditVolCurveHandle(*args))

    def __deref__(self):
        return _ORE.CreditVolCurveHandle___deref__(self)

    def currentLink(self):
        return _ORE.CreditVolCurveHandle_currentLink(self)

    def __nonzero__(self):
        return _ORE.CreditVolCurveHandle___nonzero__(self)

    def __bool__(self):
        return _ORE.CreditVolCurveHandle___bool__(self)

    def asObservable(self):
        return _ORE.CreditVolCurveHandle_asObservable(self)
    __swig_destroy__ = _ORE.delete_CreditVolCurveHandle

    def volatility(self, *args):
        return _ORE.CreditVolCurveHandle_volatility(self, *args)

    def type(self):
        return _ORE.CreditVolCurveHandle_type(self)

    def atmStrike(self, *args):
        return _ORE.CreditVolCurveHandle_atmStrike(self, *args)

    def minStrike(self):
        return _ORE.CreditVolCurveHandle_minStrike(self)

    def maxStrike(self):
        return _ORE.CreditVolCurveHandle_maxStrike(self)

    def maxDate(self):
        return _ORE.CreditVolCurveHandle_maxDate(self)

    def dayCounter(self):
        return _ORE.CreditVolCurveHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _ORE.CreditVolCurveHandle_timeFromReference(self, date)

    def calendar(self):
        return _ORE.CreditVolCurveHandle_calendar(self)

    def referenceDate(self):
        return _ORE.CreditVolCurveHandle_referenceDate(self)

    def maxTime(self):
        return _ORE.CreditVolCurveHandle_maxTime(self)

    def enableExtrapolation(self):
        return _ORE.CreditVolCurveHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _ORE.CreditVolCurveHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _ORE.CreditVolCurveHandle_allowsExtrapolation(self)

# Register CreditVolCurveHandle in _ORE:
_ORE.CreditVolCurveHandle_swigregister(CreditVolCurveHandle)

class RelinkableVolCreditCurveHandle(CreditVolCurveHandle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.RelinkableVolCreditCurveHandle_swiginit(self, _ORE.new_RelinkableVolCreditCurveHandle(*args))

    def linkTo(self, arg2):
        return _ORE.RelinkableVolCreditCurveHandle_linkTo(self, arg2)

    def reset(self):
        return _ORE.RelinkableVolCreditCurveHandle_reset(self)
    __swig_destroy__ = _ORE.delete_RelinkableVolCreditCurveHandle

# Register RelinkableVolCreditCurveHandle in _ORE:
_ORE.RelinkableVolCreditCurveHandle_swigregister(RelinkableVolCreditCurveHandle)

class BlackVolatilityWithATM(BlackVolTermStructure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, surface, spot, yield1, yield2):
        _ORE.BlackVolatilityWithATM_swiginit(self, _ORE.new_BlackVolatilityWithATM(surface, spot, yield1, yield2))

    def dayCounter(self):
        return _ORE.BlackVolatilityWithATM_dayCounter(self)

    def maxDate(self):
        return _ORE.BlackVolatilityWithATM_maxDate(self)

    def maxTime(self):
        return _ORE.BlackVolatilityWithATM_maxTime(self)

    def referenceDate(self):
        return _ORE.BlackVolatilityWithATM_referenceDate(self)

    def calendar(self):
        return _ORE.BlackVolatilityWithATM_calendar(self)

    def settlementDays(self):
        return _ORE.BlackVolatilityWithATM_settlementDays(self)

    def minStrike(self):
        return _ORE.BlackVolatilityWithATM_minStrike(self)

    def maxStrike(self):
        return _ORE.BlackVolatilityWithATM_maxStrike(self)
    __swig_destroy__ = _ORE.delete_BlackVolatilityWithATM

# Register BlackVolatilityWithATM in _ORE:
_ORE.BlackVolatilityWithATM_swigregister(BlackVolatilityWithATM)

class CrossCcySwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CrossCcySwap_swiginit(self, _ORE.new_CrossCcySwap(*args))
    __swig_destroy__ = _ORE.delete_CrossCcySwap

# Register CrossCcySwap in _ORE:
_ORE.CrossCcySwap_swigregister(CrossCcySwap)

class CrossCcySwapEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CrossCcySwapEngine_swiginit(self, _ORE.new_CrossCcySwapEngine(*args))
    __swig_destroy__ = _ORE.delete_CrossCcySwapEngine

# Register CrossCcySwapEngine in _ORE:
_ORE.CrossCcySwapEngine_swigregister(CrossCcySwapEngine)

class CrossCcyFixFloatSwap(CrossCcySwap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Receiver = _ORE.CrossCcyFixFloatSwap_Receiver
    Payer = _ORE.CrossCcyFixFloatSwap_Payer

    def __init__(self, type, fixedNominal, fixedCurrency, fixedSchedule, fixedRate, fixedDayCount, fixedPaymentBdc, fixedPaymentLag, fixedPaymentCalendar, floatNominal, floatCurrency, floatSchedule, floatIndex, floatSpread, floatPaymentBdc, floatPaymentLag, floatPaymentCalendar):
        _ORE.CrossCcyFixFloatSwap_swiginit(self, _ORE.new_CrossCcyFixFloatSwap(type, fixedNominal, fixedCurrency, fixedSchedule, fixedRate, fixedDayCount, fixedPaymentBdc, fixedPaymentLag, fixedPaymentCalendar, floatNominal, floatCurrency, floatSchedule, floatIndex, floatSpread, floatPaymentBdc, floatPaymentLag, floatPaymentCalendar))

    def type(self):
        return _ORE.CrossCcyFixFloatSwap_type(self)

    def fixedNominal(self):
        return _ORE.CrossCcyFixFloatSwap_fixedNominal(self)

    def fixedCurrency(self):
        return _ORE.CrossCcyFixFloatSwap_fixedCurrency(self)

    def fixedSchedule(self):
        return _ORE.CrossCcyFixFloatSwap_fixedSchedule(self)

    def fixedRate(self):
        return _ORE.CrossCcyFixFloatSwap_fixedRate(self)

    def fixedDayCount(self):
        return _ORE.CrossCcyFixFloatSwap_fixedDayCount(self)

    def fixedPaymentBdc(self):
        return _ORE.CrossCcyFixFloatSwap_fixedPaymentBdc(self)

    def fixedPaymentLag(self):
        return _ORE.CrossCcyFixFloatSwap_fixedPaymentLag(self)

    def fixedPaymentCalendar(self):
        return _ORE.CrossCcyFixFloatSwap_fixedPaymentCalendar(self)

    def floatNominal(self):
        return _ORE.CrossCcyFixFloatSwap_floatNominal(self)

    def floatCurrency(self):
        return _ORE.CrossCcyFixFloatSwap_floatCurrency(self)

    def floatSchedule(self):
        return _ORE.CrossCcyFixFloatSwap_floatSchedule(self)

    def floatSpread(self):
        return _ORE.CrossCcyFixFloatSwap_floatSpread(self)

    def floatPaymentBdc(self):
        return _ORE.CrossCcyFixFloatSwap_floatPaymentBdc(self)

    def floatPaymentLag(self):
        return _ORE.CrossCcyFixFloatSwap_floatPaymentLag(self)

    def floatPaymentCalendar(self):
        return _ORE.CrossCcyFixFloatSwap_floatPaymentCalendar(self)

    def fairFixedRate(self):
        return _ORE.CrossCcyFixFloatSwap_fairFixedRate(self)

    def fairSpread(self):
        return _ORE.CrossCcyFixFloatSwap_fairSpread(self)
    __swig_destroy__ = _ORE.delete_CrossCcyFixFloatSwap

# Register CrossCcyFixFloatSwap in _ORE:
_ORE.CrossCcyFixFloatSwap_swigregister(CrossCcyFixFloatSwap)

class CrossCcyBasisSwap(CrossCcySwap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payNominal, payCurrency, paySchedule, payIndex, paySpread, payGearing, recNominal, recCurrency, recSchedule, recIndex, recSpread, recGearing):
        _ORE.CrossCcyBasisSwap_swiginit(self, _ORE.new_CrossCcyBasisSwap(payNominal, payCurrency, paySchedule, payIndex, paySpread, payGearing, recNominal, recCurrency, recSchedule, recIndex, recSpread, recGearing))

    def payNominal(self):
        return _ORE.CrossCcyBasisSwap_payNominal(self)

    def payCurrency(self):
        return _ORE.CrossCcyBasisSwap_payCurrency(self)

    def paySchedule(self):
        return _ORE.CrossCcyBasisSwap_paySchedule(self)

    def paySpread(self):
        return _ORE.CrossCcyBasisSwap_paySpread(self)

    def payGearing(self):
        return _ORE.CrossCcyBasisSwap_payGearing(self)

    def recNominal(self):
        return _ORE.CrossCcyBasisSwap_recNominal(self)

    def recCurrency(self):
        return _ORE.CrossCcyBasisSwap_recCurrency(self)

    def recSchedule(self):
        return _ORE.CrossCcyBasisSwap_recSchedule(self)

    def recSpread(self):
        return _ORE.CrossCcyBasisSwap_recSpread(self)

    def recGearing(self):
        return _ORE.CrossCcyBasisSwap_recGearing(self)

    def fairPaySpread(self):
        return _ORE.CrossCcyBasisSwap_fairPaySpread(self)

    def fairRecSpread(self):
        return _ORE.CrossCcyBasisSwap_fairRecSpread(self)
    __swig_destroy__ = _ORE.delete_CrossCcyBasisSwap

# Register CrossCcyBasisSwap in _ORE:
_ORE.CrossCcyBasisSwap_swigregister(CrossCcyBasisSwap)

class CrossCcyBasisMtMResetSwap(CrossCcySwap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, foreignNominal, foreignCurrency, foreignSchedule, foreignIndex, foreignSpread, domesticCurrency, domesticSchedule, domesticIndex, domesticSpread, fxIdx, receiveDomestic=True):
        _ORE.CrossCcyBasisMtMResetSwap_swiginit(self, _ORE.new_CrossCcyBasisMtMResetSwap(foreignNominal, foreignCurrency, foreignSchedule, foreignIndex, foreignSpread, domesticCurrency, domesticSchedule, domesticIndex, domesticSpread, fxIdx, receiveDomestic))

    def fairForeignSpread(self):
        return _ORE.CrossCcyBasisMtMResetSwap_fairForeignSpread(self)

    def fairDomesticSpread(self):
        return _ORE.CrossCcyBasisMtMResetSwap_fairDomesticSpread(self)
    __swig_destroy__ = _ORE.delete_CrossCcyBasisMtMResetSwap

# Register CrossCcyBasisMtMResetSwap in _ORE:
_ORE.CrossCcyBasisMtMResetSwap_swigregister(CrossCcyBasisMtMResetSwap)

class Deposit(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.Deposit_swiginit(self, _ORE.new_Deposit(*args))

    def fixingDate(self):
        return _ORE.Deposit_fixingDate(self)

    def startDate(self):
        return _ORE.Deposit_startDate(self)

    def maturityDate(self):
        return _ORE.Deposit_maturityDate(self)

    def fairRate(self):
        return _ORE.Deposit_fairRate(self)

    def leg(self):
        return _ORE.Deposit_leg(self)
    __swig_destroy__ = _ORE.delete_Deposit

# Register Deposit in _ORE:
_ORE.Deposit_swigregister(Deposit)

class DepositEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.DepositEngine_swiginit(self, _ORE.new_DepositEngine(*args))
    __swig_destroy__ = _ORE.delete_DepositEngine

# Register DepositEngine in _ORE:
_ORE.DepositEngine_swigregister(DepositEngine)

class Payment(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, amount, currency, date):
        _ORE.Payment_swiginit(self, _ORE.new_Payment(amount, currency, date))

    def cashFlow(self):
        return _ORE.Payment_cashFlow(self)

    def currency(self):
        return _ORE.Payment_currency(self)
    __swig_destroy__ = _ORE.delete_Payment

# Register Payment in _ORE:
_ORE.Payment_swigregister(Payment)

class PaymentDiscountingEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.PaymentDiscountingEngine_swiginit(self, _ORE.new_PaymentDiscountingEngine(*args))

    def discountCurve(self):
        return _ORE.PaymentDiscountingEngine_discountCurve(self)

    def spotFX(self):
        return _ORE.PaymentDiscountingEngine_spotFX(self)
    __swig_destroy__ = _ORE.delete_PaymentDiscountingEngine

# Register PaymentDiscountingEngine in _ORE:
_ORE.PaymentDiscountingEngine_swigregister(PaymentDiscountingEngine)

class FxForward(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nominal1, currency1, nominal2, currency2, maturityDate, payCurrency1):
        _ORE.FxForward_swiginit(self, _ORE.new_FxForward(nominal1, currency1, nominal2, currency2, maturityDate, payCurrency1))

    def fairForwardRate(self):
        return _ORE.FxForward_fairForwardRate(self)

    def currency1Nominal(self):
        return _ORE.FxForward_currency1Nominal(self)

    def currency2Nominal(self):
        return _ORE.FxForward_currency2Nominal(self)

    def currency1(self):
        return _ORE.FxForward_currency1(self)

    def currency2(self):
        return _ORE.FxForward_currency2(self)

    def maturityDate(self):
        return _ORE.FxForward_maturityDate(self)

    def payCurrency1(self):
        return _ORE.FxForward_payCurrency1(self)
    __swig_destroy__ = _ORE.delete_FxForward

# Register FxForward in _ORE:
_ORE.FxForward_swigregister(FxForward)

class DiscountingFxForwardEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.DiscountingFxForwardEngine_swiginit(self, _ORE.new_DiscountingFxForwardEngine(*args))
    __swig_destroy__ = _ORE.delete_DiscountingFxForwardEngine

# Register DiscountingFxForwardEngine in _ORE:
_ORE.DiscountingFxForwardEngine_swigregister(DiscountingFxForwardEngine)

class CommodityForward(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, index, currency, position, quantity, maturityDate, strike):
        _ORE.CommodityForward_swiginit(self, _ORE.new_CommodityForward(index, currency, position, quantity, maturityDate, strike))

    def index(self):
        return _ORE.CommodityForward_index(self)

    def currency(self):
        return _ORE.CommodityForward_currency(self)

    def position(self):
        return _ORE.CommodityForward_position(self)

    def quantity(self):
        return _ORE.CommodityForward_quantity(self)

    def maturityDate(self):
        return _ORE.CommodityForward_maturityDate(self)

    def strike(self):
        return _ORE.CommodityForward_strike(self)
    __swig_destroy__ = _ORE.delete_CommodityForward

# Register CommodityForward in _ORE:
_ORE.CommodityForward_swigregister(CommodityForward)

class DiscountingCommodityForwardEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.DiscountingCommodityForwardEngine_swiginit(self, _ORE.new_DiscountingCommodityForwardEngine(*args))
    __swig_destroy__ = _ORE.delete_DiscountingCommodityForwardEngine

# Register DiscountingCommodityForwardEngine in _ORE:
_ORE.DiscountingCommodityForwardEngine_swigregister(DiscountingCommodityForwardEngine)

class DiscountingSwapEngineMultiCurve(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.DiscountingSwapEngineMultiCurve_swiginit(self, _ORE.new_DiscountingSwapEngineMultiCurve(*args))

    def discountCurve(self):
        return _ORE.DiscountingSwapEngineMultiCurve_discountCurve(self)
    __swig_destroy__ = _ORE.delete_DiscountingSwapEngineMultiCurve

# Register DiscountingSwapEngineMultiCurve in _ORE:
_ORE.DiscountingSwapEngineMultiCurve_swigregister(DiscountingSwapEngineMultiCurve)

class VarianceSwap2(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, position, strike, notional, startDate, maturityDate, calendar, addPastDividends):
        _ORE.VarianceSwap2_swiginit(self, _ORE.new_VarianceSwap2(position, strike, notional, startDate, maturityDate, calendar, addPastDividends))
    __swig_destroy__ = _ORE.delete_VarianceSwap2

# Register VarianceSwap2 in _ORE:
_ORE.VarianceSwap2_swigregister(VarianceSwap2)

class GeneralisedReplicatingVarianceSwapEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.GeneralisedReplicatingVarianceSwapEngine_swiginit(self, _ORE.new_GeneralisedReplicatingVarianceSwapEngine(*args))
    __swig_destroy__ = _ORE.delete_GeneralisedReplicatingVarianceSwapEngine

# Register GeneralisedReplicatingVarianceSwapEngine in _ORE:
_ORE.GeneralisedReplicatingVarianceSwapEngine_swigregister(GeneralisedReplicatingVarianceSwapEngine)

class SubPeriodsCoupon1(FloatingRateCoupon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Averaging = _ORE.SubPeriodsCoupon1_Averaging
    Compounding = _ORE.SubPeriodsCoupon1_Compounding

    def __init__(self, *args):
        _ORE.SubPeriodsCoupon1_swiginit(self, _ORE.new_SubPeriodsCoupon1(*args))

    def fixingDates(self):
        return _ORE.SubPeriodsCoupon1_fixingDates(self)

    def accrualFractions(self):
        return _ORE.SubPeriodsCoupon1_accrualFractions(self)

    def indexFixings(self):
        return _ORE.SubPeriodsCoupon1_indexFixings(self)

    def valueDates(self):
        return _ORE.SubPeriodsCoupon1_valueDates(self)

    def includeSpread(self):
        return _ORE.SubPeriodsCoupon1_includeSpread(self)

    def spread(self):
        return _ORE.SubPeriodsCoupon1_spread(self)
    __swig_destroy__ = _ORE.delete_SubPeriodsCoupon1

# Register SubPeriodsCoupon1 in _ORE:
_ORE.SubPeriodsCoupon1_swigregister(SubPeriodsCoupon1)

class SubPeriodsCouponPricer1(FloatingRateCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def swapletRate(self):
        return _ORE.SubPeriodsCouponPricer1_swapletRate(self)
    __swig_destroy__ = _ORE.delete_SubPeriodsCouponPricer1

# Register SubPeriodsCouponPricer1 in _ORE:
_ORE.SubPeriodsCouponPricer1_swigregister(SubPeriodsCouponPricer1)

class TenorBasisSwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.TenorBasisSwap_swiginit(self, _ORE.new_TenorBasisSwap(*args))

    def nominal(self):
        return _ORE.TenorBasisSwap_nominal(self)

    def nominals(self):
        return _ORE.TenorBasisSwap_nominals(self)

    def paySchedule(self):
        return _ORE.TenorBasisSwap_paySchedule(self)

    def payIndex(self):
        return _ORE.TenorBasisSwap_payIndex(self)

    def paySpread(self):
        return _ORE.TenorBasisSwap_paySpread(self)

    def payLeg(self):
        return _ORE.TenorBasisSwap_payLeg(self)

    def recSchedule(self):
        return _ORE.TenorBasisSwap_recSchedule(self)

    def recIndex(self):
        return _ORE.TenorBasisSwap_recIndex(self)

    def recSpread(self):
        return _ORE.TenorBasisSwap_recSpread(self)

    def recLeg(self):
        return _ORE.TenorBasisSwap_recLeg(self)

    def type(self):
        return _ORE.TenorBasisSwap_type(self)

    def recFrequency(self):
        return _ORE.TenorBasisSwap_recFrequency(self)

    def payFrequency(self):
        return _ORE.TenorBasisSwap_payFrequency(self)

    def includeSpread(self):
        return _ORE.TenorBasisSwap_includeSpread(self)

    def spreadOnRec(self):
        return _ORE.TenorBasisSwap_spreadOnRec(self)

    def payLegBPS(self):
        return _ORE.TenorBasisSwap_payLegBPS(self)

    def payLegNPV(self):
        return _ORE.TenorBasisSwap_payLegNPV(self)

    def fairPayLegSpread(self):
        return _ORE.TenorBasisSwap_fairPayLegSpread(self)

    def recLegBPS(self):
        return _ORE.TenorBasisSwap_recLegBPS(self)

    def recLegNPV(self):
        return _ORE.TenorBasisSwap_recLegNPV(self)

    def fairRecLegSpread(self):
        return _ORE.TenorBasisSwap_fairRecLegSpread(self)
    __swig_destroy__ = _ORE.delete_TenorBasisSwap

# Register TenorBasisSwap in _ORE:
_ORE.TenorBasisSwap_swigregister(TenorBasisSwap)

class SubPeriodsSwap(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SubPeriodsSwap_swiginit(self, _ORE.new_SubPeriodsSwap(*args))

    def nominal(self):
        return _ORE.SubPeriodsSwap_nominal(self)

    def isPayer(self):
        return _ORE.SubPeriodsSwap_isPayer(self)

    def fixedSchedule(self):
        return _ORE.SubPeriodsSwap_fixedSchedule(self)

    def fixedRate(self):
        return _ORE.SubPeriodsSwap_fixedRate(self)

    def fixedLeg(self):
        return _ORE.SubPeriodsSwap_fixedLeg(self)

    def floatSchedule(self):
        return _ORE.SubPeriodsSwap_floatSchedule(self)

    def type(self):
        return _ORE.SubPeriodsSwap_type(self)

    def floatPayTenor(self):
        return _ORE.SubPeriodsSwap_floatPayTenor(self)

    def floatLeg(self):
        return _ORE.SubPeriodsSwap_floatLeg(self)

    def fairRate(self):
        return _ORE.SubPeriodsSwap_fairRate(self)

    def fixedLegBPS(self):
        return _ORE.SubPeriodsSwap_fixedLegBPS(self)

    def fixedLegNPV(self):
        return _ORE.SubPeriodsSwap_fixedLegNPV(self)

    def floatLegBPS(self):
        return _ORE.SubPeriodsSwap_floatLegBPS(self)

    def floatLegNPV(self):
        return _ORE.SubPeriodsSwap_floatLegNPV(self)
    __swig_destroy__ = _ORE.delete_SubPeriodsSwap

# Register SubPeriodsSwap in _ORE:
_ORE.SubPeriodsSwap_swigregister(SubPeriodsSwap)

class OvernightIndexedCrossCcyBasisSwap(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payNominal, payCurrency, paySchedule, payIndex, paySpread, recNominal, recCurrency, recSchedule, recIndex, recSpread):
        _ORE.OvernightIndexedCrossCcyBasisSwap_swiginit(self, _ORE.new_OvernightIndexedCrossCcyBasisSwap(payNominal, payCurrency, paySchedule, payIndex, paySpread, recNominal, recCurrency, recSchedule, recIndex, recSpread))

    def payNominal(self):
        return _ORE.OvernightIndexedCrossCcyBasisSwap_payNominal(self)

    def payCurrency(self):
        return _ORE.OvernightIndexedCrossCcyBasisSwap_payCurrency(self)

    def paySchedule(self):
        return _ORE.OvernightIndexedCrossCcyBasisSwap_paySchedule(self)

    def paySpread(self):
        return _ORE.OvernightIndexedCrossCcyBasisSwap_paySpread(self)

    def recNominal(self):
        return _ORE.OvernightIndexedCrossCcyBasisSwap_recNominal(self)

    def recCurrency(self):
        return _ORE.OvernightIndexedCrossCcyBasisSwap_recCurrency(self)

    def recSchedule(self):
        return _ORE.OvernightIndexedCrossCcyBasisSwap_recSchedule(self)

    def recSpread(self):
        return _ORE.OvernightIndexedCrossCcyBasisSwap_recSpread(self)

    def payLeg(self):
        return _ORE.OvernightIndexedCrossCcyBasisSwap_payLeg(self)

    def recLeg(self):
        return _ORE.OvernightIndexedCrossCcyBasisSwap_recLeg(self)

    def payLegBPS(self):
        return _ORE.OvernightIndexedCrossCcyBasisSwap_payLegBPS(self)

    def payLegNPV(self):
        return _ORE.OvernightIndexedCrossCcyBasisSwap_payLegNPV(self)

    def fairPayLegSpread(self):
        return _ORE.OvernightIndexedCrossCcyBasisSwap_fairPayLegSpread(self)

    def recLegBPS(self):
        return _ORE.OvernightIndexedCrossCcyBasisSwap_recLegBPS(self)

    def recLegNPV(self):
        return _ORE.OvernightIndexedCrossCcyBasisSwap_recLegNPV(self)

    def fairRecLegSpread(self):
        return _ORE.OvernightIndexedCrossCcyBasisSwap_fairRecLegSpread(self)
    __swig_destroy__ = _ORE.delete_OvernightIndexedCrossCcyBasisSwap

# Register OvernightIndexedCrossCcyBasisSwap in _ORE:
_ORE.OvernightIndexedCrossCcyBasisSwap_swigregister(OvernightIndexedCrossCcyBasisSwap)

class OvernightIndexedCrossCcyBasisSwapEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ts1, ccy1, ts2, ccy2, fx):
        _ORE.OvernightIndexedCrossCcyBasisSwapEngine_swiginit(self, _ORE.new_OvernightIndexedCrossCcyBasisSwapEngine(ts1, ccy1, ts2, ccy2, fx))

    def ts1(self):
        return _ORE.OvernightIndexedCrossCcyBasisSwapEngine_ts1(self)

    def ts2(self):
        return _ORE.OvernightIndexedCrossCcyBasisSwapEngine_ts2(self)

    def ccy1(self):
        return _ORE.OvernightIndexedCrossCcyBasisSwapEngine_ccy1(self)

    def ccy2(self):
        return _ORE.OvernightIndexedCrossCcyBasisSwapEngine_ccy2(self)

    def fx(self):
        return _ORE.OvernightIndexedCrossCcyBasisSwapEngine_fx(self)
    __swig_destroy__ = _ORE.delete_OvernightIndexedCrossCcyBasisSwapEngine

# Register OvernightIndexedCrossCcyBasisSwapEngine in _ORE:
_ORE.OvernightIndexedCrossCcyBasisSwapEngine_swigregister(OvernightIndexedCrossCcyBasisSwapEngine)

class CrossCcyBasisMtMResetSwapHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CrossCcyBasisMtMResetSwapHelper_swiginit(self, _ORE.new_CrossCcyBasisMtMResetSwapHelper(*args))

    def swap(self):
        return _ORE.CrossCcyBasisMtMResetSwapHelper_swap(self)
    __swig_destroy__ = _ORE.delete_CrossCcyBasisMtMResetSwapHelper

# Register CrossCcyBasisMtMResetSwapHelper in _ORE:
_ORE.CrossCcyBasisMtMResetSwapHelper_swigregister(CrossCcyBasisMtMResetSwapHelper)

class CrossCcyBasisSwapHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, spreadQuote, spotFX, settlementDays, settlementCalendar, swapTenor, rollConvention, flatIndex, spreadIndex, flatDiscountCurve, spreadDiscountCurve, eom=False, flatIsDomestic=True):
        _ORE.CrossCcyBasisSwapHelper_swiginit(self, _ORE.new_CrossCcyBasisSwapHelper(spreadQuote, spotFX, settlementDays, settlementCalendar, swapTenor, rollConvention, flatIndex, spreadIndex, flatDiscountCurve, spreadDiscountCurve, eom, flatIsDomestic))

    def swap(self):
        return _ORE.CrossCcyBasisSwapHelper_swap(self)
    __swig_destroy__ = _ORE.delete_CrossCcyBasisSwapHelper

# Register CrossCcyBasisSwapHelper in _ORE:
_ORE.CrossCcyBasisSwapHelper_swigregister(CrossCcyBasisSwapHelper)

class TenorBasisSwapHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.TenorBasisSwapHelper_swiginit(self, _ORE.new_TenorBasisSwapHelper(*args))

    def swap(self):
        return _ORE.TenorBasisSwapHelper_swap(self)
    __swig_destroy__ = _ORE.delete_TenorBasisSwapHelper

# Register TenorBasisSwapHelper in _ORE:
_ORE.TenorBasisSwapHelper_swigregister(TenorBasisSwapHelper)

class SubPeriodsSwapHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SubPeriodsSwapHelper_swiginit(self, _ORE.new_SubPeriodsSwapHelper(*args))

    def swap(self):
        return _ORE.SubPeriodsSwapHelper_swap(self)
    __swig_destroy__ = _ORE.delete_SubPeriodsSwapHelper

# Register SubPeriodsSwapHelper in _ORE:
_ORE.SubPeriodsSwapHelper_swigregister(SubPeriodsSwapHelper)

class BasisTwoSwapHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BasisTwoSwapHelper_swiginit(self, _ORE.new_BasisTwoSwapHelper(*args))

    def longSwap(self):
        return _ORE.BasisTwoSwapHelper_longSwap(self)

    def shortSwap(self):
        return _ORE.BasisTwoSwapHelper_shortSwap(self)
    __swig_destroy__ = _ORE.delete_BasisTwoSwapHelper

# Register BasisTwoSwapHelper in _ORE:
_ORE.BasisTwoSwapHelper_swigregister(BasisTwoSwapHelper)

class OICCBSHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, settlementDays, term, payIndex, payTenor, recIndex, recTenor, spreadQuote, fixedDiscountCurve, spreadQuoteOnPayLeg, fixedDiscountOnPayLeg):
        _ORE.OICCBSHelper_swiginit(self, _ORE.new_OICCBSHelper(settlementDays, term, payIndex, payTenor, recIndex, recTenor, spreadQuote, fixedDiscountCurve, spreadQuoteOnPayLeg, fixedDiscountOnPayLeg))

    def swap(self):
        return _ORE.OICCBSHelper_swap(self)
    __swig_destroy__ = _ORE.delete_OICCBSHelper

# Register OICCBSHelper in _ORE:
_ORE.OICCBSHelper_swigregister(OICCBSHelper)

class ImmFraRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ImmFraRateHelper_swiginit(self, _ORE.new_ImmFraRateHelper(*args))
    __swig_destroy__ = _ORE.delete_ImmFraRateHelper

# Register ImmFraRateHelper in _ORE:
_ORE.ImmFraRateHelper_swigregister(ImmFraRateHelper)

class CrossCcyFixFloatSwapHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CrossCcyFixFloatSwapHelper_swiginit(self, _ORE.new_CrossCcyFixFloatSwapHelper(*args))

    def swap(self):
        return _ORE.CrossCcyFixFloatSwapHelper_swap(self)
    __swig_destroy__ = _ORE.delete_CrossCcyFixFloatSwapHelper

# Register CrossCcyFixFloatSwapHelper in _ORE:
_ORE.CrossCcyFixFloatSwapHelper_swigregister(CrossCcyFixFloatSwapHelper)

class EquityForward(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, currency, longShort, quantity, maturityDate, strike):
        _ORE.EquityForward_swiginit(self, _ORE.new_EquityForward(name, currency, longShort, quantity, maturityDate, strike))

    def isExpired(self):
        return _ORE.EquityForward_isExpired(self)

    def name(self):
        return _ORE.EquityForward_name(self)

    def currency(self):
        return _ORE.EquityForward_currency(self)

    def longShort(self):
        return _ORE.EquityForward_longShort(self)

    def quantity(self):
        return _ORE.EquityForward_quantity(self)

    def maturityDate(self):
        return _ORE.EquityForward_maturityDate(self)

    def strike(self):
        return _ORE.EquityForward_strike(self)
    __swig_destroy__ = _ORE.delete_EquityForward

# Register EquityForward in _ORE:
_ORE.EquityForward_swigregister(EquityForward)

class DiscountingEquityForwardEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.DiscountingEquityForwardEngine_swiginit(self, _ORE.new_DiscountingEquityForwardEngine(*args))

    def calculate(self):
        return _ORE.DiscountingEquityForwardEngine_calculate(self)

    def equityReferenceRateCurve(self):
        return _ORE.DiscountingEquityForwardEngine_equityReferenceRateCurve(self)

    def divYieldCurve(self):
        return _ORE.DiscountingEquityForwardEngine_divYieldCurve(self)

    def discountCurve(self):
        return _ORE.DiscountingEquityForwardEngine_discountCurve(self)

    def equitySpot(self):
        return _ORE.DiscountingEquityForwardEngine_equitySpot(self)
    __swig_destroy__ = _ORE.delete_DiscountingEquityForwardEngine

# Register DiscountingEquityForwardEngine in _ORE:
_ORE.DiscountingEquityForwardEngine_swigregister(DiscountingEquityForwardEngine)

class AverageOIS(Swap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Receiver = _ORE.AverageOIS_Receiver
    Payer = _ORE.AverageOIS_Payer

    def __init__(self, *args):
        _ORE.AverageOIS_swiginit(self, _ORE.new_AverageOIS(*args))

    def type(self):
        return _ORE.AverageOIS_type(self)

    def nominal(self):
        return _ORE.AverageOIS_nominal(self)

    def nominals(self):
        return _ORE.AverageOIS_nominals(self)

    def fixedRate(self):
        return _ORE.AverageOIS_fixedRate(self)

    def fixedRates(self):
        return _ORE.AverageOIS_fixedRates(self)

    def fixedDayCounter(self):
        return _ORE.AverageOIS_fixedDayCounter(self)

    def overnightIndex(self):
        return _ORE.AverageOIS_overnightIndex(self)

    def rateCutoff(self):
        return _ORE.AverageOIS_rateCutoff(self)

    def onSpread(self):
        return _ORE.AverageOIS_onSpread(self)

    def onSpreads(self):
        return _ORE.AverageOIS_onSpreads(self)

    def onGearing(self):
        return _ORE.AverageOIS_onGearing(self)

    def onGearings(self):
        return _ORE.AverageOIS_onGearings(self)

    def onDayCounter(self):
        return _ORE.AverageOIS_onDayCounter(self)

    def fixedLeg(self):
        return _ORE.AverageOIS_fixedLeg(self)

    def overnightLeg(self):
        return _ORE.AverageOIS_overnightLeg(self)

    def fixedLegBPS(self):
        return _ORE.AverageOIS_fixedLegBPS(self)

    def fixedLegNPV(self):
        return _ORE.AverageOIS_fixedLegNPV(self)

    def fairRate(self):
        return _ORE.AverageOIS_fairRate(self)

    def overnightLegBPS(self):
        return _ORE.AverageOIS_overnightLegBPS(self)

    def overnightLegNPV(self):
        return _ORE.AverageOIS_overnightLegNPV(self)

    def fairSpread(self):
        return _ORE.AverageOIS_fairSpread(self)
    __swig_destroy__ = _ORE.delete_AverageOIS

# Register AverageOIS in _ORE:
_ORE.AverageOIS_swigregister(AverageOIS)

class AverageONIndexedCouponPricer(FloatingRateCouponPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Takada = _ORE.AverageONIndexedCouponPricer_Takada
    _None = _ORE.AverageONIndexedCouponPricer__None

    def __init__(self, *args):
        _ORE.AverageONIndexedCouponPricer_swiginit(self, _ORE.new_AverageONIndexedCouponPricer(*args))

    def initialize(self, coupon):
        return _ORE.AverageONIndexedCouponPricer_initialize(self, coupon)

    def swapletRate(self):
        return _ORE.AverageONIndexedCouponPricer_swapletRate(self)
    __swig_destroy__ = _ORE.delete_AverageONIndexedCouponPricer

# Register AverageONIndexedCouponPricer in _ORE:
_ORE.AverageONIndexedCouponPricer_swigregister(AverageONIndexedCouponPricer)

class QLECdsOption(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Price = _ORE.QLECdsOption_Price
    Spread = _ORE.QLECdsOption_Spread

    def __init__(self, *args):
        _ORE.QLECdsOption_swiginit(self, _ORE.new_QLECdsOption(*args))

    def underlyingSwap(self):
        return _ORE.QLECdsOption_underlyingSwap(self)

    def atmRate(self):
        return _ORE.QLECdsOption_atmRate(self)

    def riskyAnnuity(self):
        return _ORE.QLECdsOption_riskyAnnuity(self)

    def impliedVolatility(self, price, termStructure, probability, recoveryRate, accuracy=1.e-4, maxEvaluations=100, minVol=1.0e-7, maxVol=4.0):
        return _ORE.QLECdsOption_impliedVolatility(self, price, termStructure, probability, recoveryRate, accuracy, maxEvaluations, minVol, maxVol)
    __swig_destroy__ = _ORE.delete_QLECdsOption

# Register QLECdsOption in _ORE:
_ORE.QLECdsOption_swigregister(QLECdsOption)

class QLEBlackCdsOptionEngine(PricingEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, probability, recoveryRate, termStructure, vol):
        _ORE.QLEBlackCdsOptionEngine_swiginit(self, _ORE.new_QLEBlackCdsOptionEngine(probability, recoveryRate, termStructure, vol))
    __swig_destroy__ = _ORE.delete_QLEBlackCdsOptionEngine

# Register QLEBlackCdsOptionEngine in _ORE:
_ORE.QLEBlackCdsOptionEngine_swigregister(QLEBlackCdsOptionEngine)

class AverageOISRateHelper(RateHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.AverageOISRateHelper_swiginit(self, _ORE.new_AverageOISRateHelper(*args))

    def onSpread(self):
        return _ORE.AverageOISRateHelper_onSpread(self)

    def averageOIS(self):
        return _ORE.AverageOISRateHelper_averageOIS(self)
    __swig_destroy__ = _ORE.delete_AverageOISRateHelper

# Register AverageOISRateHelper in _ORE:
_ORE.AverageOISRateHelper_swigregister(AverageOISRateHelper)

class CalendarAdjustmentConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.CalendarAdjustmentConfig_swiginit(self, _ORE.new_CalendarAdjustmentConfig())

    def addHolidays(self, calname, d):
        return _ORE.CalendarAdjustmentConfig_addHolidays(self, calname, d)

    def addBusinessDays(self, calname, d):
        return _ORE.CalendarAdjustmentConfig_addBusinessDays(self, calname, d)

    def addBaseCalendar(self, calname, d):
        return _ORE.CalendarAdjustmentConfig_addBaseCalendar(self, calname, d)

    def getHolidays(self, calname):
        return _ORE.CalendarAdjustmentConfig_getHolidays(self, calname)

    def getBusinessDays(self, calname):
        return _ORE.CalendarAdjustmentConfig_getBusinessDays(self, calname)

    def getCalendars(self):
        return _ORE.CalendarAdjustmentConfig_getCalendars(self)

    def getBaseCalendar(self, calname):
        return _ORE.CalendarAdjustmentConfig_getBaseCalendar(self, calname)

    def append(self, c):
        return _ORE.CalendarAdjustmentConfig_append(self, c)

    def fromFile(self, name):
        return _ORE.CalendarAdjustmentConfig_fromFile(self, name)
    __swig_destroy__ = _ORE.delete_CalendarAdjustmentConfig

# Register CalendarAdjustmentConfig in _ORE:
_ORE.CalendarAdjustmentConfig_swigregister(CalendarAdjustmentConfig)

class Conventions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Conventions_swiginit(self, _ORE.new_Conventions())

    def get(self, id):
        return _ORE.Conventions_get(self, id)

    def clear(self):
        return _ORE.Conventions_clear(self)

    def add(self, convention):
        return _ORE.Conventions_add(self, convention)

    def fromXMLString(self, xmlString):
        return _ORE.Conventions_fromXMLString(self, xmlString)

    def fromFile(self, xmlFileName):
        return _ORE.Conventions_fromFile(self, xmlFileName)
    __swig_destroy__ = _ORE.delete_Conventions

# Register Conventions in _ORE:
_ORE.Conventions_swigregister(Conventions)

class Convention(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Type_Zero = _ORE.Convention_Type_Zero
    Type_Deposit = _ORE.Convention_Type_Deposit
    Type_Future = _ORE.Convention_Type_Future
    Type_FRA = _ORE.Convention_Type_FRA
    Type_OIS = _ORE.Convention_Type_OIS
    Type_Swap = _ORE.Convention_Type_Swap
    Type_AverageOIS = _ORE.Convention_Type_AverageOIS
    Type_TenorBasisSwap = _ORE.Convention_Type_TenorBasisSwap
    Type_TenorBasisTwoSwap = _ORE.Convention_Type_TenorBasisTwoSwap
    Type_BMABasisSwap = _ORE.Convention_Type_BMABasisSwap
    Type_FX = _ORE.Convention_Type_FX
    Type_CrossCcyBasis = _ORE.Convention_Type_CrossCcyBasis
    Type_CrossCcyFixFloat = _ORE.Convention_Type_CrossCcyFixFloat
    Type_CDS = _ORE.Convention_Type_CDS
    Type_SwapIndex = _ORE.Convention_Type_SwapIndex
    Type_InflationSwap = _ORE.Convention_Type_InflationSwap
    Type_SecuritySpread = _ORE.Convention_Type_SecuritySpread

    def id(self):
        return _ORE.Convention_id(self)

    def type(self):
        return _ORE.Convention_type(self)

    def fromXMLString(self, xmlString):
        return _ORE.Convention_fromXMLString(self, xmlString)

    def toXMLString(self):
        return _ORE.Convention_toXMLString(self)
    Zero = _ORE.Convention_Zero
    Deposit = _ORE.Convention_Deposit
    Future = _ORE.Convention_Future
    FRA = _ORE.Convention_FRA
    OIS = _ORE.Convention_OIS
    Swap = _ORE.Convention_Swap
    AverageOis = _ORE.Convention_AverageOis
    TenorBasisSwap = _ORE.Convention_TenorBasisSwap
    TenorBasisTwoSwap = _ORE.Convention_TenorBasisTwoSwap
    BMABasisSwap = _ORE.Convention_BMABasisSwap
    FX = _ORE.Convention_FX
    CrossCcyBasis = _ORE.Convention_CrossCcyBasis
    CrossCcyFixFloat = _ORE.Convention_CrossCcyFixFloat
    CDS = _ORE.Convention_CDS
    SwapIndex = _ORE.Convention_SwapIndex
    InflationSwap = _ORE.Convention_InflationSwap
    SecuritySpread = _ORE.Convention_SecuritySpread
    __swig_destroy__ = _ORE.delete_Convention

# Register Convention in _ORE:
_ORE.Convention_swigregister(Convention)

class ZeroRateConvention(Convention):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ZeroRateConvention_swiginit(self, _ORE.new_ZeroRateConvention(*args))

    def dayCounter(self):
        return _ORE.ZeroRateConvention_dayCounter(self)

    def tenorCalendar(self):
        return _ORE.ZeroRateConvention_tenorCalendar(self)

    def compounding(self):
        return _ORE.ZeroRateConvention_compounding(self)

    def compoundingFrequency(self):
        return _ORE.ZeroRateConvention_compoundingFrequency(self)

    def spotLag(self):
        return _ORE.ZeroRateConvention_spotLag(self)

    def spotCalendar(self):
        return _ORE.ZeroRateConvention_spotCalendar(self)

    def rollConvention(self):
        return _ORE.ZeroRateConvention_rollConvention(self)

    def eom(self):
        return _ORE.ZeroRateConvention_eom(self)

    def tenorBased(self):
        return _ORE.ZeroRateConvention_tenorBased(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.ZeroRateConvention_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_ZeroRateConvention

# Register ZeroRateConvention in _ORE:
_ORE.ZeroRateConvention_swigregister(ZeroRateConvention)

def ZeroRateConvention_getFullView(baseInput):
    return _ORE.ZeroRateConvention_getFullView(baseInput)

class DepositConvention(Convention):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.DepositConvention_swiginit(self, _ORE.new_DepositConvention(*args))

    def index(self):
        return _ORE.DepositConvention_index(self)

    def calendar(self):
        return _ORE.DepositConvention_calendar(self)

    def convention(self):
        return _ORE.DepositConvention_convention(self)

    def eom(self):
        return _ORE.DepositConvention_eom(self)

    def dayCounter(self):
        return _ORE.DepositConvention_dayCounter(self)

    def settlementDays(self):
        return _ORE.DepositConvention_settlementDays(self)

    def indexBased(self):
        return _ORE.DepositConvention_indexBased(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.DepositConvention_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_DepositConvention

# Register DepositConvention in _ORE:
_ORE.DepositConvention_swigregister(DepositConvention)

def DepositConvention_getFullView(baseInput):
    return _ORE.DepositConvention_getFullView(baseInput)

class FutureConvention(Convention):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FutureConvention_swiginit(self, _ORE.new_FutureConvention(*args))

    def index(self):
        return _ORE.FutureConvention_index(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.FutureConvention_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_FutureConvention

# Register FutureConvention in _ORE:
_ORE.FutureConvention_swigregister(FutureConvention)

def FutureConvention_getFullView(baseInput):
    return _ORE.FutureConvention_getFullView(baseInput)

class FraConvention(Convention):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FraConvention_swiginit(self, _ORE.new_FraConvention(*args))

    def index(self):
        return _ORE.FraConvention_index(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.FraConvention_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_FraConvention

# Register FraConvention in _ORE:
_ORE.FraConvention_swigregister(FraConvention)

def FraConvention_getFullView(baseInput):
    return _ORE.FraConvention_getFullView(baseInput)

class OisConvention(Convention):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.OisConvention_swiginit(self, _ORE.new_OisConvention(*args))

    def spotLag(self):
        return _ORE.OisConvention_spotLag(self)

    def indexName(self):
        return _ORE.OisConvention_indexName(self)

    def index(self):
        return _ORE.OisConvention_index(self)

    def fixedDayCounter(self):
        return _ORE.OisConvention_fixedDayCounter(self)

    def paymentLag(self):
        return _ORE.OisConvention_paymentLag(self)

    def eom(self):
        return _ORE.OisConvention_eom(self)

    def fixedFrequency(self):
        return _ORE.OisConvention_fixedFrequency(self)

    def fixedConvention(self):
        return _ORE.OisConvention_fixedConvention(self)

    def fixedPaymentConvention(self):
        return _ORE.OisConvention_fixedPaymentConvention(self)

    def rule(self):
        return _ORE.OisConvention_rule(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.OisConvention_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_OisConvention

# Register OisConvention in _ORE:
_ORE.OisConvention_swigregister(OisConvention)

def OisConvention_getFullView(baseInput):
    return _ORE.OisConvention_getFullView(baseInput)

class SwapIndexConvention(Convention):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SwapIndexConvention_swiginit(self, _ORE.new_SwapIndexConvention(*args))

    def conventions(self):
        return _ORE.SwapIndexConvention_conventions(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.SwapIndexConvention_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_SwapIndexConvention

# Register SwapIndexConvention in _ORE:
_ORE.SwapIndexConvention_swigregister(SwapIndexConvention)

def SwapIndexConvention_getFullView(baseInput):
    return _ORE.SwapIndexConvention_getFullView(baseInput)

class IRSwapConvention(Convention):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.IRSwapConvention_swiginit(self, _ORE.new_IRSwapConvention(*args))

    def fixedCalendar(self):
        return _ORE.IRSwapConvention_fixedCalendar(self)

    def fixedFrequency(self):
        return _ORE.IRSwapConvention_fixedFrequency(self)

    def fixedConvention(self):
        return _ORE.IRSwapConvention_fixedConvention(self)

    def fixedDayCounter(self):
        return _ORE.IRSwapConvention_fixedDayCounter(self)

    def indexName(self):
        return _ORE.IRSwapConvention_indexName(self)

    def index(self):
        return _ORE.IRSwapConvention_index(self)

    def hasSubPeriod(self):
        return _ORE.IRSwapConvention_hasSubPeriod(self)

    def floatFrequency(self):
        return _ORE.IRSwapConvention_floatFrequency(self)

    def subPeriodsCouponType(self):
        return _ORE.IRSwapConvention_subPeriodsCouponType(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.IRSwapConvention_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_IRSwapConvention

# Register IRSwapConvention in _ORE:
_ORE.IRSwapConvention_swigregister(IRSwapConvention)

def IRSwapConvention_getFullView(baseInput):
    return _ORE.IRSwapConvention_getFullView(baseInput)

class AverageOisConvention(Convention):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.AverageOisConvention_swiginit(self, _ORE.new_AverageOisConvention(*args))

    def spotLag(self):
        return _ORE.AverageOisConvention_spotLag(self)

    def fixedTenor(self):
        return _ORE.AverageOisConvention_fixedTenor(self)

    def fixedDayCounter(self):
        return _ORE.AverageOisConvention_fixedDayCounter(self)

    def fixedCalendar(self):
        return _ORE.AverageOisConvention_fixedCalendar(self)

    def fixedConvention(self):
        return _ORE.AverageOisConvention_fixedConvention(self)

    def fixedPaymentConvention(self):
        return _ORE.AverageOisConvention_fixedPaymentConvention(self)

    def fixedFrequency(self):
        return _ORE.AverageOisConvention_fixedFrequency(self)

    def indexName(self):
        return _ORE.AverageOisConvention_indexName(self)

    def index(self):
        return _ORE.AverageOisConvention_index(self)

    def onTenor(self):
        return _ORE.AverageOisConvention_onTenor(self)

    def rateCutoff(self):
        return _ORE.AverageOisConvention_rateCutoff(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.AverageOisConvention_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_AverageOisConvention

# Register AverageOisConvention in _ORE:
_ORE.AverageOisConvention_swigregister(AverageOisConvention)

def AverageOisConvention_getFullView(baseInput):
    return _ORE.AverageOisConvention_getFullView(baseInput)

class TenorBasisSwapConvention(Convention):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.TenorBasisSwapConvention_swiginit(self, _ORE.new_TenorBasisSwapConvention(*args))

    def payIndex(self):
        return _ORE.TenorBasisSwapConvention_payIndex(self)

    def receiveIndex(self):
        return _ORE.TenorBasisSwapConvention_receiveIndex(self)

    def payIndexName(self):
        return _ORE.TenorBasisSwapConvention_payIndexName(self)

    def receiveFrequency(self):
        return _ORE.TenorBasisSwapConvention_receiveFrequency(self)

    def payFrequency(self):
        return _ORE.TenorBasisSwapConvention_payFrequency(self)

    def spreadOnRec(self):
        return _ORE.TenorBasisSwapConvention_spreadOnRec(self)

    def includeSpread(self):
        return _ORE.TenorBasisSwapConvention_includeSpread(self)

    def subPeriodsCouponType(self):
        return _ORE.TenorBasisSwapConvention_subPeriodsCouponType(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.TenorBasisSwapConvention_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_TenorBasisSwapConvention

# Register TenorBasisSwapConvention in _ORE:
_ORE.TenorBasisSwapConvention_swigregister(TenorBasisSwapConvention)

def TenorBasisSwapConvention_getFullView(baseInput):
    return _ORE.TenorBasisSwapConvention_getFullView(baseInput)

class TenorBasisTwoSwapConvention(Convention):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.TenorBasisTwoSwapConvention_swiginit(self, _ORE.new_TenorBasisTwoSwapConvention(*args))

    def calendar(self):
        return _ORE.TenorBasisTwoSwapConvention_calendar(self)

    def longFixedFrequency(self):
        return _ORE.TenorBasisTwoSwapConvention_longFixedFrequency(self)

    def longFixedConvention(self):
        return _ORE.TenorBasisTwoSwapConvention_longFixedConvention(self)

    def longFixedDayCounter(self):
        return _ORE.TenorBasisTwoSwapConvention_longFixedDayCounter(self)

    def longIndex(self):
        return _ORE.TenorBasisTwoSwapConvention_longIndex(self)

    def shortFixedFrequency(self):
        return _ORE.TenorBasisTwoSwapConvention_shortFixedFrequency(self)

    def shortFixedConvention(self):
        return _ORE.TenorBasisTwoSwapConvention_shortFixedConvention(self)

    def shortFixedDayCounter(self):
        return _ORE.TenorBasisTwoSwapConvention_shortFixedDayCounter(self)

    def shortIndex(self):
        return _ORE.TenorBasisTwoSwapConvention_shortIndex(self)

    def longMinusShort(self):
        return _ORE.TenorBasisTwoSwapConvention_longMinusShort(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.TenorBasisTwoSwapConvention_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_TenorBasisTwoSwapConvention

# Register TenorBasisTwoSwapConvention in _ORE:
_ORE.TenorBasisTwoSwapConvention_swigregister(TenorBasisTwoSwapConvention)

def TenorBasisTwoSwapConvention_getFullView(baseInput):
    return _ORE.TenorBasisTwoSwapConvention_getFullView(baseInput)

class BMABasisSwapConvention(Convention):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BMABasisSwapConvention_swiginit(self, _ORE.new_BMABasisSwapConvention(*args))

    def liborIndex(self):
        return _ORE.BMABasisSwapConvention_liborIndex(self)

    def bmaIndex(self):
        return _ORE.BMABasisSwapConvention_bmaIndex(self)

    def liborIndexName(self):
        return _ORE.BMABasisSwapConvention_liborIndexName(self)

    def bmaIndexName(self):
        return _ORE.BMABasisSwapConvention_bmaIndexName(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.BMABasisSwapConvention_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_BMABasisSwapConvention

# Register BMABasisSwapConvention in _ORE:
_ORE.BMABasisSwapConvention_swigregister(BMABasisSwapConvention)

def BMABasisSwapConvention_getFullView(baseInput):
    return _ORE.BMABasisSwapConvention_getFullView(baseInput)

class FXConvention(Convention):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.FXConvention_swiginit(self, _ORE.new_FXConvention(*args))

    def spotDays(self):
        return _ORE.FXConvention_spotDays(self)

    def sourceCurrency(self):
        return _ORE.FXConvention_sourceCurrency(self)

    def targetCurrency(self):
        return _ORE.FXConvention_targetCurrency(self)

    def pointsFactor(self):
        return _ORE.FXConvention_pointsFactor(self)

    def advanceCalendar(self):
        return _ORE.FXConvention_advanceCalendar(self)

    def spotRelative(self):
        return _ORE.FXConvention_spotRelative(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.FXConvention_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_FXConvention

# Register FXConvention in _ORE:
_ORE.FXConvention_swigregister(FXConvention)

def FXConvention_getFullView(baseInput):
    return _ORE.FXConvention_getFullView(baseInput)

class CrossCcyBasisSwapConvention(Convention):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CrossCcyBasisSwapConvention_swiginit(self, _ORE.new_CrossCcyBasisSwapConvention(*args))

    def settlementDays(self):
        return _ORE.CrossCcyBasisSwapConvention_settlementDays(self)

    def settlementCalendar(self):
        return _ORE.CrossCcyBasisSwapConvention_settlementCalendar(self)

    def rollConvention(self):
        return _ORE.CrossCcyBasisSwapConvention_rollConvention(self)

    def flatIndex(self):
        return _ORE.CrossCcyBasisSwapConvention_flatIndex(self)

    def spreadIndex(self):
        return _ORE.CrossCcyBasisSwapConvention_spreadIndex(self)

    def flatIndexName(self):
        return _ORE.CrossCcyBasisSwapConvention_flatIndexName(self)

    def spreadIndexName(self):
        return _ORE.CrossCcyBasisSwapConvention_spreadIndexName(self)

    def eom(self):
        return _ORE.CrossCcyBasisSwapConvention_eom(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.CrossCcyBasisSwapConvention_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_CrossCcyBasisSwapConvention

# Register CrossCcyBasisSwapConvention in _ORE:
_ORE.CrossCcyBasisSwapConvention_swigregister(CrossCcyBasisSwapConvention)

def CrossCcyBasisSwapConvention_getFullView(baseInput):
    return _ORE.CrossCcyBasisSwapConvention_getFullView(baseInput)

class CrossCcyFixFloatSwapConvention(Convention):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CrossCcyFixFloatSwapConvention_swiginit(self, _ORE.new_CrossCcyFixFloatSwapConvention(*args))

    def settlementDays(self):
        return _ORE.CrossCcyFixFloatSwapConvention_settlementDays(self)

    def settlementCalendar(self):
        return _ORE.CrossCcyFixFloatSwapConvention_settlementCalendar(self)

    def settlementConvention(self):
        return _ORE.CrossCcyFixFloatSwapConvention_settlementConvention(self)

    def fixedCurrency(self):
        return _ORE.CrossCcyFixFloatSwapConvention_fixedCurrency(self)

    def fixedFrequency(self):
        return _ORE.CrossCcyFixFloatSwapConvention_fixedFrequency(self)

    def fixedConvention(self):
        return _ORE.CrossCcyFixFloatSwapConvention_fixedConvention(self)

    def fixedDayCounter(self):
        return _ORE.CrossCcyFixFloatSwapConvention_fixedDayCounter(self)

    def index(self):
        return _ORE.CrossCcyFixFloatSwapConvention_index(self)

    def eom(self):
        return _ORE.CrossCcyFixFloatSwapConvention_eom(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.CrossCcyFixFloatSwapConvention_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_CrossCcyFixFloatSwapConvention

# Register CrossCcyFixFloatSwapConvention in _ORE:
_ORE.CrossCcyFixFloatSwapConvention_swigregister(CrossCcyFixFloatSwapConvention)

def CrossCcyFixFloatSwapConvention_getFullView(baseInput):
    return _ORE.CrossCcyFixFloatSwapConvention_getFullView(baseInput)

class CdsConvention(Convention):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CdsConvention_swiginit(self, _ORE.new_CdsConvention(*args))

    def settlementDays(self):
        return _ORE.CdsConvention_settlementDays(self)

    def calendar(self):
        return _ORE.CdsConvention_calendar(self)

    def frequency(self):
        return _ORE.CdsConvention_frequency(self)

    def paymentConvention(self):
        return _ORE.CdsConvention_paymentConvention(self)

    def rule(self):
        return _ORE.CdsConvention_rule(self)

    def dayCounter(self):
        return _ORE.CdsConvention_dayCounter(self)

    def settlesAccrual(self):
        return _ORE.CdsConvention_settlesAccrual(self)

    def paysAtDefaultTime(self):
        return _ORE.CdsConvention_paysAtDefaultTime(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.CdsConvention_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_CdsConvention

# Register CdsConvention in _ORE:
_ORE.CdsConvention_swigregister(CdsConvention)

def CdsConvention_getFullView(baseInput):
    return _ORE.CdsConvention_getFullView(baseInput)

class InflationSwapConvention(Convention):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.InflationSwapConvention_swiginit(self, _ORE.new_InflationSwapConvention(*args))

    def fixCalendar(self):
        return _ORE.InflationSwapConvention_fixCalendar(self)

    def fixConvention(self):
        return _ORE.InflationSwapConvention_fixConvention(self)

    def dayCounter(self):
        return _ORE.InflationSwapConvention_dayCounter(self)

    def index(self):
        return _ORE.InflationSwapConvention_index(self)

    def indexName(self):
        return _ORE.InflationSwapConvention_indexName(self)

    def interpolated(self):
        return _ORE.InflationSwapConvention_interpolated(self)

    def observationLag(self):
        return _ORE.InflationSwapConvention_observationLag(self)

    def adjustInfObsDates(self):
        return _ORE.InflationSwapConvention_adjustInfObsDates(self)

    def infCalendar(self):
        return _ORE.InflationSwapConvention_infCalendar(self)

    def infConvention(self):
        return _ORE.InflationSwapConvention_infConvention(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.InflationSwapConvention_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_InflationSwapConvention

# Register InflationSwapConvention in _ORE:
_ORE.InflationSwapConvention_swigregister(InflationSwapConvention)

def InflationSwapConvention_getFullView(baseInput):
    return _ORE.InflationSwapConvention_getFullView(baseInput)

class SecuritySpreadConvention(Convention):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SecuritySpreadConvention_swiginit(self, _ORE.new_SecuritySpreadConvention(*args))

    def dayCounter(self):
        return _ORE.SecuritySpreadConvention_dayCounter(self)

    def tenorCalendar(self):
        return _ORE.SecuritySpreadConvention_tenorCalendar(self)

    def compounding(self):
        return _ORE.SecuritySpreadConvention_compounding(self)

    def compoundingFrequency(self):
        return _ORE.SecuritySpreadConvention_compoundingFrequency(self)

    def spotLag(self):
        return _ORE.SecuritySpreadConvention_spotLag(self)

    def spotCalendar(self):
        return _ORE.SecuritySpreadConvention_spotCalendar(self)

    def rollConvention(self):
        return _ORE.SecuritySpreadConvention_rollConvention(self)

    def eom(self):
        return _ORE.SecuritySpreadConvention_eom(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.SecuritySpreadConvention_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_SecuritySpreadConvention

# Register SecuritySpreadConvention in _ORE:
_ORE.SecuritySpreadConvention_swigregister(SecuritySpreadConvention)

def SecuritySpreadConvention_getFullView(baseInput):
    return _ORE.SecuritySpreadConvention_getFullView(baseInput)


def parseMarketDatum(arg1, arg2, arg3):
    return _ORE.parseMarketDatum(arg1, arg2, arg3)
class MarketDatum(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    InstrumentType_ZERO = _ORE.MarketDatum_InstrumentType_ZERO
    InstrumentType_DISCOUNT = _ORE.MarketDatum_InstrumentType_DISCOUNT
    InstrumentType_MM = _ORE.MarketDatum_InstrumentType_MM
    InstrumentType_MM_FUTURE = _ORE.MarketDatum_InstrumentType_MM_FUTURE
    InstrumentType_OI_FUTURE = _ORE.MarketDatum_InstrumentType_OI_FUTURE
    InstrumentType_FRA = _ORE.MarketDatum_InstrumentType_FRA
    InstrumentType_IMM_FRA = _ORE.MarketDatum_InstrumentType_IMM_FRA
    InstrumentType_IR_SWAP = _ORE.MarketDatum_InstrumentType_IR_SWAP
    InstrumentType_BASIS_SWAP = _ORE.MarketDatum_InstrumentType_BASIS_SWAP
    InstrumentType_BMA_SWAP = _ORE.MarketDatum_InstrumentType_BMA_SWAP
    InstrumentType_CC_BASIS_SWAP = _ORE.MarketDatum_InstrumentType_CC_BASIS_SWAP
    InstrumentType_CC_FIX_FLOAT_SWAP = _ORE.MarketDatum_InstrumentType_CC_FIX_FLOAT_SWAP
    InstrumentType_CDS = _ORE.MarketDatum_InstrumentType_CDS
    InstrumentType_CDS_INDEX = _ORE.MarketDatum_InstrumentType_CDS_INDEX
    InstrumentType_FX_SPOT = _ORE.MarketDatum_InstrumentType_FX_SPOT
    InstrumentType_FX_FWD = _ORE.MarketDatum_InstrumentType_FX_FWD
    InstrumentType_HAZARD_RATE = _ORE.MarketDatum_InstrumentType_HAZARD_RATE
    InstrumentType_RECOVERY_RATE = _ORE.MarketDatum_InstrumentType_RECOVERY_RATE
    InstrumentType_SWAPTION = _ORE.MarketDatum_InstrumentType_SWAPTION
    InstrumentType_CAPFLOOR = _ORE.MarketDatum_InstrumentType_CAPFLOOR
    InstrumentType_FX_OPTION = _ORE.MarketDatum_InstrumentType_FX_OPTION
    InstrumentType_ZC_INFLATIONSWAP = _ORE.MarketDatum_InstrumentType_ZC_INFLATIONSWAP
    InstrumentType_ZC_INFLATIONCAPFLOOR = _ORE.MarketDatum_InstrumentType_ZC_INFLATIONCAPFLOOR
    InstrumentType_YY_INFLATIONSWAP = _ORE.MarketDatum_InstrumentType_YY_INFLATIONSWAP
    InstrumentType_YY_INFLATIONCAPFLOOR = _ORE.MarketDatum_InstrumentType_YY_INFLATIONCAPFLOOR
    InstrumentType_SEASONALITY = _ORE.MarketDatum_InstrumentType_SEASONALITY
    InstrumentType_EQUITY_SPOT = _ORE.MarketDatum_InstrumentType_EQUITY_SPOT
    InstrumentType_EQUITY_FWD = _ORE.MarketDatum_InstrumentType_EQUITY_FWD
    InstrumentType_EQUITY_DIVIDEND = _ORE.MarketDatum_InstrumentType_EQUITY_DIVIDEND
    InstrumentType_EQUITY_OPTION = _ORE.MarketDatum_InstrumentType_EQUITY_OPTION
    InstrumentType_BOND = _ORE.MarketDatum_InstrumentType_BOND
    InstrumentType_BOND_OPTION = _ORE.MarketDatum_InstrumentType_BOND_OPTION
    InstrumentType_INDEX_CDS_OPTION = _ORE.MarketDatum_InstrumentType_INDEX_CDS_OPTION
    InstrumentType_COMMODITY_SPOT = _ORE.MarketDatum_InstrumentType_COMMODITY_SPOT
    InstrumentType_COMMODITY_FWD = _ORE.MarketDatum_InstrumentType_COMMODITY_FWD
    InstrumentType_CORRELATION = _ORE.MarketDatum_InstrumentType_CORRELATION
    InstrumentType_COMMODITY_OPTION = _ORE.MarketDatum_InstrumentType_COMMODITY_OPTION
    InstrumentType_CPR = _ORE.MarketDatum_InstrumentType_CPR
    QuoteType_BASIS_SPREAD = _ORE.MarketDatum_QuoteType_BASIS_SPREAD
    QuoteType_CREDIT_SPREAD = _ORE.MarketDatum_QuoteType_CREDIT_SPREAD
    QuoteType_CONV_CREDIT_SPREAD = _ORE.MarketDatum_QuoteType_CONV_CREDIT_SPREAD
    QuoteType_YIELD_SPREAD = _ORE.MarketDatum_QuoteType_YIELD_SPREAD
    QuoteType_HAZARD_RATE = _ORE.MarketDatum_QuoteType_HAZARD_RATE
    QuoteType_RATE = _ORE.MarketDatum_QuoteType_RATE
    QuoteType_RATIO = _ORE.MarketDatum_QuoteType_RATIO
    QuoteType_PRICE = _ORE.MarketDatum_QuoteType_PRICE
    QuoteType_RATE_LNVOL = _ORE.MarketDatum_QuoteType_RATE_LNVOL
    QuoteType_RATE_NVOL = _ORE.MarketDatum_QuoteType_RATE_NVOL
    QuoteType_RATE_SLNVOL = _ORE.MarketDatum_QuoteType_RATE_SLNVOL
    QuoteType_BASE_CORRELATION = _ORE.MarketDatum_QuoteType_BASE_CORRELATION
    QuoteType_SHIFT = _ORE.MarketDatum_QuoteType_SHIFT
    QuoteType_NONE = _ORE.MarketDatum_QuoteType_NONE

    def __init__(self, value, asofDate, name, quoteType, instrumentType):
        _ORE.MarketDatum_swiginit(self, _ORE.new_MarketDatum(value, asofDate, name, quoteType, instrumentType))

    def name(self):
        return _ORE.MarketDatum_name(self)

    def quote(self):
        return _ORE.MarketDatum_quote(self)

    def asofDate(self):
        return _ORE.MarketDatum_asofDate(self)

    def instrumentType(self):
        return _ORE.MarketDatum_instrumentType(self)

    def quoteType(self):
        return _ORE.MarketDatum_quoteType(self)
    __swig_destroy__ = _ORE.delete_MarketDatum

# Register MarketDatum in _ORE:
_ORE.MarketDatum_swigregister(MarketDatum)

class MoneyMarketQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.MoneyMarketQuote_swiginit(self, _ORE.new_MoneyMarketQuote(*args))

    def ccy(self):
        return _ORE.MoneyMarketQuote_ccy(self)

    def fwdStart(self):
        return _ORE.MoneyMarketQuote_fwdStart(self)

    def term(self):
        return _ORE.MoneyMarketQuote_term(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.MoneyMarketQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_MoneyMarketQuote

# Register MoneyMarketQuote in _ORE:
_ORE.MoneyMarketQuote_swigregister(MoneyMarketQuote)

def MoneyMarketQuote_getFullView(baseInput):
    return _ORE.MoneyMarketQuote_getFullView(baseInput)

class FRAQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, quoteType, ccy, fwdStart, term):
        _ORE.FRAQuote_swiginit(self, _ORE.new_FRAQuote(value, asofDate, name, quoteType, ccy, fwdStart, term))

    def ccy(self):
        return _ORE.FRAQuote_ccy(self)

    def fwdStart(self):
        return _ORE.FRAQuote_fwdStart(self)

    def term(self):
        return _ORE.FRAQuote_term(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.FRAQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_FRAQuote

# Register FRAQuote in _ORE:
_ORE.FRAQuote_swigregister(FRAQuote)

def FRAQuote_getFullView(baseInput):
    return _ORE.FRAQuote_getFullView(baseInput)

class ImmFraQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, quoteType, ccy, imm1, imm2):
        _ORE.ImmFraQuote_swiginit(self, _ORE.new_ImmFraQuote(value, asofDate, name, quoteType, ccy, imm1, imm2))

    def ccy(self):
        return _ORE.ImmFraQuote_ccy(self)

    def imm1(self):
        return _ORE.ImmFraQuote_imm1(self)

    def imm2(self):
        return _ORE.ImmFraQuote_imm2(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.ImmFraQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_ImmFraQuote

# Register ImmFraQuote in _ORE:
_ORE.ImmFraQuote_swigregister(ImmFraQuote)

def ImmFraQuote_getFullView(baseInput):
    return _ORE.ImmFraQuote_getFullView(baseInput)

class SwapQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SwapQuote_swiginit(self, _ORE.new_SwapQuote(*args))

    def ccy(self):
        return _ORE.SwapQuote_ccy(self)

    def fwdStart(self):
        return _ORE.SwapQuote_fwdStart(self)

    def term(self):
        return _ORE.SwapQuote_term(self)

    def tenor(self):
        return _ORE.SwapQuote_tenor(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.SwapQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_SwapQuote

# Register SwapQuote in _ORE:
_ORE.SwapQuote_swigregister(SwapQuote)

def SwapQuote_getFullView(baseInput):
    return _ORE.SwapQuote_getFullView(baseInput)

class ZeroQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.ZeroQuote_swiginit(self, _ORE.new_ZeroQuote(*args))

    def ccy(self):
        return _ORE.ZeroQuote_ccy(self)

    def date(self):
        return _ORE.ZeroQuote_date(self)

    def dayCounter(self):
        return _ORE.ZeroQuote_dayCounter(self)

    def tenor(self):
        return _ORE.ZeroQuote_tenor(self)

    def tenorBased(self):
        return _ORE.ZeroQuote_tenorBased(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.ZeroQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_ZeroQuote

# Register ZeroQuote in _ORE:
_ORE.ZeroQuote_swigregister(ZeroQuote)

def ZeroQuote_getFullView(baseInput):
    return _ORE.ZeroQuote_getFullView(baseInput)

class DiscountQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, quoteType, ccy, date, tenor):
        _ORE.DiscountQuote_swiginit(self, _ORE.new_DiscountQuote(value, asofDate, name, quoteType, ccy, date, tenor))

    def ccy(self):
        return _ORE.DiscountQuote_ccy(self)

    def date(self):
        return _ORE.DiscountQuote_date(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.DiscountQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_DiscountQuote

# Register DiscountQuote in _ORE:
_ORE.DiscountQuote_swigregister(DiscountQuote)

def DiscountQuote_getFullView(baseInput):
    return _ORE.DiscountQuote_getFullView(baseInput)

class MMFutureQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.MMFutureQuote_swiginit(self, _ORE.new_MMFutureQuote(*args))

    def ccy(self):
        return _ORE.MMFutureQuote_ccy(self)

    def expiry(self):
        return _ORE.MMFutureQuote_expiry(self)

    def expiryYear(self):
        return _ORE.MMFutureQuote_expiryYear(self)

    def expiryMonth(self):
        return _ORE.MMFutureQuote_expiryMonth(self)

    def contract(self):
        return _ORE.MMFutureQuote_contract(self)

    def tenor(self):
        return _ORE.MMFutureQuote_tenor(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.MMFutureQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_MMFutureQuote

# Register MMFutureQuote in _ORE:
_ORE.MMFutureQuote_swigregister(MMFutureQuote)

def MMFutureQuote_getFullView(baseInput):
    return _ORE.MMFutureQuote_getFullView(baseInput)

class OIFutureQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.OIFutureQuote_swiginit(self, _ORE.new_OIFutureQuote(*args))

    def ccy(self):
        return _ORE.OIFutureQuote_ccy(self)

    def expiry(self):
        return _ORE.OIFutureQuote_expiry(self)

    def expiryYear(self):
        return _ORE.OIFutureQuote_expiryYear(self)

    def expiryMonth(self):
        return _ORE.OIFutureQuote_expiryMonth(self)

    def contract(self):
        return _ORE.OIFutureQuote_contract(self)

    def tenor(self):
        return _ORE.OIFutureQuote_tenor(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.OIFutureQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_OIFutureQuote

# Register OIFutureQuote in _ORE:
_ORE.OIFutureQuote_swigregister(OIFutureQuote)

def OIFutureQuote_getFullView(baseInput):
    return _ORE.OIFutureQuote_getFullView(baseInput)

class BasisSwapQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BasisSwapQuote_swiginit(self, _ORE.new_BasisSwapQuote(*args))

    def flatTerm(self):
        return _ORE.BasisSwapQuote_flatTerm(self)

    def term(self):
        return _ORE.BasisSwapQuote_term(self)

    def ccy(self):
        return _ORE.BasisSwapQuote_ccy(self)

    def maturity(self):
        return _ORE.BasisSwapQuote_maturity(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.BasisSwapQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_BasisSwapQuote

# Register BasisSwapQuote in _ORE:
_ORE.BasisSwapQuote_swigregister(BasisSwapQuote)

def BasisSwapQuote_getFullView(baseInput):
    return _ORE.BasisSwapQuote_getFullView(baseInput)

class BMASwapQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.BMASwapQuote_swiginit(self, _ORE.new_BMASwapQuote(*args))

    def term(self):
        return _ORE.BMASwapQuote_term(self)

    def ccy(self):
        return _ORE.BMASwapQuote_ccy(self)

    def maturity(self):
        return _ORE.BMASwapQuote_maturity(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.BMASwapQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_BMASwapQuote

# Register BMASwapQuote in _ORE:
_ORE.BMASwapQuote_swigregister(BMASwapQuote)

def BMASwapQuote_getFullView(baseInput):
    return _ORE.BMASwapQuote_getFullView(baseInput)

class CrossCcyBasisSwapQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CrossCcyBasisSwapQuote_swiginit(self, _ORE.new_CrossCcyBasisSwapQuote(*args))

    def flatCcy(self):
        return _ORE.CrossCcyBasisSwapQuote_flatCcy(self)

    def flatTerm(self):
        return _ORE.CrossCcyBasisSwapQuote_flatTerm(self)

    def ccy(self):
        return _ORE.CrossCcyBasisSwapQuote_ccy(self)

    def term(self):
        return _ORE.CrossCcyBasisSwapQuote_term(self)

    def maturity(self):
        return _ORE.CrossCcyBasisSwapQuote_maturity(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.CrossCcyBasisSwapQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_CrossCcyBasisSwapQuote

# Register CrossCcyBasisSwapQuote in _ORE:
_ORE.CrossCcyBasisSwapQuote_swigregister(CrossCcyBasisSwapQuote)

def CrossCcyBasisSwapQuote_getFullView(baseInput):
    return _ORE.CrossCcyBasisSwapQuote_getFullView(baseInput)

class CrossCcyFixFloatSwapQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, quoteType, floatCurrency, floatTenor, fixedCurrency, fixedTenor, maturity):
        _ORE.CrossCcyFixFloatSwapQuote_swiginit(self, _ORE.new_CrossCcyFixFloatSwapQuote(value, asofDate, name, quoteType, floatCurrency, floatTenor, fixedCurrency, fixedTenor, maturity))

    def floatCurrency(self):
        return _ORE.CrossCcyFixFloatSwapQuote_floatCurrency(self)

    def floatTenor(self):
        return _ORE.CrossCcyFixFloatSwapQuote_floatTenor(self)

    def fixedCurrency(self):
        return _ORE.CrossCcyFixFloatSwapQuote_fixedCurrency(self)

    def fixedTenor(self):
        return _ORE.CrossCcyFixFloatSwapQuote_fixedTenor(self)

    def maturity(self):
        return _ORE.CrossCcyFixFloatSwapQuote_maturity(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.CrossCcyFixFloatSwapQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_CrossCcyFixFloatSwapQuote

# Register CrossCcyFixFloatSwapQuote in _ORE:
_ORE.CrossCcyFixFloatSwapQuote_swigregister(CrossCcyFixFloatSwapQuote)

def CrossCcyFixFloatSwapQuote_getFullView(baseInput):
    return _ORE.CrossCcyFixFloatSwapQuote_getFullView(baseInput)

class CdsQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CdsQuote_swiginit(self, _ORE.new_CdsQuote(*args))

    def term(self):
        return _ORE.CdsQuote_term(self)

    def seniority(self):
        return _ORE.CdsQuote_seniority(self)

    def ccy(self):
        return _ORE.CdsQuote_ccy(self)

    def underlyingName(self):
        return _ORE.CdsQuote_underlyingName(self)

    def docClause(self):
        return _ORE.CdsQuote_docClause(self)

    def runningSpread(self):
        return _ORE.CdsQuote_runningSpread(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.CdsQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_CdsQuote

# Register CdsQuote in _ORE:
_ORE.CdsQuote_swigregister(CdsQuote)

def CdsQuote_getFullView(baseInput):
    return _ORE.CdsQuote_getFullView(baseInput)

class HazardRateQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.HazardRateQuote_swiginit(self, _ORE.new_HazardRateQuote(*args))

    def term(self):
        return _ORE.HazardRateQuote_term(self)

    def seniority(self):
        return _ORE.HazardRateQuote_seniority(self)

    def ccy(self):
        return _ORE.HazardRateQuote_ccy(self)

    def underlyingName(self):
        return _ORE.HazardRateQuote_underlyingName(self)

    def docClause(self):
        return _ORE.HazardRateQuote_docClause(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.HazardRateQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_HazardRateQuote

# Register HazardRateQuote in _ORE:
_ORE.HazardRateQuote_swigregister(HazardRateQuote)

def HazardRateQuote_getFullView(baseInput):
    return _ORE.HazardRateQuote_getFullView(baseInput)

class RecoveryRateQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.RecoveryRateQuote_swiginit(self, _ORE.new_RecoveryRateQuote(*args))

    def seniority(self):
        return _ORE.RecoveryRateQuote_seniority(self)

    def ccy(self):
        return _ORE.RecoveryRateQuote_ccy(self)

    def underlyingName(self):
        return _ORE.RecoveryRateQuote_underlyingName(self)

    def docClause(self):
        return _ORE.RecoveryRateQuote_docClause(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.RecoveryRateQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_RecoveryRateQuote

# Register RecoveryRateQuote in _ORE:
_ORE.RecoveryRateQuote_swigregister(RecoveryRateQuote)

def RecoveryRateQuote_getFullView(baseInput):
    return _ORE.RecoveryRateQuote_getFullView(baseInput)

class SwaptionQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SwaptionQuote_swiginit(self, _ORE.new_SwaptionQuote(*args))

    def ccy(self):
        return _ORE.SwaptionQuote_ccy(self)

    def expiry(self):
        return _ORE.SwaptionQuote_expiry(self)

    def term(self):
        return _ORE.SwaptionQuote_term(self)

    def dimension(self):
        return _ORE.SwaptionQuote_dimension(self)

    def strike(self):
        return _ORE.SwaptionQuote_strike(self)

    def quoteTag(self):
        return _ORE.SwaptionQuote_quoteTag(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.SwaptionQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_SwaptionQuote

# Register SwaptionQuote in _ORE:
_ORE.SwaptionQuote_swigregister(SwaptionQuote)

def SwaptionQuote_getFullView(baseInput):
    return _ORE.SwaptionQuote_getFullView(baseInput)

class SwaptionShiftQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SwaptionShiftQuote_swiginit(self, _ORE.new_SwaptionShiftQuote(*args))

    def ccy(self):
        return _ORE.SwaptionShiftQuote_ccy(self)

    def term(self):
        return _ORE.SwaptionShiftQuote_term(self)

    def quoteTag(self):
        return _ORE.SwaptionShiftQuote_quoteTag(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.SwaptionShiftQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_SwaptionShiftQuote

# Register SwaptionShiftQuote in _ORE:
_ORE.SwaptionShiftQuote_swigregister(SwaptionShiftQuote)

def SwaptionShiftQuote_getFullView(baseInput):
    return _ORE.SwaptionShiftQuote_getFullView(baseInput)

class BondOptionQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, quoteType, qualifier, expiry, term):
        _ORE.BondOptionQuote_swiginit(self, _ORE.new_BondOptionQuote(value, asofDate, name, quoteType, qualifier, expiry, term))

    def qualifier(self):
        return _ORE.BondOptionQuote_qualifier(self)

    def expiry(self):
        return _ORE.BondOptionQuote_expiry(self)

    def term(self):
        return _ORE.BondOptionQuote_term(self)
    __swig_destroy__ = _ORE.delete_BondOptionQuote

# Register BondOptionQuote in _ORE:
_ORE.BondOptionQuote_swigregister(BondOptionQuote)

class BondOptionShiftQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, quoteType, qualifier, term):
        _ORE.BondOptionShiftQuote_swiginit(self, _ORE.new_BondOptionShiftQuote(value, asofDate, name, quoteType, qualifier, term))

    def qualifier(self):
        return _ORE.BondOptionShiftQuote_qualifier(self)

    def term(self):
        return _ORE.BondOptionShiftQuote_term(self)
    __swig_destroy__ = _ORE.delete_BondOptionShiftQuote

# Register BondOptionShiftQuote in _ORE:
_ORE.BondOptionShiftQuote_swigregister(BondOptionShiftQuote)

class CapFloorQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CapFloorQuote_swiginit(self, _ORE.new_CapFloorQuote(*args))

    def ccy(self):
        return _ORE.CapFloorQuote_ccy(self)

    def term(self):
        return _ORE.CapFloorQuote_term(self)

    def underlying(self):
        return _ORE.CapFloorQuote_underlying(self)

    def atm(self):
        return _ORE.CapFloorQuote_atm(self)

    def relative(self):
        return _ORE.CapFloorQuote_relative(self)

    def strike(self):
        return _ORE.CapFloorQuote_strike(self)

    def indexName(self):
        return _ORE.CapFloorQuote_indexName(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.CapFloorQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_CapFloorQuote

# Register CapFloorQuote in _ORE:
_ORE.CapFloorQuote_swigregister(CapFloorQuote)

def CapFloorQuote_getFullView(baseInput):
    return _ORE.CapFloorQuote_getFullView(baseInput)

class CapFloorShiftQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CapFloorShiftQuote_swiginit(self, _ORE.new_CapFloorShiftQuote(*args))

    def ccy(self):
        return _ORE.CapFloorShiftQuote_ccy(self)

    def indexTenor(self):
        return _ORE.CapFloorShiftQuote_indexTenor(self)

    def indexName(self):
        return _ORE.CapFloorShiftQuote_indexName(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.CapFloorShiftQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_CapFloorShiftQuote

# Register CapFloorShiftQuote in _ORE:
_ORE.CapFloorShiftQuote_swigregister(CapFloorShiftQuote)

def CapFloorShiftQuote_getFullView(baseInput):
    return _ORE.CapFloorShiftQuote_getFullView(baseInput)

class FXSpotQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, quoteType, unitCcy, ccy):
        _ORE.FXSpotQuote_swiginit(self, _ORE.new_FXSpotQuote(value, asofDate, name, quoteType, unitCcy, ccy))

    def unitCcy(self):
        return _ORE.FXSpotQuote_unitCcy(self)

    def ccy(self):
        return _ORE.FXSpotQuote_ccy(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.FXSpotQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_FXSpotQuote

# Register FXSpotQuote in _ORE:
_ORE.FXSpotQuote_swigregister(FXSpotQuote)

def FXSpotQuote_getFullView(baseInput):
    return _ORE.FXSpotQuote_getFullView(baseInput)

class FXForwardQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, quoteType, unitCcy, ccy, term, conversionFactor=1.0):
        _ORE.FXForwardQuote_swiginit(self, _ORE.new_FXForwardQuote(value, asofDate, name, quoteType, unitCcy, ccy, term, conversionFactor))

    def unitCcy(self):
        return _ORE.FXForwardQuote_unitCcy(self)

    def ccy(self):
        return _ORE.FXForwardQuote_ccy(self)

    def term(self):
        return _ORE.FXForwardQuote_term(self)

    def conversionFactor(self):
        return _ORE.FXForwardQuote_conversionFactor(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.FXForwardQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_FXForwardQuote

# Register FXForwardQuote in _ORE:
_ORE.FXForwardQuote_swigregister(FXForwardQuote)

def FXForwardQuote_getFullView(baseInput):
    return _ORE.FXForwardQuote_getFullView(baseInput)

class FXOptionQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, quoteType, unitCcy, ccy, expiry, strike):
        _ORE.FXOptionQuote_swiginit(self, _ORE.new_FXOptionQuote(value, asofDate, name, quoteType, unitCcy, ccy, expiry, strike))

    def unitCcy(self):
        return _ORE.FXOptionQuote_unitCcy(self)

    def ccy(self):
        return _ORE.FXOptionQuote_ccy(self)

    def expiry(self):
        return _ORE.FXOptionQuote_expiry(self)

    def strike(self):
        return _ORE.FXOptionQuote_strike(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.FXOptionQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_FXOptionQuote

# Register FXOptionQuote in _ORE:
_ORE.FXOptionQuote_swigregister(FXOptionQuote)

def FXOptionQuote_getFullView(baseInput):
    return _ORE.FXOptionQuote_getFullView(baseInput)

class ZcInflationSwapQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, index, term):
        _ORE.ZcInflationSwapQuote_swiginit(self, _ORE.new_ZcInflationSwapQuote(value, asofDate, name, index, term))

    def index(self):
        return _ORE.ZcInflationSwapQuote_index(self)

    def term(self):
        return _ORE.ZcInflationSwapQuote_term(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.ZcInflationSwapQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_ZcInflationSwapQuote

# Register ZcInflationSwapQuote in _ORE:
_ORE.ZcInflationSwapQuote_swigregister(ZcInflationSwapQuote)

def ZcInflationSwapQuote_getFullView(baseInput):
    return _ORE.ZcInflationSwapQuote_getFullView(baseInput)

class InflationCapFloorQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, quoteType, index, term, isCap, strike, instrumentType):
        _ORE.InflationCapFloorQuote_swiginit(self, _ORE.new_InflationCapFloorQuote(value, asofDate, name, quoteType, index, term, isCap, strike, instrumentType))

    def index(self):
        return _ORE.InflationCapFloorQuote_index(self)

    def term(self):
        return _ORE.InflationCapFloorQuote_term(self)

    def isCap(self):
        return _ORE.InflationCapFloorQuote_isCap(self)

    def strike(self):
        return _ORE.InflationCapFloorQuote_strike(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.InflationCapFloorQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_InflationCapFloorQuote

# Register InflationCapFloorQuote in _ORE:
_ORE.InflationCapFloorQuote_swigregister(InflationCapFloorQuote)

def InflationCapFloorQuote_getFullView(baseInput):
    return _ORE.InflationCapFloorQuote_getFullView(baseInput)

class ZcInflationCapFloorQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, quoteType, index, term, isCap, strike):
        _ORE.ZcInflationCapFloorQuote_swiginit(self, _ORE.new_ZcInflationCapFloorQuote(value, asofDate, name, quoteType, index, term, isCap, strike))

    def index(self):
        return _ORE.ZcInflationCapFloorQuote_index(self)

    def term(self):
        return _ORE.ZcInflationCapFloorQuote_term(self)

    def isCap(self):
        return _ORE.ZcInflationCapFloorQuote_isCap(self)

    def strike(self):
        return _ORE.ZcInflationCapFloorQuote_strike(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.ZcInflationCapFloorQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_ZcInflationCapFloorQuote

# Register ZcInflationCapFloorQuote in _ORE:
_ORE.ZcInflationCapFloorQuote_swigregister(ZcInflationCapFloorQuote)

def ZcInflationCapFloorQuote_getFullView(baseInput):
    return _ORE.ZcInflationCapFloorQuote_getFullView(baseInput)

class YoYInflationSwapQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, index, term):
        _ORE.YoYInflationSwapQuote_swiginit(self, _ORE.new_YoYInflationSwapQuote(value, asofDate, name, index, term))

    def index(self):
        return _ORE.YoYInflationSwapQuote_index(self)

    def term(self):
        return _ORE.YoYInflationSwapQuote_term(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.YoYInflationSwapQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_YoYInflationSwapQuote

# Register YoYInflationSwapQuote in _ORE:
_ORE.YoYInflationSwapQuote_swigregister(YoYInflationSwapQuote)

def YoYInflationSwapQuote_getFullView(baseInput):
    return _ORE.YoYInflationSwapQuote_getFullView(baseInput)

class YyInflationCapFloorQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, quoteType, index, term, isCap, strike):
        _ORE.YyInflationCapFloorQuote_swiginit(self, _ORE.new_YyInflationCapFloorQuote(value, asofDate, name, quoteType, index, term, isCap, strike))

    def index(self):
        return _ORE.YyInflationCapFloorQuote_index(self)

    def term(self):
        return _ORE.YyInflationCapFloorQuote_term(self)

    def isCap(self):
        return _ORE.YyInflationCapFloorQuote_isCap(self)

    def strike(self):
        return _ORE.YyInflationCapFloorQuote_strike(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.YyInflationCapFloorQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_YyInflationCapFloorQuote

# Register YyInflationCapFloorQuote in _ORE:
_ORE.YyInflationCapFloorQuote_swigregister(YyInflationCapFloorQuote)

def YyInflationCapFloorQuote_getFullView(baseInput):
    return _ORE.YyInflationCapFloorQuote_getFullView(baseInput)

class SeasonalityQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, index, type, month):
        _ORE.SeasonalityQuote_swiginit(self, _ORE.new_SeasonalityQuote(value, asofDate, name, index, type, month))

    def index(self):
        return _ORE.SeasonalityQuote_index(self)

    def type(self):
        return _ORE.SeasonalityQuote_type(self)

    def month(self):
        return _ORE.SeasonalityQuote_month(self)

    def applyMonth(self):
        return _ORE.SeasonalityQuote_applyMonth(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.SeasonalityQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_SeasonalityQuote

# Register SeasonalityQuote in _ORE:
_ORE.SeasonalityQuote_swigregister(SeasonalityQuote)

def SeasonalityQuote_getFullView(baseInput):
    return _ORE.SeasonalityQuote_getFullView(baseInput)

class EquitySpotQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, quoteType, equityName, ccy):
        _ORE.EquitySpotQuote_swiginit(self, _ORE.new_EquitySpotQuote(value, asofDate, name, quoteType, equityName, ccy))

    def eqName(self):
        return _ORE.EquitySpotQuote_eqName(self)

    def ccy(self):
        return _ORE.EquitySpotQuote_ccy(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.EquitySpotQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_EquitySpotQuote

# Register EquitySpotQuote in _ORE:
_ORE.EquitySpotQuote_swigregister(EquitySpotQuote)

def EquitySpotQuote_getFullView(baseInput):
    return _ORE.EquitySpotQuote_getFullView(baseInput)

class EquityForwardQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, quoteType, equityName, ccy, expiryDate):
        _ORE.EquityForwardQuote_swiginit(self, _ORE.new_EquityForwardQuote(value, asofDate, name, quoteType, equityName, ccy, expiryDate))

    def eqName(self):
        return _ORE.EquityForwardQuote_eqName(self)

    def ccy(self):
        return _ORE.EquityForwardQuote_ccy(self)

    def expiryDate(self):
        return _ORE.EquityForwardQuote_expiryDate(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.EquityForwardQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_EquityForwardQuote

# Register EquityForwardQuote in _ORE:
_ORE.EquityForwardQuote_swigregister(EquityForwardQuote)

def EquityForwardQuote_getFullView(baseInput):
    return _ORE.EquityForwardQuote_getFullView(baseInput)

class EquityDividendYieldQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, quoteType, equityName, ccy, tenorDate):
        _ORE.EquityDividendYieldQuote_swiginit(self, _ORE.new_EquityDividendYieldQuote(value, asofDate, name, quoteType, equityName, ccy, tenorDate))

    def eqName(self):
        return _ORE.EquityDividendYieldQuote_eqName(self)

    def ccy(self):
        return _ORE.EquityDividendYieldQuote_ccy(self)

    def tenorDate(self):
        return _ORE.EquityDividendYieldQuote_tenorDate(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.EquityDividendYieldQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_EquityDividendYieldQuote

# Register EquityDividendYieldQuote in _ORE:
_ORE.EquityDividendYieldQuote_swigregister(EquityDividendYieldQuote)

def EquityDividendYieldQuote_getFullView(baseInput):
    return _ORE.EquityDividendYieldQuote_getFullView(baseInput)

class EquityOptionQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, quoteType, equityName, ccy, expiry, strike, isCall=True):
        _ORE.EquityOptionQuote_swiginit(self, _ORE.new_EquityOptionQuote(value, asofDate, name, quoteType, equityName, ccy, expiry, strike, isCall))

    def eqName(self):
        return _ORE.EquityOptionQuote_eqName(self)

    def ccy(self):
        return _ORE.EquityOptionQuote_ccy(self)

    def expiry(self):
        return _ORE.EquityOptionQuote_expiry(self)

    def strike(self):
        return _ORE.EquityOptionQuote_strike(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.EquityOptionQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_EquityOptionQuote

# Register EquityOptionQuote in _ORE:
_ORE.EquityOptionQuote_swigregister(EquityOptionQuote)

def EquityOptionQuote_getFullView(baseInput):
    return _ORE.EquityOptionQuote_getFullView(baseInput)

class SecuritySpreadQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, securityID):
        _ORE.SecuritySpreadQuote_swiginit(self, _ORE.new_SecuritySpreadQuote(value, asofDate, name, securityID))

    def securityID(self):
        return _ORE.SecuritySpreadQuote_securityID(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.SecuritySpreadQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_SecuritySpreadQuote

# Register SecuritySpreadQuote in _ORE:
_ORE.SecuritySpreadQuote_swigregister(SecuritySpreadQuote)

def SecuritySpreadQuote_getFullView(baseInput):
    return _ORE.SecuritySpreadQuote_getFullView(baseInput)

class BaseCorrelationQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, quoteType, cdsIndexName, term, detachmentPoint):
        _ORE.BaseCorrelationQuote_swiginit(self, _ORE.new_BaseCorrelationQuote(value, asofDate, name, quoteType, cdsIndexName, term, detachmentPoint))

    def cdsIndexName(self):
        return _ORE.BaseCorrelationQuote_cdsIndexName(self)

    def detachmentPoint(self):
        return _ORE.BaseCorrelationQuote_detachmentPoint(self)

    def term(self):
        return _ORE.BaseCorrelationQuote_term(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.BaseCorrelationQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_BaseCorrelationQuote

# Register BaseCorrelationQuote in _ORE:
_ORE.BaseCorrelationQuote_swigregister(BaseCorrelationQuote)

def BaseCorrelationQuote_getFullView(baseInput):
    return _ORE.BaseCorrelationQuote_getFullView(baseInput)

class IndexCDSOptionQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.IndexCDSOptionQuote_swiginit(self, _ORE.new_IndexCDSOptionQuote(*args))

    def indexName(self):
        return _ORE.IndexCDSOptionQuote_indexName(self)

    def expiry(self):
        return _ORE.IndexCDSOptionQuote_expiry(self)

    def indexTerm(self):
        return _ORE.IndexCDSOptionQuote_indexTerm(self)

    def strike(self):
        return _ORE.IndexCDSOptionQuote_strike(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.IndexCDSOptionQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_IndexCDSOptionQuote

# Register IndexCDSOptionQuote in _ORE:
_ORE.IndexCDSOptionQuote_swigregister(IndexCDSOptionQuote)

def IndexCDSOptionQuote_getFullView(baseInput):
    return _ORE.IndexCDSOptionQuote_getFullView(baseInput)

class CommoditySpotQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, quoteType, commodityName, quoteCurrency):
        _ORE.CommoditySpotQuote_swiginit(self, _ORE.new_CommoditySpotQuote(value, asofDate, name, quoteType, commodityName, quoteCurrency))

    def commodityName(self):
        return _ORE.CommoditySpotQuote_commodityName(self)

    def quoteCurrency(self):
        return _ORE.CommoditySpotQuote_quoteCurrency(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.CommoditySpotQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_CommoditySpotQuote

# Register CommoditySpotQuote in _ORE:
_ORE.CommoditySpotQuote_swigregister(CommoditySpotQuote)

def CommoditySpotQuote_getFullView(baseInput):
    return _ORE.CommoditySpotQuote_getFullView(baseInput)

class CommodityForwardQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CommodityForwardQuote_swiginit(self, _ORE.new_CommodityForwardQuote(*args))

    def commodityName(self):
        return _ORE.CommodityForwardQuote_commodityName(self)

    def quoteCurrency(self):
        return _ORE.CommodityForwardQuote_quoteCurrency(self)

    def expiryDate(self):
        return _ORE.CommodityForwardQuote_expiryDate(self)

    def tenor(self):
        return _ORE.CommodityForwardQuote_tenor(self)

    def startTenor(self):
        return _ORE.CommodityForwardQuote_startTenor(self)

    def tenorBased(self):
        return _ORE.CommodityForwardQuote_tenorBased(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.CommodityForwardQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_CommodityForwardQuote

# Register CommodityForwardQuote in _ORE:
_ORE.CommodityForwardQuote_swigregister(CommodityForwardQuote)

def CommodityForwardQuote_getFullView(baseInput):
    return _ORE.CommodityForwardQuote_getFullView(baseInput)

class CommodityOptionQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CommodityOptionQuote_swiginit(self, _ORE.new_CommodityOptionQuote(*args))

    def commodityName(self):
        return _ORE.CommodityOptionQuote_commodityName(self)

    def quoteCurrency(self):
        return _ORE.CommodityOptionQuote_quoteCurrency(self)

    def expiry(self):
        return _ORE.CommodityOptionQuote_expiry(self)

    def strike(self):
        return _ORE.CommodityOptionQuote_strike(self)

    def optionType(self):
        return _ORE.CommodityOptionQuote_optionType(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.CommodityOptionQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_CommodityOptionQuote

# Register CommodityOptionQuote in _ORE:
_ORE.CommodityOptionQuote_swigregister(CommodityOptionQuote)

def CommodityOptionQuote_getFullView(baseInput):
    return _ORE.CommodityOptionQuote_getFullView(baseInput)

class CorrelationQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, quoteType, index1, index2, expiry, strike):
        _ORE.CorrelationQuote_swiginit(self, _ORE.new_CorrelationQuote(value, asofDate, name, quoteType, index1, index2, expiry, strike))

    def index1(self):
        return _ORE.CorrelationQuote_index1(self)

    def index2(self):
        return _ORE.CorrelationQuote_index2(self)

    def expiry(self):
        return _ORE.CorrelationQuote_expiry(self)

    def strike(self):
        return _ORE.CorrelationQuote_strike(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.CorrelationQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_CorrelationQuote

# Register CorrelationQuote in _ORE:
_ORE.CorrelationQuote_swigregister(CorrelationQuote)

def CorrelationQuote_getFullView(baseInput):
    return _ORE.CorrelationQuote_getFullView(baseInput)

class CPRQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, securityID):
        _ORE.CPRQuote_swiginit(self, _ORE.new_CPRQuote(value, asofDate, name, securityID))

    def securityID(self):
        return _ORE.CPRQuote_securityID(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.CPRQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_CPRQuote

# Register CPRQuote in _ORE:
_ORE.CPRQuote_swigregister(CPRQuote)

def CPRQuote_getFullView(baseInput):
    return _ORE.CPRQuote_getFullView(baseInput)

class BondPriceQuote(MarketDatum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, asofDate, name, securityId):
        _ORE.BondPriceQuote_swiginit(self, _ORE.new_BondPriceQuote(value, asofDate, name, securityId))

    def securityID(self):
        return _ORE.BondPriceQuote_securityID(self)

    @staticmethod
    def getFullView(baseInput):
        return _ORE.BondPriceQuote_getFullView(baseInput)
    __swig_destroy__ = _ORE.delete_BondPriceQuote

# Register BondPriceQuote in _ORE:
_ORE.BondPriceQuote_swigregister(BondPriceQuote)

def BondPriceQuote_getFullView(baseInput):
    return _ORE.BondPriceQuote_getFullView(baseInput)

class Loader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def loadQuotes(self, arg2):
        return _ORE.Loader_loadQuotes(self, arg2)

    def get(self, *args):
        return _ORE.Loader_get(self, *args)

    def has(self, name, d):
        return _ORE.Loader_has(self, name, d)

    def hasQuotes(self, d):
        return _ORE.Loader_hasQuotes(self, d)

    def loadFixings(self):
        return _ORE.Loader_loadFixings(self)
    __swig_destroy__ = _ORE.delete_Loader

# Register Loader in _ORE:
_ORE.Loader_swigregister(Loader)

class StringBoolPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.StringBoolPair_swiginit(self, _ORE.new_StringBoolPair(*args))
    first = property(_ORE.StringBoolPair_first_get, _ORE.StringBoolPair_first_set)
    second = property(_ORE.StringBoolPair_second_get, _ORE.StringBoolPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _ORE.delete_StringBoolPair

# Register StringBoolPair in _ORE:
_ORE.StringBoolPair_swigregister(StringBoolPair)

class MarketDatumVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.MarketDatumVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.MarketDatumVector___nonzero__(self)

    def __bool__(self):
        return _ORE.MarketDatumVector___bool__(self)

    def __len__(self):
        return _ORE.MarketDatumVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.MarketDatumVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.MarketDatumVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.MarketDatumVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.MarketDatumVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.MarketDatumVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.MarketDatumVector___setitem__(self, *args)

    def pop(self):
        return _ORE.MarketDatumVector_pop(self)

    def append(self, x):
        return _ORE.MarketDatumVector_append(self, x)

    def empty(self):
        return _ORE.MarketDatumVector_empty(self)

    def size(self):
        return _ORE.MarketDatumVector_size(self)

    def swap(self, v):
        return _ORE.MarketDatumVector_swap(self, v)

    def begin(self):
        return _ORE.MarketDatumVector_begin(self)

    def end(self):
        return _ORE.MarketDatumVector_end(self)

    def rbegin(self):
        return _ORE.MarketDatumVector_rbegin(self)

    def rend(self):
        return _ORE.MarketDatumVector_rend(self)

    def clear(self):
        return _ORE.MarketDatumVector_clear(self)

    def get_allocator(self):
        return _ORE.MarketDatumVector_get_allocator(self)

    def pop_back(self):
        return _ORE.MarketDatumVector_pop_back(self)

    def erase(self, *args):
        return _ORE.MarketDatumVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.MarketDatumVector_swiginit(self, _ORE.new_MarketDatumVector(*args))

    def push_back(self, x):
        return _ORE.MarketDatumVector_push_back(self, x)

    def front(self):
        return _ORE.MarketDatumVector_front(self)

    def back(self):
        return _ORE.MarketDatumVector_back(self)

    def assign(self, n, x):
        return _ORE.MarketDatumVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.MarketDatumVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.MarketDatumVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.MarketDatumVector_reserve(self, n)

    def capacity(self):
        return _ORE.MarketDatumVector_capacity(self)
    __swig_destroy__ = _ORE.delete_MarketDatumVector

# Register MarketDatumVector in _ORE:
_ORE.MarketDatumVector_swigregister(MarketDatumVector)

class FixingVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.FixingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.FixingVector___nonzero__(self)

    def __bool__(self):
        return _ORE.FixingVector___bool__(self)

    def __len__(self):
        return _ORE.FixingVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.FixingVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.FixingVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.FixingVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.FixingVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.FixingVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.FixingVector___setitem__(self, *args)

    def append(self, x):
        return _ORE.FixingVector_append(self, x)

    def empty(self):
        return _ORE.FixingVector_empty(self)

    def size(self):
        return _ORE.FixingVector_size(self)

    def swap(self, v):
        return _ORE.FixingVector_swap(self, v)

    def begin(self):
        return _ORE.FixingVector_begin(self)

    def end(self):
        return _ORE.FixingVector_end(self)

    def rbegin(self):
        return _ORE.FixingVector_rbegin(self)

    def rend(self):
        return _ORE.FixingVector_rend(self)

    def clear(self):
        return _ORE.FixingVector_clear(self)

    def get_allocator(self):
        return _ORE.FixingVector_get_allocator(self)

    def pop_back(self):
        return _ORE.FixingVector_pop_back(self)

    def erase(self, *args):
        return _ORE.FixingVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.FixingVector_swiginit(self, _ORE.new_FixingVector(*args))

    def push_back(self, x):
        return _ORE.FixingVector_push_back(self, x)

    def front(self):
        return _ORE.FixingVector_front(self)

    def back(self):
        return _ORE.FixingVector_back(self)

    def assign(self, n, x):
        return _ORE.FixingVector_assign(self, n, x)

    def insert(self, *args):
        return _ORE.FixingVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.FixingVector_reserve(self, n)

    def capacity(self):
        return _ORE.FixingVector_capacity(self)
    __swig_destroy__ = _ORE.delete_FixingVector

# Register FixingVector in _ORE:
_ORE.FixingVector_swigregister(FixingVector)

class FixingSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.FixingSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.FixingSet___nonzero__(self)

    def __bool__(self):
        return _ORE.FixingSet___bool__(self)

    def __len__(self):
        return _ORE.FixingSet___len__(self)

    def append(self, x):
        return _ORE.FixingSet_append(self, x)

    def __contains__(self, x):
        return _ORE.FixingSet___contains__(self, x)

    def __getitem__(self, i):
        return _ORE.FixingSet___getitem__(self, i)

    def add(self, x):
        return _ORE.FixingSet_add(self, x)

    def discard(self, x):
        return _ORE.FixingSet_discard(self, x)

    def __init__(self, *args):
        _ORE.FixingSet_swiginit(self, _ORE.new_FixingSet(*args))

    def empty(self):
        return _ORE.FixingSet_empty(self)

    def size(self):
        return _ORE.FixingSet_size(self)

    def clear(self):
        return _ORE.FixingSet_clear(self)

    def swap(self, v):
        return _ORE.FixingSet_swap(self, v)

    def count(self, x):
        return _ORE.FixingSet_count(self, x)

    def begin(self):
        return _ORE.FixingSet_begin(self)

    def end(self):
        return _ORE.FixingSet_end(self)

    def rbegin(self):
        return _ORE.FixingSet_rbegin(self)

    def rend(self):
        return _ORE.FixingSet_rend(self)

    def erase(self, *args):
        return _ORE.FixingSet_erase(self, *args)

    def find(self, x):
        return _ORE.FixingSet_find(self, x)

    def lower_bound(self, x):
        return _ORE.FixingSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _ORE.FixingSet_upper_bound(self, x)

    def equal_range(self, x):
        return _ORE.FixingSet_equal_range(self, x)

    def insert(self, __x):
        return _ORE.FixingSet_insert(self, __x)
    __swig_destroy__ = _ORE.delete_FixingSet

# Register FixingSet in _ORE:
_ORE.FixingSet_swigregister(FixingSet)

class CSVLoader(Loader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CSVLoader_swiginit(self, _ORE.new_CSVLoader(*args))
    __swig_destroy__ = _ORE.delete_CSVLoader

# Register CSVLoader in _ORE:
_ORE.CSVLoader_swigregister(CSVLoader)

class InMemoryLoader(Loader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.InMemoryLoader_swiginit(self, _ORE.new_InMemoryLoader())

    def add(self, date, name, value):
        return _ORE.InMemoryLoader_add(self, date, name, value)

    def addFixing(self, date, name, value):
        return _ORE.InMemoryLoader_addFixing(self, date, name, value)
    __swig_destroy__ = _ORE.delete_InMemoryLoader

# Register InMemoryLoader in _ORE:
_ORE.InMemoryLoader_swigregister(InMemoryLoader)

class Fixing(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    date = property(_ORE.Fixing_date_get, _ORE.Fixing_date_set)
    name = property(_ORE.Fixing_name_get, _ORE.Fixing_name_set)
    fixing = property(_ORE.Fixing_fixing_get, _ORE.Fixing_fixing_set)

    def __init__(self, d, s, f):
        _ORE.Fixing_swiginit(self, _ORE.new_Fixing(d, s, f))
    __swig_destroy__ = _ORE.delete_Fixing

# Register Fixing in _ORE:
_ORE.Fixing_swigregister(Fixing)

ORE_ALERT = _ORE.ORE_ALERT
ORE_CRITICAL = _ORE.ORE_CRITICAL
ORE_ERROR = _ORE.ORE_ERROR
ORE_WARNING = _ORE.ORE_WARNING
ORE_NOTICE = _ORE.ORE_NOTICE
ORE_DEBUG = _ORE.ORE_DEBUG
ORE_DATA = _ORE.ORE_DATA
class Log(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def instance():
        return _ORE.Log_instance()

    def registerLogger(self, logger):
        return _ORE.Log_registerLogger(self, logger)

    def logger(self, name):
        return _ORE.Log_logger(self, name)

    def removeLogger(self, name):
        return _ORE.Log_removeLogger(self, name)

    def removeAllLoggers(self):
        return _ORE.Log_removeAllLoggers(self)

    def filter(self, mask):
        return _ORE.Log_filter(self, mask)

    def mask(self):
        return _ORE.Log_mask(self)

    def setMask(self, mask):
        return _ORE.Log_setMask(self, mask)

    def enabled(self):
        return _ORE.Log_enabled(self)

    def switchOn(self):
        return _ORE.Log_switchOn(self)

    def switchOff(self):
        return _ORE.Log_switchOff(self)
    __swig_destroy__ = _ORE.delete_Log

# Register Log in _ORE:
_ORE.Log_swigregister(Log)

def Log_instance():
    return _ORE.Log_instance()

class Logger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ORE.delete_Logger

# Register Logger in _ORE:
_ORE.Logger_swigregister(Logger)

class FileLogger(Logger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, filename):
        _ORE.FileLogger_swiginit(self, _ORE.new_FileLogger(filename))
    __swig_destroy__ = _ORE.delete_FileLogger

# Register FileLogger in _ORE:
_ORE.FileLogger_swigregister(FileLogger)

class BufferLogger(Logger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, minLevel=64):
        _ORE.BufferLogger_swiginit(self, _ORE.new_BufferLogger(minLevel))

    def hasNext(self):
        return _ORE.BufferLogger_hasNext(self)

    def next(self):
        return _ORE.BufferLogger_next(self)
    __swig_destroy__ = _ORE.delete_BufferLogger

# Register BufferLogger in _ORE:
_ORE.BufferLogger_swigregister(BufferLogger)


def MLOG(mask, text, filename, lineNo):
    return _ORE.MLOG(mask, text, filename, lineNo)

def ALOG(text):
    import inspect
    current_frame = inspect.currentframe()
    call_frame = inspect.getouterframes(current_frame, 2)[-1]
    MLOG(1, text, call_frame.filename, call_frame.lineno)


def CLOG(text):
    import inspect
    current_frame = inspect.currentframe()
    call_frame = inspect.getouterframes(current_frame, 2)[-1]
    MLOG(2, text, call_frame.filename, call_frame.lineno)


def ELOG(text):
    import inspect
    current_frame = inspect.currentframe()
    call_frame = inspect.getouterframes(current_frame, 2)[-1]
    MLOG(4, text, call_frame.filename, call_frame.lineno)


def WLOG(text):
    import inspect
    current_frame = inspect.currentframe()
    call_frame = inspect.getouterframes(current_frame, 2)[-1]
    MLOG(8, text, call_frame.filename, call_frame.lineno)


def LOG(text):
    import inspect
    current_frame = inspect.currentframe()
    call_frame = inspect.getouterframes(current_frame, 2)[-1]
    MLOG(16, text, call_frame.filename, call_frame.lineno)


def DLOG(text):
    import inspect
    current_frame = inspect.currentframe()
    call_frame = inspect.getouterframes(current_frame, 2)[-1]
    MLOG(32, text, call_frame.filename, call_frame.lineno)


def TLOG(text):
    import inspect
    current_frame = inspect.currentframe()
    call_frame = inspect.getouterframes(current_frame, 2)[-1]
    MLOG(64, text, call_frame.filename, call_frame.lineno)

class MarketImpl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, handlePseudoCurrencies):
        _ORE.MarketImpl_swiginit(self, _ORE.new_MarketImpl(handlePseudoCurrencies))

    def asofDate(self):
        return _ORE.MarketImpl_asofDate(self)

    def yieldCurve(self, *args):
        return _ORE.MarketImpl_yieldCurve(self, *args)

    def discountCurve(self, *args):
        return _ORE.MarketImpl_discountCurve(self, *args)

    def iborIndex(self, *args):
        return _ORE.MarketImpl_iborIndex(self, *args)

    def swapIndex(self, *args):
        return _ORE.MarketImpl_swapIndex(self, *args)

    def swaptionVol(self, *args):
        return _ORE.MarketImpl_swaptionVol(self, *args)

    def shortSwapIndexBase(self, *args):
        return _ORE.MarketImpl_shortSwapIndexBase(self, *args)

    def swapIndexBase(self, *args):
        return _ORE.MarketImpl_swapIndexBase(self, *args)

    def yieldVol(self, *args):
        return _ORE.MarketImpl_yieldVol(self, *args)

    def fxSpot(self, *args):
        return _ORE.MarketImpl_fxSpot(self, *args)

    def fxVol(self, *args):
        return _ORE.MarketImpl_fxVol(self, *args)

    def defaultCurve(self, *args):
        return _ORE.MarketImpl_defaultCurve(self, *args)

    def recoveryRate(self, *args):
        return _ORE.MarketImpl_recoveryRate(self, *args)

    def cdsVol(self, *args):
        return _ORE.MarketImpl_cdsVol(self, *args)

    def baseCorrelation(self, *args):
        return _ORE.MarketImpl_baseCorrelation(self, *args)

    def capFloorVol(self, *args):
        return _ORE.MarketImpl_capFloorVol(self, *args)

    def yoyCapFloorVol(self, *args):
        return _ORE.MarketImpl_yoyCapFloorVol(self, *args)

    def zeroInflationIndex(self, *args):
        return _ORE.MarketImpl_zeroInflationIndex(self, *args)

    def yoyInflationIndex(self, *args):
        return _ORE.MarketImpl_yoyInflationIndex(self, *args)

    def cpiInflationCapFloorVolatilitySurface(self, *args):
        return _ORE.MarketImpl_cpiInflationCapFloorVolatilitySurface(self, *args)

    def equitySpot(self, *args):
        return _ORE.MarketImpl_equitySpot(self, *args)

    def equityCurve(self, *args):
        return _ORE.MarketImpl_equityCurve(self, *args)

    def equityDividendCurve(self, *args):
        return _ORE.MarketImpl_equityDividendCurve(self, *args)

    def equityForecastCurve(self, *args):
        return _ORE.MarketImpl_equityForecastCurve(self, *args)

    def equityVol(self, *args):
        return _ORE.MarketImpl_equityVol(self, *args)

    def securitySpread(self, *args):
        return _ORE.MarketImpl_securitySpread(self, *args)

    def commodityPriceCurve(self, *args):
        return _ORE.MarketImpl_commodityPriceCurve(self, *args)

    def commodityVolatility(self, *args):
        return _ORE.MarketImpl_commodityVolatility(self, *args)

    def correlationCurve(self, *args):
        return _ORE.MarketImpl_correlationCurve(self, *args)

    def cpr(self, *args):
        return _ORE.MarketImpl_cpr(self, *args)
    __swig_destroy__ = _ORE.delete_MarketImpl

# Register MarketImpl in _ORE:
_ORE.MarketImpl_swigregister(MarketImpl)

class CPICapFloorTermPriceSurfaceHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.CPICapFloorTermPriceSurfaceHandle_swiginit(self, _ORE.new_CPICapFloorTermPriceSurfaceHandle(*args))

    def __deref__(self):
        return _ORE.CPICapFloorTermPriceSurfaceHandle___deref__(self)

    def currentLink(self):
        return _ORE.CPICapFloorTermPriceSurfaceHandle_currentLink(self)

    def __nonzero__(self):
        return _ORE.CPICapFloorTermPriceSurfaceHandle___nonzero__(self)

    def __bool__(self):
        return _ORE.CPICapFloorTermPriceSurfaceHandle___bool__(self)

    def asObservable(self):
        return _ORE.CPICapFloorTermPriceSurfaceHandle_asObservable(self)
    __swig_destroy__ = _ORE.delete_CPICapFloorTermPriceSurfaceHandle

# Register CPICapFloorTermPriceSurfaceHandle in _ORE:
_ORE.CPICapFloorTermPriceSurfaceHandle_swigregister(CPICapFloorTermPriceSurfaceHandle)

class YoYCapFloorTermPriceSurfaceHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.YoYCapFloorTermPriceSurfaceHandle_swiginit(self, _ORE.new_YoYCapFloorTermPriceSurfaceHandle(*args))

    def __deref__(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle___deref__(self)

    def currentLink(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_currentLink(self)

    def __nonzero__(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle___nonzero__(self)

    def __bool__(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle___bool__(self)

    def asObservable(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_asObservable(self)
    __swig_destroy__ = _ORE.delete_YoYCapFloorTermPriceSurfaceHandle

    def atmYoYSwapTimeRates(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_atmYoYSwapTimeRates(self)

    def atmYoYSwapDateRates(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_atmYoYSwapDateRates(self)

    def YoYTS(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_YoYTS(self)

    def yoyIndex(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_yoyIndex(self)

    def businessDayConvention(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_businessDayConvention(self)

    def fixingDays(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_fixingDays(self)

    def price(self, *args):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_price(self, *args)

    def capPrice(self, *args):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_capPrice(self, *args)

    def floorPrice(self, *args):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_floorPrice(self, *args)

    def atmYoYSwapRate(self, *args):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_atmYoYSwapRate(self, *args)

    def atmYoYRate(self, *args):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_atmYoYRate(self, *args)

    def strikes(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_strikes(self)

    def capStrikes(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_capStrikes(self)

    def floorStrikes(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_floorStrikes(self)

    def maturities(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_maturities(self)

    def minStrike(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_minStrike(self)

    def maxStrike(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_maxStrike(self)

    def minMaturity(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_minMaturity(self)

    def maxMaturity(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_maxMaturity(self)

    def yoyOptionDateFromTenor(self, p):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_yoyOptionDateFromTenor(self, p)

    def observationLag(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_observationLag(self)

    def frequency(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_frequency(self)

    def baseRate(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_baseRate(self)

    def baseDate(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_baseDate(self)

    def setSeasonality(self, *args):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_setSeasonality(self, *args)

    def seasonality(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_seasonality(self)

    def hasSeasonality(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_hasSeasonality(self)

    def dayCounter(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_timeFromReference(self, date)

    def calendar(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_calendar(self)

    def referenceDate(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_referenceDate(self)

    def maxDate(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_maxDate(self)

    def maxTime(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_maxTime(self)

    def enableExtrapolation(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _ORE.YoYCapFloorTermPriceSurfaceHandle_allowsExtrapolation(self)

# Register YoYCapFloorTermPriceSurfaceHandle in _ORE:
_ORE.YoYCapFloorTermPriceSurfaceHandle_swigregister(YoYCapFloorTermPriceSurfaceHandle)

class TodaysMarket(MarketImpl):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.TodaysMarket_swiginit(self, _ORE.new_TodaysMarket(*args))
    __swig_destroy__ = _ORE.delete_TodaysMarket

# Register TodaysMarket in _ORE:
_ORE.TodaysMarket_swigregister(TodaysMarket)


def parseIborIndex(*args):
    return _ORE.parseIborIndex(*args)

def parseSwapIndex(*args):
    return _ORE.parseSwapIndex(*args)

def parseIndex(s):
    return _ORE.parseIndex(s)

def parseZeroInflationIndex(*args):
    return _ORE.parseZeroInflationIndex(*args)

def parseFxIndex(s):
    return _ORE.parseFxIndex(s)

def parseCalendar(s):
    return _ORE.parseCalendar(s)

def parsePeriod(s):
    return _ORE.parsePeriod(s)

def parseBusinessDayConvention(s):
    return _ORE.parseBusinessDayConvention(s)

def parseDayCounter(s):
    return _ORE.parseDayCounter(s)

def parseCurrency(s):
    return _ORE.parseCurrency(s)

def parseDateGenerationRule(s):
    return _ORE.parseDateGenerationRule(s)

def parseFrequency(s):
    return _ORE.parseFrequency(s)

def parseCompounding(s):
    return _ORE.parseCompounding(s)

def parsePositionType(s):
    return _ORE.parsePositionType(s)

def parseSettlementType(s):
    return _ORE.parseSettlementType(s)

def parseExerciseType(s):
    return _ORE.parseExerciseType(s)

def parseOptionType(s):
    return _ORE.parseOptionType(s)

def parseDate(s):
    return _ORE.parseDate(s)
class TradeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.TradeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.TradeVector___nonzero__(self)

    def __bool__(self):
        return _ORE.TradeVector___bool__(self)

    def __len__(self):
        return _ORE.TradeVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.TradeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.TradeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.TradeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.TradeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.TradeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.TradeVector___setitem__(self, *args)

    def pop(self):
        return _ORE.TradeVector_pop(self)

    def append(self, x):
        return _ORE.TradeVector_append(self, x)

    def empty(self):
        return _ORE.TradeVector_empty(self)

    def size(self):
        return _ORE.TradeVector_size(self)

    def swap(self, v):
        return _ORE.TradeVector_swap(self, v)

    def begin(self):
        return _ORE.TradeVector_begin(self)

    def end(self):
        return _ORE.TradeVector_end(self)

    def rbegin(self):
        return _ORE.TradeVector_rbegin(self)

    def rend(self):
        return _ORE.TradeVector_rend(self)

    def clear(self):
        return _ORE.TradeVector_clear(self)

    def get_allocator(self):
        return _ORE.TradeVector_get_allocator(self)

    def pop_back(self):
        return _ORE.TradeVector_pop_back(self)

    def erase(self, *args):
        return _ORE.TradeVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.TradeVector_swiginit(self, _ORE.new_TradeVector(*args))

    def push_back(self, x):
        return _ORE.TradeVector_push_back(self, x)

    def front(self):
        return _ORE.TradeVector_front(self)

    def back(self):
        return _ORE.TradeVector_back(self)

    def assign(self, n, x):
        return _ORE.TradeVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.TradeVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.TradeVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.TradeVector_reserve(self, n)

    def capacity(self):
        return _ORE.TradeVector_capacity(self)
    __swig_destroy__ = _ORE.delete_TradeVector

# Register TradeVector in _ORE:
_ORE.TradeVector_swigregister(TradeVector)

class StringStringMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.StringStringMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.StringStringMap___nonzero__(self)

    def __bool__(self):
        return _ORE.StringStringMap___bool__(self)

    def __len__(self):
        return _ORE.StringStringMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _ORE.StringStringMap___getitem__(self, key)

    def __delitem__(self, key):
        return _ORE.StringStringMap___delitem__(self, key)

    def has_key(self, key):
        return _ORE.StringStringMap_has_key(self, key)

    def keys(self):
        return _ORE.StringStringMap_keys(self)

    def values(self):
        return _ORE.StringStringMap_values(self)

    def items(self):
        return _ORE.StringStringMap_items(self)

    def __contains__(self, key):
        return _ORE.StringStringMap___contains__(self, key)

    def key_iterator(self):
        return _ORE.StringStringMap_key_iterator(self)

    def value_iterator(self):
        return _ORE.StringStringMap_value_iterator(self)

    def __setitem__(self, *args):
        return _ORE.StringStringMap___setitem__(self, *args)

    def asdict(self):
        return _ORE.StringStringMap_asdict(self)

    def __init__(self, *args):
        _ORE.StringStringMap_swiginit(self, _ORE.new_StringStringMap(*args))

    def empty(self):
        return _ORE.StringStringMap_empty(self)

    def size(self):
        return _ORE.StringStringMap_size(self)

    def swap(self, v):
        return _ORE.StringStringMap_swap(self, v)

    def begin(self):
        return _ORE.StringStringMap_begin(self)

    def end(self):
        return _ORE.StringStringMap_end(self)

    def rbegin(self):
        return _ORE.StringStringMap_rbegin(self)

    def rend(self):
        return _ORE.StringStringMap_rend(self)

    def clear(self):
        return _ORE.StringStringMap_clear(self)

    def get_allocator(self):
        return _ORE.StringStringMap_get_allocator(self)

    def count(self, x):
        return _ORE.StringStringMap_count(self, x)

    def erase(self, *args):
        return _ORE.StringStringMap_erase(self, *args)

    def find(self, x):
        return _ORE.StringStringMap_find(self, x)

    def lower_bound(self, x):
        return _ORE.StringStringMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _ORE.StringStringMap_upper_bound(self, x)
    __swig_destroy__ = _ORE.delete_StringStringMap

# Register StringStringMap in _ORE:
_ORE.StringStringMap_swigregister(StringStringMap)

class StringTradeMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.StringTradeMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.StringTradeMap___nonzero__(self)

    def __bool__(self):
        return _ORE.StringTradeMap___bool__(self)

    def __len__(self):
        return _ORE.StringTradeMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _ORE.StringTradeMap___getitem__(self, key)

    def __delitem__(self, key):
        return _ORE.StringTradeMap___delitem__(self, key)

    def has_key(self, key):
        return _ORE.StringTradeMap_has_key(self, key)

    def keys(self):
        return _ORE.StringTradeMap_keys(self)

    def values(self):
        return _ORE.StringTradeMap_values(self)

    def items(self):
        return _ORE.StringTradeMap_items(self)

    def __contains__(self, key):
        return _ORE.StringTradeMap___contains__(self, key)

    def key_iterator(self):
        return _ORE.StringTradeMap_key_iterator(self)

    def value_iterator(self):
        return _ORE.StringTradeMap_value_iterator(self)

    def __setitem__(self, *args):
        return _ORE.StringTradeMap___setitem__(self, *args)

    def asdict(self):
        return _ORE.StringTradeMap_asdict(self)

    def __init__(self, *args):
        _ORE.StringTradeMap_swiginit(self, _ORE.new_StringTradeMap(*args))

    def empty(self):
        return _ORE.StringTradeMap_empty(self)

    def size(self):
        return _ORE.StringTradeMap_size(self)

    def swap(self, v):
        return _ORE.StringTradeMap_swap(self, v)

    def begin(self):
        return _ORE.StringTradeMap_begin(self)

    def end(self):
        return _ORE.StringTradeMap_end(self)

    def rbegin(self):
        return _ORE.StringTradeMap_rbegin(self)

    def rend(self):
        return _ORE.StringTradeMap_rend(self)

    def clear(self):
        return _ORE.StringTradeMap_clear(self)

    def get_allocator(self):
        return _ORE.StringTradeMap_get_allocator(self)

    def count(self, x):
        return _ORE.StringTradeMap_count(self, x)

    def erase(self, *args):
        return _ORE.StringTradeMap_erase(self, *args)

    def find(self, x):
        return _ORE.StringTradeMap_find(self, x)

    def lower_bound(self, x):
        return _ORE.StringTradeMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _ORE.StringTradeMap_upper_bound(self, x)
    __swig_destroy__ = _ORE.delete_StringTradeMap

# Register StringTradeMap in _ORE:
_ORE.StringTradeMap_swigregister(StringTradeMap)

MarketContext_irCalibration = _ORE.MarketContext_irCalibration
MarketContext_fxCalibration = _ORE.MarketContext_fxCalibration
MarketContext_eqCalibration = _ORE.MarketContext_eqCalibration
MarketContext_pricing = _ORE.MarketContext_pricing
class EngineData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.EngineData_swiginit(self, _ORE.new_EngineData())
    __swig_destroy__ = _ORE.delete_EngineData

# Register EngineData in _ORE:
_ORE.EngineData_swigregister(EngineData)

class LegBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ORE.delete_LegBuilder

# Register LegBuilder in _ORE:
_ORE.LegBuilder_swigregister(LegBuilder)

class EngineBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model, engine, tradeTypes):
        _ORE.EngineBuilder_swiginit(self, _ORE.new_EngineBuilder(model, engine, tradeTypes))
    __swig_destroy__ = _ORE.delete_EngineBuilder

# Register EngineBuilder in _ORE:
_ORE.EngineBuilder_swigregister(EngineBuilder)

class EngineFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.EngineFactory_swiginit(self, _ORE.new_EngineFactory(*args))
    __swig_destroy__ = _ORE.delete_EngineFactory

# Register EngineFactory in _ORE:
_ORE.EngineFactory_swigregister(EngineFactory)

class TradeFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.TradeFactory_swiginit(self, _ORE.new_TradeFactory())
    __swig_destroy__ = _ORE.delete_TradeFactory

# Register TradeFactory in _ORE:
_ORE.TradeFactory_swigregister(TradeFactory)

class Envelope(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def counterparty(self):
        return _ORE.Envelope_counterparty(self)

    def nettingSetId(self):
        return _ORE.Envelope_nettingSetId(self)

    def additionalFields(self):
        return _ORE.Envelope_additionalFields(self)

    def __init__(self):
        _ORE.Envelope_swiginit(self, _ORE.new_Envelope())
    __swig_destroy__ = _ORE.delete_Envelope

# Register Envelope in _ORE:
_ORE.Envelope_swigregister(Envelope)

class InstrumentWrapper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def NPV(self):
        return _ORE.InstrumentWrapper_NPV(self)

    def qlInstrument(self):
        return _ORE.InstrumentWrapper_qlInstrument(self)
    __swig_destroy__ = _ORE.delete_InstrumentWrapper

# Register InstrumentWrapper in _ORE:
_ORE.InstrumentWrapper_swigregister(InstrumentWrapper)

class Trade(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def id(self):
        return _ORE.Trade_id(self)

    def tradeType(self):
        return _ORE.Trade_tradeType(self)

    def instrument(self):
        return _ORE.Trade_instrument(self)

    def legs(self):
        return _ORE.Trade_legs(self)

    def envelope(self):
        return _ORE.Trade_envelope(self)

    def maturity(self):
        return _ORE.Trade_maturity(self)

    def notional(self):
        return _ORE.Trade_notional(self)
    __swig_destroy__ = _ORE.delete_Trade

# Register Trade in _ORE:
_ORE.Trade_swigregister(Trade)

class Portfolio(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, buildFailedTrades=True):
        _ORE.Portfolio_swiginit(self, _ORE.new_Portfolio(buildFailedTrades))

    def size(self):
        return _ORE.Portfolio_size(self)

    def ids(self):
        return _ORE.Portfolio_ids(self)

    def get(self, id):
        return _ORE.Portfolio_get(self, id)

    def trades(self):
        return _ORE.Portfolio_trades(self)

    def remove(self, tradeID):
        return _ORE.Portfolio_remove(self, tradeID)

    def fromFile(self, fileName):
        return _ORE.Portfolio_fromFile(self, fileName)

    def fromXMLString(self, xmlString):
        return _ORE.Portfolio_fromXMLString(self, xmlString)

    def toXMLString(self):
        return _ORE.Portfolio_toXMLString(self)

    def build(self, *args):
        return _ORE.Portfolio_build(self, *args)
    __swig_destroy__ = _ORE.delete_Portfolio

# Register Portfolio in _ORE:
_ORE.Portfolio_swigregister(Portfolio)

class PlainInMemoryReport(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, imReport):
        _ORE.PlainInMemoryReport_swiginit(self, _ORE.new_PlainInMemoryReport(imReport))

    def columns(self):
        return _ORE.PlainInMemoryReport_columns(self)

    def header(self, i):
        return _ORE.PlainInMemoryReport_header(self, i)

    def columnType(self, i):
        return _ORE.PlainInMemoryReport_columnType(self, i)

    def rows(self):
        return _ORE.PlainInMemoryReport_rows(self)

    def dataAsSize(self, *args):
        return _ORE.PlainInMemoryReport_dataAsSize(self, *args)

    def dataAsReal(self, *args):
        return _ORE.PlainInMemoryReport_dataAsReal(self, *args)

    def dataAsString(self, *args):
        return _ORE.PlainInMemoryReport_dataAsString(self, *args)

    def dataAsDate(self, *args):
        return _ORE.PlainInMemoryReport_dataAsDate(self, *args)

    def dataAsPeriod(self, *args):
        return _ORE.PlainInMemoryReport_dataAsPeriod(self, *args)
    __swig_destroy__ = _ORE.delete_PlainInMemoryReport

# Register PlainInMemoryReport in _ORE:
_ORE.PlainInMemoryReport_swigregister(PlainInMemoryReport)

class DateSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.DateSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.DateSet___nonzero__(self)

    def __bool__(self):
        return _ORE.DateSet___bool__(self)

    def __len__(self):
        return _ORE.DateSet___len__(self)

    def append(self, x):
        return _ORE.DateSet_append(self, x)

    def __contains__(self, x):
        return _ORE.DateSet___contains__(self, x)

    def __getitem__(self, i):
        return _ORE.DateSet___getitem__(self, i)

    def add(self, x):
        return _ORE.DateSet_add(self, x)

    def discard(self, x):
        return _ORE.DateSet_discard(self, x)

    def __init__(self, *args):
        _ORE.DateSet_swiginit(self, _ORE.new_DateSet(*args))

    def empty(self):
        return _ORE.DateSet_empty(self)

    def size(self):
        return _ORE.DateSet_size(self)

    def clear(self):
        return _ORE.DateSet_clear(self)

    def swap(self, v):
        return _ORE.DateSet_swap(self, v)

    def count(self, x):
        return _ORE.DateSet_count(self, x)

    def begin(self):
        return _ORE.DateSet_begin(self)

    def end(self):
        return _ORE.DateSet_end(self)

    def rbegin(self):
        return _ORE.DateSet_rbegin(self)

    def rend(self):
        return _ORE.DateSet_rend(self)

    def erase(self, *args):
        return _ORE.DateSet_erase(self, *args)

    def find(self, x):
        return _ORE.DateSet_find(self, x)

    def lower_bound(self, x):
        return _ORE.DateSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _ORE.DateSet_upper_bound(self, x)

    def equal_range(self, x):
        return _ORE.DateSet_equal_range(self, x)

    def insert(self, __x):
        return _ORE.DateSet_insert(self, __x)
    __swig_destroy__ = _ORE.delete_DateSet

# Register DateSet in _ORE:
_ORE.DateSet_swigregister(DateSet)

class GeneralizedBlackScholesProcessVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.GeneralizedBlackScholesProcessVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.GeneralizedBlackScholesProcessVector___nonzero__(self)

    def __bool__(self):
        return _ORE.GeneralizedBlackScholesProcessVector___bool__(self)

    def __len__(self):
        return _ORE.GeneralizedBlackScholesProcessVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.GeneralizedBlackScholesProcessVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.GeneralizedBlackScholesProcessVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.GeneralizedBlackScholesProcessVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.GeneralizedBlackScholesProcessVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.GeneralizedBlackScholesProcessVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.GeneralizedBlackScholesProcessVector___setitem__(self, *args)

    def pop(self):
        return _ORE.GeneralizedBlackScholesProcessVector_pop(self)

    def append(self, x):
        return _ORE.GeneralizedBlackScholesProcessVector_append(self, x)

    def empty(self):
        return _ORE.GeneralizedBlackScholesProcessVector_empty(self)

    def size(self):
        return _ORE.GeneralizedBlackScholesProcessVector_size(self)

    def swap(self, v):
        return _ORE.GeneralizedBlackScholesProcessVector_swap(self, v)

    def begin(self):
        return _ORE.GeneralizedBlackScholesProcessVector_begin(self)

    def end(self):
        return _ORE.GeneralizedBlackScholesProcessVector_end(self)

    def rbegin(self):
        return _ORE.GeneralizedBlackScholesProcessVector_rbegin(self)

    def rend(self):
        return _ORE.GeneralizedBlackScholesProcessVector_rend(self)

    def clear(self):
        return _ORE.GeneralizedBlackScholesProcessVector_clear(self)

    def get_allocator(self):
        return _ORE.GeneralizedBlackScholesProcessVector_get_allocator(self)

    def pop_back(self):
        return _ORE.GeneralizedBlackScholesProcessVector_pop_back(self)

    def erase(self, *args):
        return _ORE.GeneralizedBlackScholesProcessVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.GeneralizedBlackScholesProcessVector_swiginit(self, _ORE.new_GeneralizedBlackScholesProcessVector(*args))

    def push_back(self, x):
        return _ORE.GeneralizedBlackScholesProcessVector_push_back(self, x)

    def front(self):
        return _ORE.GeneralizedBlackScholesProcessVector_front(self)

    def back(self):
        return _ORE.GeneralizedBlackScholesProcessVector_back(self)

    def assign(self, n, x):
        return _ORE.GeneralizedBlackScholesProcessVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.GeneralizedBlackScholesProcessVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.GeneralizedBlackScholesProcessVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.GeneralizedBlackScholesProcessVector_reserve(self, n)

    def capacity(self):
        return _ORE.GeneralizedBlackScholesProcessVector_capacity(self)
    __swig_destroy__ = _ORE.delete_GeneralizedBlackScholesProcessVector

# Register GeneralizedBlackScholesProcessVector in _ORE:
_ORE.GeneralizedBlackScholesProcessVector_swigregister(GeneralizedBlackScholesProcessVector)

class LocalVolModelBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Type_Dupire = _ORE.LocalVolModelBuilder_Type_Dupire
    Type_DupireFloored = _ORE.LocalVolModelBuilder_Type_DupireFloored
    Type_AndreasenHuge = _ORE.LocalVolModelBuilder_Type_AndreasenHuge

    def __init__(self, *args):
        _ORE.LocalVolModelBuilder_swiginit(self, _ORE.new_LocalVolModelBuilder(*args))

    def getCalibratedProcesses(self):
        return _ORE.LocalVolModelBuilder_getCalibratedProcesses(self)
    __swig_destroy__ = _ORE.delete_LocalVolModelBuilder

# Register LocalVolModelBuilder in _ORE:
_ORE.LocalVolModelBuilder_swigregister(LocalVolModelBuilder)

class StringSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.StringSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.StringSet___nonzero__(self)

    def __bool__(self):
        return _ORE.StringSet___bool__(self)

    def __len__(self):
        return _ORE.StringSet___len__(self)

    def append(self, x):
        return _ORE.StringSet_append(self, x)

    def __contains__(self, x):
        return _ORE.StringSet___contains__(self, x)

    def __getitem__(self, i):
        return _ORE.StringSet___getitem__(self, i)

    def add(self, x):
        return _ORE.StringSet_add(self, x)

    def discard(self, x):
        return _ORE.StringSet_discard(self, x)

    def __init__(self, *args):
        _ORE.StringSet_swiginit(self, _ORE.new_StringSet(*args))

    def empty(self):
        return _ORE.StringSet_empty(self)

    def size(self):
        return _ORE.StringSet_size(self)

    def clear(self):
        return _ORE.StringSet_clear(self)

    def swap(self, v):
        return _ORE.StringSet_swap(self, v)

    def count(self, x):
        return _ORE.StringSet_count(self, x)

    def begin(self):
        return _ORE.StringSet_begin(self)

    def end(self):
        return _ORE.StringSet_end(self)

    def rbegin(self):
        return _ORE.StringSet_rbegin(self)

    def rend(self):
        return _ORE.StringSet_rend(self)

    def erase(self, *args):
        return _ORE.StringSet_erase(self, *args)

    def find(self, x):
        return _ORE.StringSet_find(self, x)

    def lower_bound(self, x):
        return _ORE.StringSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _ORE.StringSet_upper_bound(self, x)

    def equal_range(self, x):
        return _ORE.StringSet_equal_range(self, x)

    def insert(self, __x):
        return _ORE.StringSet_insert(self, __x)
    __swig_destroy__ = _ORE.delete_StringSet

# Register StringSet in _ORE:
_ORE.StringSet_swigregister(StringSet)

class IntSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.IntSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.IntSet___nonzero__(self)

    def __bool__(self):
        return _ORE.IntSet___bool__(self)

    def __len__(self):
        return _ORE.IntSet___len__(self)

    def append(self, x):
        return _ORE.IntSet_append(self, x)

    def __contains__(self, x):
        return _ORE.IntSet___contains__(self, x)

    def __getitem__(self, i):
        return _ORE.IntSet___getitem__(self, i)

    def add(self, x):
        return _ORE.IntSet_add(self, x)

    def discard(self, x):
        return _ORE.IntSet_discard(self, x)

    def __init__(self, *args):
        _ORE.IntSet_swiginit(self, _ORE.new_IntSet(*args))

    def empty(self):
        return _ORE.IntSet_empty(self)

    def size(self):
        return _ORE.IntSet_size(self)

    def clear(self):
        return _ORE.IntSet_clear(self)

    def swap(self, v):
        return _ORE.IntSet_swap(self, v)

    def count(self, x):
        return _ORE.IntSet_count(self, x)

    def begin(self):
        return _ORE.IntSet_begin(self)

    def end(self):
        return _ORE.IntSet_end(self)

    def rbegin(self):
        return _ORE.IntSet_rbegin(self)

    def rend(self):
        return _ORE.IntSet_rend(self)

    def erase(self, *args):
        return _ORE.IntSet_erase(self, *args)

    def find(self, x):
        return _ORE.IntSet_find(self, x)

    def lower_bound(self, x):
        return _ORE.IntSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _ORE.IntSet_upper_bound(self, x)

    def equal_range(self, x):
        return _ORE.IntSet_equal_range(self, x)

    def insert(self, __x):
        return _ORE.IntSet_insert(self, __x)
    __swig_destroy__ = _ORE.delete_IntSet

# Register IntSet in _ORE:
_ORE.IntSet_swigregister(IntSet)

class UnsignedIntSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.UnsignedIntSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.UnsignedIntSet___nonzero__(self)

    def __bool__(self):
        return _ORE.UnsignedIntSet___bool__(self)

    def __len__(self):
        return _ORE.UnsignedIntSet___len__(self)

    def append(self, x):
        return _ORE.UnsignedIntSet_append(self, x)

    def __contains__(self, x):
        return _ORE.UnsignedIntSet___contains__(self, x)

    def __getitem__(self, i):
        return _ORE.UnsignedIntSet___getitem__(self, i)

    def add(self, x):
        return _ORE.UnsignedIntSet_add(self, x)

    def discard(self, x):
        return _ORE.UnsignedIntSet_discard(self, x)

    def __init__(self, *args):
        _ORE.UnsignedIntSet_swiginit(self, _ORE.new_UnsignedIntSet(*args))

    def empty(self):
        return _ORE.UnsignedIntSet_empty(self)

    def size(self):
        return _ORE.UnsignedIntSet_size(self)

    def clear(self):
        return _ORE.UnsignedIntSet_clear(self)

    def swap(self, v):
        return _ORE.UnsignedIntSet_swap(self, v)

    def count(self, x):
        return _ORE.UnsignedIntSet_count(self, x)

    def begin(self):
        return _ORE.UnsignedIntSet_begin(self)

    def end(self):
        return _ORE.UnsignedIntSet_end(self)

    def rbegin(self):
        return _ORE.UnsignedIntSet_rbegin(self)

    def rend(self):
        return _ORE.UnsignedIntSet_rend(self)

    def erase(self, *args):
        return _ORE.UnsignedIntSet_erase(self, *args)

    def find(self, x):
        return _ORE.UnsignedIntSet_find(self, x)

    def lower_bound(self, x):
        return _ORE.UnsignedIntSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _ORE.UnsignedIntSet_upper_bound(self, x)

    def equal_range(self, x):
        return _ORE.UnsignedIntSet_equal_range(self, x)

    def insert(self, __x):
        return _ORE.UnsignedIntSet_insert(self, __x)
    __swig_destroy__ = _ORE.delete_UnsignedIntSet

# Register UnsignedIntSet in _ORE:
_ORE.UnsignedIntSet_swigregister(UnsignedIntSet)

class Parameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ORE.Parameters_swiginit(self, _ORE.new_Parameters())

    def clear(self):
        return _ORE.Parameters_clear(self)

    def fromFile(self, name):
        return _ORE.Parameters_fromFile(self, name)

    def hasGroup(self, groupName):
        return _ORE.Parameters_hasGroup(self, groupName)

    def has(self, groupName, paramName):
        return _ORE.Parameters_has(self, groupName, paramName)

    def get(self, groupName, paramName):
        return _ORE.Parameters_get(self, groupName, paramName)
    __swig_destroy__ = _ORE.delete_Parameters

# Register Parameters in _ORE:
_ORE.Parameters_swigregister(Parameters)

class InputParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def asof(self):
        return _ORE.InputParameters_asof(self)

    def portfolio(self):
        return _ORE.InputParameters_portfolio(self)

    def nThreads(self):
        return _ORE.InputParameters_nThreads(self)

    def setAsOfDate(self, s):
        return _ORE.InputParameters_setAsOfDate(self, s)

    def setResultsPath(self, s):
        return _ORE.InputParameters_setResultsPath(self, s)

    def setBaseCurrency(self, s):
        return _ORE.InputParameters_setBaseCurrency(self, s)

    def setContinueOnError(self, b):
        return _ORE.InputParameters_setContinueOnError(self, b)

    def setLazyMarketBuilding(self, b):
        return _ORE.InputParameters_setLazyMarketBuilding(self, b)

    def setBuildFailedTrades(self, b):
        return _ORE.InputParameters_setBuildFailedTrades(self, b)

    def setObservationModel(self, s):
        return _ORE.InputParameters_setObservationModel(self, s)

    def setImplyTodaysFixings(self, b):
        return _ORE.InputParameters_setImplyTodaysFixings(self, b)

    def setMarketConfig(self, config, context):
        return _ORE.InputParameters_setMarketConfig(self, config, context)

    def setRefDataManager(self, xml):
        return _ORE.InputParameters_setRefDataManager(self, xml)

    def setRefDataManagerFromFile(self, fileName):
        return _ORE.InputParameters_setRefDataManagerFromFile(self, fileName)

    def setConventions(self, xml):
        return _ORE.InputParameters_setConventions(self, xml)

    def setConventionsFromFile(self, fileName):
        return _ORE.InputParameters_setConventionsFromFile(self, fileName)

    def setIborFallbackConfig(self, xml):
        return _ORE.InputParameters_setIborFallbackConfig(self, xml)

    def setIborFallbackConfigFromFile(self, fileName):
        return _ORE.InputParameters_setIborFallbackConfigFromFile(self, fileName)

    def setCurveConfigs(self, xml):
        return _ORE.InputParameters_setCurveConfigs(self, xml)

    def setCurveConfigsFromFile(self, fileName):
        return _ORE.InputParameters_setCurveConfigsFromFile(self, fileName)

    def setPricingEngine(self, xml):
        return _ORE.InputParameters_setPricingEngine(self, xml)

    def setPricingEngineFromFile(self, fileName):
        return _ORE.InputParameters_setPricingEngineFromFile(self, fileName)

    def setTodaysMarketParams(self, xml):
        return _ORE.InputParameters_setTodaysMarketParams(self, xml)

    def setTodaysMarketParamsFromFile(self, fileName):
        return _ORE.InputParameters_setTodaysMarketParamsFromFile(self, fileName)

    def setPortfolio(self, xml):
        return _ORE.InputParameters_setPortfolio(self, xml)

    def setPortfolioFromFile(self, fileNameString, inputPath):
        return _ORE.InputParameters_setPortfolioFromFile(self, fileNameString, inputPath)

    def setThreads(self, i):
        return _ORE.InputParameters_setThreads(self, i)

    def setEntireMarket(self, b):
        return _ORE.InputParameters_setEntireMarket(self, b)

    def setAllFixings(self, b):
        return _ORE.InputParameters_setAllFixings(self, b)

    def setEomInflationFixings(self, b):
        return _ORE.InputParameters_setEomInflationFixings(self, b)

    def setUseMarketDataFixings(self, b):
        return _ORE.InputParameters_setUseMarketDataFixings(self, b)

    def setIborFallbackOverride(self, b):
        return _ORE.InputParameters_setIborFallbackOverride(self, b)

    def setReportNaString(self, s):
        return _ORE.InputParameters_setReportNaString(self, s)

    def setCsvQuoteChar(self, c):
        return _ORE.InputParameters_setCsvQuoteChar(self, c)

    def setCsvSeparator(self, c):
        return _ORE.InputParameters_setCsvSeparator(self, c)

    def setCsvCommentCharacter(self, c):
        return _ORE.InputParameters_setCsvCommentCharacter(self, c)

    def setDryRun(self, b):
        return _ORE.InputParameters_setDryRun(self, b)

    def setMporDate(self, d):
        return _ORE.InputParameters_setMporDate(self, d)

    def setMporDays(self, s):
        return _ORE.InputParameters_setMporDays(self, s)

    def setMporCalendar(self, s):
        return _ORE.InputParameters_setMporCalendar(self, s)

    def setMporForward(self, b):
        return _ORE.InputParameters_setMporForward(self, b)

    def setMporOverlappingPeriods(self, b):
        return _ORE.InputParameters_setMporOverlappingPeriods(self, b)

    def setOutputAdditionalResults(self, b):
        return _ORE.InputParameters_setOutputAdditionalResults(self, b)

    def setIncludePastCashflows(self, b):
        return _ORE.InputParameters_setIncludePastCashflows(self, b)

    def setOutputCurves(self, b):
        return _ORE.InputParameters_setOutputCurves(self, b)

    def setOutputTodaysMarketCalibration(self, b):
        return _ORE.InputParameters_setOutputTodaysMarketCalibration(self, b)

    def setCurvesMarketConfig(self, s):
        return _ORE.InputParameters_setCurvesMarketConfig(self, s)

    def setCurvesGrid(self, s):
        return _ORE.InputParameters_setCurvesGrid(self, s)

    def setXbsParConversion(self, b):
        return _ORE.InputParameters_setXbsParConversion(self, b)

    def setParSensi(self, b):
        return _ORE.InputParameters_setParSensi(self, b)

    def setAlignPillars(self, b):
        return _ORE.InputParameters_setAlignPillars(self, b)

    def setOutputJacobi(self, b):
        return _ORE.InputParameters_setOutputJacobi(self, b)

    def setUseSensiSpreadedTermStructures(self, b):
        return _ORE.InputParameters_setUseSensiSpreadedTermStructures(self, b)

    def setSensiThreshold(self, r):
        return _ORE.InputParameters_setSensiThreshold(self, r)

    def setSensiSimMarketParams(self, xml):
        return _ORE.InputParameters_setSensiSimMarketParams(self, xml)

    def setSensiSimMarketParamsFromFile(self, fileName):
        return _ORE.InputParameters_setSensiSimMarketParamsFromFile(self, fileName)

    def setSensiScenarioData(self, xml):
        return _ORE.InputParameters_setSensiScenarioData(self, xml)

    def setSensiScenarioDataFromFile(self, fileName):
        return _ORE.InputParameters_setSensiScenarioDataFromFile(self, fileName)

    def setSensiPricingEngineFromFile(self, fileName):
        return _ORE.InputParameters_setSensiPricingEngineFromFile(self, fileName)

    def setSensiPricingEngine(self, *args):
        return _ORE.InputParameters_setSensiPricingEngine(self, *args)

    def setScenarioSimMarketParams(self, xml):
        return _ORE.InputParameters_setScenarioSimMarketParams(self, xml)

    def setScenarioSimMarketParamsFromFile(self, fileName):
        return _ORE.InputParameters_setScenarioSimMarketParamsFromFile(self, fileName)

    def setScenarioOutputFile(self, filename):
        return _ORE.InputParameters_setScenarioOutputFile(self, filename)

    def setStressThreshold(self, r):
        return _ORE.InputParameters_setStressThreshold(self, r)

    def setStressSimMarketParams(self, xml):
        return _ORE.InputParameters_setStressSimMarketParams(self, xml)

    def setStressScenarioData(self, xml):
        return _ORE.InputParameters_setStressScenarioData(self, xml)

    def setStressPricingEngine(self, xml):
        return _ORE.InputParameters_setStressPricingEngine(self, xml)

    def setSalvageCovariance(self, b):
        return _ORE.InputParameters_setSalvageCovariance(self, b)

    def setVarQuantiles(self, s):
        return _ORE.InputParameters_setVarQuantiles(self, s)

    def setVarBreakDown(self, b):
        return _ORE.InputParameters_setVarBreakDown(self, b)

    def setPortfolioFilter(self, s):
        return _ORE.InputParameters_setPortfolioFilter(self, s)

    def setVarMethod(self, s):
        return _ORE.InputParameters_setVarMethod(self, s)

    def setMcVarSamples(self, s):
        return _ORE.InputParameters_setMcVarSamples(self, s)

    def setMcVarSeed(self, l):
        return _ORE.InputParameters_setMcVarSeed(self, l)

    def setCovarianceData(self, reader):
        return _ORE.InputParameters_setCovarianceData(self, reader)

    def setCovarianceDataFromBuffer(self, xml):
        return _ORE.InputParameters_setCovarianceDataFromBuffer(self, xml)

    def setSensitivityStreamFromBuffer(self, buffer):
        return _ORE.InputParameters_setSensitivityStreamFromBuffer(self, buffer)

    def setBenchmarkVarPeriod(self, period):
        return _ORE.InputParameters_setBenchmarkVarPeriod(self, period)

    def setHistoricalScenarioReader(self, fileName):
        return _ORE.InputParameters_setHistoricalScenarioReader(self, fileName)

    def setHistVarSimMarketParamsFromFile(self, fileName):
        return _ORE.InputParameters_setHistVarSimMarketParamsFromFile(self, fileName)

    def setOutputHistoricalScenarios(self, b):
        return _ORE.InputParameters_setOutputHistoricalScenarios(self, b)

    def setSimmVersion(self, s):
        return _ORE.InputParameters_setSimmVersion(self, s)

    def setCrifFromBuffer(self, *args):
        return _ORE.InputParameters_setCrifFromBuffer(self, *args)

    def setSimmCalculationCurrencyCall(self, s):
        return _ORE.InputParameters_setSimmCalculationCurrencyCall(self, s)

    def setSimmCalculationCurrencyPost(self, s):
        return _ORE.InputParameters_setSimmCalculationCurrencyPost(self, s)

    def setSimmResultCurrency(self, s):
        return _ORE.InputParameters_setSimmResultCurrency(self, s)

    def setSimmReportingCurrency(self, s):
        return _ORE.InputParameters_setSimmReportingCurrency(self, s)

    def setAmc(self, b):
        return _ORE.InputParameters_setAmc(self, b)

    def setAmcTradeTypes(self, s):
        return _ORE.InputParameters_setAmcTradeTypes(self, s)

    def setExposureBaseCurrency(self, s):
        return _ORE.InputParameters_setExposureBaseCurrency(self, s)

    def setExposureObservationModel(self, s):
        return _ORE.InputParameters_setExposureObservationModel(self, s)

    def setNettingSetId(self, s):
        return _ORE.InputParameters_setNettingSetId(self, s)

    def setScenarioGenType(self, s):
        return _ORE.InputParameters_setScenarioGenType(self, s)

    def setStoreFlows(self, b):
        return _ORE.InputParameters_setStoreFlows(self, b)

    def setStoreSurvivalProbabilities(self, b):
        return _ORE.InputParameters_setStoreSurvivalProbabilities(self, b)

    def setWriteCube(self, b):
        return _ORE.InputParameters_setWriteCube(self, b)

    def setWriteScenarios(self, b):
        return _ORE.InputParameters_setWriteScenarios(self, b)

    def setExposureSimMarketParams(self, xml):
        return _ORE.InputParameters_setExposureSimMarketParams(self, xml)

    def setScenarioGeneratorData(self, xml):
        return _ORE.InputParameters_setScenarioGeneratorData(self, xml)

    def setCrossAssetModelData(self, xml):
        return _ORE.InputParameters_setCrossAssetModelData(self, xml)

    def setSimulationPricingEngine(self, xml):
        return _ORE.InputParameters_setSimulationPricingEngine(self, xml)

    def setAmcPricingEngine(self, xml):
        return _ORE.InputParameters_setAmcPricingEngine(self, xml)

    def setNettingSetManager(self, xml):
        return _ORE.InputParameters_setNettingSetManager(self, xml)

    def setXvaBaseCurrency(self, s):
        return _ORE.InputParameters_setXvaBaseCurrency(self, s)

    def setLoadCube(self, b):
        return _ORE.InputParameters_setLoadCube(self, b)

    def setFlipViewXVA(self, b):
        return _ORE.InputParameters_setFlipViewXVA(self, b)

    def setFullInitialCollateralisation(self, b):
        return _ORE.InputParameters_setFullInitialCollateralisation(self, b)

    def setExposureProfiles(self, b):
        return _ORE.InputParameters_setExposureProfiles(self, b)

    def setExposureProfilesByTrade(self, b):
        return _ORE.InputParameters_setExposureProfilesByTrade(self, b)

    def setPfeQuantile(self, r):
        return _ORE.InputParameters_setPfeQuantile(self, r)

    def setCollateralCalculationType(self, s):
        return _ORE.InputParameters_setCollateralCalculationType(self, s)

    def setExposureAllocationMethod(self, s):
        return _ORE.InputParameters_setExposureAllocationMethod(self, s)

    def setMarginalAllocationLimit(self, r):
        return _ORE.InputParameters_setMarginalAllocationLimit(self, r)

    def setExerciseNextBreak(self, b):
        return _ORE.InputParameters_setExerciseNextBreak(self, b)

    def setCvaAnalytic(self, b):
        return _ORE.InputParameters_setCvaAnalytic(self, b)

    def setDvaAnalytic(self, b):
        return _ORE.InputParameters_setDvaAnalytic(self, b)

    def setFvaAnalytic(self, b):
        return _ORE.InputParameters_setFvaAnalytic(self, b)

    def setColvaAnalytic(self, b):
        return _ORE.InputParameters_setColvaAnalytic(self, b)

    def setCollateralFloorAnalytic(self, b):
        return _ORE.InputParameters_setCollateralFloorAnalytic(self, b)

    def setDimAnalytic(self, b):
        return _ORE.InputParameters_setDimAnalytic(self, b)

    def setMvaAnalytic(self, b):
        return _ORE.InputParameters_setMvaAnalytic(self, b)

    def setKvaAnalytic(self, b):
        return _ORE.InputParameters_setKvaAnalytic(self, b)

    def setDynamicCredit(self, b):
        return _ORE.InputParameters_setDynamicCredit(self, b)

    def setCvaSensi(self, b):
        return _ORE.InputParameters_setCvaSensi(self, b)

    def setCvaSensiGrid(self, s):
        return _ORE.InputParameters_setCvaSensiGrid(self, s)

    def setCvaSensiShiftSize(self, r):
        return _ORE.InputParameters_setCvaSensiShiftSize(self, r)

    def setDvaName(self, s):
        return _ORE.InputParameters_setDvaName(self, s)

    def setRawCubeOutput(self, b):
        return _ORE.InputParameters_setRawCubeOutput(self, b)

    def setNetCubeOutput(self, b):
        return _ORE.InputParameters_setNetCubeOutput(self, b)

    def setRawCubeOutputFile(self, s):
        return _ORE.InputParameters_setRawCubeOutputFile(self, s)

    def setNetCubeOutputFile(self, s):
        return _ORE.InputParameters_setNetCubeOutputFile(self, s)

    def setFvaBorrowingCurve(self, s):
        return _ORE.InputParameters_setFvaBorrowingCurve(self, s)

    def setFvaLendingCurve(self, s):
        return _ORE.InputParameters_setFvaLendingCurve(self, s)

    def setFlipViewBorrowingCurvePostfix(self, s):
        return _ORE.InputParameters_setFlipViewBorrowingCurvePostfix(self, s)

    def setFlipViewLendingCurvePostfix(self, s):
        return _ORE.InputParameters_setFlipViewLendingCurvePostfix(self, s)

    def setDeterministicInitialMargin(self, nettingSet, timeSeries):
        return _ORE.InputParameters_setDeterministicInitialMargin(self, nettingSet, timeSeries)

    def setDimQuantile(self, r):
        return _ORE.InputParameters_setDimQuantile(self, r)

    def setDimHorizonCalendarDays(self, s):
        return _ORE.InputParameters_setDimHorizonCalendarDays(self, s)

    def setDimRegressionOrder(self, s):
        return _ORE.InputParameters_setDimRegressionOrder(self, s)

    def setDimRegressors(self, s):
        return _ORE.InputParameters_setDimRegressors(self, s)

    def setDimOutputGridPoints(self, s):
        return _ORE.InputParameters_setDimOutputGridPoints(self, s)

    def setDimOutputNettingSet(self, s):
        return _ORE.InputParameters_setDimOutputNettingSet(self, s)

    def setDimLocalRegressionEvaluations(self, s):
        return _ORE.InputParameters_setDimLocalRegressionEvaluations(self, s)

    def setDimLocalRegressionBandwidth(self, r):
        return _ORE.InputParameters_setDimLocalRegressionBandwidth(self, r)

    def setKvaCapitalDiscountRate(self, r):
        return _ORE.InputParameters_setKvaCapitalDiscountRate(self, r)

    def setKvaAlpha(self, r):
        return _ORE.InputParameters_setKvaAlpha(self, r)

    def setKvaRegAdjustment(self, r):
        return _ORE.InputParameters_setKvaRegAdjustment(self, r)

    def setKvaCapitalHurdle(self, r):
        return _ORE.InputParameters_setKvaCapitalHurdle(self, r)

    def setKvaOurPdFloor(self, r):
        return _ORE.InputParameters_setKvaOurPdFloor(self, r)

    def setKvaTheirPdFloor(self, r):
        return _ORE.InputParameters_setKvaTheirPdFloor(self, r)

    def setKvaOurCvaRiskWeight(self, r):
        return _ORE.InputParameters_setKvaOurCvaRiskWeight(self, r)

    def setKvaTheirCvaRiskWeight(self, r):
        return _ORE.InputParameters_setKvaTheirCvaRiskWeight(self, r)

    def setCreditMigrationAnalytic(self, b):
        return _ORE.InputParameters_setCreditMigrationAnalytic(self, b)

    def setCreditMigrationDistributionGrid(self, grid):
        return _ORE.InputParameters_setCreditMigrationDistributionGrid(self, grid)

    def setCreditMigrationTimeSteps(self, ts):
        return _ORE.InputParameters_setCreditMigrationTimeSteps(self, ts)

    def setCreditSimulationParametersFromFile(self, fileName):
        return _ORE.InputParameters_setCreditSimulationParametersFromFile(self, fileName)

    def setCreditSimulationParametersFromBuffer(self, xml):
        return _ORE.InputParameters_setCreditSimulationParametersFromBuffer(self, xml)

    def setCreditMigrationOutputFiles(self, s):
        return _ORE.InputParameters_setCreditMigrationOutputFiles(self, s)

    def setCashflowHorizon(self, s):
        return _ORE.InputParameters_setCashflowHorizon(self, s)

    def setPortfolioFilterDate(self, s):
        return _ORE.InputParameters_setPortfolioFilterDate(self, s)

    def setAnalytics(self, s):
        return _ORE.InputParameters_setAnalytics(self, s)

    def insertAnalytic(self, s):
        return _ORE.InputParameters_insertAnalytic(self, s)

    def setCubeFromFile(self, file):
        return _ORE.InputParameters_setCubeFromFile(self, file)

    def setNettingSetCubeFromFile(self, file):
        return _ORE.InputParameters_setNettingSetCubeFromFile(self, file)

    def setCptyCubeFromFile(self, file):
        return _ORE.InputParameters_setCptyCubeFromFile(self, file)

    def setMarketCubeFromFile(self, file):
        return _ORE.InputParameters_setMarketCubeFromFile(self, file)

    def setNettingSetManagerFromFile(self, fileName):
        return _ORE.InputParameters_setNettingSetManagerFromFile(self, fileName)

    def setCollateralBalancesFromFile(self, fileName):
        return _ORE.InputParameters_setCollateralBalancesFromFile(self, fileName)

    def setCube(self, file):
        return _ORE.InputParameters_setCube(self, file)

    def setMarketCube(self, file):
        return _ORE.InputParameters_setMarketCube(self, file)

    def __init__(self):
        _ORE.InputParameters_swiginit(self, _ORE.new_InputParameters())
    __swig_destroy__ = _ORE.delete_InputParameters

# Register InputParameters in _ORE:
_ORE.InputParameters_swigregister(InputParameters)

class OREApp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.OREApp_swiginit(self, _ORE.new_OREApp(*args))

    def run(self, *args):
        return _ORE.OREApp_run(self, *args)

    def getInputs(self):
        return _ORE.OREApp_getInputs(self)

    def getAnalyticTypes(self):
        return _ORE.OREApp_getAnalyticTypes(self)

    def getSupportedAnalyticTypes(self):
        return _ORE.OREApp_getSupportedAnalyticTypes(self)

    def getAnalytic(self, type):
        return _ORE.OREApp_getAnalytic(self, type)

    def getReportNames(self):
        return _ORE.OREApp_getReportNames(self)

    def getReport(self, reportName):
        return _ORE.OREApp_getReport(self, reportName)

    def getCubeNames(self):
        return _ORE.OREApp_getCubeNames(self)

    def getCube(self, cubeName):
        return _ORE.OREApp_getCube(self, cubeName)

    def getMarketCubeNames(self):
        return _ORE.OREApp_getMarketCubeNames(self)

    def getMarketCube(self, cubeName):
        return _ORE.OREApp_getMarketCube(self, cubeName)

    def getErrors(self):
        return _ORE.OREApp_getErrors(self)

    def getRunTime(self):
        return _ORE.OREApp_getRunTime(self)

    def version(self):
        return _ORE.OREApp_version(self)
    __swig_destroy__ = _ORE.delete_OREApp

# Register OREApp in _ORE:
_ORE.OREApp_swigregister(OREApp)

class Analytic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getMarket(self):
        return _ORE.Analytic_getMarket(self)

    def portfolio(self):
        return _ORE.Analytic_portfolio(self)

    def __init__(self):
        _ORE.Analytic_swiginit(self, _ORE.new_Analytic())
    __swig_destroy__ = _ORE.delete_Analytic

# Register Analytic in _ORE:
_ORE.Analytic_swigregister(Analytic)

class AnalyticsManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, inputs, marketDataLoader):
        _ORE.AnalyticsManager_swiginit(self, _ORE.new_AnalyticsManager(inputs, marketDataLoader))

    def runAnalytics(self, marketCalibrationReport=0):
        return _ORE.AnalyticsManager_runAnalytics(self, marketCalibrationReport)
    __swig_destroy__ = _ORE.delete_AnalyticsManager

# Register AnalyticsManager in _ORE:
_ORE.AnalyticsManager_swigregister(AnalyticsManager)

class MarketDataInMemoryLoader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, inputs, marketData, fixingData):
        _ORE.MarketDataInMemoryLoader_swiginit(self, _ORE.new_MarketDataInMemoryLoader(inputs, marketData, fixingData))
    __swig_destroy__ = _ORE.delete_MarketDataInMemoryLoader

# Register MarketDataInMemoryLoader in _ORE:
_ORE.MarketDataInMemoryLoader_swigregister(MarketDataInMemoryLoader)

class NPVCube(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def numIds(self):
        return _ORE.NPVCube_numIds(self)

    def numDates(self):
        return _ORE.NPVCube_numDates(self)

    def samples(self):
        return _ORE.NPVCube_samples(self)

    def depth(self):
        return _ORE.NPVCube_depth(self)

    def ids(self):
        return _ORE.NPVCube_ids(self)

    def dates(self):
        return _ORE.NPVCube_dates(self)

    def asof(self):
        return _ORE.NPVCube_asof(self)

    def getT0(self, *args):
        return _ORE.NPVCube_getT0(self, *args)

    def get(self, *args):
        return _ORE.NPVCube_get(self, *args)
    __swig_destroy__ = _ORE.delete_NPVCube

# Register NPVCube in _ORE:
_ORE.NPVCube_swigregister(NPVCube)

AggregationScenarioDataType_IndexFixing = _ORE.AggregationScenarioDataType_IndexFixing
AggregationScenarioDataType_FXSpot = _ORE.AggregationScenarioDataType_FXSpot
AggregationScenarioDataType_Numeraire = _ORE.AggregationScenarioDataType_Numeraire
AggregationScenarioDataType_Generic = _ORE.AggregationScenarioDataType_Generic
class AggregationScenarioData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def dimDates(self):
        return _ORE.AggregationScenarioData_dimDates(self)

    def dimSamples(self):
        return _ORE.AggregationScenarioData_dimSamples(self)

    def has(self, *args):
        return _ORE.AggregationScenarioData_has(self, *args)

    def get(self, *args):
        return _ORE.AggregationScenarioData_get(self, *args)

    def keys(self):
        return _ORE.AggregationScenarioData_keys(self)

    def next(self):
        return _ORE.AggregationScenarioData_next(self)
    __swig_destroy__ = _ORE.delete_AggregationScenarioData

# Register AggregationScenarioData in _ORE:
_ORE.AggregationScenarioData_swigregister(AggregationScenarioData)

class SinglePrecisionInMemoryCubeN(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.SinglePrecisionInMemoryCubeN_swiginit(self, _ORE.new_SinglePrecisionInMemoryCubeN(*args))

    def depth(self):
        return _ORE.SinglePrecisionInMemoryCubeN_depth(self)

    def getT0(self, i, d):
        return _ORE.SinglePrecisionInMemoryCubeN_getT0(self, i, d)

    def setT0(self, value, i, d):
        return _ORE.SinglePrecisionInMemoryCubeN_setT0(self, value, i, d)

    def get(self, i, j, k, d):
        return _ORE.SinglePrecisionInMemoryCubeN_get(self, i, j, k, d)

    def set(self, value, i, j, k, d):
        return _ORE.SinglePrecisionInMemoryCubeN_set(self, value, i, j, k, d)
    __swig_destroy__ = _ORE.delete_SinglePrecisionInMemoryCubeN

# Register SinglePrecisionInMemoryCubeN in _ORE:
_ORE.SinglePrecisionInMemoryCubeN_swigregister(SinglePrecisionInMemoryCubeN)

class DoublePrecisionInMemoryCubeN(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.DoublePrecisionInMemoryCubeN_swiginit(self, _ORE.new_DoublePrecisionInMemoryCubeN(*args))

    def depth(self):
        return _ORE.DoublePrecisionInMemoryCubeN_depth(self)

    def getT0(self, i, d):
        return _ORE.DoublePrecisionInMemoryCubeN_getT0(self, i, d)

    def setT0(self, value, i, d):
        return _ORE.DoublePrecisionInMemoryCubeN_setT0(self, value, i, d)

    def get(self, i, j, k, d):
        return _ORE.DoublePrecisionInMemoryCubeN_get(self, i, j, k, d)

    def set(self, value, i, j, k, d):
        return _ORE.DoublePrecisionInMemoryCubeN_set(self, value, i, j, k, d)
    __swig_destroy__ = _ORE.delete_DoublePrecisionInMemoryCubeN

# Register DoublePrecisionInMemoryCubeN in _ORE:
_ORE.DoublePrecisionInMemoryCubeN_swigregister(DoublePrecisionInMemoryCubeN)

class DoublePrecisionInMemoryCubeNVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ORE.DoublePrecisionInMemoryCubeNVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ORE.DoublePrecisionInMemoryCubeNVector___nonzero__(self)

    def __bool__(self):
        return _ORE.DoublePrecisionInMemoryCubeNVector___bool__(self)

    def __len__(self):
        return _ORE.DoublePrecisionInMemoryCubeNVector___len__(self)

    def __getslice__(self, i, j):
        return _ORE.DoublePrecisionInMemoryCubeNVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ORE.DoublePrecisionInMemoryCubeNVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ORE.DoublePrecisionInMemoryCubeNVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ORE.DoublePrecisionInMemoryCubeNVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ORE.DoublePrecisionInMemoryCubeNVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ORE.DoublePrecisionInMemoryCubeNVector___setitem__(self, *args)

    def pop(self):
        return _ORE.DoublePrecisionInMemoryCubeNVector_pop(self)

    def append(self, x):
        return _ORE.DoublePrecisionInMemoryCubeNVector_append(self, x)

    def empty(self):
        return _ORE.DoublePrecisionInMemoryCubeNVector_empty(self)

    def size(self):
        return _ORE.DoublePrecisionInMemoryCubeNVector_size(self)

    def swap(self, v):
        return _ORE.DoublePrecisionInMemoryCubeNVector_swap(self, v)

    def begin(self):
        return _ORE.DoublePrecisionInMemoryCubeNVector_begin(self)

    def end(self):
        return _ORE.DoublePrecisionInMemoryCubeNVector_end(self)

    def rbegin(self):
        return _ORE.DoublePrecisionInMemoryCubeNVector_rbegin(self)

    def rend(self):
        return _ORE.DoublePrecisionInMemoryCubeNVector_rend(self)

    def clear(self):
        return _ORE.DoublePrecisionInMemoryCubeNVector_clear(self)

    def get_allocator(self):
        return _ORE.DoublePrecisionInMemoryCubeNVector_get_allocator(self)

    def pop_back(self):
        return _ORE.DoublePrecisionInMemoryCubeNVector_pop_back(self)

    def erase(self, *args):
        return _ORE.DoublePrecisionInMemoryCubeNVector_erase(self, *args)

    def __init__(self, *args):
        _ORE.DoublePrecisionInMemoryCubeNVector_swiginit(self, _ORE.new_DoublePrecisionInMemoryCubeNVector(*args))

    def push_back(self, x):
        return _ORE.DoublePrecisionInMemoryCubeNVector_push_back(self, x)

    def front(self):
        return _ORE.DoublePrecisionInMemoryCubeNVector_front(self)

    def back(self):
        return _ORE.DoublePrecisionInMemoryCubeNVector_back(self)

    def assign(self, n, x):
        return _ORE.DoublePrecisionInMemoryCubeNVector_assign(self, n, x)

    def resize(self, *args):
        return _ORE.DoublePrecisionInMemoryCubeNVector_resize(self, *args)

    def insert(self, *args):
        return _ORE.DoublePrecisionInMemoryCubeNVector_insert(self, *args)

    def reserve(self, n):
        return _ORE.DoublePrecisionInMemoryCubeNVector_reserve(self, n)

    def capacity(self):
        return _ORE.DoublePrecisionInMemoryCubeNVector_capacity(self)
    __swig_destroy__ = _ORE.delete_DoublePrecisionInMemoryCubeNVector

# Register DoublePrecisionInMemoryCubeNVector in _ORE:
_ORE.DoublePrecisionInMemoryCubeNVector_swigregister(DoublePrecisionInMemoryCubeNVector)

class JointNPVCube(NPVCube):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ORE.JointNPVCube_swiginit(self, _ORE.new_JointNPVCube(*args))

    def numIds(self):
        return _ORE.JointNPVCube_numIds(self)

    def numDates(self):
        return _ORE.JointNPVCube_numDates(self)

    def samples(self):
        return _ORE.JointNPVCube_samples(self)

    def depth(self):
        return _ORE.JointNPVCube_depth(self)

    def idsAndIndexes(self):
        return _ORE.JointNPVCube_idsAndIndexes(self)

    def dates(self):
        return _ORE.JointNPVCube_dates(self)

    def asof(self):
        return _ORE.JointNPVCube_asof(self)

    def getT0(self, id, depth=0):
        return _ORE.JointNPVCube_getT0(self, id, depth)

    def setT0(self, value, id, depth=0):
        return _ORE.JointNPVCube_setT0(self, value, id, depth)

    def get(self, id, date, sample, depth=0):
        return _ORE.JointNPVCube_get(self, id, date, sample, depth)

    def set(self, value, id, date, sample, depth=0):
        return _ORE.JointNPVCube_set(self, value, id, date, sample, depth)
    __swig_destroy__ = _ORE.delete_JointNPVCube

# Register JointNPVCube in _ORE:
_ORE.JointNPVCube_swigregister(JointNPVCube)



