Metadata-Version: 2.1
Name: netdog
Version: 0.1.7
Summary: It is like netcat implemented in python.
Author-Email: vz-shark <vz-shark@miraikanai.net>
License: MIT
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Project-URL: Homepage, https://github.com/vz-shark/netdog
Project-URL: Issues, https://github.com/vz-shark/netdog/issues
Requires-Python: <3.13,>=3.12
Requires-Dist: termcolor>=2.5.0
Description-Content-Type: text/markdown

# netdog
It is like netcat implemented in python.

## Install 

### PYPI
```
pip install netdog
```

### Windows Executable file 
There is a pre-built `netdog.exe` using pyinstaller. [(Download here)](https://github.com/vz-shark/netdog/tree/main/dist_exe)

## Usage

```
$ netdog -h
usage: netdog [-l] [-u] [-e cmd] [-C] [--lbnet {LF,CRLF,CR}] [--lbsub {LF,CRLF,CR}] [-v] [-h] [-V] [hostname] port

netdog is a networking tool like netcat.

positional arguments:
  hostname              Address of bind / connect to.
  port                  Port to listen, forward or connect to

mode arguments:
  -l, --listen          Listen mode: Enable listen mode for inbound connects
  -u, --udp             UDP mode

optional arguments:
  -e cmd, --exec cmd    Execute command
  -C, --crlf            same as '--lbnet CRLF'
  --lbnet {LF,CRLF,CR}  Line break code for network.    (default: LF)
  --lbsub {LF,CRLF,CR}  Line break code for subprocess. (default: LF)
  -v, --verbose         Verbose. Use -vv or -vvv for more verbosity.

misc arguments:
  -h, --help            Show this help message and exit
  -V, --version         Show version information and exit

[Examples]:

* Delegate application layer behavior to other programs via stdin/stdout of subprocess.
  In other words, make stdin/stdout via PIPE correspond to recv/send.

  The following is an example of a simple HTTP GET method.

    > netdog -v -e 'python -u httpget.py' 127.0.0.1 80

    ---httpget.py---
    print("GET / HTTP/1.1\r\n", end="")
    while(True): print(f"response = {input()}", file=sys.stderr)
    ----------------
```