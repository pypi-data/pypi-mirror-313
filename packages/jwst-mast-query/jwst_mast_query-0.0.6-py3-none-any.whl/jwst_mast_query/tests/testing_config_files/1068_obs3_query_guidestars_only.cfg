# specify the instrument. The default set in the code is nircam
instrument: nircam

# define the output directory
# outrootdir[/outsubdir][/propID][/obsnumXYZ]
# propID is the proposal ID number (APT number). Only added if not skip_propID2outsubdir. Note option --skip_propID2outsubdir
# XYZ is the obsnum. Only added if obsnum2outsubdir==True. Note option --obsnum2outsubdir
#outrootdir: $JWSTDOWNLOAD_OUTDIR
outrootdir: ./
outsubdir:
skip_propID2outsubdir: False
obsnum2outsubdir: True
# specify list of propID for which obsnum2outsubdir: True
# This might be useful for propIDs with lots of images: split the products up into subdirs 'obsnumXY'
propIDs_obsnum2outsubdir: [1409]

# if jpg_separate_subdir is True, then the jpgs are save in separate subdirs 'jpg'. The moves them out of the way
jpg_separate_subdir: True

# by default, it is checked if the outfile exists. You can skip this with skip_check_if_outfile_exists==True. Note option --skip_check_if_outfile_exists
skip_check_if_outfile_exists: False

# The script first gets all observations for the given query. Then it queries all products for these
# observations. For large programs, the query for the products can time out, and in these cases it
# is better to split up the query into Nobs_per_batch observations per batch. For example, if there are
# 22 observations, and Nobs_per_batch=4, then there will be 6 batches, 5 batches with 4 observations, and
# the last batch with 2.
Nobs_per_batch: 3

# Specify the proposal ID to query for. Can be an integer, or a 5-digit string, e.g.
# propID: 1068
# propID: '01068'
propID: 1068

# Optionally specify the observation numbers to query for. Can be a single integer or string, or a list
# of integers or strings.
# e.g. obsnums: 001
# obsnums: 1
# obsnums: [001, 002]
obsnums: 3

# Optionally specify the observation modes to query for. If provided, MAST will be queried only for these
# types of observations. e.g. assuming instrument is 'nircam', obsmode: ['image', 'wfss'] will query MAST
# for NIRCAM/IMAGE and NIRCAM/WFSS data. If left empty, the query will include all modes. Valid modes include:
# miri: ['coron', 'ifu', 'image', 'slit', 'slitless', 'targacq']
# nircam: ['coron', 'grism', 'image', 'targacq', 'wfss']
# niriss: ['ami', 'image', 'soss', 'wfss']
# nirspec: ['bots', 'ifu', 'msa', 'slit']
#
# example:
# obsmode: ['image', 'wfss']
obsmode:

# specify the list of filetypes to select in the product table,
# e.g., _uncal.fits or _uncal.jpg.  If only letters, then _ and .fits are added,
# for example uncal gets expanded to _uncal.fits. Typical image filetypes are uncal, rate, rateints, cal
# Note: with -vv, a list of all filetypes of the observations is shown on screen after the ProductTable
# is queried for the first time. Example:
# List of all filetypes of obtained products: ['_segm.fits', '_asn.json', '_pool.csv', '_i2d.jpg', '_thumb.jpg', '_cat.ecsv', '_i2d.fits', '_stream.fits', '_uncal.fits', '_uncal.jpg', '_cal.fits', '_trapsfilled.fits', '_cal.jpg', '_rate.jpg', '_rateints.jpg', '_trapsfilled.jpg', '_rate.fits', '_rateints.fits']
# If not specified, all products are selected
#filetypes: ['uncal']
filetypes: ['fits']

# specify the SCAs if querying for NIRCam data.
# choices=['a1','a2','a3','a4','along','b1','b2','b3','b4','blong']
# If not specified, all SCAs are selected
# sca: a1
# sca: [a1, a3]
sca:

# if guidestars is set to True, guidestar products are also included
guidestars: True

# If guidestar_data_only is set to True, only guidestar products will be included. Science products will be filtered out.
guidestar_data_only: True

# lookback time in days
# Note that all other time parameters (date_select) override the lookback time.
lookbacktime: 1.0

# Specify date range (MJD or isot format) applied to "dateobs_center" column. If single value, then exact match.
# If single value has "+" or "-" at the end, then it is a lower and upper limit, respectively. date_select will
# override the lookback parameter value.
# Examples: 58400+, 58400-,2020-11-23+, 2020-11-23 2020-11-25, 59934 59934.125
# date_select: 2021-05-23+
# date_select: 2022-06-06 2022-06-08
date_select: 2022-05-15 2022-05-16

# save the tables (selected products, obsTable, summary with suffix selprod.txt, obs.txt, summary.txt, respectively) with the
# specified string as basename. Tables will be saved in outrootdir.
# If left empty, the tables will not be saved.
savetables: 1068_obs3_query_guidestars_only_cfg

# If clobber is True, all files will be downloaded. If false, only files that do not already exist in the
# local directory will be downloaded.
clobber: False

# If True, the data will not be downloaded. Only the summary tables will be produced
skipdownload: True

# columns returned from MAST to the obsTable
# The default set in the code is mastcolumns_obsTable=['proposal_id','dataURL','obsid','obs_id','t_min','t_exptime']
mastcolumns_obsTable: ['proposal_id','dataURL','obsid','obs_id','t_min','t_exptime','instrument_name']

# output columns for the tables. Note that the columns for the individual filetypes
# are automatically added to the obsTable.
# The defaults set in the code are:
# self.params['outcolumns_productTable']=['proposal_id','obsnum','obsID','parent_obsid','obs_id','dataproduct_type','productFilename','filetype','calib_level','size','description']
# self.params['outcolumns_obsTable']=['proposal_id','obsnum','obsid','obs_id','t_min','t_exptime','date_min']
outcolumns_productTable: ['proposal_id','obsnum','obsID','parent_obsid','obs_id','sca','visit','dataproduct_type','filetype','calib_level','size','outfilename','dl_code','dl_str']
outcolumns_obsTable:     ['proposal_id','obsnum','obsid','obs_id','t_min','t_exptime','date_min','instrument_name']

# The productTable is sorted based on these columns.
# The defaults set in the code are:
# sortcols_productTable=['calib_level','filetype','obsID']
# Alternatives could be
# sortcols_productTable: ['obsID','filetype']
#sortcols_productTable: ['calib_level','filetype','obsID']
sortcols_productTable: ['calib_level','filetype','proposal_id','obsnum']

# The obsTable is sorted based on these columns.
# The defaults set in the code are below, sorting the table in the order the observations were taken:
# sortcols_obsTable=['date_min','proposal_id','obsnum']
# An alternative would be to sort it by propID and obsnum, and not in chronological order
# sortcols_obsTable: ['proposal_id','obsnum']
sortcols_obsTable: ['date_min','proposal_id','obsnum']

# The summary Table is sorted based on these columns.
# The defaults set in the code are below, sorting the table in the order the observations were taken:
# sortcols_summaryTable=['date_start','proposal_id','obsnum']
# An alternative would be to sort it by propID and obsnum, and not in chronologaical order
# sortcols_summaryTable: ['proposal_id','obsnum']
sortcols_summaryTable: ['date_start','proposal_id','obsnum']

#####################################################################################################
# Create an index.html for each propID that shows thumbnails and metadata of each downloaded product
makewebpages: False

# specify the product table properties for the webpage
# first the figure box sizes. recommended: 100-150, or don't specify if webpage_mkthumbnails, since then
# the size of the thumbnails are used by default.
webpage_tablefigsize_width:
webpage_tablefigsize_height:

# list of filetypes for which jpgs should be shown!
webpage_level12_jpgs: ['uncal','dark','rate','rateints','cal']

# which fitskeys should be copied to the table
webpage_fitskeys2table: ['TARG_RA', 'TARG_DEC', 'FILTER', 'PUPIL', 'READPATT', 'NINTS', 'NGROUPS', 'NFRAMES', 'DATE-BEG', 'DATE-END', 'EFFINTTM', 'EFFEXPTM']

# define the output table columns. This can be product table columns as well as the columns defined in
# webpage_level12_jpgs and webpage_fitskeys2table
webpage_cols4table: ['proposal_id', 'obsnum', 'visit', 'obsID', 'parent_obsid', 'sca', 'FILTER', 'PUPIL', 'READPATT', 'uncal', 'dark', 'rate', 'rateints', 'cal', 'TARG_RA', 'TARG_DEC', 'NINTS', 'NGROUPS', 'NFRAMES', 'DATE-BEG', 'DATE-END', 'EFFINTTM', 'EFFEXPTM', 'size', 'obs_id', 'outfilename']

webpage_sortcols: ['proposal_id', 'obsnum', 'visit', 'sca']

# if webpage_mkthumbnails, then a thumbnail jpg is created for each of the jpg products listed in webpage_level12_jpgs
webpage_mkthumbnails: True
# redo the thumbnails even if exists if webpage_thumbnails_overwrite is True
webpage_thumbnails_overwrite: False
# scale the image down so that it fits the width and height. If only one is specified, then the aspect ratio
# of the original image is restored
webpage_thumbnails_width: 120
webpage_thumbnails_height:
