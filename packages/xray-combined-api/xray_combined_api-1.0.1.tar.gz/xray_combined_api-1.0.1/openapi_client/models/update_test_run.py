# coding: utf-8

"""
    Xray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.defects import Defects
from openapi_client.models.update_iteration_status import UpdateIterationStatus
from openapi_client.models.update_step_result import UpdateStepResult
from openapi_client.models.update_test_run_custom_fields_inner import UpdateTestRunCustomFieldsInner
from openapi_client.models.update_test_run_evidences import UpdateTestRunEvidences
from openapi_client.models.update_test_run_examples import UpdateTestRunExamples
from typing import Optional, Set
from typing_extensions import Self

class UpdateTestRun(BaseModel):
    """
    UpdateTestRun
    """ # noqa: E501
    status: Optional[StrictStr] = None
    comment: Optional[StrictStr] = None
    assignee: Optional[StrictStr] = None
    defects: Optional[Defects] = None
    evidences: Optional[UpdateTestRunEvidences] = None
    custom_fields: Optional[List[UpdateTestRunCustomFieldsInner]] = Field(default=None, alias="customFields")
    iterations: Optional[List[UpdateIterationStatus]] = None
    steps: Optional[List[UpdateStepResult]] = None
    examples: Optional[UpdateTestRunExamples] = None
    __properties: ClassVar[List[str]] = ["status", "comment", "assignee", "defects", "evidences", "customFields", "iterations", "steps", "examples"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateTestRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of defects
        if self.defects:
            _dict['defects'] = self.defects.to_dict()
        # override the default output from pydantic by calling `to_dict()` of evidences
        if self.evidences:
            _dict['evidences'] = self.evidences.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['customFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in iterations (list)
        _items = []
        if self.iterations:
            for _item_iterations in self.iterations:
                if _item_iterations:
                    _items.append(_item_iterations.to_dict())
            _dict['iterations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in steps (list)
        _items = []
        if self.steps:
            for _item_steps in self.steps:
                if _item_steps:
                    _items.append(_item_steps.to_dict())
            _dict['steps'] = _items
        # override the default output from pydantic by calling `to_dict()` of examples
        if self.examples:
            _dict['examples'] = self.examples.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateTestRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status"),
            "comment": obj.get("comment"),
            "assignee": obj.get("assignee"),
            "defects": Defects.from_dict(obj["defects"]) if obj.get("defects") is not None else None,
            "evidences": UpdateTestRunEvidences.from_dict(obj["evidences"]) if obj.get("evidences") is not None else None,
            "customFields": [UpdateTestRunCustomFieldsInner.from_dict(_item) for _item in obj["customFields"]] if obj.get("customFields") is not None else None,
            "iterations": [UpdateIterationStatus.from_dict(_item) for _item in obj["iterations"]] if obj.get("iterations") is not None else None,
            "steps": [UpdateStepResult.from_dict(_item) for _item in obj["steps"]] if obj.get("steps") is not None else None,
            "examples": UpdateTestRunExamples.from_dict(obj["examples"]) if obj.get("examples") is not None else None
        })
        return _obj


