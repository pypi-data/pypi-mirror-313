# coding: utf-8

"""
    Xray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FileResponse(BaseModel):
    """
    FileResponse
    """ # noqa: E501
    id: Optional[StrictInt] = None
    filename: Optional[StrictStr] = None
    file_icon: Optional[StrictStr] = Field(default=None, alias="fileIcon")
    mime_type: Optional[StrictStr] = Field(default=None, alias="mimeType")
    file_icon_alt: Optional[StrictStr] = Field(default=None, alias="fileIconAlt")
    file_size: Optional[StrictStr] = Field(default=None, alias="fileSize")
    numerical_file_size: Optional[StrictInt] = Field(default=None, alias="numericalFileSize")
    created: Optional[StrictStr] = None
    created_date: Optional[StrictInt] = Field(default=None, alias="createdDate")
    author: Optional[StrictStr] = None
    author_full_name: Optional[StrictStr] = Field(default=None, alias="authorFullName")
    file_url: Optional[StrictStr] = Field(default=None, alias="fileURL")
    file_path: Optional[StrictStr] = Field(default=None, alias="filePath")
    __properties: ClassVar[List[str]] = ["id", "filename", "fileIcon", "mimeType", "fileIconAlt", "fileSize", "numericalFileSize", "created", "createdDate", "author", "authorFullName", "fileURL", "filePath"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "filename": obj.get("filename"),
            "fileIcon": obj.get("fileIcon"),
            "mimeType": obj.get("mimeType"),
            "fileIconAlt": obj.get("fileIconAlt"),
            "fileSize": obj.get("fileSize"),
            "numericalFileSize": obj.get("numericalFileSize"),
            "created": obj.get("created"),
            "createdDate": obj.get("createdDate"),
            "author": obj.get("author"),
            "authorFullName": obj.get("authorFullName"),
            "fileURL": obj.get("fileURL"),
            "filePath": obj.get("filePath")
        })
        return _obj


