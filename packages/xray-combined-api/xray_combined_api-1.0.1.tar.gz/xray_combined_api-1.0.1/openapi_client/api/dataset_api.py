# coding: utf-8

"""
    Xray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional, Tuple, Union
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DatasetApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def call_10_api_dataset_export_get(
        self,
        test_issue_id: Annotated[Optional[StrictStr], Field(description="The id of the test issue")] = None,
        test_issue_key: Annotated[Optional[StrictStr], Field(description="The key of the test issue")] = None,
        test_version: Annotated[Optional[StrictStr], Field(description="A test version")] = None,
        context_issue_id: Annotated[Optional[StrictStr], Field(description="The id of the context issue (Test Plan or Test Execution)")] = None,
        context_issue_key: Annotated[Optional[StrictStr], Field(description="The key of the context issue (Test Plan or Test Execution)")] = None,
        resolved: Annotated[Optional[StrictStr], Field(description="A flag indicating of the dataset must be resolved or not for a given level (true by default)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """call_10_api_dataset_export_get

        Retrieves a CSV file with the dataset information. <br/> The response will contain all information related to the dataset, e.g., parameters and values. <br/>

        :param test_issue_id: The id of the test issue
        :type test_issue_id: str
        :param test_issue_key: The key of the test issue
        :type test_issue_key: str
        :param test_version: A test version
        :type test_version: str
        :param context_issue_id: The id of the context issue (Test Plan or Test Execution)
        :type context_issue_id: str
        :param context_issue_key: The key of the context issue (Test Plan or Test Execution)
        :type context_issue_key: str
        :param resolved: A flag indicating of the dataset must be resolved or not for a given level (true by default)
        :type resolved: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_10_api_dataset_export_get_serialize(
            test_issue_id=test_issue_id,
            test_issue_key=test_issue_key,
            test_version=test_version,
            context_issue_id=context_issue_id,
            context_issue_key=context_issue_key,
            resolved=resolved,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_10_api_dataset_export_get_with_http_info(
        self,
        test_issue_id: Annotated[Optional[StrictStr], Field(description="The id of the test issue")] = None,
        test_issue_key: Annotated[Optional[StrictStr], Field(description="The key of the test issue")] = None,
        test_version: Annotated[Optional[StrictStr], Field(description="A test version")] = None,
        context_issue_id: Annotated[Optional[StrictStr], Field(description="The id of the context issue (Test Plan or Test Execution)")] = None,
        context_issue_key: Annotated[Optional[StrictStr], Field(description="The key of the context issue (Test Plan or Test Execution)")] = None,
        resolved: Annotated[Optional[StrictStr], Field(description="A flag indicating of the dataset must be resolved or not for a given level (true by default)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """call_10_api_dataset_export_get

        Retrieves a CSV file with the dataset information. <br/> The response will contain all information related to the dataset, e.g., parameters and values. <br/>

        :param test_issue_id: The id of the test issue
        :type test_issue_id: str
        :param test_issue_key: The key of the test issue
        :type test_issue_key: str
        :param test_version: A test version
        :type test_version: str
        :param context_issue_id: The id of the context issue (Test Plan or Test Execution)
        :type context_issue_id: str
        :param context_issue_key: The key of the context issue (Test Plan or Test Execution)
        :type context_issue_key: str
        :param resolved: A flag indicating of the dataset must be resolved or not for a given level (true by default)
        :type resolved: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_10_api_dataset_export_get_serialize(
            test_issue_id=test_issue_id,
            test_issue_key=test_issue_key,
            test_version=test_version,
            context_issue_id=context_issue_id,
            context_issue_key=context_issue_key,
            resolved=resolved,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_10_api_dataset_export_get_without_preload_content(
        self,
        test_issue_id: Annotated[Optional[StrictStr], Field(description="The id of the test issue")] = None,
        test_issue_key: Annotated[Optional[StrictStr], Field(description="The key of the test issue")] = None,
        test_version: Annotated[Optional[StrictStr], Field(description="A test version")] = None,
        context_issue_id: Annotated[Optional[StrictStr], Field(description="The id of the context issue (Test Plan or Test Execution)")] = None,
        context_issue_key: Annotated[Optional[StrictStr], Field(description="The key of the context issue (Test Plan or Test Execution)")] = None,
        resolved: Annotated[Optional[StrictStr], Field(description="A flag indicating of the dataset must be resolved or not for a given level (true by default)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """call_10_api_dataset_export_get

        Retrieves a CSV file with the dataset information. <br/> The response will contain all information related to the dataset, e.g., parameters and values. <br/>

        :param test_issue_id: The id of the test issue
        :type test_issue_id: str
        :param test_issue_key: The key of the test issue
        :type test_issue_key: str
        :param test_version: A test version
        :type test_version: str
        :param context_issue_id: The id of the context issue (Test Plan or Test Execution)
        :type context_issue_id: str
        :param context_issue_key: The key of the context issue (Test Plan or Test Execution)
        :type context_issue_key: str
        :param resolved: A flag indicating of the dataset must be resolved or not for a given level (true by default)
        :type resolved: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_10_api_dataset_export_get_serialize(
            test_issue_id=test_issue_id,
            test_issue_key=test_issue_key,
            test_version=test_version,
            context_issue_id=context_issue_id,
            context_issue_key=context_issue_key,
            resolved=resolved,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_10_api_dataset_export_get_serialize(
        self,
        test_issue_id,
        test_issue_key,
        test_version,
        context_issue_id,
        context_issue_key,
        resolved,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if test_issue_id is not None:
            
            _query_params.append(('testIssueId', test_issue_id))
            
        if test_issue_key is not None:
            
            _query_params.append(('testIssueKey', test_issue_key))
            
        if test_version is not None:
            
            _query_params.append(('testVersion', test_version))
            
        if context_issue_id is not None:
            
            _query_params.append(('contextIssueId', context_issue_id))
            
        if context_issue_key is not None:
            
            _query_params.append(('contextIssueKey', context_issue_key))
            
        if resolved is not None:
            
            _query_params.append(('resolved', resolved))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth', 
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/1.0/api/dataset/export',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_10_api_dataset_import_post(
        self,
        file: Annotated[Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)], Tuple[str, Annotated[bytes, Field(strict=True)]]], Field(description="The file must be of type CSV. On the first line are presented the parameter names and the lines below represent their values. In order for a parameter to be considered combinatorial, it must contain '*' as a suffix. The CSV delimiter is ','.   ```  Browser*,Languague  Firefox,Portuguese  Chrome,English  ``` ")],
        test_issue_id: Annotated[Optional[StrictStr], Field(description="The id of the test issue")] = None,
        test_issue_key: Annotated[Optional[StrictStr], Field(description="The key of the test issue")] = None,
        test_version: Annotated[Optional[StrictStr], Field(description="The test version")] = None,
        context_issue_id: Annotated[Optional[StrictStr], Field(description="The id of the context issue (Test Plan or Test Execution)")] = None,
        context_issue_key: Annotated[Optional[StrictStr], Field(description="The key of the context issue (Test Plan or Test Execution)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """call_10_api_dataset_import_post

        Endpoint used to imports a dataset through a CSV file to an entity. <br> It is only possible to import dataset to the following entities: <br>   <ul>     <li> Test </li>     <li> Test Plan - Test </li>     <li> Test Execution - Test (Test Run) </li>

        :param file: The file must be of type CSV. On the first line are presented the parameter names and the lines below represent their values. In order for a parameter to be considered combinatorial, it must contain '*' as a suffix. The CSV delimiter is ','.   ```  Browser*,Languague  Firefox,Portuguese  Chrome,English  ```  (required)
        :type file: bytearray
        :param test_issue_id: The id of the test issue
        :type test_issue_id: str
        :param test_issue_key: The key of the test issue
        :type test_issue_key: str
        :param test_version: The test version
        :type test_version: str
        :param context_issue_id: The id of the context issue (Test Plan or Test Execution)
        :type context_issue_id: str
        :param context_issue_key: The key of the context issue (Test Plan or Test Execution)
        :type context_issue_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_10_api_dataset_import_post_serialize(
            file=file,
            test_issue_id=test_issue_id,
            test_issue_key=test_issue_key,
            test_version=test_version,
            context_issue_id=context_issue_id,
            context_issue_key=context_issue_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "Error",
            '403': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_10_api_dataset_import_post_with_http_info(
        self,
        file: Annotated[Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)], Tuple[str, Annotated[bytes, Field(strict=True)]]], Field(description="The file must be of type CSV. On the first line are presented the parameter names and the lines below represent their values. In order for a parameter to be considered combinatorial, it must contain '*' as a suffix. The CSV delimiter is ','.   ```  Browser*,Languague  Firefox,Portuguese  Chrome,English  ``` ")],
        test_issue_id: Annotated[Optional[StrictStr], Field(description="The id of the test issue")] = None,
        test_issue_key: Annotated[Optional[StrictStr], Field(description="The key of the test issue")] = None,
        test_version: Annotated[Optional[StrictStr], Field(description="The test version")] = None,
        context_issue_id: Annotated[Optional[StrictStr], Field(description="The id of the context issue (Test Plan or Test Execution)")] = None,
        context_issue_key: Annotated[Optional[StrictStr], Field(description="The key of the context issue (Test Plan or Test Execution)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """call_10_api_dataset_import_post

        Endpoint used to imports a dataset through a CSV file to an entity. <br> It is only possible to import dataset to the following entities: <br>   <ul>     <li> Test </li>     <li> Test Plan - Test </li>     <li> Test Execution - Test (Test Run) </li>

        :param file: The file must be of type CSV. On the first line are presented the parameter names and the lines below represent their values. In order for a parameter to be considered combinatorial, it must contain '*' as a suffix. The CSV delimiter is ','.   ```  Browser*,Languague  Firefox,Portuguese  Chrome,English  ```  (required)
        :type file: bytearray
        :param test_issue_id: The id of the test issue
        :type test_issue_id: str
        :param test_issue_key: The key of the test issue
        :type test_issue_key: str
        :param test_version: The test version
        :type test_version: str
        :param context_issue_id: The id of the context issue (Test Plan or Test Execution)
        :type context_issue_id: str
        :param context_issue_key: The key of the context issue (Test Plan or Test Execution)
        :type context_issue_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_10_api_dataset_import_post_serialize(
            file=file,
            test_issue_id=test_issue_id,
            test_issue_key=test_issue_key,
            test_version=test_version,
            context_issue_id=context_issue_id,
            context_issue_key=context_issue_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "Error",
            '403': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_10_api_dataset_import_post_without_preload_content(
        self,
        file: Annotated[Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)], Tuple[str, Annotated[bytes, Field(strict=True)]]], Field(description="The file must be of type CSV. On the first line are presented the parameter names and the lines below represent their values. In order for a parameter to be considered combinatorial, it must contain '*' as a suffix. The CSV delimiter is ','.   ```  Browser*,Languague  Firefox,Portuguese  Chrome,English  ``` ")],
        test_issue_id: Annotated[Optional[StrictStr], Field(description="The id of the test issue")] = None,
        test_issue_key: Annotated[Optional[StrictStr], Field(description="The key of the test issue")] = None,
        test_version: Annotated[Optional[StrictStr], Field(description="The test version")] = None,
        context_issue_id: Annotated[Optional[StrictStr], Field(description="The id of the context issue (Test Plan or Test Execution)")] = None,
        context_issue_key: Annotated[Optional[StrictStr], Field(description="The key of the context issue (Test Plan or Test Execution)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """call_10_api_dataset_import_post

        Endpoint used to imports a dataset through a CSV file to an entity. <br> It is only possible to import dataset to the following entities: <br>   <ul>     <li> Test </li>     <li> Test Plan - Test </li>     <li> Test Execution - Test (Test Run) </li>

        :param file: The file must be of type CSV. On the first line are presented the parameter names and the lines below represent their values. In order for a parameter to be considered combinatorial, it must contain '*' as a suffix. The CSV delimiter is ','.   ```  Browser*,Languague  Firefox,Portuguese  Chrome,English  ```  (required)
        :type file: bytearray
        :param test_issue_id: The id of the test issue
        :type test_issue_id: str
        :param test_issue_key: The key of the test issue
        :type test_issue_key: str
        :param test_version: The test version
        :type test_version: str
        :param context_issue_id: The id of the context issue (Test Plan or Test Execution)
        :type context_issue_id: str
        :param context_issue_key: The key of the context issue (Test Plan or Test Execution)
        :type context_issue_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_10_api_dataset_import_post_serialize(
            file=file,
            test_issue_id=test_issue_id,
            test_issue_key=test_issue_key,
            test_version=test_version,
            context_issue_id=context_issue_id,
            context_issue_key=context_issue_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "Error",
            '403': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_10_api_dataset_import_post_serialize(
        self,
        file,
        test_issue_id,
        test_issue_key,
        test_version,
        context_issue_id,
        context_issue_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if test_issue_id is not None:
            
            _query_params.append(('testIssueId', test_issue_id))
            
        if test_issue_key is not None:
            
            _query_params.append(('testIssueKey', test_issue_key))
            
        if test_version is not None:
            
            _query_params.append(('testVersion', test_version))
            
        if context_issue_id is not None:
            
            _query_params.append(('contextIssueId', context_issue_id))
            
        if context_issue_key is not None:
            
            _query_params.append(('contextIssueKey', context_issue_key))
            
        # process the header parameters
        # process the form parameters
        if file is not None:
            _files['file'] = file
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth', 
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/1.0/api/dataset/import',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


