# coding: utf-8

"""
    Xray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.test_example_step_bean import TestExampleStepBean
from typing import Optional, Set
from typing_extensions import Self

class UpdateTestRunExamples(BaseModel):
    """
    UpdateTestRunExamples
    """ # noqa: E501
    id: Optional[StrictStr] = None
    rank: Optional[StrictInt] = None
    values: Optional[List[StrictStr]] = None
    status: Optional[StrictStr] = None
    status_description: Optional[StrictStr] = Field(default=None, alias="statusDescription")
    duration: Optional[StrictStr] = None
    backgrounds: Optional[List[TestExampleStepBean]] = None
    hooks: Optional[List[TestExampleStepBean]] = None
    steps: Optional[List[TestExampleStepBean]] = None
    __properties: ClassVar[List[str]] = ["id", "rank", "values", "status", "statusDescription", "duration", "backgrounds", "hooks", "steps"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateTestRunExamples from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in backgrounds (list)
        _items = []
        if self.backgrounds:
            for _item_backgrounds in self.backgrounds:
                if _item_backgrounds:
                    _items.append(_item_backgrounds.to_dict())
            _dict['backgrounds'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in hooks (list)
        _items = []
        if self.hooks:
            for _item_hooks in self.hooks:
                if _item_hooks:
                    _items.append(_item_hooks.to_dict())
            _dict['hooks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in steps (list)
        _items = []
        if self.steps:
            for _item_steps in self.steps:
                if _item_steps:
                    _items.append(_item_steps.to_dict())
            _dict['steps'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateTestRunExamples from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "rank": obj.get("rank"),
            "values": obj.get("values"),
            "status": obj.get("status"),
            "statusDescription": obj.get("statusDescription"),
            "duration": obj.get("duration"),
            "backgrounds": [TestExampleStepBean.from_dict(_item) for _item in obj["backgrounds"]] if obj.get("backgrounds") is not None else None,
            "hooks": [TestExampleStepBean.from_dict(_item) for _item in obj["hooks"]] if obj.get("hooks") is not None else None,
            "steps": [TestExampleStepBean.from_dict(_item) for _item in obj["steps"]] if obj.get("steps") is not None else None
        })
        return _obj


