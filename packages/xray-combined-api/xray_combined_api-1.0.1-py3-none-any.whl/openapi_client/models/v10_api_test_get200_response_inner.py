# coding: utf-8

"""
    Xray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.v10_api_test_get200_response_inner_definition import V10ApiTestGet200ResponseInnerDefinition
from openapi_client.models.v10_api_test_get200_response_inner_precondition_inner import V10ApiTestGet200ResponseInnerPreconditionInner
from typing import Optional, Set
from typing_extensions import Self

class V10ApiTestGet200ResponseInner(BaseModel):
    """
    V10ApiTestGet200ResponseInner
    """ # noqa: E501
    key: Optional[StrictStr] = None
    var_self: Optional[StrictStr] = Field(default=None, alias="self")
    reporter: Optional[StrictStr] = None
    precondition: Optional[List[V10ApiTestGet200ResponseInnerPreconditionInner]] = None
    type: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    definition: Optional[V10ApiTestGet200ResponseInnerDefinition] = None
    __properties: ClassVar[List[str]] = ["key", "self", "reporter", "precondition", "type", "status", "definition"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V10ApiTestGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in precondition (list)
        _items = []
        if self.precondition:
            for _item_precondition in self.precondition:
                if _item_precondition:
                    _items.append(_item_precondition.to_dict())
            _dict['precondition'] = _items
        # override the default output from pydantic by calling `to_dict()` of definition
        if self.definition:
            _dict['definition'] = self.definition.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V10ApiTestGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "key": obj.get("key"),
            "self": obj.get("self"),
            "reporter": obj.get("reporter"),
            "precondition": [V10ApiTestGet200ResponseInnerPreconditionInner.from_dict(_item) for _item in obj["precondition"]] if obj.get("precondition") is not None else None,
            "type": obj.get("type"),
            "status": obj.get("status"),
            "definition": V10ApiTestGet200ResponseInnerDefinition.from_dict(obj["definition"]) if obj.get("definition") is not None else None
        })
        return _obj


