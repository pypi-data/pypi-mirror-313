# coding: utf-8


"""
IGNORE:
    Nutanix Security APIs

    Manage security features, such as encryption, certificates, or platform hardening.  # noqa: E501

    OpenAPI spec version: 4.0.1-beta-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_security_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_security_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_security_py_client.models.security.v4.config.Schedule import Schedule  # noqa: F401,E501

class HardeningStatus(ExternalizableAbstractModel):

    """Contains status of all the hardening settings for a cluster.

    :param cluster_ext_id: (:attr:`cluster_ext_id`) UUID for the cluster.
    :type cluster_ext_id: 
    
    
    :param is_high_strength_password_enabled: (:attr:`is_high_strength_password_enabled`) Represents whether high strength password is enabled on a cluster.
    :type is_high_strength_password_enabled: 
    
    
    :param is_aide_enabled: (:attr:`is_aide_enabled`) Represents whether aide service is enabled on a cluster.
    :type is_aide_enabled: 
    
    
    :param is_secure_boot_enabled: (:attr:`is_secure_boot_enabled`) Represents whether host secure boot is enabled on a cluster.
    :type is_secure_boot_enabled: 
    
    
    :param is_cluster_lockdown_enabled: (:attr:`is_cluster_lockdown_enabled`) Represents whether cluster lockdown mode is enabled on a cluster.
    :type is_cluster_lockdown_enabled: 
    
    
    :param is_log_forwarding_enabled: (:attr:`is_log_forwarding_enabled`) Represents whether log forwarding is enabled on a cluster.
    :type is_log_forwarding_enabled: 
    
    
    :param scma_schedule: (:attr:`scma_schedule`) 
    :type scma_schedule: 
    
    
    :param ahv_scma_schedule: (:attr:`ahv_scma_schedule`) 
    :type ahv_scma_schedule: 
    
    
    :param is_ahv_defense_consent_banner_enabled: (:attr:`is_ahv_defense_consent_banner_enabled`) Represents whether AHV defense knowledge consent banner is enabled on the hypervisor.
    :type is_ahv_defense_consent_banner_enabled: 
    
    
    :param is_cvm_defense_consent_banner_enabled: (:attr:`is_cvm_defense_consent_banner_enabled`) Represents whether Nutanix CVM defense knowledge consent banner is enabled.
    :type is_cvm_defense_consent_banner_enabled: 
    
    
    :param is_network_segmentation_enabled: (:attr:`is_network_segmentation_enabled`) Represents the network segmentation settings on a cluster.
    :type is_network_segmentation_enabled: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'cluster_ext_id': 'str',
        'is_high_strength_password_enabled': 'bool',
        'is_aide_enabled': 'bool',
        'is_secure_boot_enabled': 'bool',
        'is_cluster_lockdown_enabled': 'bool',
        'is_log_forwarding_enabled': 'bool',
        'scma_schedule': 'security.v4.config.Schedule',
        'ahv_scma_schedule': 'security.v4.config.Schedule',
        'is_ahv_defense_consent_banner_enabled': 'bool',
        'is_cvm_defense_consent_banner_enabled': 'bool',
        'is_network_segmentation_enabled': 'bool',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'cluster_ext_id': 'clusterExtId',
        'is_high_strength_password_enabled': 'isHighStrengthPasswordEnabled',
        'is_aide_enabled': 'isAideEnabled',
        'is_secure_boot_enabled': 'isSecureBootEnabled',
        'is_cluster_lockdown_enabled': 'isClusterLockdownEnabled',
        'is_log_forwarding_enabled': 'isLogForwardingEnabled',
        'scma_schedule': 'scmaSchedule',
        'ahv_scma_schedule': 'ahvScmaSchedule',
        'is_ahv_defense_consent_banner_enabled': 'isAhvDefenseConsentBannerEnabled',
        'is_cvm_defense_consent_banner_enabled': 'isCvmDefenseConsentBannerEnabled',
        'is_network_segmentation_enabled': 'isNetworkSegmentationEnabled',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, cluster_ext_id=None, is_high_strength_password_enabled=None, is_aide_enabled=None, is_secure_boot_enabled=None, is_cluster_lockdown_enabled=None, is_log_forwarding_enabled=None, scma_schedule=None, ahv_scma_schedule=None, is_ahv_defense_consent_banner_enabled=None, is_cvm_defense_consent_banner_enabled=None, is_network_segmentation_enabled=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__cluster_ext_id = None
        self.__is_high_strength_password_enabled = None
        self.__is_aide_enabled = None
        self.__is_secure_boot_enabled = None
        self.__is_cluster_lockdown_enabled = None
        self.__is_log_forwarding_enabled = None
        self.__scma_schedule = None
        self.__ahv_scma_schedule = None
        self.__is_ahv_defense_consent_banner_enabled = None
        self.__is_cvm_defense_consent_banner_enabled = None
        self.__is_network_segmentation_enabled = None
        self.discriminator = None
        if cluster_ext_id is not None:
            self.__cluster_ext_id = cluster_ext_id
        if is_high_strength_password_enabled is not None:
            self.__is_high_strength_password_enabled = is_high_strength_password_enabled
        if is_aide_enabled is not None:
            self.__is_aide_enabled = is_aide_enabled
        if is_secure_boot_enabled is not None:
            self.__is_secure_boot_enabled = is_secure_boot_enabled
        if is_cluster_lockdown_enabled is not None:
            self.__is_cluster_lockdown_enabled = is_cluster_lockdown_enabled
        if is_log_forwarding_enabled is not None:
            self.__is_log_forwarding_enabled = is_log_forwarding_enabled
        if scma_schedule is not None:
            self.__scma_schedule = scma_schedule
        if ahv_scma_schedule is not None:
            self.__ahv_scma_schedule = ahv_scma_schedule
        if is_ahv_defense_consent_banner_enabled is not None:
            self.__is_ahv_defense_consent_banner_enabled = is_ahv_defense_consent_banner_enabled
        if is_cvm_defense_consent_banner_enabled is not None:
            self.__is_cvm_defense_consent_banner_enabled = is_cvm_defense_consent_banner_enabled
        if is_network_segmentation_enabled is not None:
            self.__is_network_segmentation_enabled = is_network_segmentation_enabled

    def _initialize_object_type(self):
        return 'security.v4.config.HardeningStatus'

    def _initialize_object_version(self):
        return 'v4.r0.b1'


    @property
    def cluster_ext_id(self):
        """
        UUID for the cluster.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_ext_id

    @cluster_ext_id.setter
    def cluster_ext_id(self, cluster_ext_id):
        if cluster_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cluster_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `cluster_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cluster_ext_id = cluster_ext_id

    @property
    def is_high_strength_password_enabled(self):
        """
        Represents whether high strength password is enabled on a cluster.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_high_strength_password_enabled

    @is_high_strength_password_enabled.setter
    def is_high_strength_password_enabled(self, is_high_strength_password_enabled):

        self.__is_high_strength_password_enabled = is_high_strength_password_enabled

    @property
    def is_aide_enabled(self):
        """
        Represents whether aide service is enabled on a cluster.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_aide_enabled

    @is_aide_enabled.setter
    def is_aide_enabled(self, is_aide_enabled):

        self.__is_aide_enabled = is_aide_enabled

    @property
    def is_secure_boot_enabled(self):
        """
        Represents whether host secure boot is enabled on a cluster.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_secure_boot_enabled

    @is_secure_boot_enabled.setter
    def is_secure_boot_enabled(self, is_secure_boot_enabled):

        self.__is_secure_boot_enabled = is_secure_boot_enabled

    @property
    def is_cluster_lockdown_enabled(self):
        """
        Represents whether cluster lockdown mode is enabled on a cluster.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_cluster_lockdown_enabled

    @is_cluster_lockdown_enabled.setter
    def is_cluster_lockdown_enabled(self, is_cluster_lockdown_enabled):

        self.__is_cluster_lockdown_enabled = is_cluster_lockdown_enabled

    @property
    def is_log_forwarding_enabled(self):
        """
        Represents whether log forwarding is enabled on a cluster.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_log_forwarding_enabled

    @is_log_forwarding_enabled.setter
    def is_log_forwarding_enabled(self, is_log_forwarding_enabled):

        self.__is_log_forwarding_enabled = is_log_forwarding_enabled

    @property
    def scma_schedule(self):
        """
        

        :type:
            :class:`~ntnx_security_py_client.models.security.v4.config.Schedule`
        """  # noqa: E501
        return self.__scma_schedule

    @scma_schedule.setter
    def scma_schedule(self, scma_schedule):

        self.__scma_schedule = scma_schedule

    @property
    def ahv_scma_schedule(self):
        """
        

        :type:
            :class:`~ntnx_security_py_client.models.security.v4.config.Schedule`
        """  # noqa: E501
        return self.__ahv_scma_schedule

    @ahv_scma_schedule.setter
    def ahv_scma_schedule(self, ahv_scma_schedule):

        self.__ahv_scma_schedule = ahv_scma_schedule

    @property
    def is_ahv_defense_consent_banner_enabled(self):
        """
        Represents whether AHV defense knowledge consent banner is enabled on the hypervisor.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_ahv_defense_consent_banner_enabled

    @is_ahv_defense_consent_banner_enabled.setter
    def is_ahv_defense_consent_banner_enabled(self, is_ahv_defense_consent_banner_enabled):

        self.__is_ahv_defense_consent_banner_enabled = is_ahv_defense_consent_banner_enabled

    @property
    def is_cvm_defense_consent_banner_enabled(self):
        """
        Represents whether Nutanix CVM defense knowledge consent banner is enabled.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_cvm_defense_consent_banner_enabled

    @is_cvm_defense_consent_banner_enabled.setter
    def is_cvm_defense_consent_banner_enabled(self, is_cvm_defense_consent_banner_enabled):

        self.__is_cvm_defense_consent_banner_enabled = is_cvm_defense_consent_banner_enabled

    @property
    def is_network_segmentation_enabled(self):
        """
        Represents the network segmentation settings on a cluster.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_network_segmentation_enabled

    @is_network_segmentation_enabled.setter
    def is_network_segmentation_enabled(self, is_network_segmentation_enabled):

        self.__is_network_segmentation_enabled = is_network_segmentation_enabled

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(HardeningStatus, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HardeningStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

