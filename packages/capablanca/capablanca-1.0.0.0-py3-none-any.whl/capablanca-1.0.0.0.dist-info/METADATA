Metadata-Version: 2.1
Name: capablanca
Version: 1.0.0.0
Summary: Solve the Boolean Satisfiability (SAT) problem using a DIMACS file as input.
Home-page: https://github.com/frankvegadelgado/capablanca
Author: Frank Vega
Author-email: vega.frank@gmail.com
License: MIT License
Project-URL: Source Code, https://github.com/frankvegadelgado/capablanca
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Console
Classifier: Environment :: Web Environment
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.10
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: z3-solver>=4.13.3.0
Requires-Dist: networkx[default]>=3.4.2

# CAPABLANCA| SAT Solver
![Jose Raul Capablanca (Third World Chess Champion from 1921 to 1927)](docs/capablanca.jpg)

# SAT Problem

Instance: A Boolean formula $\phi$ in CNF.

Question: Is $\phi$ satisfiable?
 
**Note: This problem is NP-complete (If any NP-complete can be solved in polynomial time, then P = NP)**.

# Research

This work is based on the following published article: [On the P Versus NP Problem](https://www.preprints.org/manuscript/202409.2053/v10).

# Theory

- A literal in a Boolean formula is an occurrence of a variable or its negation. A Boolean formula is in conjunctive normal form, or CNF, if it is expressed as an AND of clauses, each of which is the OR of one or more literals. 

- A truth assignment for a Boolean formula $\phi$ is a set of values for the variables in $\phi$. A satisfying truth assignment is a truth assignment that causes $\phi$ to be evaluated as true. A Boolean formula with a satisfying truth assignment is satisfiable. The problem SAT asks whether a given Boolean formula $\phi$ in CNF is satisfiable.

Example
----- 

Instance: The Boolean formula $(x_{1} \vee \neg x_{3} \vee \neg x_{2}) \wedge (x_{3} \vee x_{2} \vee x_{4})$ where $\vee$ (OR), $\wedge$ (AND) and $\neg$ (NEGATION) are the logic operations.

Answer: Satisfiable.

Input of this project
-----

The input is on [DIMACS](https://jix.github.io/varisat/manual/0.2.0/formats/dimacs.html) formula with the extension .cnf.
  
The **file.cnf** on DIMACS format for $(x_{1} \vee \neg x_{3} \vee \neg x_{2}) \wedge (x_{3} \vee x_{2} \vee x_{4})$ is
```  
p cnf 4 2
1 -3 -2 0
3 2 4 0
```  

- The first line **p cnf 4 2** means there are 4 variables and 2 clauses.

- The second line **1 -3 -2 0** means the clause $(x_{1} \vee \neg x_{3} \vee \neg x_{2})$ (Note that, the number *0* means the end of the clause).

- The third line **3 2 4 0** means the clause $(x_{3} \vee x_{2} \vee x_{4})$ (Note that, the number *0* means the end of the clause).

# Compile and Environment

Downloading and Installing
-----

Install Python >=3.8.

Download and Install the NetworkX's Library version 3.3 and its dependencies 

If you use pip, you can install NetworkX's Library and its dependencies with:
-----
```
pip install networkx[default]
```
-----

Download and Install the following Number Theory Library 

- Z3 is a theorem prover from Microsoft Research with support for bitvectors, booleans, arrays, floating point numbers, strings, and other data types.

If you use pip, you can install Z3 with:
-----
```
pip install z3-solver
```
-----

# Build and Execute

To build and run from the command prompt:

```
git clone https://github.com/frankvegadelgado/capablanca.git
cd capablanca 
```

On `capablanca\capablanca` directory run

```
python satpy.py -i ..\file.cnf
```

Finally, the console output will display:

```
s SATISFIABLE
v 1 3 4 -2 0
```

that means all positive variables are assigned the value "true" and negative values indicate a variable is assigned "false".

# **SAT Benchmarks** 

We can run the DIMACS files (with the .cnf extension) in the simplest benchmarks folder to output solutions for satisfiable formulas:

```
>  python satpy.py -i ..\benchmarks\simplest\aim-50-1_6-yes1-1.cnf
s SATISFIABLE
v 2 3 7 8 9 14 17 18 19 20 21 22 23 24 26 27 28 30 31 35 36 38 39 40 41 42 43 46 48 -50 -49 -47 -45 -44 -37 -34 -33 -32 -29 -25 -16 -15 -13 -12 -11 -10 -6 -5 -4 -1 0
```

and

```
> python satpy.py -i ..\benchmarks\simplest\aim-50-1_6-no-1.cnf
s UNSATISFIABLE
```

This result is obtained because those files were copied into the directory capablanca\benchmarks\simplest. 

```
aim-50-1_6-yes1-1.cnf
aim-50-1_6-no-1.cnf
```

where these formulas were obtained from the well-known [SAT Benchmarks](https://www.cs.ubc.ca/~hoos/SATLIB/Benchmarks/SAT/DIMACS/AIM/descr.html) dataset.

# Command Options

In the `capablanca\capablanca` directory, running the command:

```
python satpy.py -h
```

will display the following help output:

```
usage: satpy.py [-h] -i INPUTFILE [-v] [-t]

Solve the Boolean Satisfiability (SAT) problem using a DIMACS file as input.


options:
  -h, --help            show this help message and exit
  -i INPUTFILE, --inputFile INPUTFILE
                        Input file path
  -v, --verbose         Enable verbose output
  -t, --timer           Enable timer output
```

where it is described all the possible options.

# Code

- Python code by **Frank Vega**.

# Complexity

````diff
+ We efficiently solve the Boolean Satisfiability (SAT) Problem.
````
 
# License
- MIT.
