[tool.poetry]
name = "Hundred"
version = "0.5.2"
description = ""
authors = ["remimd"]
readme = "documentation/pypi.md"
repository = "https://github.com/100nm/hundred"
packages = [{ include = "hundred" }]
include = ["**/*.mo"]
exclude = ["**/*.po", "**/*.pot"]

[tool.poetry.dependencies]
python = ">=3.12, <4"
argon2-cffi = "*"
babel = "*"
faker = { version = "*", optional = true }
orjson = { version = "*", optional = true }
pydantic = ">=2, <3"
pyjwt = "*"
python-cq = "*"
python-injection = "*"
python-ulid = "*"

[tool.poetry.group.dev.dependencies]
mypy = "*"
ruff = "*"

[tool.poetry.group.test.dependencies]
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"

[tool.poetry.extras]
testing = ["faker", "orjson"]

[tool.poetry.plugins."pytest11"]
hundred = "hundred.contrib._pytest.plugin"

[tool.coverage.report]
exclude_lines = [
    "pass",
    "pragma: no cover",
    "raise NotImplementedError",
]

[tool.coverage.run]
omit = [
    "hundred/__init__.py",
    "hundred/contrib/_pytest/plugin.py",
]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_defs = true
follow_imports = "silent"
no_implicit_reexport = true
plugins = ["pydantic.mypy"]
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.pytest.ini_options]
python_files = "test_*.py"
addopts = "--tb short --cov ./ --cov-report term-missing:skip-covered"
asyncio_default_fixture_loop_scope = "session"
asyncio_mode = "auto"
testpaths = "**/tests/"

[tool.ruff]
target-version = "py312"
line-length = 88
indent-width = 4

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
extend-select = ["F", "I", "N"]
ignore = ["N818"]
fixable = ["ALL"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
