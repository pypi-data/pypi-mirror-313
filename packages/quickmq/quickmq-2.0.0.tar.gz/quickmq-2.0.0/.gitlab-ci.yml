## QuickMQ CI/CD
## =============
##
## In general, tries to keep CI simple and defers to hatch
## for dependency management/task running.
##
## Author: Max Drexler
##

## General Pipeline Rules
## ======================
##
## Relavent docs: https://docs.gitlab.com/ee/ci/yaml/workflow.html
##
workflow:
  rules:
    # Don't run scheduled pipelines (we don't have these).
    - if: $CI_COMMIT_SOURCE == 'schedule'
      when: never
    # Don't run pipelines for MR drafts.
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /^(\[Draft\]|\(Draft\)|Draft:)/
      when: never
    # Don't run branch pipelines when there's an open MR for the branch (run the MR pipeline instead).
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    # Run all other MR pipelines
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always
    # Run all other branch pipelines
    - if: $CI_COMMIT_BRANCH
      when: always
    # Run all other tag pipelines
    - if: $CI_COMMIT_TAG
      when: always
    # Else, don't run it (not sure what this would be)
    - when: never
  auto_cancel:
    # Cancel upcoming jobs if a job fails
    on_job_failure: all
    # A new commit only cancels jobs that are interruptable
    # (Basically don't cancel the release jobs)
    on_new_commit: interruptible

variables:
  HATCH_CACHE_DIR: "$CI_PROJECT_DIR/.cache/hatch"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

default:
  # Defer python version management to Hatch with `hatch python`.
  image: python:3.12
  tags: ["docker", "ssec_shared"] # use shared runners at the SSEC
  before_script:
    - pip install -U pip hatch
  cache:
    paths:
      - .cache/hatch
      - .cache/pip

## Our pipeline stages
## ===============
##
## test: checks viability of the code
## build: If everything is ok, create distributions
## release: send those distributions to prod!
##
stages:
  - test
  - build
  - release

# jobs have the format stage:descriptor:

## Rule Sets
## =========
##
## Extendable objects with rules that would otherwise be repeated.
##

## Four different pipeline options
## 1. Tag pipeline
## => Run only the jobs for a release
##
## 2. MR pipeline
## => Run everything except release jobs
##
## 3. Main branch pipeline
## => Same as 2.
##
## 4. Non-main branch pipeline
## => Only run jobs that pertain to changes from main

## 1
.on-release:
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - when: never
  interruptible: false

## 2 & 3
.on-mr-or-main:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always
  interruptible: false

## 1, 2, 3, & 4
.on-any-with-change:
  variables:
    # These variables can (and should) be overwritten by the individual job
    CHANGE_GLOB: "**/*"
    CHANGE_GLOB_2: ""
    CHANGE_GLOB_3: ""
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      changes:
        paths:
          - "$CHANGE_GLOB"
          - "$CHANGE_GLOB_2"
          - "$CHANGE_GLOB_3"
        compare_to: main
    - when: never
  interruptible: true

.all:
  # This isn't necessary because workflow filters all pipelines.
  # Included for clarity within jobs
  rules:
    when: always
  interruptible: true

## Test Stage
## ==========
##
test:lint:
  # Checks for consistency within python code
  stage: test
  variables:
    CHANGE_GLOB: src/**/*
  extends: .on-any-with-change
  script:
    - hatch fmt --check src/

test:static:
  # Run static analysis on the python code
  stage: test
  variables:
    CHANGE_GLOB: src/**/*
  extends: .on-any-with-change
  script:
    - hatch run types:check src/

test:unit:
  # Run the unit tests for the code.
  # Using hatch, the code is tested for python >= 3.7
  # We need to use a custom container for python 3.6
  stage: test
  variables:
    CHANGE_GLOB: src/**/*
    CHANGE_GLOB_2: tests/**/*
  extends: .on-any-with-change
  script:
    - hatch test -ac
  artifacts:
    untracked: false
    when: on_success
    expire_in: "30 days"
    reports:
      coverage_report:
        coverage_format: cobertura
        path: ./coverage.xml
  coverage: /(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/

test:integration:
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  stage: test
  extends: .on-mr-or-main
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip install -U pip hatch
  script:
    - hatch run integration:test

# test:docs:build:
#   stage: test

test:compat:
  # Assure the package is usable for the minimum supported python version (3.6)
  # Hatch isn't available for python 3.6 so we must do checks manually
  image: python:3.6
  stage: test
  extends: .on-mr-or-main
  before_script:
    - python --version
    - python -m pip install .
    - python -m pip install pytest mypy
  script:
    - pytest tests/unit
    - mypy --strict src/

## Build stage
## ===============
##
## Build our package files for release
##
build:dist:
  stage: build
  extends: .on-release
  script:
    - hatch build
  artifacts:
    expire_in: "1 day"
    paths:
      - ./dist/*.whl
      - ./dist/*.tar.gz

## Release stage
## ===============
##
## Release our package/docs
##
## Current releases:
## 1. GitLab Registry
## 2. PyPi Registry
## 3. GitLab release
## 4. TODO: GitLab pages (docs)
##
release:packages:
  stage: release
  extends: .on-release
  script:
    # publish to gitlab registry and main (pypi)
    - hatch publish -y -r ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi -u gitlab-ci-token -a $CI_JOB_TOKEN
    - hatch publish -y -r main -u __token__ -a $PYPI_TOKEN

release:gitlab:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  extends: .on-release
  before_script:
    # Overwrite default: before_script
    - echo "before running release_job"
  script:
    - echo "running release_job"
  release:
    tag_name: "$CI_COMMIT_TAG"
    name: "Release v$CI_COMMIT_TAG"
    description: "Automatic release created using CI."

# release:docs:
#   stage: release
#   extends: .on-release
#   before_script: python -m pip install requirements-docs.txt
#   script:
#     - pass
