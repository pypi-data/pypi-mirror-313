# coding: utf-8

"""
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING, Any, List, Optional, Union

from truefoundry.ml.autogen.client.models.external_model_source import (
    ExternalModelSource,
)
from truefoundry.ml.autogen.client.models.truefoundry_model_source import (
    TruefoundryModelSource,
)
from truefoundry.ml.autogen.client.models.upload_model_source import UploadModelSource
from truefoundry.pydantic_v1 import (
    BaseModel,
    Field,
    ValidationError,
    validator,
)

SOURCE_ANY_OF_SCHEMAS = [
    "ExternalModelSource",
    "TruefoundryModelSource",
    "UploadModelSource",
]


class Source(BaseModel):
    """
    +label=Artifact Source +docs=Source for the model version +usage=Source for the model version
    """

    # data type: UploadModelSource
    anyof_schema_1_validator: Optional[UploadModelSource] = None
    # data type: TruefoundryModelSource
    anyof_schema_2_validator: Optional[TruefoundryModelSource] = None
    # data type: ExternalModelSource
    anyof_schema_3_validator: Optional[ExternalModelSource] = None
    if TYPE_CHECKING:
        actual_instance: Union[
            ExternalModelSource, TruefoundryModelSource, UploadModelSource
        ]
    else:
        actual_instance: Any
    any_of_schemas: List[str] = Field(SOURCE_ANY_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError(
                    "If a position argument is used, only 1 is allowed to set `actual_instance`"
                )
            if kwargs:
                raise ValueError(
                    "If a position argument is used, keyword arguments cannot be used."
                )
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator("actual_instance")
    def actual_instance_must_validate_anyof(cls, v):
        instance = Source.construct()
        error_messages = []
        # validate data type: UploadModelSource
        if not isinstance(v, UploadModelSource):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `UploadModelSource`"
            )
        else:
            return v

        # validate data type: TruefoundryModelSource
        if not isinstance(v, TruefoundryModelSource):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `TruefoundryModelSource`"
            )
        else:
            return v

        # validate data type: ExternalModelSource
        if not isinstance(v, ExternalModelSource):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `ExternalModelSource`"
            )
        else:
            return v

        if error_messages:
            # no match
            raise ValueError(
                "No match found when setting the actual_instance in Source with anyOf schemas: ExternalModelSource, TruefoundryModelSource, UploadModelSource. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Source:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Source:
        """Returns the object represented by the json string"""
        instance = Source.construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[UploadModelSource] = None
        try:
            instance.actual_instance = UploadModelSource.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[TruefoundryModelSource] = None
        try:
            instance.actual_instance = TruefoundryModelSource.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[ExternalModelSource] = None
        try:
            instance.actual_instance = ExternalModelSource.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into Source with anyOf schemas: ExternalModelSource, TruefoundryModelSource, UploadModelSource. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())
