# coding: utf-8

"""
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from truefoundry.ml.autogen.client.models.feature_dto import FeatureDto
from truefoundry.pydantic_v1 import BaseModel, Field, StrictStr, conlist


class AddFeaturesToModelVersionRequestDto(BaseModel):
    """
    AddFeaturesToModelVersionRequestDto
    """

    id: StrictStr = Field(...)
    features: conlist(FeatureDto) = Field(...)
    __properties = ["id", "features"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AddFeaturesToModelVersionRequestDto:
        """Create an instance of AddFeaturesToModelVersionRequestDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from truefoundry.pydantic_v1 by calling `to_dict()` of each item in features (list)
        _items = []
        if self.features:
            for _item in self.features:
                if _item:
                    _items.append(_item.to_dict())
            _dict["features"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AddFeaturesToModelVersionRequestDto:
        """Create an instance of AddFeaturesToModelVersionRequestDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AddFeaturesToModelVersionRequestDto.parse_obj(obj)

        _obj = AddFeaturesToModelVersionRequestDto.parse_obj(
            {
                "id": obj.get("id"),
                "features": [
                    FeatureDto.from_dict(_item) for _item in obj.get("features")
                ]
                if obj.get("features") is not None
                else None,
            }
        )
        return _obj
