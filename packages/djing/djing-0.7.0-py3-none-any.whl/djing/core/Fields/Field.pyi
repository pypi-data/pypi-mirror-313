from Illuminate.Contracts.Resolvable import Resolvable
from Illuminate.Contracts.Support.JsonSerializable import JsonSerializable
from _typeshed import Incomplete
from djing.core.Fields.FieldElement import FieldElement as FieldElement
from djing.core.Fields.HandlesValidation import HandlesValidation as HandlesValidation
from djing.core.Fields.SupportsFullWidth import SupportsFullWidth as SupportsFullWidth
from djing.core.Http.Requests.DjingRequest import DjingRequest as DjingRequest
from djing.core.Metrics.HasHelpText import HasHelpText as HasHelpText
from typing import Self

class Field(FieldElement, HasHelpText, SupportsFullWidth, HandlesValidation, JsonSerializable, Resolvable):
    name: Incomplete
    attribute: Incomplete
    value: Incomplete
    resource: Incomplete
    LEFT_ALIGN: str
    RIGHT_ALIGN: str
    CENTER_ALIGN: str
    computed_callback: Incomplete
    def __init__(self, name: str, attribute: Incomplete | None = None, resolve_callback: Incomplete | None = None) -> None: ...
    def text_align(self, text_align) -> Self: ...
    def default(self, callback) -> Self: ...
    def resolve_for_action(self, request: DjingRequest): ...
    def resolve_for_display(self, resource, attribute: Incomplete | None = None): ...
    def resolve_using_display_callback(self, value, resource, attribute) -> None: ...
    def resolve(self, resource, attribute: Incomplete | None = None) -> None: ...
    def fill(self, request: DjingRequest, model): ...
    def fill_for_action(self, request: DjingRequest, model): ...
    def fill_into(self, request: DjingRequest, model, attribute, request_attribute: Incomplete | None = None): ...
    def fill_attribute(self, request: DjingRequest, request_attribute, model, attribute): ...
    def fill_attribute_from_request(self, request: DjingRequest, request_attribute, model, attribute): ...
    def fill_model_with_data(self, model, value, attribute) -> None: ...
    def as_bigint(self) -> Self: ...
    def computed(self) -> bool: ...
    def fill_using(self, callback) -> Self: ...
    def display_using(self, callback) -> Self: ...
    def nullable(self, callback: bool = True, values: Incomplete | None = None) -> Self: ...
    def null_values(self, values) -> Self: ...
    def is_nullable(self) -> Self: ...
    def sortable(self) -> Self: ...
    def sortable_uri_key(self) -> Self: ...
    def readonly(self, readonly_callback: bool = True) -> Self: ...
    def is_readonly(self, request: DjingRequest) -> Self: ...
    def required(self, required_callback: bool = True) -> Self: ...
    def is_required(self, request: DjingRequest): ...
    def placeholder(self, text: str) -> Self: ...
    def set_readonly_attribute(self) -> Self: ...
    def show(self) -> Self: ...
    def hide(self) -> Self: ...
    def get_unique_key(self) -> str: ...
    def request_should_resolve_default_value(self, request: DjingRequest): ...
    def resolve_default_callback(self, request: DjingRequest): ...
    def resolve_default_value(self, request: DjingRequest): ...
    def has_resolvable_value(self, request: DjingRequest) -> bool: ...
    def json_serialize(self): ...
