from _typeshed import Incomplete
from djing.core.Contracts.FilterableField import FilterableField as FilterableField
from djing.core.Fields.Field import Field as Field
from djing.core.Fields.FieldFilterable import FieldFilterable as FieldFilterable
from djing.core.Fields.Filters.SelectFilter import SelectFilter as SelectFilter
from djing.core.Fields.Searchable import Searchable as Searchable
from djing.core.Http.Requests.DjingRequest import DjingRequest as DjingRequest
from typing import Self

class Select(Field, FieldFilterable, FilterableField, Searchable):
    component: str
    option_callback: Incomplete
    def options(self, options) -> Self: ...
    def display_using_labels(self) -> Self: ...
    def serialize_options(self, searchable: bool = False): ...
    def make_filter(self, request: DjingRequest): ...
    def serialize_for_filter(self): ...
    def json_serialize(self): ...
