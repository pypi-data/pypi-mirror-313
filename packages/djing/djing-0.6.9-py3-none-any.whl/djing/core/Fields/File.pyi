from _typeshed import Incomplete
from django.core.files.storage import Storage as Storage
from djing.core.Contracts.Deletable import Deletable as DeletableContract
from djing.core.Contracts.Downloadable import Downloadable as DownloadableContract
from djing.core.Contracts.Storable import Storable as StorableContract
from djing.core.Fields.AcceptsTypes import AcceptsTypes as AcceptsTypes
from djing.core.Fields.Deletable import Deletable as Deletable
from djing.core.Fields.Field import Field as Field
from djing.core.Fields.HasDownload import HasDownload as HasDownload
from djing.core.Fields.HasPreview import HasPreview as HasPreview
from djing.core.Fields.HasThumbnail import HasThumbnail as HasThumbnail
from djing.core.Fields.Storable import Storable as Storable
from djing.core.Http.Requests.DjingRequest import DjingRequest as DjingRequest
from typing import Self

class File(Field, Storable, Deletable, HasDownload, HasThumbnail, HasPreview, AcceptsTypes, DeletableContract, DownloadableContract, StorableContract):
    component: str
    def __init__(self, name, attribute: Incomplete | None = None, disk: Incomplete | None = None, storage_callback: Incomplete | None = None) -> None: ...
    def get_storage_disk(self) -> Storage: ...
    def store(self, storage_callback) -> Self: ...
    def store_as(self, store_as_callback) -> Self: ...
    def store_original_name(self, original_name_column) -> Self: ...
    def store_size(self, size_column) -> Self: ...
    def get_storage_callback(self) -> Storage: ...
    def resolve_default_value(self, request: DjingRequest): ...
    def fill_for_action(self, request: DjingRequest, model): ...
    def fill_attribute(self, request: DjingRequest, request_attribute, model, attribute): ...
    def json_serialize(self): ...
