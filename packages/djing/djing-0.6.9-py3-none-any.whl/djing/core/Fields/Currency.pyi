from _typeshed import Incomplete
from djing.core.Fields.Number import Number as Number
from djing.core.Http.Requests.DjingRequest import DjingRequest as DjingRequest
from typing import Self

class Currency(Number):
    component: str
    def __init__(self, name, attribute: Incomplete | None = None, resolve_callback: Incomplete | None = None) -> None: ...
    def get_step_value(self) -> float: ...
    def fill_value(self, request: DjingRequest, request_attribute, model, attribute): ...
    def format_money(self, value) -> str | None: ...
    def format_money_without_symbol(self, value) -> float: ...
    def currency(self, currency) -> Self: ...
    def locale(self, locale) -> Self: ...
    def symbol(self, currency_symbol) -> Self: ...
    def as_minor_units(self) -> Self: ...
    def resolve_currency_symbol(self): ...
    def json_serialize(self): ...
