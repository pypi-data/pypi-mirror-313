import abc
from Illuminate.Collections.helpers import collect as collect
from _typeshed import Incomplete
from datetime import datetime
from django.db.models import Model as Model
from djing.core.Http.Requests.DjingRequest import DjingRequest as DjingRequest
from djing.core.Metrics.Metric import Metric as Metric
from djing.core.Metrics.PartitionResult import PartitionResult as PartitionResult
from djing.core.Util import Util as Util
from typing import Any

class Partition(Metric, metaclass=abc.ABCMeta):
    component: str
    def count(self, request: DjingRequest, model: Model | Any, group_by_column: str, column: Incomplete | None = None): ...
    def average(self, request: DjingRequest, model: Model | Any, group_by_column: str, column: Incomplete | None = None): ...
    def sum(self, request: DjingRequest, model: Model | Any, group_by_column: str, column: Incomplete | None = None): ...
    def max(self, request: DjingRequest, model: Model | Any, group_by_column: str, column: Incomplete | None = None): ...
    def min(self, request: DjingRequest, model: Model | Any, group_by_column: str, column: Incomplete | None = None): ...
    def aggregate(self, request: DjingRequest, model: Model | Any, function_name, column: str | None = None, group_by_column: str | None = None): ...
    def results(self, queryset, function_name, column, group_by_column): ...
    def label(self, value: datetime | bool | int | float | str): ...
