from Illuminate.Collections.Collection import Collection as Collection
from _typeshed import Incomplete
from djing.core.Contracts.BehavesAsPanel import BehavesAsPanel as BehavesAsPanel
from djing.core.Contracts.Downloadable import Downloadable as Downloadable
from djing.core.Fields.FieldCollection import FieldCollection as FieldCollection
from djing.core.Http.Requests.DjingRequest import DjingRequest as DjingRequest
from djing.core.Http.Resources.Resource import Resource as Resource
from djing.core.Panel import Panel as Panel
from typing import Any

class ResolvesFields:
    def index_fields(self, request: DjingRequest) -> FieldCollection: ...
    def available_fields(self, request: DjingRequest) -> FieldCollection: ...
    def filterable_fields(self, request: DjingRequest) -> FieldCollection: ...
    def downloadable_fields(self, request: DjingRequest) -> FieldCollection: ...
    def available_fields_on_index_or_detail(self, request: DjingRequest) -> FieldCollection: ...
    def build_available_fields(self, request: DjingRequest, methods: list[str]): ...
    def fields_method(self, request: DjingRequest) -> str: ...
    def creation_fields_within_panels(self, request: DjingRequest): ...
    def available_panels_for_create(self, request: DjingRequest, fields: FieldCollection = None) -> list[Any]: ...
    def creation_fields(self, request: DjingRequest) -> FieldCollection: ...
    def update_fields_within_panels(self, request: DjingRequest, resource: Resource): ...
    def available_panels_for_update(self, request: DjingRequest, resource: Resource, fields: FieldCollection = None) -> list[Any]: ...
    def detail_fields_within_panels(self, request: DjingRequest, resource: Resource): ...
    def available_panels_for_detail(self, request: DjingRequest, resource: Resource, fields: FieldCollection) -> list[Any]: ...
    def update_fields(self, request: DjingRequest) -> FieldCollection: ...
    def detail_fields(self, request: DjingRequest) -> FieldCollection: ...
    def resolve_panels_from_fields(self, request: DjingRequest, fields: FieldCollection, label: str) -> FieldCollection: ...
    def panels_with_default_label(self, panels: Collection, fields: FieldCollection, label: str): ...
    def resolve_fields(self, request: DjingRequest, filter: Incomplete | None = None): ...
