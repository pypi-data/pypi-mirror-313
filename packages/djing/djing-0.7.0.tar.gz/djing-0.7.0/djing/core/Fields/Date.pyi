from _typeshed import Incomplete
from django.db.models import QuerySet as QuerySet
from djing.core.Contracts.FilterableField import FilterableField as FilterableField
from djing.core.Fields.Field import Field as Field
from djing.core.Fields.FieldFilterable import FieldFilterable as FieldFilterable
from djing.core.Fields.Filters.DateFilter import DateFilter as DateFilter
from djing.core.Http.Requests.DjingRequest import DjingRequest as DjingRequest
from typing import Self

class Date(Field, FieldFilterable, FilterableField):
    component: str
    def __init__(self, name, attribute: Incomplete | None = None, resolve_callback: Incomplete | None = None) -> None: ...
    def make_filter(self, request: DjingRequest): ...
    def min(self, value) -> Self: ...
    def max(self, value) -> Self: ...
    def step(self, step) -> Self: ...
    def resolve_default_value(self, request: DjingRequest): ...
    def serialize_for_filter(self): ...
    def json_serialize(self): ...
