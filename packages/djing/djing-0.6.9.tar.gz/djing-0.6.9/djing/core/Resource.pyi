from Illuminate.Contracts.Support.JsonSerializable import JsonSerializable
from _typeshed import Incomplete
from abc import ABC
from django.db.models import QuerySet as QuerySet, base
from djing.core.Authorizable import Authorizable as Authorizable
from djing.core.Fields.Field import Field as Field
from djing.core.Fields.FieldCollection import FieldCollection as FieldCollection
from djing.core.Fields.ID import ID as ID
from djing.core.FillsFields import FillsFields as FillsFields
from djing.core.Http.Requests.DjingRequest import DjingRequest as DjingRequest
from djing.core.Makeable import Makeable as Makeable
from djing.core.Menu.MenuItem import MenuItem as MenuItem
from djing.core.PerformsQueries import PerformsQueries as PerformsQueries
from djing.core.PerformsValidation import PerformsValidation as PerformsValidation
from djing.core.ResolvesActions import ResolvesActions as ResolvesActions
from djing.core.ResolvesCards import ResolvesCards as ResolvesCards
from djing.core.ResolvesFields import ResolvesFields as ResolvesFields
from djing.core.ResolvesFilters import ResolvesFilters as ResolvesFilters
from djing.core.Util import Util as Util
from typing import Self

class Resource(ABC, Authorizable, Makeable, PerformsQueries, ResolvesCards, ResolvesFilters, ResolvesFields, ResolvesActions, PerformsValidation, FillsFields, JsonSerializable):
    default_values: Incomplete
    model: str | type[base.Model] | None
    resource: base.Model | None
    debounce: float
    searchable: bool
    globally_searchable: bool
    group: str
    title: str
    search: Incomplete
    soft_deletes: Incomplete
    def __init__(self, resource: Incomplete | None = None, *args, **kwargs) -> None: ...
    @classmethod
    def get_model_class(cls) -> type[base.Model]: ...
    @classmethod
    def get_queryset(cls) -> QuerySet: ...
    def new_query(self): ...
    @classmethod
    def new_model(cls) -> base.Model: ...
    def get_model(self) -> base.Model: ...
    @classmethod
    def new_resource(cls) -> Resource: ...
    def get_class_from_string(module_name: str): ...
    @classmethod
    def uri_key(cls): ...
    @classmethod
    def label(cls): ...
    @classmethod
    def singular_label(cls): ...
    def get_key(self, resource: Incomplete | None = None): ...
    def get_title(self): ...
    @classmethod
    def is_searchable(cls): ...
    @classmethod
    def searchable_columns(cls): ...
    @classmethod
    def per_page_options(cls): ...
    def menu(self, request: DjingRequest): ...
    @classmethod
    def available_for_navigation(cls, request: DjingRequest): ...
    @classmethod
    def get_soft_deletes(cls) -> bool: ...
    def serialize_for_index(self, request: DjingRequest, fields: Incomplete | None = None): ...
    def serialize_for_detail(self, request: DjingRequest, resource: Self): ...
    def serialize_with_id(self, fields: FieldCollection): ...
    def json_serialize(self): ...
