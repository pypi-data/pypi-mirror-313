import abc
from _typeshed import Incomplete
from django.db.models import Model, QuerySet as QuerySet
from djing.core.Http.Requests.DjingRequest import DjingRequest as DjingRequest
from djing.core.Metrics.RangedMetric import RangedMetric as RangedMetric
from djing.core.Metrics.ValueResult import ValueResult as ValueResult
from djing.core.Util import Util as Util
from typing import Any, Self

class Value(RangedMetric, metaclass=abc.ABCMeta):
    component: str
    def icon(self, icon) -> Self: ...
    def count(self, request: DjingRequest, model: Model | Any, column: Incomplete | None = None, date_column: Incomplete | None = None): ...
    def average(self, request: DjingRequest, model: Model | Any, column: Incomplete | None = None, date_column: Incomplete | None = None): ...
    def sum(self, request: DjingRequest, model: Model | Any, column: Incomplete | None = None, date_column: Incomplete | None = None): ...
    def max(self, request: DjingRequest, model: Model | Any, column: Incomplete | None = None, date_column: Incomplete | None = None): ...
    def min(self, request: DjingRequest, model: Model | Any, column: Incomplete | None = None, date_column: Incomplete | None = None): ...
    def aggregate(self, request: DjingRequest, model: Model | Any, function_name, column: Incomplete | None = None, date_column: Incomplete | None = None): ...
    def results(self, queryset, function_name, column): ...
    def current_range(self, range, timezone): ...
    def previous_range(self, range, timezone): ...
    def json_serialize(self): ...
