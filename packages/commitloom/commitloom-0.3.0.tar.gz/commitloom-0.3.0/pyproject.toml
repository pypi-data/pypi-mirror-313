[tool.poetry]
name = "commitloom"
version = "0.3.0"
description = "Weave perfect git commits with AI-powered intelligence. An intelligent CLI tool that uses OpenAI to generate meaningful, structured commit messages."
authors = ["Petru Arakiss <petruarakiss@gmail.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/Arakiss/commitloom"
repository = "https://github.com/Arakiss/commitloom"
documentation = "https://github.com/Arakiss/commitloom#readme"
keywords = [
    "git",
    "commit",
    "ai",
    "openai",
    "cli",
    "git-tools",
    "commit-messages",
    "developer-tools",
    "automation",
    "artificial-intelligence",
    "gpt",
    "semantic-commits",
    "conventional-commits"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Utilities",
    "Typing :: Typed"
]
packages = [
    { include = "commitloom" }
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/Arakiss/commitloom/issues"
"Changelog" = "https://github.com/Arakiss/commitloom/blob/main/CHANGELOG.md"

[tool.poetry.dependencies]
python = "^3.11"
python-dotenv = "^1.0.1"
rich = "^13.9.4"
requests = "^2.32.3"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.4"
pytest-asyncio = "^0.24.0"
pytest-cov = "^6.0.0"
ruff = "^0.1.6"
mypy = "^1.7.1"
pre-commit = "^3.6.2"
types-requests = "^2.32.0"

[tool.poetry.scripts]
loom = "commitloom.cli.main:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "--cov=commitloom --cov-report=term-missing"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = ["commitloom"]
omit = ["tests/*", "**/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "pass",
]

[tool.ruff]
line-length = 100  # Slightly more permissive than 88
indent-width = 4
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W", "C90", "B", "UP"]
ignore = [
    "E402",  # Module level import not at top of file - needed for env loading
]

# Add per-file ignores
[tool.ruff.lint.per-file-ignores]
"commitloom/__main__.py" = ["E402"]  # Allow env loading before imports
"commitloom/cli/main.py" = ["C901"]  # Complex run method is necessary for functionality
"commitloom/core/git.py" = ["B904"]  # Exception chaining would break tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["commitloom"]
combine-as-imports = true
